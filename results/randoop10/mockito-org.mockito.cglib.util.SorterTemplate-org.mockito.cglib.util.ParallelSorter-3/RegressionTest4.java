import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test2001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2001");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator5.setUseCache(true);
        boolean boolean8 = generator5.getAttemptLoad();
        boolean boolean9 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator5.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator5.setStrategy(generatorStrategy16);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator18.getNamingPolicy();
        generator18.setUseCache(false);
        boolean boolean29 = generator18.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator18.getNamingPolicy();
        generator18.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator18.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy33);
        generator0.setNamingPolicy(namingPolicy33);
        boolean boolean36 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader41 = null;
        generator40.setClassLoader(classLoader41);
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = strComparator44.thenComparing(strComparator45);
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = strComparator47.thenComparing(strComparator48);
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = strComparator50.thenComparing(strComparator51);
        boolean boolean53 = strComparator48.equals((java.lang.Object) strComparator52);
        java.lang.Object[] objArray55 = new java.lang.Object[] { '4', strComparator45, strComparator48, 0.0d };
        generator40.setArrays(objArray55);
        generator37.setArrays(objArray55);
        generator0.setArrays(objArray55);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy59);
    }

    @Test
    public void test2002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2002");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader26 = null;
        generator25.setClassLoader(classLoader26);
        java.lang.ClassLoader classLoader28 = null;
        generator25.setClassLoader(classLoader28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator25.getNamingPolicy();
        generator24.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader33 = null;
        generator32.setClassLoader(classLoader33);
        java.lang.ClassLoader classLoader35 = null;
        generator32.setClassLoader(classLoader35);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator32.getNamingPolicy();
        generator24.setNamingPolicy(namingPolicy37);
        java.lang.ClassLoader classLoader39 = generator24.getClassLoader();
        generator0.setClassLoader(classLoader39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator0.getStrategy();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(generatorStrategy41);
    }

    @Test
    public void test2003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2003");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader21 = null;
        generator20.setClassLoader(classLoader21);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = strComparator27.thenComparing(strComparator28);
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = strComparator30.thenComparing(strComparator31);
        boolean boolean33 = strComparator28.equals((java.lang.Object) strComparator32);
        java.lang.Object[] objArray35 = new java.lang.Object[] { '4', strComparator25, strComparator28, 0.0d };
        generator20.setArrays(objArray35);
        java.lang.ClassLoader classLoader37 = null;
        generator20.setClassLoader(classLoader37);
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader40 = null;
        generator39.setClassLoader(classLoader40);
        java.lang.ClassLoader classLoader42 = null;
        generator39.setClassLoader(classLoader42);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        generator20.setNamingPolicy(namingPolicy44);
        boolean boolean46 = generator20.getUseCache();
        java.lang.ClassLoader classLoader47 = generator20.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator20.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator49.setUseCache(true);
        boolean boolean52 = generator49.getAttemptLoad();
        boolean boolean53 = generator49.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator49.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator55.setUseCache(true);
        boolean boolean58 = generator55.getAttemptLoad();
        boolean boolean59 = generator55.getUseCache();
        generator55.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator62.getStrategy();
        generator55.setStrategy(generatorStrategy63);
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator65.setUseCache(true);
        java.lang.ClassLoader classLoader68 = generator65.getClassLoader();
        generator55.setClassLoader(classLoader68);
        generator49.setClassLoader(classLoader68);
        java.lang.ClassLoader classLoader71 = generator49.getClassLoader();
        generator20.setClassLoader(classLoader71);
        java.lang.ClassLoader classLoader73 = generator20.getClassLoader();
        generator0.setClassLoader(classLoader73);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter76 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(namingPolicy75);
    }

    @Test
    public void test2004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2004");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader11 = null;
        generator10.setClassLoader(classLoader11);
        java.lang.ClassLoader classLoader13 = null;
        generator10.setClassLoader(classLoader13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator10.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy22);
        generator0.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.lang.ClassLoader classLoader30 = null;
        generator27.setClassLoader(classLoader30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator34.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator38.setUseCache(true);
        boolean boolean41 = generator38.getAttemptLoad();
        boolean boolean42 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator38.getStrategy();
        generator37.setStrategy(generatorStrategy43);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator45.setUseCache(true);
        boolean boolean48 = generator45.getAttemptLoad();
        boolean boolean49 = generator45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator45.getStrategy();
        generator37.setStrategy(generatorStrategy50);
        generator34.setStrategy(generatorStrategy50);
        generator26.setStrategy(generatorStrategy50);
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader55 = null;
        generator54.setClassLoader(classLoader55);
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader58 = null;
        generator57.setClassLoader(classLoader58);
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator63 = strComparator61.thenComparing(strComparator62);
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator66 = strComparator64.thenComparing(strComparator65);
        java.util.Comparator<java.lang.String> strComparator67 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator68 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator69 = strComparator67.thenComparing(strComparator68);
        boolean boolean70 = strComparator65.equals((java.lang.Object) strComparator69);
        java.lang.Object[] objArray72 = new java.lang.Object[] { '4', strComparator62, strComparator65, 0.0d };
        generator57.setArrays(objArray72);
        generator54.setArrays(objArray72);
        generator26.setArrays(objArray72);
        generator25.setArrays(objArray72);
        generator0.setArrays(objArray72);
        java.lang.Object[] objArray78 = null;
        generator0.setArrays(objArray78);
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator0.getNamingPolicy();
        boolean boolean81 = generator0.getUseCache();
        java.lang.ClassLoader classLoader82 = generator0.getClassLoader();
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter85 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(classLoader82);
    }

    @Test
    public void test2005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2005");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader5 = null;
        generator4.setClassLoader(classLoader5);
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator10 = strComparator8.thenComparing(strComparator9);
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator13 = strComparator11.thenComparing(strComparator12);
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = strComparator14.thenComparing(strComparator15);
        boolean boolean17 = strComparator12.equals((java.lang.Object) strComparator16);
        java.lang.Object[] objArray19 = new java.lang.Object[] { '4', strComparator9, strComparator12, 0.0d };
        generator4.setArrays(objArray19);
        java.lang.ClassLoader classLoader21 = null;
        generator4.setClassLoader(classLoader21);
        boolean boolean23 = generator4.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator24.setUseCache(true);
        boolean boolean27 = generator24.getAttemptLoad();
        boolean boolean28 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator24.getStrategy();
        generator4.setStrategy(generatorStrategy29);
        generator0.setStrategy(generatorStrategy29);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator32.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator40.setUseCache(true);
        boolean boolean43 = generator40.getAttemptLoad();
        boolean boolean44 = generator40.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator40.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator46.setUseCache(true);
        boolean boolean49 = generator46.getAttemptLoad();
        boolean boolean50 = generator46.getUseCache();
        generator46.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator53.getStrategy();
        generator46.setStrategy(generatorStrategy54);
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator56.setUseCache(true);
        java.lang.ClassLoader classLoader59 = generator56.getClassLoader();
        generator46.setClassLoader(classLoader59);
        generator40.setClassLoader(classLoader59);
        java.lang.ClassLoader classLoader62 = generator40.getClassLoader();
        generator32.setClassLoader(classLoader62);
        org.mockito.cglib.util.ParallelSorter.Generator generator64 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader66 = null;
        generator65.setClassLoader(classLoader66);
        java.lang.ClassLoader classLoader68 = null;
        generator65.setClassLoader(classLoader68);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator65.getNamingPolicy();
        generator64.setNamingPolicy(namingPolicy70);
        org.mockito.cglib.util.ParallelSorter.Generator generator72 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator72.setUseCache(true);
        boolean boolean75 = generator72.getAttemptLoad();
        boolean boolean76 = generator72.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator72.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator78 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator78.setUseCache(true);
        boolean boolean81 = generator78.getAttemptLoad();
        boolean boolean82 = generator78.getUseCache();
        generator78.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator85 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = generator85.getStrategy();
        generator78.setStrategy(generatorStrategy86);
        org.mockito.cglib.util.ParallelSorter.Generator generator88 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator88.setUseCache(true);
        java.lang.ClassLoader classLoader91 = generator88.getClassLoader();
        generator78.setClassLoader(classLoader91);
        generator72.setClassLoader(classLoader91);
        java.lang.ClassLoader classLoader94 = generator72.getClassLoader();
        generator64.setClassLoader(classLoader94);
        generator32.setClassLoader(classLoader94);
        generator0.setClassLoader(classLoader94);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy98 = generator0.getStrategy();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(generatorStrategy86);
        org.junit.Assert.assertNotNull(classLoader91);
        org.junit.Assert.assertNotNull(classLoader94);
        org.junit.Assert.assertNotNull(generatorStrategy98);
    }

    @Test
    public void test2006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2006");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.reverseOrder();
        int int3 = strComparator0.compare("", "");
        java.util.Comparator<java.lang.String> strComparator4 = strComparator0.reversed();
        java.util.Comparator<java.lang.String> strComparator5 = strComparator0.reversed();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator5.reversed();
        int int9 = strComparator6.compare("", "hi!");
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
    }

    @Test
    public void test2007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2007");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator5.setUseCache(true);
        boolean boolean8 = generator5.getAttemptLoad();
        boolean boolean9 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator5.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator5.setStrategy(generatorStrategy16);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator18.getNamingPolicy();
        generator18.setUseCache(false);
        boolean boolean29 = generator18.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator18.getNamingPolicy();
        generator18.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator18.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy33);
        generator0.setNamingPolicy(namingPolicy33);
        boolean boolean36 = generator0.getAttemptLoad();
        boolean boolean37 = generator0.getUseCache();
        boolean boolean38 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test2008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2008");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator0.setNamingPolicy(namingPolicy29);
        java.lang.ClassLoader classLoader31 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor32 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(classLoader31);
    }

    @Test
    public void test2009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2009");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.reverseOrder();
        int int3 = strComparator0.compare("hi!", "");
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.nullsLast(strComparator0);
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.nullsLast(strComparator4);
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
    }

    @Test
    public void test2010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2010");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator27.setUseCache(true);
        boolean boolean30 = generator27.getAttemptLoad();
        boolean boolean31 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator27.getStrategy();
        generator26.setStrategy(generatorStrategy32);
        generator0.setStrategy(generatorStrategy32);
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader37 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator38.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator42.setUseCache(true);
        boolean boolean45 = generator42.getAttemptLoad();
        boolean boolean46 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator42.getStrategy();
        generator41.setStrategy(generatorStrategy47);
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator49.setUseCache(true);
        boolean boolean52 = generator49.getAttemptLoad();
        boolean boolean53 = generator49.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator49.getStrategy();
        generator41.setStrategy(generatorStrategy54);
        generator38.setStrategy(generatorStrategy54);
        boolean boolean57 = generator38.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator59.setUseCache(true);
        boolean boolean62 = generator59.getAttemptLoad();
        boolean boolean63 = generator59.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator59.getStrategy();
        generator58.setStrategy(generatorStrategy64);
        org.mockito.cglib.util.ParallelSorter.Generator generator66 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator66.setUseCache(true);
        boolean boolean69 = generator66.getAttemptLoad();
        boolean boolean70 = generator66.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator66.getStrategy();
        generator58.setStrategy(generatorStrategy71);
        generator58.setAttemptLoad(false);
        boolean boolean75 = generator58.getUseCache();
        java.lang.ClassLoader classLoader76 = generator58.getClassLoader();
        generator38.setClassLoader(classLoader76);
        generator0.setClassLoader(classLoader76);
        boolean boolean79 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator0.getNamingPolicy();
        boolean boolean81 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test2011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2011");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor6 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2012");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        java.util.Comparator<java.lang.String> strComparator6 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = strComparator6.thenComparing(strComparator7);
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator9.setUseCache(true);
        boolean boolean12 = generator9.getAttemptLoad();
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        generator9.setUseCache(true);
        boolean boolean18 = strComparator6.equals((java.lang.Object) generator9);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        java.lang.ClassLoader classLoader22 = generator19.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator23.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator23.getStrategy();
        generator19.setStrategy(generatorStrategy26);
        generator9.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy26);
    }

    @Test
    public void test2013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2013");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator5.setStrategy(generatorStrategy11);
        generator0.setStrategy(generatorStrategy11);
        boolean boolean14 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
    }

    @Test
    public void test2014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2014");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator4.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator3.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        boolean boolean19 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator20.setStrategy(generatorStrategy26);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator28.setUseCache(true);
        boolean boolean31 = generator28.getAttemptLoad();
        boolean boolean32 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator28.getStrategy();
        generator20.setStrategy(generatorStrategy33);
        generator20.setAttemptLoad(false);
        boolean boolean37 = generator20.getUseCache();
        java.lang.ClassLoader classLoader38 = generator20.getClassLoader();
        generator0.setClassLoader(classLoader38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader42 = null;
        generator41.setClassLoader(classLoader42);
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = strComparator45.thenComparing(strComparator46);
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = strComparator48.thenComparing(strComparator49);
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = strComparator51.thenComparing(strComparator52);
        boolean boolean54 = strComparator49.equals((java.lang.Object) strComparator53);
        java.lang.Object[] objArray56 = new java.lang.Object[] { '4', strComparator46, strComparator49, 0.0d };
        generator41.setArrays(objArray56);
        java.lang.ClassLoader classLoader58 = null;
        generator41.setClassLoader(classLoader58);
        boolean boolean60 = generator41.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator61.setUseCache(true);
        boolean boolean64 = generator61.getAttemptLoad();
        boolean boolean65 = generator61.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator61.getStrategy();
        generator41.setStrategy(generatorStrategy66);
        generator0.setStrategy(generatorStrategy66);
        org.mockito.asm.ClassVisitor classVisitor69 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(generatorStrategy66);
    }

    @Test
    public void test2015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2015");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = generator0.getClassLoader();
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass10 = namingPolicy9.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2016");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean6 = generator5.getAttemptLoad();
        java.lang.ClassLoader classLoader7 = generator5.getClassLoader();
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader11 = null;
        generator10.setClassLoader(classLoader11);
        java.lang.ClassLoader classLoader13 = null;
        generator10.setClassLoader(classLoader13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator10.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator17.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator20.setStrategy(generatorStrategy26);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator28.setUseCache(true);
        boolean boolean31 = generator28.getAttemptLoad();
        boolean boolean32 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator28.getStrategy();
        generator20.setStrategy(generatorStrategy33);
        generator17.setStrategy(generatorStrategy33);
        generator9.setStrategy(generatorStrategy33);
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader41 = null;
        generator40.setClassLoader(classLoader41);
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = strComparator44.thenComparing(strComparator45);
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = strComparator47.thenComparing(strComparator48);
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = strComparator50.thenComparing(strComparator51);
        boolean boolean53 = strComparator48.equals((java.lang.Object) strComparator52);
        java.lang.Object[] objArray55 = new java.lang.Object[] { '4', strComparator45, strComparator48, 0.0d };
        generator40.setArrays(objArray55);
        generator37.setArrays(objArray55);
        generator9.setArrays(objArray55);
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader60 = null;
        generator59.setClassLoader(classLoader60);
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = strComparator63.thenComparing(strComparator64);
        java.util.Comparator<java.lang.String> strComparator66 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator67 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator68 = strComparator66.thenComparing(strComparator67);
        java.util.Comparator<java.lang.String> strComparator69 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator70 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator71 = strComparator69.thenComparing(strComparator70);
        boolean boolean72 = strComparator67.equals((java.lang.Object) strComparator71);
        java.lang.Object[] objArray74 = new java.lang.Object[] { '4', strComparator64, strComparator67, 0.0d };
        generator59.setArrays(objArray74);
        org.mockito.cglib.util.ParallelSorter.Generator generator76 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader77 = null;
        generator76.setClassLoader(classLoader77);
        java.lang.ClassLoader classLoader79 = null;
        generator76.setClassLoader(classLoader79);
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator76.getNamingPolicy();
        generator59.setNamingPolicy(namingPolicy81);
        java.lang.ClassLoader classLoader83 = generator59.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator59.getStrategy();
        generator9.setStrategy(generatorStrategy84);
        java.lang.ClassLoader classLoader86 = generator9.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator9.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy87);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter89 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertNotNull(classLoader86);
        org.junit.Assert.assertNotNull(namingPolicy87);
    }

    @Test
    public void test2017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2017");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator17.setUseCache(true);
        boolean boolean20 = generator17.getAttemptLoad();
        boolean boolean21 = generator17.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator17.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator17.getNamingPolicy();
        java.lang.ClassLoader classLoader24 = generator17.getClassLoader();
        generator0.setClassLoader(classLoader24);
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        boolean boolean27 = generator0.getUseCache();
        boolean boolean28 = generator0.getUseCache();
        java.lang.ClassLoader classLoader29 = generator0.getClassLoader();
        boolean boolean30 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor31 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test2018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2018");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        boolean boolean11 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass16 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test2019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2019");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator30.setUseCache(true);
        boolean boolean33 = generator30.getAttemptLoad();
        boolean boolean34 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator30.getStrategy();
        generator29.setStrategy(generatorStrategy35);
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator37.setUseCache(true);
        boolean boolean40 = generator37.getAttemptLoad();
        boolean boolean41 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator37.getStrategy();
        generator29.setStrategy(generatorStrategy42);
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader45 = null;
        generator44.setClassLoader(classLoader45);
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = strComparator48.thenComparing(strComparator49);
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = strComparator51.thenComparing(strComparator52);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        boolean boolean57 = strComparator52.equals((java.lang.Object) strComparator56);
        java.lang.Object[] objArray59 = new java.lang.Object[] { '4', strComparator49, strComparator52, 0.0d };
        generator44.setArrays(objArray59);
        generator29.setArrays(objArray59);
        generator0.setArrays(objArray59);
        java.lang.Class<?> wildcardClass63 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test2020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2020");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        generator0.setAttemptLoad(false);
        boolean boolean17 = generator0.getUseCache();
        java.lang.ClassLoader classLoader18 = generator0.getClassLoader();
        boolean boolean19 = generator0.getUseCache();
        boolean boolean20 = generator0.getUseCache();
        java.lang.ClassLoader classLoader21 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
    }

    @Test
    public void test2021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2021");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.lang.ClassLoader classLoader17 = null;
        generator14.setClassLoader(classLoader17);
        generator14.setAttemptLoad(true);
        boolean boolean21 = generator14.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator14.getNamingPolicy();
        java.lang.ClassLoader classLoader23 = generator14.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader25 = null;
        generator24.setClassLoader(classLoader25);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = strComparator31.thenComparing(strComparator32);
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = strComparator34.thenComparing(strComparator35);
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = strComparator37.thenComparing(strComparator38);
        boolean boolean40 = strComparator35.equals((java.lang.Object) strComparator39);
        java.lang.Object[] objArray42 = new java.lang.Object[] { '4', strComparator32, strComparator35, 0.0d };
        generator27.setArrays(objArray42);
        generator24.setArrays(objArray42);
        generator14.setArrays(objArray42);
        generator0.setArrays(objArray42);
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader49 = null;
        generator48.setClassLoader(classLoader49);
        java.lang.ClassLoader classLoader51 = null;
        generator48.setClassLoader(classLoader51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator48.getNamingPolicy();
        generator47.setNamingPolicy(namingPolicy53);
        boolean boolean55 = generator47.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader57 = null;
        generator56.setClassLoader(classLoader57);
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = strComparator60.thenComparing(strComparator61);
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = strComparator63.thenComparing(strComparator64);
        java.util.Comparator<java.lang.String> strComparator66 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator67 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator68 = strComparator66.thenComparing(strComparator67);
        boolean boolean69 = strComparator64.equals((java.lang.Object) strComparator68);
        java.lang.Object[] objArray71 = new java.lang.Object[] { '4', strComparator61, strComparator64, 0.0d };
        generator56.setArrays(objArray71);
        generator47.setArrays(objArray71);
        generator0.setArrays(objArray71);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter75 = org.mockito.cglib.util.ParallelSorter.create(objArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test2022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2022");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        java.lang.ClassLoader classLoader5 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean8 = generator0.getUseCache();
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader11 = generator0.getClassLoader();
        java.lang.Class<?> wildcardClass12 = classLoader11.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test2023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2023");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        boolean boolean11 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        boolean boolean19 = generator16.getAttemptLoad();
        boolean boolean20 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator16.getStrategy();
        generator15.setStrategy(generatorStrategy21);
        boolean boolean23 = generator15.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator15.getNamingPolicy();
        java.lang.ClassLoader classLoader25 = generator15.getClassLoader();
        java.lang.ClassLoader classLoader26 = generator15.getClassLoader();
        generator0.setClassLoader(classLoader26);
        java.lang.ClassLoader classLoader28 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader28);
    }

    @Test
    public void test2024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2024");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        generator6.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator13.getStrategy();
        generator6.setStrategy(generatorStrategy14);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        java.lang.ClassLoader classLoader19 = generator16.getClassLoader();
        generator6.setClassLoader(classLoader19);
        generator0.setClassLoader(classLoader19);
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader24 = null;
        generator23.setClassLoader(classLoader24);
        java.lang.ClassLoader classLoader26 = null;
        generator23.setClassLoader(classLoader26);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator23.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy28);
        boolean boolean30 = generator22.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator22.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator32.setUseCache(true);
        boolean boolean35 = generator32.getAttemptLoad();
        boolean boolean36 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator32.getStrategy();
        generator22.setStrategy(generatorStrategy37);
        generator0.setStrategy(generatorStrategy37);
        java.lang.ClassLoader classLoader40 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator42.setUseCache(true);
        boolean boolean45 = generator42.getAttemptLoad();
        boolean boolean46 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator42.getStrategy();
        generator41.setStrategy(generatorStrategy47);
        boolean boolean49 = generator41.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator41.getStrategy();
        java.lang.ClassLoader classLoader51 = generator41.getClassLoader();
        java.lang.ClassLoader classLoader52 = generator41.getClassLoader();
        generator0.setClassLoader(classLoader52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(generatorStrategy54);
    }

    @Test
    public void test2025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2025");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader22 = null;
        generator21.setClassLoader(classLoader22);
        boolean boolean24 = generator21.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator21.getStrategy();
        java.lang.ClassLoader classLoader26 = generator21.getClassLoader();
        boolean boolean27 = generator21.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader31 = null;
        generator30.setClassLoader(classLoader31);
        java.lang.ClassLoader classLoader33 = null;
        generator30.setClassLoader(classLoader33);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator30.getNamingPolicy();
        generator29.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator37.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        generator40.setStrategy(generatorStrategy46);
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator48.setUseCache(true);
        boolean boolean51 = generator48.getAttemptLoad();
        boolean boolean52 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator48.getStrategy();
        generator40.setStrategy(generatorStrategy53);
        generator37.setStrategy(generatorStrategy53);
        generator29.setStrategy(generatorStrategy53);
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader58 = null;
        generator57.setClassLoader(classLoader58);
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader61 = null;
        generator60.setClassLoader(classLoader61);
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator66 = strComparator64.thenComparing(strComparator65);
        java.util.Comparator<java.lang.String> strComparator67 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator68 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator69 = strComparator67.thenComparing(strComparator68);
        java.util.Comparator<java.lang.String> strComparator70 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator71 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator72 = strComparator70.thenComparing(strComparator71);
        boolean boolean73 = strComparator68.equals((java.lang.Object) strComparator72);
        java.lang.Object[] objArray75 = new java.lang.Object[] { '4', strComparator65, strComparator68, 0.0d };
        generator60.setArrays(objArray75);
        generator57.setArrays(objArray75);
        generator29.setArrays(objArray75);
        generator28.setArrays(objArray75);
        generator21.setArrays(objArray75);
        generator0.setArrays(objArray75);
        boolean boolean82 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = generator0.getNamingPolicy();
        boolean boolean84 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(namingPolicy83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test2026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2026");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        generator0.setStrategy(generatorStrategy18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        java.lang.ClassLoader classLoader21 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader24 = null;
        generator23.setClassLoader(classLoader24);
        java.lang.ClassLoader classLoader26 = null;
        generator23.setClassLoader(classLoader26);
        generator23.setAttemptLoad(true);
        boolean boolean30 = generator23.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator23.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator23.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator34.setUseCache(true);
        boolean boolean37 = generator34.getAttemptLoad();
        boolean boolean38 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator34.getStrategy();
        generator33.setStrategy(generatorStrategy39);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        generator33.setStrategy(generatorStrategy46);
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader49 = null;
        generator48.setClassLoader(classLoader49);
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = strComparator52.thenComparing(strComparator53);
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = strComparator55.thenComparing(strComparator56);
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = strComparator58.thenComparing(strComparator59);
        boolean boolean61 = strComparator56.equals((java.lang.Object) strComparator60);
        java.lang.Object[] objArray63 = new java.lang.Object[] { '4', strComparator53, strComparator56, 0.0d };
        generator48.setArrays(objArray63);
        generator33.setArrays(objArray63);
        generator23.setArrays(objArray63);
        generator0.setArrays(objArray63);
        java.lang.Class<?> wildcardClass68 = generator0.getClass();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test2027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2027");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator7.setUseCache(true);
        boolean boolean10 = generator7.getAttemptLoad();
        boolean boolean11 = generator7.getUseCache();
        generator7.setAttemptLoad(true);
        generator7.setUseCache(true);
        generator7.setUseCache(false);
        boolean boolean18 = generator7.getUseCache();
        java.lang.ClassLoader classLoader19 = generator7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator7.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator22.getStrategy();
        generator21.setStrategy(generatorStrategy27);
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator29.getStrategy();
        generator21.setStrategy(generatorStrategy34);
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator36.setUseCache(true);
        boolean boolean39 = generator36.getAttemptLoad();
        boolean boolean40 = generator36.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator36.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator42.setUseCache(true);
        boolean boolean45 = generator42.getAttemptLoad();
        boolean boolean46 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator42.getStrategy();
        generator36.setStrategy(generatorStrategy47);
        generator21.setStrategy(generatorStrategy47);
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator51.setUseCache(true);
        boolean boolean54 = generator51.getAttemptLoad();
        boolean boolean55 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator51.getStrategy();
        generator50.setStrategy(generatorStrategy56);
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator58.setUseCache(true);
        boolean boolean61 = generator58.getAttemptLoad();
        boolean boolean62 = generator58.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator58.getStrategy();
        generator50.setStrategy(generatorStrategy63);
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader66 = null;
        generator65.setClassLoader(classLoader66);
        java.util.Comparator<java.lang.String> strComparator69 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator70 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator71 = strComparator69.thenComparing(strComparator70);
        java.util.Comparator<java.lang.String> strComparator72 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator73 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator74 = strComparator72.thenComparing(strComparator73);
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = strComparator75.thenComparing(strComparator76);
        boolean boolean78 = strComparator73.equals((java.lang.Object) strComparator77);
        java.lang.Object[] objArray80 = new java.lang.Object[] { '4', strComparator70, strComparator73, 0.0d };
        generator65.setArrays(objArray80);
        generator50.setArrays(objArray80);
        generator21.setArrays(objArray80);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator21.getStrategy();
        generator7.setStrategy(generatorStrategy84);
        generator0.setStrategy(generatorStrategy84);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter87 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy84);
    }

    @Test
    public void test2028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2028");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy22);
        java.lang.ClassLoader classLoader24 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator26.getStrategy();
        java.lang.ClassLoader classLoader28 = generator26.getClassLoader();
        generator26.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        boolean boolean34 = generator31.getAttemptLoad();
        boolean boolean35 = generator31.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator36.setUseCache(true);
        boolean boolean39 = generator36.getAttemptLoad();
        boolean boolean40 = generator36.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator36.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator36.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator36.getStrategy();
        generator31.setStrategy(generatorStrategy43);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator45.setUseCache(true);
        boolean boolean48 = generator45.getAttemptLoad();
        boolean boolean49 = generator45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator45.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator51.setUseCache(true);
        boolean boolean54 = generator51.getAttemptLoad();
        boolean boolean55 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator51.getStrategy();
        generator45.setStrategy(generatorStrategy56);
        java.lang.ClassLoader classLoader58 = generator45.getClassLoader();
        generator45.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator61.setUseCache(true);
        boolean boolean64 = generator61.getAttemptLoad();
        boolean boolean65 = generator61.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator61.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator67.setUseCache(true);
        boolean boolean70 = generator67.getAttemptLoad();
        boolean boolean71 = generator67.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator67.getStrategy();
        generator61.setStrategy(generatorStrategy72);
        java.lang.ClassLoader classLoader74 = generator61.getClassLoader();
        generator45.setClassLoader(classLoader74);
        generator31.setClassLoader(classLoader74);
        generator26.setClassLoader(classLoader74);
        generator0.setClassLoader(classLoader74);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator0.getNamingPolicy();
        boolean boolean82 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test2029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2029");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator4.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator3.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass22 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test2030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2030");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy22);
        java.lang.ClassLoader classLoader24 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator0.getStrategy();
        boolean boolean26 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test2031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2031");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        boolean boolean19 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        generator20.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader27 = null;
        generator26.setClassLoader(classLoader27);
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = strComparator30.thenComparing(strComparator31);
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = strComparator33.thenComparing(strComparator34);
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = strComparator36.thenComparing(strComparator37);
        boolean boolean39 = strComparator34.equals((java.lang.Object) strComparator38);
        java.lang.Object[] objArray41 = new java.lang.Object[] { '4', strComparator31, strComparator34, 0.0d };
        generator26.setArrays(objArray41);
        java.lang.ClassLoader classLoader43 = null;
        generator26.setClassLoader(classLoader43);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader46 = null;
        generator45.setClassLoader(classLoader46);
        java.lang.ClassLoader classLoader48 = null;
        generator45.setClassLoader(classLoader48);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator45.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy50);
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator53.setUseCache(true);
        boolean boolean56 = generator53.getAttemptLoad();
        boolean boolean57 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator53.getStrategy();
        generator52.setStrategy(generatorStrategy58);
        generator26.setStrategy(generatorStrategy58);
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader63 = null;
        generator62.setClassLoader(classLoader63);
        java.lang.ClassLoader classLoader65 = null;
        generator62.setClassLoader(classLoader65);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator62.getNamingPolicy();
        generator61.setNamingPolicy(namingPolicy67);
        generator26.setNamingPolicy(namingPolicy67);
        generator20.setNamingPolicy(namingPolicy67);
        generator0.setNamingPolicy(namingPolicy67);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader74 = generator0.getClassLoader();
        boolean boolean75 = generator0.getUseCache();
        java.lang.Class<?> wildcardClass76 = generator0.getClass();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test2032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2032");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        boolean boolean19 = generator0.getAttemptLoad();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = strComparator20.thenComparing(strComparator21);
        java.util.Comparator<java.lang.String> strComparator23 = strComparator20.reversed();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator23.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader27 = null;
        generator26.setClassLoader(classLoader27);
        java.lang.ClassLoader classLoader29 = null;
        generator26.setClassLoader(classLoader29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator26.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy31);
        boolean boolean33 = strComparator23.equals((java.lang.Object) generator25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator25.getStrategy();
        generator0.setStrategy(generatorStrategy34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = strComparator41.thenComparing(strComparator42);
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = strComparator44.thenComparing(strComparator45);
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = strComparator47.thenComparing(strComparator48);
        boolean boolean50 = strComparator45.equals((java.lang.Object) strComparator49);
        java.lang.Object[] objArray52 = new java.lang.Object[] { '4', strComparator42, strComparator45, 0.0d };
        generator37.setArrays(objArray52);
        java.lang.ClassLoader classLoader54 = null;
        generator37.setClassLoader(classLoader54);
        boolean boolean56 = generator37.getAttemptLoad();
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = strComparator57.thenComparing(strComparator58);
        java.util.Comparator<java.lang.String> strComparator60 = strComparator57.reversed();
        java.util.Comparator<java.lang.String> strComparator61 = strComparator60.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader64 = null;
        generator63.setClassLoader(classLoader64);
        java.lang.ClassLoader classLoader66 = null;
        generator63.setClassLoader(classLoader66);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator63.getNamingPolicy();
        generator62.setNamingPolicy(namingPolicy68);
        boolean boolean70 = strComparator60.equals((java.lang.Object) generator62);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator62.getStrategy();
        generator37.setStrategy(generatorStrategy71);
        generator0.setStrategy(generatorStrategy71);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader76 = null;
        generator0.setClassLoader(classLoader76);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(generatorStrategy71);
    }

    @Test
    public void test2033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2033");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator2 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean3 = generator2.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator2.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader7 = null;
        generator6.setClassLoader(classLoader7);
        java.lang.ClassLoader classLoader9 = null;
        generator6.setClassLoader(classLoader9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator6.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader14 = null;
        generator13.setClassLoader(classLoader14);
        java.lang.ClassLoader classLoader16 = null;
        generator13.setClassLoader(classLoader16);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator13.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        java.lang.ClassLoader classLoader23 = generator20.getClassLoader();
        generator5.setClassLoader(classLoader23);
        generator2.setClassLoader(classLoader23);
        generator2.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator29.getStrategy();
        generator28.setStrategy(generatorStrategy34);
        boolean boolean36 = generator28.getAttemptLoad();
        generator28.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader41 = null;
        generator40.setClassLoader(classLoader41);
        java.lang.ClassLoader classLoader43 = null;
        generator40.setClassLoader(classLoader43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator40.getNamingPolicy();
        generator39.setNamingPolicy(namingPolicy45);
        boolean boolean47 = generator39.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader49 = null;
        generator48.setClassLoader(classLoader49);
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = strComparator52.thenComparing(strComparator53);
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = strComparator55.thenComparing(strComparator56);
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = strComparator58.thenComparing(strComparator59);
        boolean boolean61 = strComparator56.equals((java.lang.Object) strComparator60);
        java.lang.Object[] objArray63 = new java.lang.Object[] { '4', strComparator53, strComparator56, 0.0d };
        generator48.setArrays(objArray63);
        generator39.setArrays(objArray63);
        boolean boolean66 = generator39.getAttemptLoad();
        java.lang.Object[] objArray67 = new java.lang.Object[] { generator39 };
        generator28.setArrays(objArray67);
        generator2.setArrays(objArray67);
        generator0.setArrays(objArray67);
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter72 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.util.ParallelSorter$Generator is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertNotNull(namingPolicy71);
    }

    @Test
    public void test2034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2034");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        boolean boolean19 = generator16.getAttemptLoad();
        boolean boolean20 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator16.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator22.getStrategy();
        generator16.setStrategy(generatorStrategy27);
        java.lang.ClassLoader classLoader29 = generator16.getClassLoader();
        generator0.setClassLoader(classLoader29);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator33.getStrategy();
        java.lang.ClassLoader classLoader35 = generator33.getClassLoader();
        generator33.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator40.setUseCache(true);
        boolean boolean43 = generator40.getAttemptLoad();
        boolean boolean44 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator40.getStrategy();
        generator39.setStrategy(generatorStrategy45);
        generator33.setStrategy(generatorStrategy45);
        generator33.setAttemptLoad(true);
        boolean boolean50 = generator33.getAttemptLoad();
        boolean boolean51 = generator33.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator52.setUseCache(true);
        boolean boolean55 = generator52.getAttemptLoad();
        java.lang.ClassLoader classLoader56 = null;
        generator52.setClassLoader(classLoader56);
        generator52.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator52.getNamingPolicy();
        generator52.setUseCache(false);
        boolean boolean63 = generator52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator52.getStrategy();
        generator33.setStrategy(generatorStrategy64);
        generator0.setStrategy(generatorStrategy64);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(generatorStrategy64);
    }

    @Test
    public void test2035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2035");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader8 = generator0.getClassLoader();
        boolean boolean9 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2036");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator0.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        java.lang.ClassLoader classLoader15 = null;
        generator11.setClassLoader(classLoader15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        java.lang.ClassLoader classLoader21 = null;
        generator18.setClassLoader(classLoader21);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator18.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy23);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader26 = null;
        generator25.setClassLoader(classLoader26);
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = strComparator29.thenComparing(strComparator30);
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = strComparator32.thenComparing(strComparator33);
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = strComparator35.thenComparing(strComparator36);
        boolean boolean38 = strComparator33.equals((java.lang.Object) strComparator37);
        java.lang.Object[] objArray40 = new java.lang.Object[] { '4', strComparator30, strComparator33, 0.0d };
        generator25.setArrays(objArray40);
        java.lang.ClassLoader classLoader42 = null;
        generator25.setClassLoader(classLoader42);
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader45 = null;
        generator44.setClassLoader(classLoader45);
        java.lang.ClassLoader classLoader47 = null;
        generator44.setClassLoader(classLoader47);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator44.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy49);
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator52.setUseCache(true);
        boolean boolean55 = generator52.getAttemptLoad();
        boolean boolean56 = generator52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator52.getStrategy();
        generator51.setStrategy(generatorStrategy57);
        generator25.setStrategy(generatorStrategy57);
        generator17.setStrategy(generatorStrategy57);
        generator11.setStrategy(generatorStrategy57);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator11.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator63.setUseCache(true);
        boolean boolean66 = generator63.getAttemptLoad();
        boolean boolean67 = generator63.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator63.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy68);
        generator11.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator72 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader73 = null;
        generator72.setClassLoader(classLoader73);
        org.mockito.cglib.util.ParallelSorter.Generator generator75 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader76 = null;
        generator75.setClassLoader(classLoader76);
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator81 = strComparator79.thenComparing(strComparator80);
        java.util.Comparator<java.lang.String> strComparator82 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator83 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator84 = strComparator82.thenComparing(strComparator83);
        java.util.Comparator<java.lang.String> strComparator85 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator86 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator87 = strComparator85.thenComparing(strComparator86);
        boolean boolean88 = strComparator83.equals((java.lang.Object) strComparator87);
        java.lang.Object[] objArray90 = new java.lang.Object[] { '4', strComparator80, strComparator83, 0.0d };
        generator75.setArrays(objArray90);
        generator72.setArrays(objArray90);
        generator11.setArrays(objArray90);
        generator0.setArrays(objArray90);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter95 = org.mockito.cglib.util.ParallelSorter.create(objArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertNotNull(strComparator84);
        org.junit.Assert.assertNotNull(strComparator85);
        org.junit.Assert.assertNotNull(strComparator86);
        org.junit.Assert.assertNotNull(strComparator87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test2037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2037");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader5 = null;
        generator4.setClassLoader(classLoader5);
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator10 = strComparator8.thenComparing(strComparator9);
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator13 = strComparator11.thenComparing(strComparator12);
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = strComparator14.thenComparing(strComparator15);
        boolean boolean17 = strComparator12.equals((java.lang.Object) strComparator16);
        java.lang.Object[] objArray19 = new java.lang.Object[] { '4', strComparator9, strComparator12, 0.0d };
        generator4.setArrays(objArray19);
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader22 = null;
        generator21.setClassLoader(classLoader22);
        java.lang.ClassLoader classLoader24 = null;
        generator21.setClassLoader(classLoader24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator21.getNamingPolicy();
        generator4.setNamingPolicy(namingPolicy26);
        generator0.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor32 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(namingPolicy29);
    }

    @Test
    public void test2038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2038");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        generator0.setAttemptLoad(false);
        boolean boolean17 = generator0.getUseCache();
        java.lang.ClassLoader classLoader18 = generator0.getClassLoader();
        boolean boolean19 = generator0.getUseCache();
        boolean boolean20 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator0.setStrategy(generatorStrategy21);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter23 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test2039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2039");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader6 = null;
        generator5.setClassLoader(classLoader6);
        java.lang.ClassLoader classLoader8 = null;
        generator5.setClassLoader(classLoader8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator5.getNamingPolicy();
        generator4.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader13 = null;
        generator12.setClassLoader(classLoader13);
        java.lang.ClassLoader classLoader15 = null;
        generator12.setClassLoader(classLoader15);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator4.setNamingPolicy(namingPolicy17);
        generator4.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(classLoader26);
    }

    @Test
    public void test2040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2040");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.ClassLoader classLoader11 = generator9.getClassLoader();
        generator9.setUseCache(false);
        generator9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator9.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator17.getStrategy();
        java.lang.ClassLoader classLoader19 = generator17.getClassLoader();
        generator17.setUseCache(false);
        boolean boolean22 = generator17.getUseCache();
        java.lang.ClassLoader classLoader23 = generator17.getClassLoader();
        generator9.setClassLoader(classLoader23);
        generator0.setClassLoader(classLoader23);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator26.setUseCache(true);
        java.lang.ClassLoader classLoader29 = generator26.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator30.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator30.getStrategy();
        generator26.setStrategy(generatorStrategy33);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator26.getNamingPolicy();
        generator26.setUseCache(true);
        java.lang.ClassLoader classLoader38 = generator26.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader42 = null;
        generator41.setClassLoader(classLoader42);
        java.lang.ClassLoader classLoader44 = null;
        generator41.setClassLoader(classLoader44);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator41.getNamingPolicy();
        generator40.setNamingPolicy(namingPolicy46);
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator48.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator52.setUseCache(true);
        boolean boolean55 = generator52.getAttemptLoad();
        boolean boolean56 = generator52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator52.getStrategy();
        generator51.setStrategy(generatorStrategy57);
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator59.setUseCache(true);
        boolean boolean62 = generator59.getAttemptLoad();
        boolean boolean63 = generator59.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator59.getStrategy();
        generator51.setStrategy(generatorStrategy64);
        generator48.setStrategy(generatorStrategy64);
        generator40.setStrategy(generatorStrategy64);
        org.mockito.cglib.util.ParallelSorter.Generator generator68 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader69 = null;
        generator68.setClassLoader(classLoader69);
        org.mockito.cglib.util.ParallelSorter.Generator generator71 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader72 = null;
        generator71.setClassLoader(classLoader72);
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = strComparator75.thenComparing(strComparator76);
        java.util.Comparator<java.lang.String> strComparator78 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = strComparator78.thenComparing(strComparator79);
        java.util.Comparator<java.lang.String> strComparator81 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator82 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator83 = strComparator81.thenComparing(strComparator82);
        boolean boolean84 = strComparator79.equals((java.lang.Object) strComparator83);
        java.lang.Object[] objArray86 = new java.lang.Object[] { '4', strComparator76, strComparator79, 0.0d };
        generator71.setArrays(objArray86);
        generator68.setArrays(objArray86);
        generator40.setArrays(objArray86);
        generator39.setArrays(objArray86);
        generator26.setArrays(objArray86);
        generator0.setArrays(objArray86);
        org.mockito.asm.ClassVisitor classVisitor93 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test2041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2041");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = generator0.getClassLoader();
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor11 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
    }

    @Test
    public void test2042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2042");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = strComparator0.reversed();
        java.util.Comparator<java.lang.String> strComparator4 = strComparator3.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader7 = null;
        generator6.setClassLoader(classLoader7);
        java.lang.ClassLoader classLoader9 = null;
        generator6.setClassLoader(classLoader9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator6.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy11);
        boolean boolean13 = strComparator3.equals((java.lang.Object) generator5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator5.getStrategy();
        generator5.setAttemptLoad(false);
        boolean boolean17 = generator5.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor18 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator5.generateClass(classVisitor18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test2043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2043");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator0.setNamingPolicy(namingPolicy29);
        boolean boolean31 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader36 = null;
        generator35.setClassLoader(classLoader36);
        java.lang.ClassLoader classLoader38 = null;
        generator35.setClassLoader(classLoader38);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator35.getNamingPolicy();
        generator34.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        generator34.setNamingPolicy(namingPolicy47);
        java.lang.ClassLoader classLoader49 = generator34.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator34.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator34.getStrategy();
        boolean boolean52 = generator34.getUseCache();
        java.lang.ClassLoader classLoader53 = generator34.getClassLoader();
        boolean boolean54 = generator34.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator55.setUseCache(true);
        boolean boolean58 = generator55.getAttemptLoad();
        boolean boolean59 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator55.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader63 = null;
        generator62.setClassLoader(classLoader63);
        java.lang.ClassLoader classLoader65 = null;
        generator62.setClassLoader(classLoader65);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator62.getNamingPolicy();
        generator61.setNamingPolicy(namingPolicy67);
        org.mockito.cglib.util.ParallelSorter.Generator generator69 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader70 = null;
        generator69.setClassLoader(classLoader70);
        java.lang.ClassLoader classLoader72 = null;
        generator69.setClassLoader(classLoader72);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator69.getNamingPolicy();
        generator61.setNamingPolicy(namingPolicy74);
        generator61.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator61.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator79 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator80 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader81 = null;
        generator80.setClassLoader(classLoader81);
        java.lang.ClassLoader classLoader83 = null;
        generator80.setClassLoader(classLoader83);
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator80.getNamingPolicy();
        generator79.setNamingPolicy(namingPolicy85);
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator79.getNamingPolicy();
        generator61.setNamingPolicy(namingPolicy87);
        generator55.setNamingPolicy(namingPolicy87);
        generator34.setNamingPolicy(namingPolicy87);
        generator0.setNamingPolicy(namingPolicy87);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(namingPolicy85);
        org.junit.Assert.assertNotNull(namingPolicy87);
    }

    @Test
    public void test2044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2044");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        java.lang.ClassLoader classLoader18 = generator15.getClassLoader();
        generator0.setClassLoader(classLoader18);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass25 = generator0.getClass();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test2045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2045");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = strComparator3.thenComparing(strComparator4);
        java.util.Comparator<java.lang.String> strComparator6 = strComparator2.thenComparing(strComparator3);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.reverseOrder();
        java.util.Comparator<java.lang.String> strComparator8 = strComparator3.thenComparing(strComparator7);
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        boolean boolean11 = strComparator8.equals((java.lang.Object) boolean10);
        int int14 = strComparator8.compare("", "hi!");
        int int17 = strComparator8.compare("", "hi!");
        int int20 = strComparator8.compare("", "hi!");
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
    }

    @Test
    public void test2046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2046");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator12.getStrategy();
        generator11.setStrategy(generatorStrategy17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        boolean boolean23 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator19.getStrategy();
        generator11.setStrategy(generatorStrategy24);
        generator8.setStrategy(generatorStrategy24);
        generator0.setStrategy(generatorStrategy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = strComparator35.thenComparing(strComparator36);
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = strComparator38.thenComparing(strComparator39);
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = strComparator41.thenComparing(strComparator42);
        boolean boolean44 = strComparator39.equals((java.lang.Object) strComparator43);
        java.lang.Object[] objArray46 = new java.lang.Object[] { '4', strComparator36, strComparator39, 0.0d };
        generator31.setArrays(objArray46);
        generator28.setArrays(objArray46);
        generator0.setArrays(objArray46);
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader51 = null;
        generator50.setClassLoader(classLoader51);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = strComparator57.thenComparing(strComparator58);
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = strComparator60.thenComparing(strComparator61);
        boolean boolean63 = strComparator58.equals((java.lang.Object) strComparator62);
        java.lang.Object[] objArray65 = new java.lang.Object[] { '4', strComparator55, strComparator58, 0.0d };
        generator50.setArrays(objArray65);
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader68 = null;
        generator67.setClassLoader(classLoader68);
        java.lang.ClassLoader classLoader70 = null;
        generator67.setClassLoader(classLoader70);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator67.getNamingPolicy();
        generator50.setNamingPolicy(namingPolicy72);
        java.lang.ClassLoader classLoader74 = generator50.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator50.getStrategy();
        generator0.setStrategy(generatorStrategy75);
        java.lang.ClassLoader classLoader77 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        boolean boolean81 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test2047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2047");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator0.setStrategy(generatorStrategy20);
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean23 = generator22.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator22.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader27 = null;
        generator26.setClassLoader(classLoader27);
        java.lang.ClassLoader classLoader29 = null;
        generator26.setClassLoader(classLoader29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator26.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator40.setUseCache(true);
        java.lang.ClassLoader classLoader43 = generator40.getClassLoader();
        generator25.setClassLoader(classLoader43);
        generator22.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader46 = generator22.getClassLoader();
        generator0.setClassLoader(classLoader46);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator52.setUseCache(true);
        java.lang.ClassLoader classLoader55 = generator52.getClassLoader();
        generator52.setUseCache(false);
        boolean boolean58 = generator52.getAttemptLoad();
        java.lang.ClassLoader classLoader59 = generator52.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader61 = null;
        generator60.setClassLoader(classLoader61);
        java.lang.ClassLoader classLoader63 = null;
        generator60.setClassLoader(classLoader63);
        boolean boolean65 = generator60.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator60.getStrategy();
        java.lang.ClassLoader classLoader67 = generator60.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator68 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator69 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader70 = null;
        generator69.setClassLoader(classLoader70);
        java.lang.ClassLoader classLoader72 = null;
        generator69.setClassLoader(classLoader72);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator69.getNamingPolicy();
        generator68.setNamingPolicy(namingPolicy74);
        org.mockito.cglib.util.ParallelSorter.Generator generator76 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader77 = null;
        generator76.setClassLoader(classLoader77);
        java.lang.ClassLoader classLoader79 = null;
        generator76.setClassLoader(classLoader79);
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator76.getNamingPolicy();
        generator68.setNamingPolicy(namingPolicy81);
        generator68.setAttemptLoad(false);
        generator68.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator68.getStrategy();
        generator60.setStrategy(generatorStrategy87);
        generator52.setStrategy(generatorStrategy87);
        generator0.setStrategy(generatorStrategy87);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertNotNull(generatorStrategy87);
    }

    @Test
    public void test2048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2048");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        boolean boolean23 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator19.getStrategy();
        boolean boolean25 = generator19.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator19.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.lang.ClassLoader classLoader30 = null;
        generator27.setClassLoader(classLoader30);
        generator27.setAttemptLoad(true);
        boolean boolean34 = generator27.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator27.getNamingPolicy();
        java.lang.ClassLoader classLoader36 = generator27.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader41 = null;
        generator40.setClassLoader(classLoader41);
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = strComparator44.thenComparing(strComparator45);
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = strComparator47.thenComparing(strComparator48);
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = strComparator50.thenComparing(strComparator51);
        boolean boolean53 = strComparator48.equals((java.lang.Object) strComparator52);
        java.lang.Object[] objArray55 = new java.lang.Object[] { '4', strComparator45, strComparator48, 0.0d };
        generator40.setArrays(objArray55);
        generator37.setArrays(objArray55);
        generator27.setArrays(objArray55);
        generator19.setArrays(objArray55);
        generator0.setArrays(objArray55);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter61 = org.mockito.cglib.util.ParallelSorter.create(objArray55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test2049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2049");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.reverseOrder();
        int int3 = strComparator0.compare("", "");
        java.util.Comparator<java.lang.String> strComparator4 = strComparator0.reversed();
        int int7 = strComparator4.compare("", "");
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test2050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2050");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = strComparator0.reversed();
        java.util.Comparator<java.lang.String> strComparator4 = strComparator3.reversed();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator7 = strComparator5.thenComparing(strComparator6);
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator10 = strComparator8.thenComparing(strComparator9);
        java.util.Comparator<java.lang.String> strComparator11 = strComparator7.thenComparing(strComparator8);
        boolean boolean13 = strComparator8.equals((java.lang.Object) "");
        java.util.Comparator<java.lang.String> strComparator14 = strComparator8.reversed();
        java.util.Comparator<java.lang.String> strComparator15 = strComparator3.thenComparing(strComparator14);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        java.util.Comparator<java.lang.String> strComparator19 = strComparator16.reversed();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator19.reversed();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator15.thenComparing(strComparator20);
        int int24 = strComparator21.compare("hi!", "");
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
    }

    @Test
    public void test2051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2051");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader22 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor23 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(classLoader22);
    }

    @Test
    public void test2052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2052");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.reverseOrder();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator6.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator6.getStrategy();
        generator1.setStrategy(generatorStrategy13);
        boolean boolean15 = strComparator0.equals((java.lang.Object) generator1);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator1.getNamingPolicy();
        generator1.setAttemptLoad(false);
        generator1.setUseCache(false);
        generator1.setUseCache(true);
        boolean boolean23 = generator1.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator24.setUseCache(true);
        boolean boolean27 = generator24.getAttemptLoad();
        java.lang.ClassLoader classLoader28 = null;
        generator24.setClassLoader(classLoader28);
        generator24.setAttemptLoad(true);
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.reverseOrder();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator33.setUseCache(true);
        boolean boolean36 = generator33.getAttemptLoad();
        boolean boolean37 = generator33.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator38.setUseCache(true);
        boolean boolean41 = generator38.getAttemptLoad();
        boolean boolean42 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator38.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator38.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator38.getStrategy();
        generator33.setStrategy(generatorStrategy45);
        boolean boolean47 = strComparator32.equals((java.lang.Object) generator33);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator33.getNamingPolicy();
        generator33.setAttemptLoad(false);
        generator33.setUseCache(false);
        generator33.setUseCache(true);
        java.lang.ClassLoader classLoader55 = generator33.getClassLoader();
        generator24.setClassLoader(classLoader55);
        generator1.setClassLoader(classLoader55);
        boolean boolean58 = generator1.getUseCache();
        generator1.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test2053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2053");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.reverseOrder();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator6.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator6.getStrategy();
        generator1.setStrategy(generatorStrategy13);
        boolean boolean15 = strComparator0.equals((java.lang.Object) generator1);
        int int18 = strComparator0.compare("", "");
        int int21 = strComparator0.compare("hi!", "hi!");
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test2054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2054");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator2 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator3.setUseCache(true);
        boolean boolean6 = generator3.getAttemptLoad();
        boolean boolean7 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator3.getStrategy();
        generator2.setStrategy(generatorStrategy8);
        boolean boolean10 = generator2.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator2.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        generator12.setUseCache(true);
        generator12.setAttemptLoad(true);
        generator12.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator25.getStrategy();
        java.lang.ClassLoader classLoader27 = generator25.getClassLoader();
        generator25.setUseCache(false);
        boolean boolean30 = generator25.getAttemptLoad();
        boolean boolean31 = generator25.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator33.setUseCache(true);
        boolean boolean36 = generator33.getAttemptLoad();
        boolean boolean37 = generator33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator33.getStrategy();
        generator32.setStrategy(generatorStrategy38);
        boolean boolean40 = generator32.getAttemptLoad();
        generator32.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader45 = null;
        generator44.setClassLoader(classLoader45);
        java.lang.ClassLoader classLoader47 = null;
        generator44.setClassLoader(classLoader47);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator44.getNamingPolicy();
        generator43.setNamingPolicy(namingPolicy49);
        boolean boolean51 = generator43.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader53 = null;
        generator52.setClassLoader(classLoader53);
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = strComparator56.thenComparing(strComparator57);
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = strComparator59.thenComparing(strComparator60);
        java.util.Comparator<java.lang.String> strComparator62 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = strComparator62.thenComparing(strComparator63);
        boolean boolean65 = strComparator60.equals((java.lang.Object) strComparator64);
        java.lang.Object[] objArray67 = new java.lang.Object[] { '4', strComparator57, strComparator60, 0.0d };
        generator52.setArrays(objArray67);
        generator43.setArrays(objArray67);
        boolean boolean70 = generator43.getAttemptLoad();
        java.lang.Object[] objArray71 = new java.lang.Object[] { generator43 };
        generator32.setArrays(objArray71);
        generator25.setArrays(objArray71);
        generator12.setArrays(objArray71);
        generator2.setArrays(objArray71);
        generator0.setArrays(objArray71);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter77 = org.mockito.cglib.util.ParallelSorter.create(objArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.util.ParallelSorter$Generator is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray71);
    }

    @Test
    public void test2055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2055");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader22 = null;
        generator21.setClassLoader(classLoader22);
        boolean boolean24 = generator21.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator21.getStrategy();
        java.lang.ClassLoader classLoader26 = generator21.getClassLoader();
        boolean boolean27 = generator21.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader31 = null;
        generator30.setClassLoader(classLoader31);
        java.lang.ClassLoader classLoader33 = null;
        generator30.setClassLoader(classLoader33);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator30.getNamingPolicy();
        generator29.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator37.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        generator40.setStrategy(generatorStrategy46);
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator48.setUseCache(true);
        boolean boolean51 = generator48.getAttemptLoad();
        boolean boolean52 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator48.getStrategy();
        generator40.setStrategy(generatorStrategy53);
        generator37.setStrategy(generatorStrategy53);
        generator29.setStrategy(generatorStrategy53);
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader58 = null;
        generator57.setClassLoader(classLoader58);
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader61 = null;
        generator60.setClassLoader(classLoader61);
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator66 = strComparator64.thenComparing(strComparator65);
        java.util.Comparator<java.lang.String> strComparator67 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator68 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator69 = strComparator67.thenComparing(strComparator68);
        java.util.Comparator<java.lang.String> strComparator70 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator71 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator72 = strComparator70.thenComparing(strComparator71);
        boolean boolean73 = strComparator68.equals((java.lang.Object) strComparator72);
        java.lang.Object[] objArray75 = new java.lang.Object[] { '4', strComparator65, strComparator68, 0.0d };
        generator60.setArrays(objArray75);
        generator57.setArrays(objArray75);
        generator29.setArrays(objArray75);
        generator28.setArrays(objArray75);
        generator21.setArrays(objArray75);
        generator0.setArrays(objArray75);
        boolean boolean82 = generator0.getUseCache();
        boolean boolean83 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator0.getStrategy();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(generatorStrategy84);
    }

    @Test
    public void test2056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2056");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator9.setUseCache(true);
        boolean boolean12 = generator9.getAttemptLoad();
        boolean boolean13 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy14);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        boolean boolean19 = generator16.getAttemptLoad();
        boolean boolean20 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator16.getStrategy();
        generator8.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = generator8.getClassLoader();
        generator0.setClassLoader(classLoader23);
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader27 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader27);
    }

    @Test
    public void test2057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2057");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator30.setUseCache(true);
        boolean boolean33 = generator30.getAttemptLoad();
        boolean boolean34 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator30.getStrategy();
        generator29.setStrategy(generatorStrategy35);
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator37.setUseCache(true);
        boolean boolean40 = generator37.getAttemptLoad();
        boolean boolean41 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator37.getStrategy();
        generator29.setStrategy(generatorStrategy42);
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader45 = null;
        generator44.setClassLoader(classLoader45);
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = strComparator48.thenComparing(strComparator49);
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = strComparator51.thenComparing(strComparator52);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        boolean boolean57 = strComparator52.equals((java.lang.Object) strComparator56);
        java.lang.Object[] objArray59 = new java.lang.Object[] { '4', strComparator49, strComparator52, 0.0d };
        generator44.setArrays(objArray59);
        generator29.setArrays(objArray59);
        generator0.setArrays(objArray59);
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = strComparator63.thenComparing(strComparator64);
        org.mockito.cglib.util.ParallelSorter.Generator generator66 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator66.setUseCache(true);
        boolean boolean69 = generator66.getAttemptLoad();
        boolean boolean70 = generator66.getUseCache();
        generator66.setAttemptLoad(true);
        generator66.setUseCache(true);
        boolean boolean75 = strComparator63.equals((java.lang.Object) generator66);
        org.mockito.cglib.util.ParallelSorter.Generator generator76 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator76.setUseCache(true);
        java.lang.ClassLoader classLoader79 = generator76.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator80 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator80.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator80.getStrategy();
        generator76.setStrategy(generatorStrategy83);
        generator66.setStrategy(generatorStrategy83);
        generator0.setStrategy(generatorStrategy83);
        java.lang.ClassLoader classLoader87 = generator0.getClassLoader();
        java.lang.Class<?> wildcardClass88 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2058");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        generator0.setAttemptLoad(true);
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.reverseOrder();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator9.setUseCache(true);
        boolean boolean12 = generator9.getAttemptLoad();
        boolean boolean13 = generator9.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator14.setUseCache(true);
        boolean boolean17 = generator14.getAttemptLoad();
        boolean boolean18 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator14.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator14.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator14.getStrategy();
        generator9.setStrategy(generatorStrategy21);
        boolean boolean23 = strComparator8.equals((java.lang.Object) generator9);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator9.getNamingPolicy();
        generator9.setAttemptLoad(false);
        generator9.setUseCache(false);
        generator9.setUseCache(true);
        java.lang.ClassLoader classLoader31 = generator9.getClassLoader();
        generator0.setClassLoader(classLoader31);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator33.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator33.getStrategy();
        boolean boolean37 = generator33.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator38.setUseCache(true);
        boolean boolean41 = generator38.getAttemptLoad();
        boolean boolean42 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator38.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator44.setUseCache(true);
        boolean boolean47 = generator44.getAttemptLoad();
        boolean boolean48 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator44.getStrategy();
        generator38.setStrategy(generatorStrategy49);
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader53 = null;
        generator52.setClassLoader(classLoader53);
        java.lang.ClassLoader classLoader55 = null;
        generator52.setClassLoader(classLoader55);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator52.getNamingPolicy();
        generator51.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator51.getNamingPolicy();
        generator51.setUseCache(false);
        boolean boolean62 = generator51.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator51.getNamingPolicy();
        generator51.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator51.getNamingPolicy();
        generator38.setNamingPolicy(namingPolicy66);
        generator33.setNamingPolicy(namingPolicy66);
        generator0.setNamingPolicy(namingPolicy66);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(namingPolicy66);
    }

    @Test
    public void test2059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2059");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        boolean boolean8 = generator0.getUseCache();
        boolean boolean9 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        generator12.setUseCache(true);
        generator12.setAttemptLoad(true);
        boolean boolean23 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator12.getNamingPolicy();
        generator12.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = strComparator31.thenComparing(strComparator32);
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = strComparator34.thenComparing(strComparator35);
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = strComparator37.thenComparing(strComparator38);
        boolean boolean40 = strComparator35.equals((java.lang.Object) strComparator39);
        java.lang.Object[] objArray42 = new java.lang.Object[] { '4', strComparator32, strComparator35, 0.0d };
        generator27.setArrays(objArray42);
        java.lang.ClassLoader classLoader44 = null;
        generator27.setClassLoader(classLoader44);
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader47 = null;
        generator46.setClassLoader(classLoader47);
        java.lang.ClassLoader classLoader49 = null;
        generator46.setClassLoader(classLoader49);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator46.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator54.setUseCache(true);
        boolean boolean57 = generator54.getAttemptLoad();
        boolean boolean58 = generator54.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator54.getStrategy();
        generator53.setStrategy(generatorStrategy59);
        generator27.setStrategy(generatorStrategy59);
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader64 = generator27.getClassLoader();
        generator12.setClassLoader(classLoader64);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy66);
        boolean boolean68 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(namingPolicy69);
    }

    @Test
    public void test2060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2060");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        boolean boolean28 = strComparator23.equals((java.lang.Object) strComparator27);
        java.lang.Object[] objArray30 = new java.lang.Object[] { '4', strComparator20, strComparator23, 0.0d };
        generator15.setArrays(objArray30);
        generator0.setArrays(objArray30);
        java.lang.ClassLoader classLoader33 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader36 = null;
        generator35.setClassLoader(classLoader36);
        java.lang.ClassLoader classLoader38 = null;
        generator35.setClassLoader(classLoader38);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator35.getNamingPolicy();
        generator34.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        generator34.setNamingPolicy(namingPolicy47);
        generator34.setAttemptLoad(false);
        generator34.setAttemptLoad(false);
        boolean boolean53 = generator34.getAttemptLoad();
        generator34.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader57 = null;
        generator56.setClassLoader(classLoader57);
        boolean boolean59 = generator56.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator56.getStrategy();
        java.lang.ClassLoader classLoader61 = generator56.getClassLoader();
        generator56.setUseCache(false);
        boolean boolean64 = generator56.getUseCache();
        generator56.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator67.setUseCache(true);
        boolean boolean70 = generator67.getAttemptLoad();
        java.lang.ClassLoader classLoader71 = null;
        generator67.setClassLoader(classLoader71);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator67.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator74 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader75 = null;
        generator74.setClassLoader(classLoader75);
        java.util.Comparator<java.lang.String> strComparator78 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = strComparator78.thenComparing(strComparator79);
        java.util.Comparator<java.lang.String> strComparator81 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator82 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator83 = strComparator81.thenComparing(strComparator82);
        java.util.Comparator<java.lang.String> strComparator84 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator85 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator86 = strComparator84.thenComparing(strComparator85);
        boolean boolean87 = strComparator82.equals((java.lang.Object) strComparator86);
        java.lang.Object[] objArray89 = new java.lang.Object[] { '4', strComparator79, strComparator82, 0.0d };
        generator74.setArrays(objArray89);
        generator67.setArrays(objArray89);
        generator56.setArrays(objArray89);
        generator34.setArrays(objArray89);
        generator0.setArrays(objArray89);
        org.mockito.cglib.core.NamingPolicy namingPolicy95 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertNotNull(strComparator84);
        org.junit.Assert.assertNotNull(strComparator85);
        org.junit.Assert.assertNotNull(strComparator86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy95);
    }

    @Test
    public void test2061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2061");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy24);
        boolean boolean26 = generator0.getUseCache();
        java.lang.ClassLoader classLoader27 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        boolean boolean34 = generator31.getAttemptLoad();
        boolean boolean35 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator31.getStrategy();
        generator30.setStrategy(generatorStrategy36);
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator38.setUseCache(true);
        boolean boolean41 = generator38.getAttemptLoad();
        boolean boolean42 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator38.getStrategy();
        generator30.setStrategy(generatorStrategy43);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator45.setUseCache(true);
        boolean boolean48 = generator45.getAttemptLoad();
        boolean boolean49 = generator45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator45.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator51.setUseCache(true);
        boolean boolean54 = generator51.getAttemptLoad();
        boolean boolean55 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator51.getStrategy();
        generator45.setStrategy(generatorStrategy56);
        generator30.setStrategy(generatorStrategy56);
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator60.setUseCache(true);
        boolean boolean63 = generator60.getAttemptLoad();
        boolean boolean64 = generator60.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator60.getStrategy();
        generator59.setStrategy(generatorStrategy65);
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator67.setUseCache(true);
        boolean boolean70 = generator67.getAttemptLoad();
        boolean boolean71 = generator67.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator67.getStrategy();
        generator59.setStrategy(generatorStrategy72);
        org.mockito.cglib.util.ParallelSorter.Generator generator74 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader75 = null;
        generator74.setClassLoader(classLoader75);
        java.util.Comparator<java.lang.String> strComparator78 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = strComparator78.thenComparing(strComparator79);
        java.util.Comparator<java.lang.String> strComparator81 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator82 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator83 = strComparator81.thenComparing(strComparator82);
        java.util.Comparator<java.lang.String> strComparator84 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator85 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator86 = strComparator84.thenComparing(strComparator85);
        boolean boolean87 = strComparator82.equals((java.lang.Object) strComparator86);
        java.lang.Object[] objArray89 = new java.lang.Object[] { '4', strComparator79, strComparator82, 0.0d };
        generator74.setArrays(objArray89);
        generator59.setArrays(objArray89);
        generator30.setArrays(objArray89);
        generator0.setArrays(objArray89);
        org.mockito.cglib.core.NamingPolicy namingPolicy94 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertNotNull(strComparator84);
        org.junit.Assert.assertNotNull(strComparator85);
        org.junit.Assert.assertNotNull(strComparator86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy94);
    }

    @Test
    public void test2062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2062");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = generator0.getClassLoader();
        generator0.setUseCache(true);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        boolean boolean13 = generator10.getAttemptLoad();
        boolean boolean14 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator10.getStrategy();
        generator9.setStrategy(generatorStrategy15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator17.setUseCache(true);
        boolean boolean20 = generator17.getAttemptLoad();
        boolean boolean21 = generator17.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator17.getStrategy();
        generator9.setStrategy(generatorStrategy22);
        java.lang.ClassLoader classLoader24 = generator9.getClassLoader();
        generator0.setClassLoader(classLoader24);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(classLoader24);
    }

    @Test
    public void test2063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2063");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        java.lang.ClassLoader classLoader10 = generator0.getClassLoader();
        boolean boolean11 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor12 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2064");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator3.setUseCache(true);
        boolean boolean6 = generator3.getAttemptLoad();
        boolean boolean7 = generator3.getUseCache();
        generator3.setAttemptLoad(true);
        generator3.setUseCache(true);
        boolean boolean12 = strComparator0.equals((java.lang.Object) generator3);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator13.setUseCache(true);
        java.lang.ClassLoader classLoader16 = generator13.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator17.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator17.getStrategy();
        generator13.setStrategy(generatorStrategy20);
        generator3.setStrategy(generatorStrategy20);
        java.lang.ClassLoader classLoader23 = generator3.getClassLoader();
        generator3.setUseCache(true);
        generator3.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = strComparator32.thenComparing(strComparator33);
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = strComparator35.thenComparing(strComparator36);
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = strComparator38.thenComparing(strComparator39);
        boolean boolean41 = strComparator36.equals((java.lang.Object) strComparator40);
        java.lang.Object[] objArray43 = new java.lang.Object[] { '4', strComparator33, strComparator36, 0.0d };
        generator28.setArrays(objArray43);
        java.lang.ClassLoader classLoader45 = generator28.getClassLoader();
        generator3.setClassLoader(classLoader45);
        generator3.setUseCache(true);
        boolean boolean49 = generator3.getAttemptLoad();
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test2065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2065");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator13.setUseCache(true);
        boolean boolean16 = generator13.getAttemptLoad();
        boolean boolean17 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator13.getStrategy();
        generator12.setStrategy(generatorStrategy18);
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        boolean boolean24 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator20.getStrategy();
        generator12.setStrategy(generatorStrategy25);
        generator12.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader31 = null;
        generator30.setClassLoader(classLoader31);
        java.lang.ClassLoader classLoader33 = null;
        generator30.setClassLoader(classLoader33);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator30.getNamingPolicy();
        generator29.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        java.lang.ClassLoader classLoader40 = null;
        generator37.setClassLoader(classLoader40);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator37.getNamingPolicy();
        generator29.setNamingPolicy(namingPolicy42);
        java.lang.ClassLoader classLoader44 = generator29.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator29.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator29.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator47.setUseCache(true);
        boolean boolean50 = generator47.getAttemptLoad();
        boolean boolean51 = generator47.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator47.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator47.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator47.getStrategy();
        generator29.setStrategy(generatorStrategy54);
        generator12.setStrategy(generatorStrategy54);
        generator0.setStrategy(generatorStrategy54);
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator58.setUseCache(true);
        boolean boolean61 = generator58.getAttemptLoad();
        java.lang.ClassLoader classLoader62 = null;
        generator58.setClassLoader(classLoader62);
        generator58.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator58.getNamingPolicy();
        generator58.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator58.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy69);
        org.mockito.asm.ClassVisitor classVisitor71 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(namingPolicy69);
    }

    @Test
    public void test2066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2066");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader10 = generator0.getClassLoader();
        boolean boolean11 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(namingPolicy12);
    }

    @Test
    public void test2067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2067");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator9.setUseCache(true);
        boolean boolean12 = generator9.getAttemptLoad();
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator16.getStrategy();
        generator9.setStrategy(generatorStrategy17);
        generator0.setStrategy(generatorStrategy17);
        boolean boolean20 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator21.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator23.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.lang.ClassLoader classLoader30 = null;
        generator27.setClassLoader(classLoader30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader35 = null;
        generator34.setClassLoader(classLoader35);
        java.lang.ClassLoader classLoader37 = null;
        generator34.setClassLoader(classLoader37);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator34.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        java.lang.ClassLoader classLoader44 = generator41.getClassLoader();
        generator26.setClassLoader(classLoader44);
        generator23.setClassLoader(classLoader44);
        generator23.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator50.setUseCache(true);
        boolean boolean53 = generator50.getAttemptLoad();
        boolean boolean54 = generator50.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator50.getStrategy();
        generator49.setStrategy(generatorStrategy55);
        boolean boolean57 = generator49.getAttemptLoad();
        generator49.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader62 = null;
        generator61.setClassLoader(classLoader62);
        java.lang.ClassLoader classLoader64 = null;
        generator61.setClassLoader(classLoader64);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator61.getNamingPolicy();
        generator60.setNamingPolicy(namingPolicy66);
        boolean boolean68 = generator60.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator69 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader70 = null;
        generator69.setClassLoader(classLoader70);
        java.util.Comparator<java.lang.String> strComparator73 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator74 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator75 = strComparator73.thenComparing(strComparator74);
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator78 = strComparator76.thenComparing(strComparator77);
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator81 = strComparator79.thenComparing(strComparator80);
        boolean boolean82 = strComparator77.equals((java.lang.Object) strComparator81);
        java.lang.Object[] objArray84 = new java.lang.Object[] { '4', strComparator74, strComparator77, 0.0d };
        generator69.setArrays(objArray84);
        generator60.setArrays(objArray84);
        boolean boolean87 = generator60.getAttemptLoad();
        java.lang.Object[] objArray88 = new java.lang.Object[] { generator60 };
        generator49.setArrays(objArray88);
        generator23.setArrays(objArray88);
        generator21.setArrays(objArray88);
        generator0.setArrays(objArray88);
        boolean boolean93 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy94 = generator0.getStrategy();
        boolean boolean95 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(generatorStrategy94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test2068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2068");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        boolean boolean6 = generator0.getUseCache();
        boolean boolean7 = generator0.getAttemptLoad();
        boolean boolean8 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        boolean boolean10 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test2069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2069");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        java.lang.ClassLoader classLoader5 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean8 = generator0.getUseCache();
        generator0.setUseCache(false);
        boolean boolean11 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = null;
        generator12.setClassLoader(classLoader16);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator12.getNamingPolicy();
        boolean boolean19 = generator12.getUseCache();
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        generator12.setArrays(objArray20);
        generator0.setArrays(objArray20);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass24 = namingPolicy23.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test2070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2070");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        boolean boolean7 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
    }

    @Test
    public void test2071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2071");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        boolean boolean11 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader13 = null;
        generator12.setClassLoader(classLoader13);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        boolean boolean25 = strComparator20.equals((java.lang.Object) strComparator24);
        java.lang.Object[] objArray27 = new java.lang.Object[] { '4', strComparator17, strComparator20, 0.0d };
        generator12.setArrays(objArray27);
        java.lang.ClassLoader classLoader29 = null;
        generator12.setClassLoader(classLoader29);
        boolean boolean31 = generator12.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator32.setUseCache(true);
        boolean boolean35 = generator32.getAttemptLoad();
        boolean boolean36 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator32.getStrategy();
        generator12.setStrategy(generatorStrategy37);
        boolean boolean39 = generator12.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader42 = null;
        generator41.setClassLoader(classLoader42);
        java.lang.ClassLoader classLoader44 = null;
        generator41.setClassLoader(classLoader44);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator41.getNamingPolicy();
        generator40.setNamingPolicy(namingPolicy46);
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader49 = null;
        generator48.setClassLoader(classLoader49);
        java.lang.ClassLoader classLoader51 = null;
        generator48.setClassLoader(classLoader51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator48.getNamingPolicy();
        generator40.setNamingPolicy(namingPolicy53);
        java.lang.ClassLoader classLoader55 = generator40.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator40.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator40.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator58.setUseCache(true);
        boolean boolean61 = generator58.getAttemptLoad();
        boolean boolean62 = generator58.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator58.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator58.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator58.getStrategy();
        generator40.setStrategy(generatorStrategy65);
        generator12.setStrategy(generatorStrategy65);
        generator0.setStrategy(generatorStrategy65);
        boolean boolean69 = generator0.getAttemptLoad();
        boolean boolean70 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test2072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2072");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        generator6.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator13.getStrategy();
        generator6.setStrategy(generatorStrategy14);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        java.lang.ClassLoader classLoader19 = generator16.getClassLoader();
        generator6.setClassLoader(classLoader19);
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        java.util.Comparator<java.lang.String> strComparator27 = strComparator23.thenComparing(strComparator24);
        java.util.Comparator<java.lang.String> strComparator28 = strComparator23.reversed();
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = strComparator29.thenComparing(strComparator30);
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = strComparator32.thenComparing(strComparator33);
        java.util.Comparator<java.lang.String> strComparator35 = strComparator31.thenComparing(strComparator32);
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = strComparator36.thenComparing(strComparator37);
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = strComparator39.thenComparing(strComparator40);
        java.util.Comparator<java.lang.String> strComparator42 = strComparator38.thenComparing(strComparator39);
        boolean boolean43 = strComparator35.equals((java.lang.Object) strComparator39);
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader45 = null;
        generator44.setClassLoader(classLoader45);
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = strComparator48.thenComparing(strComparator49);
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = strComparator51.thenComparing(strComparator52);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        boolean boolean57 = strComparator52.equals((java.lang.Object) strComparator56);
        java.lang.Object[] objArray59 = new java.lang.Object[] { '4', strComparator49, strComparator52, 0.0d };
        generator44.setArrays(objArray59);
        java.lang.ClassLoader classLoader61 = null;
        generator44.setClassLoader(classLoader61);
        boolean boolean63 = generator44.getAttemptLoad();
        boolean boolean64 = strComparator39.equals((java.lang.Object) generator44);
        boolean boolean65 = strComparator23.equals((java.lang.Object) generator44);
        java.util.Comparator<java.lang.String> strComparator66 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator67 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator68 = strComparator66.thenComparing(strComparator67);
        java.util.Comparator<java.lang.String> strComparator69 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator70 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator71 = strComparator69.thenComparing(strComparator70);
        java.util.Comparator<java.lang.String> strComparator72 = strComparator68.thenComparing(strComparator69);
        java.util.Comparator<java.lang.String> strComparator73 = strComparator68.reversed();
        java.util.Comparator<java.lang.String> strComparator74 = strComparator68.reversed();
        java.util.Comparator<java.lang.String> strComparator75 = strComparator74.reversed();
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.nullsLast(strComparator74);
        java.util.Comparator<java.lang.String> strComparator77 = strComparator23.thenComparing(strComparator74);
        org.mockito.cglib.util.ParallelSorter.Generator generator78 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator78.setUseCache(true);
        boolean boolean81 = generator78.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator78.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = generator78.getNamingPolicy();
        boolean boolean84 = strComparator23.equals((java.lang.Object) namingPolicy83);
        generator6.setNamingPolicy(namingPolicy83);
        generator0.setNamingPolicy(namingPolicy83);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(namingPolicy83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test2073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2073");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = strComparator3.thenComparing(strComparator4);
        java.util.Comparator<java.lang.String> strComparator6 = strComparator2.thenComparing(strComparator3);
        int int9 = strComparator3.compare("", "");
        int int12 = strComparator3.compare("", "");
        int int15 = strComparator3.compare("", "");
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test2074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2074");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator4.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator3.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean20 = generator19.getAttemptLoad();
        java.lang.ClassLoader classLoader21 = generator19.getClassLoader();
        generator0.setClassLoader(classLoader21);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator23.setUseCache(true);
        boolean boolean26 = generator23.getAttemptLoad();
        boolean boolean27 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator23.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator23.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        boolean boolean34 = generator31.getAttemptLoad();
        boolean boolean35 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator31.getStrategy();
        generator30.setStrategy(generatorStrategy36);
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator38.setUseCache(true);
        boolean boolean41 = generator38.getAttemptLoad();
        boolean boolean42 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator38.getStrategy();
        generator30.setStrategy(generatorStrategy43);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader46 = null;
        generator45.setClassLoader(classLoader46);
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = strComparator49.thenComparing(strComparator50);
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = strComparator52.thenComparing(strComparator53);
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = strComparator55.thenComparing(strComparator56);
        boolean boolean58 = strComparator53.equals((java.lang.Object) strComparator57);
        java.lang.Object[] objArray60 = new java.lang.Object[] { '4', strComparator50, strComparator53, 0.0d };
        generator45.setArrays(objArray60);
        generator30.setArrays(objArray60);
        generator23.setArrays(objArray60);
        generator0.setArrays(objArray60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator68 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator69 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader70 = null;
        generator69.setClassLoader(classLoader70);
        java.lang.ClassLoader classLoader72 = null;
        generator69.setClassLoader(classLoader72);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator69.getNamingPolicy();
        generator68.setNamingPolicy(namingPolicy74);
        org.mockito.cglib.util.ParallelSorter.Generator generator76 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader77 = null;
        generator76.setClassLoader(classLoader77);
        java.lang.ClassLoader classLoader79 = null;
        generator76.setClassLoader(classLoader79);
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator76.getNamingPolicy();
        generator68.setNamingPolicy(namingPolicy81);
        org.mockito.cglib.util.ParallelSorter.Generator generator83 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator83.setUseCache(true);
        java.lang.ClassLoader classLoader86 = generator83.getClassLoader();
        generator68.setClassLoader(classLoader86);
        generator68.setAttemptLoad(false);
        generator68.setUseCache(true);
        generator68.setUseCache(false);
        java.lang.ClassLoader classLoader94 = generator68.getClassLoader();
        boolean boolean95 = generator68.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy96 = generator68.getStrategy();
        generator0.setStrategy(generatorStrategy96);
        boolean boolean98 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertNotNull(classLoader86);
        org.junit.Assert.assertNotNull(classLoader94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(generatorStrategy96);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test2075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2075");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator9.setUseCache(true);
        boolean boolean12 = generator9.getAttemptLoad();
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator16.getStrategy();
        generator9.setStrategy(generatorStrategy17);
        generator0.setStrategy(generatorStrategy17);
        boolean boolean20 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader21 = generator0.getClassLoader();
        java.lang.Class<?> wildcardClass22 = classLoader21.getClass();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test2076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2076");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        java.lang.ClassLoader classLoader18 = generator15.getClassLoader();
        generator0.setClassLoader(classLoader18);
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        java.lang.ClassLoader classLoader24 = null;
        generator20.setClassLoader(classLoader24);
        generator20.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator20.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader30 = null;
        generator29.setClassLoader(classLoader30);
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = strComparator33.thenComparing(strComparator34);
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = strComparator36.thenComparing(strComparator37);
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = strComparator39.thenComparing(strComparator40);
        boolean boolean42 = strComparator37.equals((java.lang.Object) strComparator41);
        java.lang.Object[] objArray44 = new java.lang.Object[] { '4', strComparator34, strComparator37, 0.0d };
        generator29.setArrays(objArray44);
        java.lang.ClassLoader classLoader46 = generator29.getClassLoader();
        generator20.setClassLoader(classLoader46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator20.getStrategy();
        generator0.setStrategy(generatorStrategy48);
        generator0.setUseCache(false);
        boolean boolean52 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test2077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2077");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = strComparator3.thenComparing(strComparator4);
        java.util.Comparator<java.lang.String> strComparator6 = strComparator2.thenComparing(strComparator3);
        java.util.Comparator<java.lang.String> strComparator7 = strComparator2.reversed();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator10 = strComparator8.thenComparing(strComparator9);
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator13 = strComparator11.thenComparing(strComparator12);
        java.util.Comparator<java.lang.String> strComparator14 = strComparator10.thenComparing(strComparator11);
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = strComparator15.thenComparing(strComparator16);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        java.util.Comparator<java.lang.String> strComparator21 = strComparator17.thenComparing(strComparator18);
        boolean boolean22 = strComparator14.equals((java.lang.Object) strComparator18);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader24 = null;
        generator23.setClassLoader(classLoader24);
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = strComparator27.thenComparing(strComparator28);
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = strComparator30.thenComparing(strComparator31);
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = strComparator33.thenComparing(strComparator34);
        boolean boolean36 = strComparator31.equals((java.lang.Object) strComparator35);
        java.lang.Object[] objArray38 = new java.lang.Object[] { '4', strComparator28, strComparator31, 0.0d };
        generator23.setArrays(objArray38);
        java.lang.ClassLoader classLoader40 = null;
        generator23.setClassLoader(classLoader40);
        boolean boolean42 = generator23.getAttemptLoad();
        boolean boolean43 = strComparator18.equals((java.lang.Object) generator23);
        boolean boolean44 = strComparator2.equals((java.lang.Object) generator23);
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = strComparator45.thenComparing(strComparator46);
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = strComparator48.thenComparing(strComparator49);
        java.util.Comparator<java.lang.String> strComparator51 = strComparator47.thenComparing(strComparator48);
        java.util.Comparator<java.lang.String> strComparator52 = strComparator47.reversed();
        java.util.Comparator<java.lang.String> strComparator53 = strComparator47.reversed();
        java.util.Comparator<java.lang.String> strComparator54 = strComparator53.reversed();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.nullsLast(strComparator53);
        java.util.Comparator<java.lang.String> strComparator56 = strComparator2.thenComparing(strComparator53);
        int int59 = strComparator56.compare("", "");
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test2078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2078");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator3.setUseCache(true);
        boolean boolean6 = generator3.getAttemptLoad();
        boolean boolean7 = generator3.getUseCache();
        generator3.setAttemptLoad(true);
        generator3.setUseCache(true);
        boolean boolean12 = strComparator0.equals((java.lang.Object) generator3);
        generator3.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator3.getNamingPolicy();
        boolean boolean16 = generator3.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator17.setUseCache(true);
        boolean boolean20 = generator17.getAttemptLoad();
        boolean boolean21 = generator17.getUseCache();
        generator17.setAttemptLoad(true);
        generator17.setUseCache(true);
        generator17.setAttemptLoad(true);
        generator17.setUseCache(false);
        boolean boolean30 = generator17.getUseCache();
        boolean boolean31 = generator17.getAttemptLoad();
        boolean boolean32 = generator17.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator33.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy39);
        java.lang.ClassLoader classLoader41 = generator17.getClassLoader();
        generator3.setClassLoader(classLoader41);
        org.mockito.asm.ClassVisitor classVisitor43 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator3.generateClass(classVisitor43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(classLoader41);
    }

    @Test
    public void test2079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2079");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = generator0.getClassLoader();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator7.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        boolean boolean23 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator19.getStrategy();
        generator18.setStrategy(generatorStrategy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator26.setUseCache(true);
        boolean boolean29 = generator26.getAttemptLoad();
        boolean boolean30 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator26.getStrategy();
        generator18.setStrategy(generatorStrategy31);
        generator15.setStrategy(generatorStrategy31);
        generator7.setStrategy(generatorStrategy31);
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader36 = null;
        generator35.setClassLoader(classLoader36);
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader39 = null;
        generator38.setClassLoader(classLoader39);
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = strComparator42.thenComparing(strComparator43);
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = strComparator45.thenComparing(strComparator46);
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = strComparator48.thenComparing(strComparator49);
        boolean boolean51 = strComparator46.equals((java.lang.Object) strComparator50);
        java.lang.Object[] objArray53 = new java.lang.Object[] { '4', strComparator43, strComparator46, 0.0d };
        generator38.setArrays(objArray53);
        generator35.setArrays(objArray53);
        generator7.setArrays(objArray53);
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader58 = null;
        generator57.setClassLoader(classLoader58);
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator63 = strComparator61.thenComparing(strComparator62);
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator66 = strComparator64.thenComparing(strComparator65);
        java.util.Comparator<java.lang.String> strComparator67 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator68 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator69 = strComparator67.thenComparing(strComparator68);
        boolean boolean70 = strComparator65.equals((java.lang.Object) strComparator69);
        java.lang.Object[] objArray72 = new java.lang.Object[] { '4', strComparator62, strComparator65, 0.0d };
        generator57.setArrays(objArray72);
        java.lang.ClassLoader classLoader74 = null;
        generator57.setClassLoader(classLoader74);
        org.mockito.cglib.util.ParallelSorter.Generator generator76 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader77 = null;
        generator76.setClassLoader(classLoader77);
        java.lang.ClassLoader classLoader79 = null;
        generator76.setClassLoader(classLoader79);
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator76.getNamingPolicy();
        generator57.setNamingPolicy(namingPolicy81);
        org.mockito.cglib.util.ParallelSorter.Generator generator83 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator84 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator84.setUseCache(true);
        boolean boolean87 = generator84.getAttemptLoad();
        boolean boolean88 = generator84.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = generator84.getStrategy();
        generator83.setStrategy(generatorStrategy89);
        generator57.setStrategy(generatorStrategy89);
        generator7.setStrategy(generatorStrategy89);
        org.mockito.cglib.core.NamingPolicy namingPolicy93 = generator7.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy94 = generator7.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy94);
        java.lang.ClassLoader classLoader96 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter99 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(generatorStrategy89);
        org.junit.Assert.assertNotNull(namingPolicy93);
        org.junit.Assert.assertNotNull(namingPolicy94);
        org.junit.Assert.assertNotNull(classLoader96);
    }

    @Test
    public void test2080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2080");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        boolean boolean11 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        boolean boolean28 = strComparator23.equals((java.lang.Object) strComparator27);
        java.lang.Object[] objArray30 = new java.lang.Object[] { '4', strComparator20, strComparator23, 0.0d };
        generator15.setArrays(objArray30);
        java.lang.ClassLoader classLoader32 = null;
        generator15.setClassLoader(classLoader32);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader35 = null;
        generator34.setClassLoader(classLoader35);
        java.lang.ClassLoader classLoader37 = null;
        generator34.setClassLoader(classLoader37);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator34.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator42.setUseCache(true);
        boolean boolean45 = generator42.getAttemptLoad();
        boolean boolean46 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator42.getStrategy();
        generator41.setStrategy(generatorStrategy47);
        generator15.setStrategy(generatorStrategy47);
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader52 = generator15.getClassLoader();
        generator0.setClassLoader(classLoader52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor55 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(generatorStrategy54);
    }

    @Test
    public void test2081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2081");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator6.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        java.lang.ClassLoader classLoader13 = generator10.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator14.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator14.getStrategy();
        generator10.setStrategy(generatorStrategy17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator10.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator10.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy20);
        generator0.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader24 = null;
        generator23.setClassLoader(classLoader24);
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = strComparator27.thenComparing(strComparator28);
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = strComparator30.thenComparing(strComparator31);
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = strComparator33.thenComparing(strComparator34);
        boolean boolean36 = strComparator31.equals((java.lang.Object) strComparator35);
        java.lang.Object[] objArray38 = new java.lang.Object[] { '4', strComparator28, strComparator31, 0.0d };
        generator23.setArrays(objArray38);
        java.lang.ClassLoader classLoader40 = null;
        generator23.setClassLoader(classLoader40);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        generator23.setNamingPolicy(namingPolicy47);
        boolean boolean49 = generator23.getUseCache();
        java.lang.ClassLoader classLoader50 = generator23.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator23.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator52.setUseCache(true);
        boolean boolean55 = generator52.getAttemptLoad();
        boolean boolean56 = generator52.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator52.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator58.setUseCache(true);
        boolean boolean61 = generator58.getAttemptLoad();
        boolean boolean62 = generator58.getUseCache();
        generator58.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator65.getStrategy();
        generator58.setStrategy(generatorStrategy66);
        org.mockito.cglib.util.ParallelSorter.Generator generator68 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator68.setUseCache(true);
        java.lang.ClassLoader classLoader71 = generator68.getClassLoader();
        generator58.setClassLoader(classLoader71);
        generator52.setClassLoader(classLoader71);
        java.lang.ClassLoader classLoader74 = generator52.getClassLoader();
        generator23.setClassLoader(classLoader74);
        java.lang.ClassLoader classLoader76 = generator23.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator23.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy77);
        generator0.setUseCache(true);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(namingPolicy77);
    }

    @Test
    public void test2082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2082");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator17.setUseCache(true);
        boolean boolean20 = generator17.getAttemptLoad();
        boolean boolean21 = generator17.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator17.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator17.getNamingPolicy();
        java.lang.ClassLoader classLoader24 = generator17.getClassLoader();
        generator0.setClassLoader(classLoader24);
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator0.getStrategy();
        boolean boolean28 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test2083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2083");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator7.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader23 = null;
        generator22.setClassLoader(classLoader23);
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = strComparator26.thenComparing(strComparator27);
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = strComparator29.thenComparing(strComparator30);
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = strComparator32.thenComparing(strComparator33);
        boolean boolean35 = strComparator30.equals((java.lang.Object) strComparator34);
        java.lang.Object[] objArray37 = new java.lang.Object[] { '4', strComparator27, strComparator30, 0.0d };
        generator22.setArrays(objArray37);
        generator7.setArrays(objArray37);
        generator0.setArrays(objArray37);
        boolean boolean41 = generator0.getAttemptLoad();
        boolean boolean42 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test2084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2084");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        boolean boolean7 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader10 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator14.setUseCache(true);
        boolean boolean17 = generator14.getAttemptLoad();
        boolean boolean18 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator14.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        boolean boolean24 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator20.getStrategy();
        generator14.setStrategy(generatorStrategy25);
        generator0.setStrategy(generatorStrategy25);
        boolean boolean28 = generator0.getUseCache();
        boolean boolean29 = generator0.getUseCache();
        boolean boolean30 = generator0.getAttemptLoad();
        boolean boolean31 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test2085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2085");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        boolean boolean28 = strComparator23.equals((java.lang.Object) strComparator27);
        java.lang.Object[] objArray30 = new java.lang.Object[] { '4', strComparator20, strComparator23, 0.0d };
        generator15.setArrays(objArray30);
        generator0.setArrays(objArray30);
        java.lang.ClassLoader classLoader33 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator34.setUseCache(true);
        boolean boolean37 = generator34.getAttemptLoad();
        java.lang.ClassLoader classLoader38 = null;
        generator34.setClassLoader(classLoader38);
        generator34.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator34.getNamingPolicy();
        generator34.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator45.setUseCache(true);
        boolean boolean48 = generator45.getAttemptLoad();
        boolean boolean49 = generator45.getUseCache();
        generator45.setAttemptLoad(true);
        generator45.setUseCache(true);
        generator45.setAttemptLoad(true);
        generator45.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator45.getStrategy();
        java.lang.ClassLoader classLoader59 = generator45.getClassLoader();
        generator34.setClassLoader(classLoader59);
        generator0.setClassLoader(classLoader59);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator64 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader65 = null;
        generator64.setClassLoader(classLoader65);
        java.lang.ClassLoader classLoader67 = null;
        generator64.setClassLoader(classLoader67);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator64.getNamingPolicy();
        generator63.setNamingPolicy(namingPolicy69);
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator63.getNamingPolicy();
        boolean boolean72 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = null;
        generator63.setStrategy(generatorStrategy73);
        org.mockito.cglib.util.ParallelSorter.Generator generator75 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator76 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator76.setUseCache(true);
        boolean boolean79 = generator76.getAttemptLoad();
        boolean boolean80 = generator76.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator76.getStrategy();
        generator75.setStrategy(generatorStrategy81);
        boolean boolean83 = generator75.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator75.getNamingPolicy();
        java.lang.ClassLoader classLoader85 = generator75.getClassLoader();
        generator63.setClassLoader(classLoader85);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator63.getStrategy();
        generator0.setStrategy(generatorStrategy87);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = generator0.getStrategy();
        java.lang.ClassLoader classLoader90 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertNotNull(classLoader85);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertNotNull(generatorStrategy89);
        org.junit.Assert.assertNotNull(classLoader90);
    }

    @Test
    public void test2086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2086");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass16 = generatorStrategy15.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test2087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2087");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        boolean boolean19 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        boolean boolean24 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator20.getStrategy();
        generator0.setStrategy(generatorStrategy25);
        boolean boolean27 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader29 = generator0.getClassLoader();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(classLoader29);
    }

    @Test
    public void test2088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2088");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = strComparator0.reversed();
        java.util.Comparator<java.lang.String> strComparator4 = strComparator3.reversed();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator7 = strComparator5.thenComparing(strComparator6);
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator10 = strComparator8.thenComparing(strComparator9);
        java.util.Comparator<java.lang.String> strComparator11 = strComparator7.thenComparing(strComparator8);
        boolean boolean13 = strComparator8.equals((java.lang.Object) "");
        java.util.Comparator<java.lang.String> strComparator14 = strComparator8.reversed();
        java.util.Comparator<java.lang.String> strComparator15 = strComparator3.thenComparing(strComparator14);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        java.util.Comparator<java.lang.String> strComparator19 = strComparator16.reversed();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator19.reversed();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator15.thenComparing(strComparator20);
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator26.setUseCache(true);
        boolean boolean29 = generator26.getAttemptLoad();
        boolean boolean30 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator26.getStrategy();
        generator25.setStrategy(generatorStrategy31);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator33.setUseCache(true);
        boolean boolean36 = generator33.getAttemptLoad();
        boolean boolean37 = generator33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator33.getStrategy();
        generator25.setStrategy(generatorStrategy38);
        generator22.setStrategy(generatorStrategy38);
        boolean boolean41 = generator22.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator43.setUseCache(true);
        boolean boolean46 = generator43.getAttemptLoad();
        boolean boolean47 = generator43.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator43.getStrategy();
        generator42.setStrategy(generatorStrategy48);
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator50.setUseCache(true);
        boolean boolean53 = generator50.getAttemptLoad();
        boolean boolean54 = generator50.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator50.getStrategy();
        generator42.setStrategy(generatorStrategy55);
        generator42.setAttemptLoad(false);
        boolean boolean59 = generator42.getUseCache();
        java.lang.ClassLoader classLoader60 = generator42.getClassLoader();
        generator22.setClassLoader(classLoader60);
        boolean boolean62 = strComparator15.equals((java.lang.Object) generator22);
        boolean boolean63 = generator22.getUseCache();
        java.lang.ClassLoader classLoader64 = generator22.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator66 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator66.setUseCache(true);
        boolean boolean69 = generator66.getAttemptLoad();
        boolean boolean70 = generator66.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator66.getStrategy();
        generator65.setStrategy(generatorStrategy71);
        org.mockito.cglib.util.ParallelSorter.Generator generator73 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator73.setUseCache(true);
        boolean boolean76 = generator73.getAttemptLoad();
        boolean boolean77 = generator73.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator73.getStrategy();
        generator65.setStrategy(generatorStrategy78);
        generator65.setAttemptLoad(false);
        boolean boolean82 = generator65.getUseCache();
        java.lang.ClassLoader classLoader83 = generator65.getClassLoader();
        boolean boolean84 = generator65.getUseCache();
        boolean boolean85 = generator65.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = generator65.getStrategy();
        java.lang.ClassLoader classLoader87 = generator65.getClassLoader();
        generator22.setClassLoader(classLoader87);
        generator22.setAttemptLoad(true);
        boolean boolean91 = generator22.getAttemptLoad();
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(generatorStrategy86);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test2089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2089");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        boolean boolean8 = generator0.getUseCache();
        boolean boolean9 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        generator12.setUseCache(true);
        generator12.setAttemptLoad(true);
        boolean boolean23 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator12.getNamingPolicy();
        generator12.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = strComparator31.thenComparing(strComparator32);
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = strComparator34.thenComparing(strComparator35);
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = strComparator37.thenComparing(strComparator38);
        boolean boolean40 = strComparator35.equals((java.lang.Object) strComparator39);
        java.lang.Object[] objArray42 = new java.lang.Object[] { '4', strComparator32, strComparator35, 0.0d };
        generator27.setArrays(objArray42);
        java.lang.ClassLoader classLoader44 = null;
        generator27.setClassLoader(classLoader44);
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader47 = null;
        generator46.setClassLoader(classLoader47);
        java.lang.ClassLoader classLoader49 = null;
        generator46.setClassLoader(classLoader49);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator46.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator54.setUseCache(true);
        boolean boolean57 = generator54.getAttemptLoad();
        boolean boolean58 = generator54.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator54.getStrategy();
        generator53.setStrategy(generatorStrategy59);
        generator27.setStrategy(generatorStrategy59);
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader64 = generator27.getClassLoader();
        generator12.setClassLoader(classLoader64);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy66);
        boolean boolean68 = generator0.getUseCache();
        boolean boolean69 = generator0.getUseCache();
        boolean boolean70 = generator0.getUseCache();
        boolean boolean71 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test2090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2090");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator3.setUseCache(true);
        boolean boolean6 = generator3.getAttemptLoad();
        boolean boolean7 = generator3.getUseCache();
        generator3.setAttemptLoad(true);
        generator3.setUseCache(true);
        boolean boolean12 = strComparator0.equals((java.lang.Object) generator3);
        generator3.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator15.getStrategy();
        generator15.setUseCache(true);
        generator15.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator15.getNamingPolicy();
        generator3.setNamingPolicy(namingPolicy21);
        generator3.setAttemptLoad(false);
        generator3.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean28 = generator27.getAttemptLoad();
        java.lang.ClassLoader classLoader29 = generator27.getClassLoader();
        generator27.setUseCache(false);
        generator27.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator27.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        boolean boolean39 = generator35.getUseCache();
        generator35.setAttemptLoad(true);
        generator35.setUseCache(true);
        generator35.setAttemptLoad(true);
        generator35.setUseCache(false);
        boolean boolean48 = generator35.getUseCache();
        boolean boolean49 = generator35.getAttemptLoad();
        boolean boolean50 = generator35.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator51.getStrategy();
        generator51.setUseCache(true);
        boolean boolean55 = generator51.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator56.setUseCache(true);
        boolean boolean59 = generator56.getAttemptLoad();
        boolean boolean60 = generator56.getUseCache();
        generator56.setAttemptLoad(true);
        generator56.setUseCache(true);
        generator56.setAttemptLoad(true);
        generator56.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator69 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader70 = null;
        generator69.setClassLoader(classLoader70);
        java.lang.ClassLoader classLoader72 = null;
        generator69.setClassLoader(classLoader72);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator69.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator69.getNamingPolicy();
        generator56.setNamingPolicy(namingPolicy75);
        generator51.setNamingPolicy(namingPolicy75);
        generator35.setNamingPolicy(namingPolicy75);
        generator27.setNamingPolicy(namingPolicy75);
        generator3.setNamingPolicy(namingPolicy75);
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(namingPolicy75);
    }

    @Test
    public void test2091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2091");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader11 = null;
        generator10.setClassLoader(classLoader11);
        java.lang.ClassLoader classLoader13 = null;
        generator10.setClassLoader(classLoader13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator10.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator9.getNamingPolicy();
        generator9.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        boolean boolean24 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator20.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.lang.ClassLoader classLoader30 = null;
        generator27.setClassLoader(classLoader30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy32);
        boolean boolean34 = generator26.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader36 = null;
        generator35.setClassLoader(classLoader36);
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = strComparator39.thenComparing(strComparator40);
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = strComparator42.thenComparing(strComparator43);
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = strComparator45.thenComparing(strComparator46);
        boolean boolean48 = strComparator43.equals((java.lang.Object) strComparator47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { '4', strComparator40, strComparator43, 0.0d };
        generator35.setArrays(objArray50);
        generator26.setArrays(objArray50);
        generator20.setArrays(objArray50);
        generator9.setArrays(objArray50);
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator55.setUseCache(true);
        java.lang.ClassLoader classLoader58 = generator55.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader60 = null;
        generator59.setClassLoader(classLoader60);
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = strComparator63.thenComparing(strComparator64);
        java.util.Comparator<java.lang.String> strComparator66 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator67 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator68 = strComparator66.thenComparing(strComparator67);
        java.util.Comparator<java.lang.String> strComparator69 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator70 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator71 = strComparator69.thenComparing(strComparator70);
        boolean boolean72 = strComparator67.equals((java.lang.Object) strComparator71);
        java.lang.Object[] objArray74 = new java.lang.Object[] { '4', strComparator64, strComparator67, 0.0d };
        generator59.setArrays(objArray74);
        org.mockito.cglib.util.ParallelSorter.Generator generator76 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader77 = null;
        generator76.setClassLoader(classLoader77);
        java.lang.ClassLoader classLoader79 = null;
        generator76.setClassLoader(classLoader79);
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator76.getNamingPolicy();
        generator59.setNamingPolicy(namingPolicy81);
        generator55.setNamingPolicy(namingPolicy81);
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator55.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy84);
        generator0.setNamingPolicy(namingPolicy84);
        java.lang.ClassLoader classLoader87 = generator0.getClassLoader();
        boolean boolean88 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter89 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test2092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2092");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator5.setUseCache(true);
        boolean boolean8 = generator5.getAttemptLoad();
        boolean boolean9 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator5.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator5.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator5.getStrategy();
        generator0.setStrategy(generatorStrategy12);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator14.setUseCache(true);
        boolean boolean17 = generator14.getAttemptLoad();
        boolean boolean18 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator14.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        boolean boolean24 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator20.getStrategy();
        generator14.setStrategy(generatorStrategy25);
        java.lang.ClassLoader classLoader27 = generator14.getClassLoader();
        generator14.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator30.setUseCache(true);
        boolean boolean33 = generator30.getAttemptLoad();
        boolean boolean34 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator30.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator36.setUseCache(true);
        boolean boolean39 = generator36.getAttemptLoad();
        boolean boolean40 = generator36.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator36.getStrategy();
        generator30.setStrategy(generatorStrategy41);
        java.lang.ClassLoader classLoader43 = generator30.getClassLoader();
        generator14.setClassLoader(classLoader43);
        generator0.setClassLoader(classLoader43);
        boolean boolean46 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test2093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2093");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader8 = null;
        generator7.setClassLoader(classLoader8);
        java.lang.ClassLoader classLoader10 = null;
        generator7.setClassLoader(classLoader10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        boolean boolean27 = strComparator22.equals((java.lang.Object) strComparator26);
        java.lang.Object[] objArray29 = new java.lang.Object[] { '4', strComparator19, strComparator22, 0.0d };
        generator14.setArrays(objArray29);
        java.lang.ClassLoader classLoader31 = null;
        generator14.setClassLoader(classLoader31);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        generator40.setStrategy(generatorStrategy46);
        generator14.setStrategy(generatorStrategy46);
        generator6.setStrategy(generatorStrategy46);
        generator0.setStrategy(generatorStrategy46);
        generator0.setAttemptLoad(true);
        boolean boolean53 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test2094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2094");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        boolean boolean6 = generator0.getUseCache();
        boolean boolean7 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator12.getStrategy();
        generator11.setStrategy(generatorStrategy17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        boolean boolean23 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator19.getStrategy();
        generator11.setStrategy(generatorStrategy24);
        generator8.setStrategy(generatorStrategy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean28 = generator27.getAttemptLoad();
        java.lang.ClassLoader classLoader29 = generator27.getClassLoader();
        generator8.setClassLoader(classLoader29);
        generator0.setClassLoader(classLoader29);
        java.lang.ClassLoader classLoader32 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(generatorStrategy35);
    }

    @Test
    public void test2095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2095");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass10 = generatorStrategy9.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2096");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        boolean boolean19 = generator16.getAttemptLoad();
        boolean boolean20 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator16.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator22.getStrategy();
        generator16.setStrategy(generatorStrategy27);
        java.lang.ClassLoader classLoader29 = generator16.getClassLoader();
        generator0.setClassLoader(classLoader29);
        boolean boolean31 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator0.getStrategy();
        java.lang.ClassLoader classLoader35 = generator0.getClassLoader();
        boolean boolean36 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        boolean boolean38 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test2097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2097");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getUseCache();
        java.lang.ClassLoader classLoader6 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator7.getStrategy();
        generator7.setUseCache(true);
        boolean boolean11 = generator7.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        generator12.setUseCache(true);
        generator12.setAttemptLoad(true);
        generator12.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader26 = null;
        generator25.setClassLoader(classLoader26);
        java.lang.ClassLoader classLoader28 = null;
        generator25.setClassLoader(classLoader28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator25.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator25.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy31);
        generator7.setNamingPolicy(namingPolicy31);
        generator0.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(namingPolicy36);
    }

    @Test
    public void test2098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2098");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        boolean boolean19 = generator16.getAttemptLoad();
        boolean boolean20 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator16.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator22.getStrategy();
        generator16.setStrategy(generatorStrategy27);
        java.lang.ClassLoader classLoader29 = generator16.getClassLoader();
        generator0.setClassLoader(classLoader29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor34 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(generatorStrategy31);
    }

    @Test
    public void test2099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2099");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator6.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator19.getStrategy();
        generator12.setStrategy(generatorStrategy20);
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        java.lang.ClassLoader classLoader25 = generator22.getClassLoader();
        generator12.setClassLoader(classLoader25);
        generator6.setClassLoader(classLoader25);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader30 = null;
        generator29.setClassLoader(classLoader30);
        java.lang.ClassLoader classLoader32 = null;
        generator29.setClassLoader(classLoader32);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        generator28.setNamingPolicy(namingPolicy34);
        boolean boolean36 = generator28.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator28.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator38.setUseCache(true);
        boolean boolean41 = generator38.getAttemptLoad();
        boolean boolean42 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator38.getStrategy();
        generator28.setStrategy(generatorStrategy43);
        generator6.setStrategy(generatorStrategy43);
        boolean boolean46 = generator6.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator47.setUseCache(true);
        boolean boolean50 = generator47.getAttemptLoad();
        boolean boolean51 = generator47.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator47.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator47.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator55.setUseCache(true);
        boolean boolean58 = generator55.getAttemptLoad();
        boolean boolean59 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator55.getStrategy();
        generator54.setStrategy(generatorStrategy60);
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator62.setUseCache(true);
        boolean boolean65 = generator62.getAttemptLoad();
        boolean boolean66 = generator62.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator62.getStrategy();
        generator54.setStrategy(generatorStrategy67);
        org.mockito.cglib.util.ParallelSorter.Generator generator69 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader70 = null;
        generator69.setClassLoader(classLoader70);
        java.util.Comparator<java.lang.String> strComparator73 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator74 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator75 = strComparator73.thenComparing(strComparator74);
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator78 = strComparator76.thenComparing(strComparator77);
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator81 = strComparator79.thenComparing(strComparator80);
        boolean boolean82 = strComparator77.equals((java.lang.Object) strComparator81);
        java.lang.Object[] objArray84 = new java.lang.Object[] { '4', strComparator74, strComparator77, 0.0d };
        generator69.setArrays(objArray84);
        generator54.setArrays(objArray84);
        generator47.setArrays(objArray84);
        generator6.setArrays(objArray84);
        generator0.setArrays(objArray84);
        java.lang.ClassLoader classLoader90 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader90);
    }

    @Test
    public void test2100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2100");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        generator0.setAttemptLoad(false);
        boolean boolean17 = generator0.getUseCache();
        java.lang.ClassLoader classLoader18 = generator0.getClassLoader();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        java.lang.ClassLoader classLoader31 = null;
        generator28.setClassLoader(classLoader31);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator28.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy33);
        boolean boolean35 = generator27.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader37 = null;
        generator36.setClassLoader(classLoader37);
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = strComparator40.thenComparing(strComparator41);
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = strComparator43.thenComparing(strComparator44);
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = strComparator46.thenComparing(strComparator47);
        boolean boolean49 = strComparator44.equals((java.lang.Object) strComparator48);
        java.lang.Object[] objArray51 = new java.lang.Object[] { '4', strComparator41, strComparator44, 0.0d };
        generator36.setArrays(objArray51);
        generator27.setArrays(objArray51);
        generator21.setArrays(objArray51);
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader56 = null;
        generator55.setClassLoader(classLoader56);
        java.lang.ClassLoader classLoader58 = generator55.getClassLoader();
        generator21.setClassLoader(classLoader58);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator21.getStrategy();
        generator0.setStrategy(generatorStrategy60);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader66 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor67 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(classLoader66);
    }

    @Test
    public void test2101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2101");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
    }

    @Test
    public void test2102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2102");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = strComparator3.thenComparing(strComparator4);
        java.util.Comparator<java.lang.String> strComparator6 = strComparator2.thenComparing(strComparator3);
        boolean boolean8 = strComparator3.equals((java.lang.Object) "");
        java.util.Comparator<java.lang.String> strComparator9 = strComparator3.reversed();
        int int12 = strComparator3.compare("hi!", "hi!");
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = strComparator14.thenComparing(strComparator15);
        java.util.Comparator<java.lang.String> strComparator17 = strComparator14.reversed();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator17.reversed();
        java.util.Comparator<java.lang.String> strComparator19 = strComparator17.reversed();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator13.thenComparing(strComparator17);
        java.util.Comparator<java.lang.String> strComparator21 = strComparator3.thenComparing(strComparator13);
        java.util.Comparator<java.lang.String> strComparator22 = strComparator3.reversed();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator3.reversed();
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
    }

    @Test
    public void test2103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2103");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        java.lang.ClassLoader classLoader13 = generator10.getClassLoader();
        generator0.setClassLoader(classLoader13);
        generator0.setUseCache(false);
        java.lang.Object[] objArray17 = null;
        generator0.setArrays(objArray17);
        boolean boolean19 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        boolean boolean24 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator20.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator20.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator28.setUseCache(true);
        boolean boolean31 = generator28.getAttemptLoad();
        boolean boolean32 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator28.getStrategy();
        generator27.setStrategy(generatorStrategy33);
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        boolean boolean39 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator35.getStrategy();
        generator27.setStrategy(generatorStrategy40);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = strComparator46.thenComparing(strComparator47);
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = strComparator49.thenComparing(strComparator50);
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = strComparator52.thenComparing(strComparator53);
        boolean boolean55 = strComparator50.equals((java.lang.Object) strComparator54);
        java.lang.Object[] objArray57 = new java.lang.Object[] { '4', strComparator47, strComparator50, 0.0d };
        generator42.setArrays(objArray57);
        generator27.setArrays(objArray57);
        generator20.setArrays(objArray57);
        generator0.setArrays(objArray57);
        java.lang.Class<?> wildcardClass62 = objArray57.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test2104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2104");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
    }

    @Test
    public void test2105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2105");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        java.lang.ClassLoader classLoader10 = generator0.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter11 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(classLoader10);
    }

    @Test
    public void test2106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2106");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator5.setUseCache(true);
        boolean boolean8 = generator5.getAttemptLoad();
        boolean boolean9 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator5.getStrategy();
        generator4.setStrategy(generatorStrategy10);
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator12.getStrategy();
        generator4.setStrategy(generatorStrategy17);
        generator4.setAttemptLoad(false);
        boolean boolean21 = generator4.getUseCache();
        java.lang.ClassLoader classLoader22 = generator4.getClassLoader();
        boolean boolean23 = generator4.getUseCache();
        boolean boolean24 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator4.getStrategy();
        java.lang.ClassLoader classLoader26 = generator4.getClassLoader();
        generator0.setClassLoader(classLoader26);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator28.setUseCache(true);
        boolean boolean31 = generator28.getAttemptLoad();
        boolean boolean32 = generator28.getUseCache();
        generator28.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator28.getNamingPolicy();
        boolean boolean36 = generator28.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader39 = null;
        generator38.setClassLoader(classLoader39);
        java.lang.ClassLoader classLoader41 = null;
        generator38.setClassLoader(classLoader41);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator38.getNamingPolicy();
        generator37.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader46 = null;
        generator45.setClassLoader(classLoader46);
        java.lang.ClassLoader classLoader48 = null;
        generator45.setClassLoader(classLoader48);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator45.getNamingPolicy();
        generator37.setNamingPolicy(namingPolicy50);
        java.lang.ClassLoader classLoader52 = generator37.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator53.setUseCache(true);
        boolean boolean56 = generator53.getAttemptLoad();
        boolean boolean57 = generator53.getUseCache();
        generator53.setAttemptLoad(true);
        generator53.setUseCache(true);
        generator53.setUseCache(false);
        boolean boolean64 = generator53.getUseCache();
        java.lang.ClassLoader classLoader65 = generator53.getClassLoader();
        generator37.setClassLoader(classLoader65);
        boolean boolean67 = generator37.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator37.getStrategy();
        generator28.setStrategy(generatorStrategy68);
        generator0.setStrategy(generatorStrategy68);
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass72 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test2107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2107");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(namingPolicy4);
    }

    @Test
    public void test2108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2108");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator9.setUseCache(true);
        boolean boolean12 = generator9.getAttemptLoad();
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator16.getStrategy();
        generator9.setStrategy(generatorStrategy17);
        generator0.setStrategy(generatorStrategy17);
        java.lang.ClassLoader classLoader20 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader23 = null;
        generator22.setClassLoader(classLoader23);
        java.lang.ClassLoader classLoader25 = null;
        generator22.setClassLoader(classLoader25);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator22.getNamingPolicy();
        generator21.setNamingPolicy(namingPolicy27);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator21.getNamingPolicy();
        generator21.setUseCache(false);
        boolean boolean32 = generator21.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator21.getNamingPolicy();
        generator21.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator21.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy36);
        boolean boolean38 = generator0.getUseCache();
        boolean boolean39 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test2109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2109");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader5 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean8 = generator7.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator7.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader12 = null;
        generator11.setClassLoader(classLoader12);
        java.lang.ClassLoader classLoader14 = null;
        generator11.setClassLoader(classLoader14);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator11.getNamingPolicy();
        generator10.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        java.lang.ClassLoader classLoader21 = null;
        generator18.setClassLoader(classLoader21);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator18.getNamingPolicy();
        generator10.setNamingPolicy(namingPolicy23);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator25.setUseCache(true);
        java.lang.ClassLoader classLoader28 = generator25.getClassLoader();
        generator10.setClassLoader(classLoader28);
        generator7.setClassLoader(classLoader28);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator34.setUseCache(true);
        boolean boolean37 = generator34.getAttemptLoad();
        boolean boolean38 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator34.getStrategy();
        generator33.setStrategy(generatorStrategy39);
        boolean boolean41 = generator33.getAttemptLoad();
        generator33.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader46 = null;
        generator45.setClassLoader(classLoader46);
        java.lang.ClassLoader classLoader48 = null;
        generator45.setClassLoader(classLoader48);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator45.getNamingPolicy();
        generator44.setNamingPolicy(namingPolicy50);
        boolean boolean52 = generator44.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader54 = null;
        generator53.setClassLoader(classLoader54);
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = strComparator57.thenComparing(strComparator58);
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = strComparator60.thenComparing(strComparator61);
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = strComparator63.thenComparing(strComparator64);
        boolean boolean66 = strComparator61.equals((java.lang.Object) strComparator65);
        java.lang.Object[] objArray68 = new java.lang.Object[] { '4', strComparator58, strComparator61, 0.0d };
        generator53.setArrays(objArray68);
        generator44.setArrays(objArray68);
        boolean boolean71 = generator44.getAttemptLoad();
        java.lang.Object[] objArray72 = new java.lang.Object[] { generator44 };
        generator33.setArrays(objArray72);
        generator7.setArrays(objArray72);
        generator0.setArrays(objArray72);
        org.mockito.cglib.util.ParallelSorter.Generator generator76 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean77 = generator76.getAttemptLoad();
        generator76.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator76.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy80);
        boolean boolean82 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test2110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2110");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        java.lang.ClassLoader classLoader18 = generator15.getClassLoader();
        generator0.setClassLoader(classLoader18);
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        java.lang.ClassLoader classLoader24 = null;
        generator20.setClassLoader(classLoader24);
        generator20.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator20.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader30 = null;
        generator29.setClassLoader(classLoader30);
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = strComparator33.thenComparing(strComparator34);
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = strComparator36.thenComparing(strComparator37);
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = strComparator39.thenComparing(strComparator40);
        boolean boolean42 = strComparator37.equals((java.lang.Object) strComparator41);
        java.lang.Object[] objArray44 = new java.lang.Object[] { '4', strComparator34, strComparator37, 0.0d };
        generator29.setArrays(objArray44);
        java.lang.ClassLoader classLoader46 = generator29.getClassLoader();
        generator20.setClassLoader(classLoader46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator20.getStrategy();
        generator0.setStrategy(generatorStrategy48);
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor54 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(generatorStrategy48);
    }

    @Test
    public void test2111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2111");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        generator6.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator13.getStrategy();
        generator6.setStrategy(generatorStrategy14);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        java.lang.ClassLoader classLoader19 = generator16.getClassLoader();
        generator6.setClassLoader(classLoader19);
        generator0.setClassLoader(classLoader19);
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader24 = null;
        generator23.setClassLoader(classLoader24);
        java.lang.ClassLoader classLoader26 = null;
        generator23.setClassLoader(classLoader26);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator23.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy28);
        boolean boolean30 = generator22.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator22.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator32.setUseCache(true);
        boolean boolean35 = generator32.getAttemptLoad();
        boolean boolean36 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator32.getStrategy();
        generator22.setStrategy(generatorStrategy37);
        generator0.setStrategy(generatorStrategy37);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = strComparator46.thenComparing(strComparator47);
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = strComparator49.thenComparing(strComparator50);
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = strComparator52.thenComparing(strComparator53);
        boolean boolean55 = strComparator50.equals((java.lang.Object) strComparator54);
        java.lang.Object[] objArray57 = new java.lang.Object[] { '4', strComparator47, strComparator50, 0.0d };
        generator42.setArrays(objArray57);
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator59.setUseCache(true);
        boolean boolean62 = generator59.getAttemptLoad();
        boolean boolean63 = generator59.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator59.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator59.getNamingPolicy();
        java.lang.ClassLoader classLoader66 = generator59.getClassLoader();
        generator42.setClassLoader(classLoader66);
        java.lang.ClassLoader classLoader68 = generator42.getClassLoader();
        generator0.setClassLoader(classLoader68);
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator72 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator73 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator73.setUseCache(true);
        boolean boolean76 = generator73.getAttemptLoad();
        boolean boolean77 = generator73.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator73.getStrategy();
        generator72.setStrategy(generatorStrategy78);
        org.mockito.cglib.util.ParallelSorter.Generator generator80 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator80.setUseCache(true);
        boolean boolean83 = generator80.getAttemptLoad();
        boolean boolean84 = generator80.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator80.getStrategy();
        generator72.setStrategy(generatorStrategy85);
        generator72.setAttemptLoad(false);
        boolean boolean89 = generator72.getUseCache();
        java.lang.ClassLoader classLoader90 = generator72.getClassLoader();
        generator0.setClassLoader(classLoader90);
        org.mockito.asm.ClassVisitor classVisitor92 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(classLoader90);
    }

    @Test
    public void test2112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2112");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        java.lang.ClassLoader classLoader15 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator18.setUseCache(true);
        boolean boolean21 = generator18.getAttemptLoad();
        boolean boolean22 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator18.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator18.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator18.getStrategy();
        generator0.setStrategy(generatorStrategy25);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader28 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator30.setUseCache(true);
        boolean boolean33 = generator30.getAttemptLoad();
        boolean boolean34 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator30.getStrategy();
        generator29.setStrategy(generatorStrategy35);
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator37.setUseCache(true);
        boolean boolean40 = generator37.getAttemptLoad();
        boolean boolean41 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator37.getStrategy();
        generator29.setStrategy(generatorStrategy42);
        java.lang.ClassLoader classLoader44 = generator29.getClassLoader();
        generator0.setClassLoader(classLoader44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass47 = generatorStrategy46.getClass();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test2113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2113");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator7.setUseCache(true);
        boolean boolean10 = generator7.getAttemptLoad();
        boolean boolean11 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator7.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator13.setUseCache(true);
        boolean boolean16 = generator13.getAttemptLoad();
        boolean boolean17 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator13.getStrategy();
        generator7.setStrategy(generatorStrategy18);
        java.lang.ClassLoader classLoader20 = generator7.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator7.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator7.getStrategy();
        generator7.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader26 = null;
        generator25.setClassLoader(classLoader26);
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = strComparator29.thenComparing(strComparator30);
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = strComparator32.thenComparing(strComparator33);
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = strComparator35.thenComparing(strComparator36);
        boolean boolean38 = strComparator33.equals((java.lang.Object) strComparator37);
        java.lang.Object[] objArray40 = new java.lang.Object[] { '4', strComparator30, strComparator33, 0.0d };
        generator25.setArrays(objArray40);
        java.lang.ClassLoader classLoader42 = null;
        generator25.setClassLoader(classLoader42);
        boolean boolean44 = generator25.getAttemptLoad();
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = strComparator45.thenComparing(strComparator46);
        java.util.Comparator<java.lang.String> strComparator48 = strComparator45.reversed();
        java.util.Comparator<java.lang.String> strComparator49 = strComparator48.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader52 = null;
        generator51.setClassLoader(classLoader52);
        java.lang.ClassLoader classLoader54 = null;
        generator51.setClassLoader(classLoader54);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator51.getNamingPolicy();
        generator50.setNamingPolicy(namingPolicy56);
        boolean boolean58 = strComparator48.equals((java.lang.Object) generator50);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator50.getStrategy();
        generator25.setStrategy(generatorStrategy59);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator25.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator62.setUseCache(true);
        boolean boolean65 = generator62.getAttemptLoad();
        boolean boolean66 = generator62.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator62.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator68 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator69 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader70 = null;
        generator69.setClassLoader(classLoader70);
        java.lang.ClassLoader classLoader72 = null;
        generator69.setClassLoader(classLoader72);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator69.getNamingPolicy();
        generator68.setNamingPolicy(namingPolicy74);
        boolean boolean76 = generator68.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator77 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader78 = null;
        generator77.setClassLoader(classLoader78);
        java.util.Comparator<java.lang.String> strComparator81 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator82 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator83 = strComparator81.thenComparing(strComparator82);
        java.util.Comparator<java.lang.String> strComparator84 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator85 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator86 = strComparator84.thenComparing(strComparator85);
        java.util.Comparator<java.lang.String> strComparator87 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator88 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator89 = strComparator87.thenComparing(strComparator88);
        boolean boolean90 = strComparator85.equals((java.lang.Object) strComparator89);
        java.lang.Object[] objArray92 = new java.lang.Object[] { '4', strComparator82, strComparator85, 0.0d };
        generator77.setArrays(objArray92);
        generator68.setArrays(objArray92);
        generator62.setArrays(objArray92);
        generator25.setArrays(objArray92);
        org.mockito.cglib.core.NamingPolicy namingPolicy97 = generator25.getNamingPolicy();
        generator7.setNamingPolicy(namingPolicy97);
        generator0.setNamingPolicy(namingPolicy97);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertNotNull(strComparator84);
        org.junit.Assert.assertNotNull(strComparator85);
        org.junit.Assert.assertNotNull(strComparator86);
        org.junit.Assert.assertNotNull(strComparator87);
        org.junit.Assert.assertNotNull(strComparator88);
        org.junit.Assert.assertNotNull(strComparator89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy97);
    }

    @Test
    public void test2114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2114");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader8 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(classLoader8);
    }

    @Test
    public void test2115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2115");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator9.setUseCache(true);
        boolean boolean12 = generator9.getAttemptLoad();
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator16.getStrategy();
        generator9.setStrategy(generatorStrategy17);
        generator0.setStrategy(generatorStrategy17);
        boolean boolean20 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader21 = null;
        generator0.setClassLoader(classLoader21);
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2116");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader10 = null;
        generator9.setClassLoader(classLoader10);
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = strComparator13.thenComparing(strComparator14);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        boolean boolean22 = strComparator17.equals((java.lang.Object) strComparator21);
        java.lang.Object[] objArray24 = new java.lang.Object[] { '4', strComparator14, strComparator17, 0.0d };
        generator9.setArrays(objArray24);
        java.lang.ClassLoader classLoader26 = generator9.getClassLoader();
        generator0.setClassLoader(classLoader26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator0.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator0.getNamingPolicy();
        boolean boolean32 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test2117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2117");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        boolean boolean11 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        boolean boolean28 = strComparator23.equals((java.lang.Object) strComparator27);
        java.lang.Object[] objArray30 = new java.lang.Object[] { '4', strComparator20, strComparator23, 0.0d };
        generator15.setArrays(objArray30);
        java.lang.ClassLoader classLoader32 = null;
        generator15.setClassLoader(classLoader32);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader35 = null;
        generator34.setClassLoader(classLoader35);
        java.lang.ClassLoader classLoader37 = null;
        generator34.setClassLoader(classLoader37);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator34.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator42.setUseCache(true);
        boolean boolean45 = generator42.getAttemptLoad();
        boolean boolean46 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator42.getStrategy();
        generator41.setStrategy(generatorStrategy47);
        generator15.setStrategy(generatorStrategy47);
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader52 = generator15.getClassLoader();
        generator0.setClassLoader(classLoader52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter56 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(generatorStrategy55);
    }

    @Test
    public void test2118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2118");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        boolean boolean11 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor18 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(namingPolicy13);
    }

    @Test
    public void test2119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2119");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator17.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        java.lang.ClassLoader classLoader26 = generator24.getClassLoader();
        generator24.setUseCache(false);
        generator24.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator24.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy31);
        generator0.setNamingPolicy(namingPolicy31);
        generator0.setAttemptLoad(false);
        boolean boolean36 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator37.setUseCache(true);
        boolean boolean40 = generator37.getAttemptLoad();
        boolean boolean41 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator37.getStrategy();
        boolean boolean43 = generator37.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator37.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader46 = null;
        generator45.setClassLoader(classLoader46);
        java.lang.ClassLoader classLoader48 = null;
        generator45.setClassLoader(classLoader48);
        generator45.setAttemptLoad(true);
        boolean boolean52 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader54 = generator45.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader56 = null;
        generator55.setClassLoader(classLoader56);
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader59 = null;
        generator58.setClassLoader(classLoader59);
        java.util.Comparator<java.lang.String> strComparator62 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = strComparator62.thenComparing(strComparator63);
        java.util.Comparator<java.lang.String> strComparator65 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator66 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator67 = strComparator65.thenComparing(strComparator66);
        java.util.Comparator<java.lang.String> strComparator68 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator69 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator70 = strComparator68.thenComparing(strComparator69);
        boolean boolean71 = strComparator66.equals((java.lang.Object) strComparator70);
        java.lang.Object[] objArray73 = new java.lang.Object[] { '4', strComparator63, strComparator66, 0.0d };
        generator58.setArrays(objArray73);
        generator55.setArrays(objArray73);
        generator45.setArrays(objArray73);
        generator37.setArrays(objArray73);
        generator0.setArrays(objArray73);
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertNotNull(generatorStrategy80);
    }

    @Test
    public void test2120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2120");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        generator0.setAttemptLoad(false);
        boolean boolean17 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator18.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator22.getStrategy();
        generator21.setStrategy(generatorStrategy27);
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator29.getStrategy();
        generator21.setStrategy(generatorStrategy34);
        generator18.setStrategy(generatorStrategy34);
        boolean boolean37 = generator18.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader39 = null;
        generator38.setClassLoader(classLoader39);
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = strComparator42.thenComparing(strComparator43);
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = strComparator45.thenComparing(strComparator46);
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = strComparator48.thenComparing(strComparator49);
        boolean boolean51 = strComparator46.equals((java.lang.Object) strComparator50);
        java.lang.Object[] objArray53 = new java.lang.Object[] { '4', strComparator43, strComparator46, 0.0d };
        generator38.setArrays(objArray53);
        generator18.setArrays(objArray53);
        generator0.setArrays(objArray53);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator0.getNamingPolicy();
        boolean boolean58 = generator0.getUseCache();
        generator0.setUseCache(false);
        boolean boolean61 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator62.setUseCache(true);
        boolean boolean65 = generator62.getAttemptLoad();
        java.lang.ClassLoader classLoader66 = null;
        generator62.setClassLoader(classLoader66);
        generator62.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator62.getNamingPolicy();
        generator62.setUseCache(false);
        boolean boolean73 = generator62.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator62.getStrategy();
        generator0.setStrategy(generatorStrategy74);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertNotNull(namingPolicy76);
    }

    @Test
    public void test2121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2121");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = strComparator0.reversed();
        java.util.Comparator<java.lang.String> strComparator4 = strComparator3.reversed();
        java.util.Comparator<java.lang.String> strComparator5 = strComparator3.reversed();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator5.reversed();
        int int9 = strComparator6.compare("hi!", "");
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader11 = null;
        generator10.setClassLoader(classLoader11);
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = strComparator14.thenComparing(strComparator15);
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = strComparator17.thenComparing(strComparator18);
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = strComparator20.thenComparing(strComparator21);
        boolean boolean23 = strComparator18.equals((java.lang.Object) strComparator22);
        java.lang.Object[] objArray25 = new java.lang.Object[] { '4', strComparator15, strComparator18, 0.0d };
        generator10.setArrays(objArray25);
        java.lang.ClassLoader classLoader27 = null;
        generator10.setClassLoader(classLoader27);
        boolean boolean29 = generator10.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator30.setUseCache(true);
        boolean boolean33 = generator30.getAttemptLoad();
        generator30.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader37 = null;
        generator36.setClassLoader(classLoader37);
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = strComparator40.thenComparing(strComparator41);
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = strComparator43.thenComparing(strComparator44);
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = strComparator46.thenComparing(strComparator47);
        boolean boolean49 = strComparator44.equals((java.lang.Object) strComparator48);
        java.lang.Object[] objArray51 = new java.lang.Object[] { '4', strComparator41, strComparator44, 0.0d };
        generator36.setArrays(objArray51);
        java.lang.ClassLoader classLoader53 = null;
        generator36.setClassLoader(classLoader53);
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader56 = null;
        generator55.setClassLoader(classLoader56);
        java.lang.ClassLoader classLoader58 = null;
        generator55.setClassLoader(classLoader58);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator55.getNamingPolicy();
        generator36.setNamingPolicy(namingPolicy60);
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator63.setUseCache(true);
        boolean boolean66 = generator63.getAttemptLoad();
        boolean boolean67 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator63.getStrategy();
        generator62.setStrategy(generatorStrategy68);
        generator36.setStrategy(generatorStrategy68);
        org.mockito.cglib.util.ParallelSorter.Generator generator71 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator72 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader73 = null;
        generator72.setClassLoader(classLoader73);
        java.lang.ClassLoader classLoader75 = null;
        generator72.setClassLoader(classLoader75);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator72.getNamingPolicy();
        generator71.setNamingPolicy(namingPolicy77);
        generator36.setNamingPolicy(namingPolicy77);
        generator30.setNamingPolicy(namingPolicy77);
        generator10.setNamingPolicy(namingPolicy77);
        java.lang.Class<?> wildcardClass82 = generator10.getClass();
        boolean boolean83 = strComparator6.equals((java.lang.Object) wildcardClass82);
        java.util.Comparator<java.lang.String> strComparator84 = strComparator6.reversed();
        java.util.Comparator<java.lang.String> strComparator85 = java.util.Comparator.nullsLast(strComparator6);
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(strComparator84);
        org.junit.Assert.assertNotNull(strComparator85);
    }

    @Test
    public void test2122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2122");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        boolean boolean11 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        boolean boolean28 = strComparator23.equals((java.lang.Object) strComparator27);
        java.lang.Object[] objArray30 = new java.lang.Object[] { '4', strComparator20, strComparator23, 0.0d };
        generator15.setArrays(objArray30);
        java.lang.ClassLoader classLoader32 = null;
        generator15.setClassLoader(classLoader32);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader35 = null;
        generator34.setClassLoader(classLoader35);
        java.lang.ClassLoader classLoader37 = null;
        generator34.setClassLoader(classLoader37);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator34.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator42.setUseCache(true);
        boolean boolean45 = generator42.getAttemptLoad();
        boolean boolean46 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator42.getStrategy();
        generator41.setStrategy(generatorStrategy47);
        generator15.setStrategy(generatorStrategy47);
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader52 = generator15.getClassLoader();
        generator0.setClassLoader(classLoader52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader57 = null;
        generator56.setClassLoader(classLoader57);
        java.lang.ClassLoader classLoader59 = null;
        generator56.setClassLoader(classLoader59);
        generator56.setAttemptLoad(true);
        boolean boolean63 = generator56.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator56.getNamingPolicy();
        boolean boolean65 = generator56.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator66 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader68 = null;
        generator67.setClassLoader(classLoader68);
        java.lang.ClassLoader classLoader70 = null;
        generator67.setClassLoader(classLoader70);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator67.getNamingPolicy();
        generator66.setNamingPolicy(namingPolicy72);
        boolean boolean74 = generator66.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator75 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader76 = null;
        generator75.setClassLoader(classLoader76);
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator81 = strComparator79.thenComparing(strComparator80);
        java.util.Comparator<java.lang.String> strComparator82 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator83 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator84 = strComparator82.thenComparing(strComparator83);
        java.util.Comparator<java.lang.String> strComparator85 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator86 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator87 = strComparator85.thenComparing(strComparator86);
        boolean boolean88 = strComparator83.equals((java.lang.Object) strComparator87);
        java.lang.Object[] objArray90 = new java.lang.Object[] { '4', strComparator80, strComparator83, 0.0d };
        generator75.setArrays(objArray90);
        generator66.setArrays(objArray90);
        generator56.setArrays(objArray90);
        generator0.setArrays(objArray90);
        org.mockito.asm.ClassVisitor classVisitor95 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertNotNull(strComparator84);
        org.junit.Assert.assertNotNull(strComparator85);
        org.junit.Assert.assertNotNull(strComparator86);
        org.junit.Assert.assertNotNull(strComparator87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test2123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2123");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        boolean boolean6 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader10 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(classLoader10);
    }

    @Test
    public void test2124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2124");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        boolean boolean19 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        boolean boolean24 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator20.getStrategy();
        generator0.setStrategy(generatorStrategy25);
        boolean boolean27 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        java.lang.ClassLoader classLoader31 = generator28.getClassLoader();
        generator0.setClassLoader(classLoader31);
        boolean boolean33 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter34 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test2125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2125");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        java.lang.ClassLoader classLoader18 = generator15.getClassLoader();
        generator0.setClassLoader(classLoader18);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator0.getStrategy();
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter28 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
    }

    @Test
    public void test2126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2126");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        generator8.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator13.setUseCache(true);
        boolean boolean16 = generator13.getAttemptLoad();
        boolean boolean17 = generator13.getUseCache();
        generator13.setAttemptLoad(true);
        generator13.setUseCache(true);
        generator13.setUseCache(false);
        generator13.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean27 = generator26.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator26.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader31 = null;
        generator30.setClassLoader(classLoader31);
        java.lang.ClassLoader classLoader33 = null;
        generator30.setClassLoader(classLoader33);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator30.getNamingPolicy();
        generator29.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        java.lang.ClassLoader classLoader40 = null;
        generator37.setClassLoader(classLoader40);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator37.getNamingPolicy();
        generator29.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator44.setUseCache(true);
        java.lang.ClassLoader classLoader47 = generator44.getClassLoader();
        generator29.setClassLoader(classLoader47);
        generator26.setClassLoader(classLoader47);
        generator26.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator53.setUseCache(true);
        boolean boolean56 = generator53.getAttemptLoad();
        boolean boolean57 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator53.getStrategy();
        generator52.setStrategy(generatorStrategy58);
        boolean boolean60 = generator52.getAttemptLoad();
        generator52.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator64 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader65 = null;
        generator64.setClassLoader(classLoader65);
        java.lang.ClassLoader classLoader67 = null;
        generator64.setClassLoader(classLoader67);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator64.getNamingPolicy();
        generator63.setNamingPolicy(namingPolicy69);
        boolean boolean71 = generator63.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator72 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader73 = null;
        generator72.setClassLoader(classLoader73);
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator78 = strComparator76.thenComparing(strComparator77);
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator81 = strComparator79.thenComparing(strComparator80);
        java.util.Comparator<java.lang.String> strComparator82 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator83 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator84 = strComparator82.thenComparing(strComparator83);
        boolean boolean85 = strComparator80.equals((java.lang.Object) strComparator84);
        java.lang.Object[] objArray87 = new java.lang.Object[] { '4', strComparator77, strComparator80, 0.0d };
        generator72.setArrays(objArray87);
        generator63.setArrays(objArray87);
        boolean boolean90 = generator63.getAttemptLoad();
        java.lang.Object[] objArray91 = new java.lang.Object[] { generator63 };
        generator52.setArrays(objArray91);
        generator26.setArrays(objArray91);
        generator13.setArrays(objArray91);
        generator8.setArrays(objArray91);
        generator0.setArrays(objArray91);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter97 = org.mockito.cglib.util.ParallelSorter.create(objArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.util.ParallelSorter$Generator is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertNotNull(strComparator84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(objArray91);
    }

    @Test
    public void test2127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2127");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        boolean boolean6 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator7.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator7.getStrategy();
        boolean boolean11 = generator7.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator12.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator18.setUseCache(true);
        boolean boolean21 = generator18.getAttemptLoad();
        boolean boolean22 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator18.getStrategy();
        generator12.setStrategy(generatorStrategy23);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader27 = null;
        generator26.setClassLoader(classLoader27);
        java.lang.ClassLoader classLoader29 = null;
        generator26.setClassLoader(classLoader29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator26.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator25.getNamingPolicy();
        generator25.setUseCache(false);
        boolean boolean36 = generator25.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator25.getNamingPolicy();
        generator25.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator25.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy40);
        generator7.setNamingPolicy(namingPolicy40);
        boolean boolean43 = generator7.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader45 = null;
        generator44.setClassLoader(classLoader45);
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader48 = null;
        generator47.setClassLoader(classLoader48);
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = strComparator51.thenComparing(strComparator52);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = strComparator57.thenComparing(strComparator58);
        boolean boolean60 = strComparator55.equals((java.lang.Object) strComparator59);
        java.lang.Object[] objArray62 = new java.lang.Object[] { '4', strComparator52, strComparator55, 0.0d };
        generator47.setArrays(objArray62);
        generator44.setArrays(objArray62);
        generator7.setArrays(objArray62);
        generator0.setArrays(objArray62);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor70 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy67);
    }

    @Test
    public void test2128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2128");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        boolean boolean8 = generator0.getAttemptLoad();
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator10.setStrategy(generatorStrategy16);
        boolean boolean18 = generator10.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader21 = null;
        generator20.setClassLoader(classLoader21);
        java.lang.ClassLoader classLoader23 = null;
        generator20.setClassLoader(classLoader23);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator20.getNamingPolicy();
        generator19.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.lang.ClassLoader classLoader30 = null;
        generator27.setClassLoader(classLoader30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator19.setNamingPolicy(namingPolicy32);
        generator10.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator10.getNamingPolicy();
        boolean boolean36 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator10.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator39.setUseCache(true);
        boolean boolean42 = generator39.getAttemptLoad();
        boolean boolean43 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator39.getStrategy();
        generator38.setStrategy(generatorStrategy44);
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator46.setUseCache(true);
        boolean boolean49 = generator46.getAttemptLoad();
        boolean boolean50 = generator46.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator46.getStrategy();
        generator38.setStrategy(generatorStrategy51);
        generator38.setAttemptLoad(false);
        boolean boolean55 = generator38.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator56.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator60.setUseCache(true);
        boolean boolean63 = generator60.getAttemptLoad();
        boolean boolean64 = generator60.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator60.getStrategy();
        generator59.setStrategy(generatorStrategy65);
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator67.setUseCache(true);
        boolean boolean70 = generator67.getAttemptLoad();
        boolean boolean71 = generator67.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator67.getStrategy();
        generator59.setStrategy(generatorStrategy72);
        generator56.setStrategy(generatorStrategy72);
        boolean boolean75 = generator56.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator76 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader77 = null;
        generator76.setClassLoader(classLoader77);
        java.util.Comparator<java.lang.String> strComparator80 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator81 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator82 = strComparator80.thenComparing(strComparator81);
        java.util.Comparator<java.lang.String> strComparator83 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator84 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator85 = strComparator83.thenComparing(strComparator84);
        java.util.Comparator<java.lang.String> strComparator86 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator87 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator88 = strComparator86.thenComparing(strComparator87);
        boolean boolean89 = strComparator84.equals((java.lang.Object) strComparator88);
        java.lang.Object[] objArray91 = new java.lang.Object[] { '4', strComparator81, strComparator84, 0.0d };
        generator76.setArrays(objArray91);
        generator56.setArrays(objArray91);
        generator38.setArrays(objArray91);
        generator10.setArrays(objArray91);
        generator0.setArrays(objArray91);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader99 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertNotNull(strComparator84);
        org.junit.Assert.assertNotNull(strComparator85);
        org.junit.Assert.assertNotNull(strComparator86);
        org.junit.Assert.assertNotNull(strComparator87);
        org.junit.Assert.assertNotNull(strComparator88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader99);
    }

    @Test
    public void test2129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2129");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.util.Comparator<java.lang.String> strComparator12 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = strComparator12.thenComparing(strComparator13);
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = strComparator15.thenComparing(strComparator16);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        boolean boolean21 = strComparator16.equals((java.lang.Object) strComparator20);
        java.lang.Object[] objArray23 = new java.lang.Object[] { '4', strComparator13, strComparator16, 0.0d };
        generator8.setArrays(objArray23);
        java.lang.ClassLoader classLoader25 = null;
        generator8.setClassLoader(classLoader25);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.lang.ClassLoader classLoader30 = null;
        generator27.setClassLoader(classLoader30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        boolean boolean39 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator35.getStrategy();
        generator34.setStrategy(generatorStrategy40);
        generator8.setStrategy(generatorStrategy40);
        generator0.setStrategy(generatorStrategy40);
        java.lang.ClassLoader classLoader44 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator46.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator50.setUseCache(true);
        boolean boolean53 = generator50.getAttemptLoad();
        boolean boolean54 = generator50.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator50.getStrategy();
        generator49.setStrategy(generatorStrategy55);
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator57.setUseCache(true);
        boolean boolean60 = generator57.getAttemptLoad();
        boolean boolean61 = generator57.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator57.getStrategy();
        generator49.setStrategy(generatorStrategy62);
        generator46.setStrategy(generatorStrategy62);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator46.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator46.getNamingPolicy();
        java.lang.ClassLoader classLoader67 = generator46.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator68 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator68.setUseCache(true);
        boolean boolean71 = generator68.getAttemptLoad();
        boolean boolean72 = generator68.getUseCache();
        generator68.setAttemptLoad(true);
        generator68.setUseCache(true);
        generator68.setAttemptLoad(true);
        generator68.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator68.getStrategy();
        generator46.setStrategy(generatorStrategy81);
        generator46.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator46.getStrategy();
        generator0.setStrategy(generatorStrategy85);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(generatorStrategy85);
    }

    @Test
    public void test2130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2130");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        boolean boolean8 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader10 = null;
        generator9.setClassLoader(classLoader10);
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = strComparator13.thenComparing(strComparator14);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        boolean boolean22 = strComparator17.equals((java.lang.Object) strComparator21);
        java.lang.Object[] objArray24 = new java.lang.Object[] { '4', strComparator14, strComparator17, 0.0d };
        generator9.setArrays(objArray24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator9.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator9.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy27);
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader31 = null;
        generator30.setClassLoader(classLoader31);
        java.lang.ClassLoader classLoader33 = null;
        generator30.setClassLoader(classLoader33);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator30.getNamingPolicy();
        generator29.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator29.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator38.setUseCache(true);
        boolean boolean41 = generator38.getAttemptLoad();
        boolean boolean42 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator38.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader46 = null;
        generator45.setClassLoader(classLoader46);
        java.lang.ClassLoader classLoader48 = null;
        generator45.setClassLoader(classLoader48);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator45.getNamingPolicy();
        generator44.setNamingPolicy(namingPolicy50);
        boolean boolean52 = generator44.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader54 = null;
        generator53.setClassLoader(classLoader54);
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = strComparator57.thenComparing(strComparator58);
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = strComparator60.thenComparing(strComparator61);
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = strComparator63.thenComparing(strComparator64);
        boolean boolean66 = strComparator61.equals((java.lang.Object) strComparator65);
        java.lang.Object[] objArray68 = new java.lang.Object[] { '4', strComparator58, strComparator61, 0.0d };
        generator53.setArrays(objArray68);
        generator44.setArrays(objArray68);
        generator38.setArrays(objArray68);
        generator29.setArrays(objArray68);
        generator0.setArrays(objArray68);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter74 = org.mockito.cglib.util.ParallelSorter.create(objArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test2131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2131");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader5 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
    }

    @Test
    public void test2132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2132");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = strComparator0.reversed();
        java.util.Comparator<java.lang.String> strComparator4 = strComparator3.reversed();
        java.util.Comparator<java.lang.String> strComparator5 = strComparator3.reversed();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator5.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator7.setUseCache(true);
        boolean boolean10 = generator7.getAttemptLoad();
        boolean boolean11 = generator7.getUseCache();
        generator7.setAttemptLoad(true);
        generator7.setUseCache(true);
        boolean boolean16 = strComparator5.equals((java.lang.Object) true);
        int int19 = strComparator5.compare("", "hi!");
        int int22 = strComparator5.compare("hi!", "hi!");
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = strComparator23.thenComparing(strComparator24);
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = strComparator26.thenComparing(strComparator27);
        java.util.Comparator<java.lang.String> strComparator29 = strComparator25.thenComparing(strComparator26);
        boolean boolean31 = strComparator26.equals((java.lang.Object) "");
        java.util.Comparator<java.lang.String> strComparator32 = strComparator26.reversed();
        java.util.Comparator<java.lang.String> strComparator33 = strComparator26.reversed();
        int int36 = strComparator33.compare("hi!", "hi!");
        int int39 = strComparator33.compare("", "hi!");
        java.util.Comparator<java.lang.String> strComparator40 = strComparator5.thenComparing(strComparator33);
        java.util.Comparator<java.lang.String> strComparator41 = strComparator40.reversed();
        java.util.Comparator<java.lang.String> strComparator42 = strComparator40.reversed();
        int int45 = strComparator40.compare("", "");
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test2133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2133");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = strComparator3.thenComparing(strComparator4);
        java.util.Comparator<java.lang.String> strComparator6 = strComparator2.thenComparing(strComparator3);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.reverseOrder();
        java.util.Comparator<java.lang.String> strComparator8 = strComparator3.thenComparing(strComparator7);
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader10 = null;
        generator9.setClassLoader(classLoader10);
        boolean boolean12 = generator9.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator9.getStrategy();
        java.lang.ClassLoader classLoader14 = generator9.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader17 = null;
        generator16.setClassLoader(classLoader17);
        java.lang.ClassLoader classLoader19 = null;
        generator16.setClassLoader(classLoader19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader24 = null;
        generator23.setClassLoader(classLoader24);
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = strComparator27.thenComparing(strComparator28);
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = strComparator30.thenComparing(strComparator31);
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = strComparator33.thenComparing(strComparator34);
        boolean boolean36 = strComparator31.equals((java.lang.Object) strComparator35);
        java.lang.Object[] objArray38 = new java.lang.Object[] { '4', strComparator28, strComparator31, 0.0d };
        generator23.setArrays(objArray38);
        java.lang.ClassLoader classLoader40 = null;
        generator23.setClassLoader(classLoader40);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        generator23.setNamingPolicy(namingPolicy47);
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator50.setUseCache(true);
        boolean boolean53 = generator50.getAttemptLoad();
        boolean boolean54 = generator50.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator50.getStrategy();
        generator49.setStrategy(generatorStrategy55);
        generator23.setStrategy(generatorStrategy55);
        generator15.setStrategy(generatorStrategy55);
        java.lang.ClassLoader classLoader59 = generator15.getClassLoader();
        generator9.setClassLoader(classLoader59);
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader63 = null;
        generator62.setClassLoader(classLoader63);
        java.lang.ClassLoader classLoader65 = null;
        generator62.setClassLoader(classLoader65);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator62.getNamingPolicy();
        generator61.setNamingPolicy(namingPolicy67);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator61.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator61.getClassLoader();
        generator9.setClassLoader(classLoader70);
        boolean boolean72 = strComparator3.equals((java.lang.Object) generator9);
        java.util.Comparator<java.lang.String> strComparator73 = strComparator3.reversed();
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strComparator73);
    }

    @Test
    public void test2134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2134");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        boolean boolean8 = generator0.getAttemptLoad();
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader10 = generator0.getClassLoader();
        generator0.setUseCache(true);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        java.lang.ClassLoader classLoader19 = null;
        generator15.setClassLoader(classLoader19);
        generator15.setUseCache(false);
        generator15.setAttemptLoad(true);
        boolean boolean25 = generator15.getAttemptLoad();
        boolean boolean26 = generator15.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator27.setUseCache(true);
        java.lang.ClassLoader classLoader30 = generator27.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader35 = null;
        generator34.setClassLoader(classLoader35);
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = strComparator38.thenComparing(strComparator39);
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = strComparator41.thenComparing(strComparator42);
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = strComparator44.thenComparing(strComparator45);
        boolean boolean47 = strComparator42.equals((java.lang.Object) strComparator46);
        java.lang.Object[] objArray49 = new java.lang.Object[] { '4', strComparator39, strComparator42, 0.0d };
        generator34.setArrays(objArray49);
        generator31.setArrays(objArray49);
        generator27.setArrays(objArray49);
        generator15.setArrays(objArray49);
        generator0.setArrays(objArray49);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter55 = org.mockito.cglib.util.ParallelSorter.create(objArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test2135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2135");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator3 = strComparator1.thenComparing(strComparator2);
        java.util.Comparator<java.lang.String> strComparator4 = strComparator1.reversed();
        java.util.Comparator<java.lang.String> strComparator5 = strComparator4.reversed();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.reversed();
        java.util.Comparator<java.lang.String> strComparator7 = strComparator0.thenComparing(strComparator4);
        int int10 = strComparator0.compare("hi!", "");
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader12 = null;
        generator11.setClassLoader(classLoader12);
        boolean boolean14 = generator11.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator11.getStrategy();
        java.lang.ClassLoader classLoader16 = generator11.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        java.lang.ClassLoader classLoader21 = null;
        generator18.setClassLoader(classLoader21);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator18.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy23);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader26 = null;
        generator25.setClassLoader(classLoader26);
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = strComparator29.thenComparing(strComparator30);
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = strComparator32.thenComparing(strComparator33);
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = strComparator35.thenComparing(strComparator36);
        boolean boolean38 = strComparator33.equals((java.lang.Object) strComparator37);
        java.lang.Object[] objArray40 = new java.lang.Object[] { '4', strComparator30, strComparator33, 0.0d };
        generator25.setArrays(objArray40);
        java.lang.ClassLoader classLoader42 = null;
        generator25.setClassLoader(classLoader42);
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader45 = null;
        generator44.setClassLoader(classLoader45);
        java.lang.ClassLoader classLoader47 = null;
        generator44.setClassLoader(classLoader47);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator44.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy49);
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator52.setUseCache(true);
        boolean boolean55 = generator52.getAttemptLoad();
        boolean boolean56 = generator52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator52.getStrategy();
        generator51.setStrategy(generatorStrategy57);
        generator25.setStrategy(generatorStrategy57);
        generator17.setStrategy(generatorStrategy57);
        java.lang.ClassLoader classLoader61 = generator17.getClassLoader();
        generator11.setClassLoader(classLoader61);
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator63.setUseCache(true);
        boolean boolean66 = generator63.getAttemptLoad();
        boolean boolean67 = generator63.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator63.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator69 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator69.setUseCache(true);
        boolean boolean72 = generator69.getAttemptLoad();
        boolean boolean73 = generator69.getUseCache();
        generator69.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator76 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator76.getStrategy();
        generator69.setStrategy(generatorStrategy77);
        org.mockito.cglib.util.ParallelSorter.Generator generator79 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator79.setUseCache(true);
        java.lang.ClassLoader classLoader82 = generator79.getClassLoader();
        generator69.setClassLoader(classLoader82);
        generator63.setClassLoader(classLoader82);
        generator11.setClassLoader(classLoader82);
        boolean boolean86 = generator11.getUseCache();
        boolean boolean87 = strComparator0.equals((java.lang.Object) generator11);
        java.lang.ClassLoader classLoader88 = generator11.getClassLoader();
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(classLoader88);
    }

    @Test
    public void test2136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2136");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        generator0.setAttemptLoad(true);
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.reverseOrder();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator9.setUseCache(true);
        boolean boolean12 = generator9.getAttemptLoad();
        boolean boolean13 = generator9.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator14.setUseCache(true);
        boolean boolean17 = generator14.getAttemptLoad();
        boolean boolean18 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator14.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator14.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator14.getStrategy();
        generator9.setStrategy(generatorStrategy21);
        boolean boolean23 = strComparator8.equals((java.lang.Object) generator9);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator9.getNamingPolicy();
        generator9.setAttemptLoad(false);
        generator9.setUseCache(false);
        generator9.setUseCache(true);
        java.lang.ClassLoader classLoader31 = generator9.getClassLoader();
        generator0.setClassLoader(classLoader31);
        boolean boolean33 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test2137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2137");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator7.getStrategy();
        java.lang.ClassLoader classLoader9 = generator7.getClassLoader();
        generator7.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator0.getStrategy();
        boolean boolean15 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter16 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2138");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        generator4.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator11.getStrategy();
        generator4.setStrategy(generatorStrategy12);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator14.setUseCache(true);
        java.lang.ClassLoader classLoader17 = generator14.getClassLoader();
        generator4.setClassLoader(classLoader17);
        generator4.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy21);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader24 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor25 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(classLoader24);
    }

    @Test
    public void test2139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2139");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getAttemptLoad();
        boolean boolean6 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator7.setStrategy(generatorStrategy13);
        boolean boolean15 = generator7.getAttemptLoad();
        generator7.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy24);
        boolean boolean26 = generator18.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = strComparator31.thenComparing(strComparator32);
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = strComparator34.thenComparing(strComparator35);
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = strComparator37.thenComparing(strComparator38);
        boolean boolean40 = strComparator35.equals((java.lang.Object) strComparator39);
        java.lang.Object[] objArray42 = new java.lang.Object[] { '4', strComparator32, strComparator35, 0.0d };
        generator27.setArrays(objArray42);
        generator18.setArrays(objArray42);
        boolean boolean45 = generator18.getAttemptLoad();
        java.lang.Object[] objArray46 = new java.lang.Object[] { generator18 };
        generator7.setArrays(objArray46);
        generator0.setArrays(objArray46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor50 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.util.ParallelSorter$Generator is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertNotNull(generatorStrategy49);
    }

    @Test
    public void test2140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2140");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        boolean boolean8 = generator0.getUseCache();
        boolean boolean9 = generator0.getUseCache();
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        java.util.Comparator<java.lang.String> strComparator13 = strComparator10.reversed();
        java.util.Comparator<java.lang.String> strComparator14 = strComparator13.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader17 = null;
        generator16.setClassLoader(classLoader17);
        java.lang.ClassLoader classLoader19 = null;
        generator16.setClassLoader(classLoader19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy21);
        boolean boolean23 = strComparator13.equals((java.lang.Object) generator15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator15.getStrategy();
        generator0.setStrategy(generatorStrategy24);
        boolean boolean26 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = strComparator32.thenComparing(strComparator33);
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = strComparator35.thenComparing(strComparator36);
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = strComparator38.thenComparing(strComparator39);
        boolean boolean41 = strComparator36.equals((java.lang.Object) strComparator40);
        java.lang.Object[] objArray43 = new java.lang.Object[] { '4', strComparator33, strComparator36, 0.0d };
        generator28.setArrays(objArray43);
        java.lang.ClassLoader classLoader45 = null;
        generator28.setClassLoader(classLoader45);
        boolean boolean47 = generator28.getAttemptLoad();
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = strComparator48.thenComparing(strComparator49);
        java.util.Comparator<java.lang.String> strComparator51 = strComparator48.reversed();
        java.util.Comparator<java.lang.String> strComparator52 = strComparator51.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader55 = null;
        generator54.setClassLoader(classLoader55);
        java.lang.ClassLoader classLoader57 = null;
        generator54.setClassLoader(classLoader57);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator54.getNamingPolicy();
        generator53.setNamingPolicy(namingPolicy59);
        boolean boolean61 = strComparator51.equals((java.lang.Object) generator53);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator53.getStrategy();
        generator28.setStrategy(generatorStrategy62);
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator28.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator28.getStrategy();
        generator0.setStrategy(generatorStrategy65);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertNotNull(generatorStrategy65);
    }

    @Test
    public void test2141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2141");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean4 = generator3.getAttemptLoad();
        java.lang.ClassLoader classLoader5 = generator3.getClassLoader();
        java.lang.ClassLoader classLoader6 = generator3.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator7.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        generator7.setStrategy(generatorStrategy20);
        generator7.setAttemptLoad(false);
        boolean boolean24 = generator7.getUseCache();
        java.lang.ClassLoader classLoader25 = generator7.getClassLoader();
        boolean boolean26 = generator7.getUseCache();
        boolean boolean27 = generator7.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator7.getStrategy();
        java.lang.ClassLoader classLoader29 = generator7.getClassLoader();
        generator3.setClassLoader(classLoader29);
        boolean boolean31 = generator3.getAttemptLoad();
        boolean boolean32 = generator3.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator3.getStrategy();
        generator0.setStrategy(generatorStrategy33);
        boolean boolean35 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader36 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(classLoader36);
    }

    @Test
    public void test2142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2142");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader12 = null;
        generator11.setClassLoader(classLoader12);
        java.lang.ClassLoader classLoader14 = null;
        generator11.setClassLoader(classLoader14);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator11.getNamingPolicy();
        generator10.setNamingPolicy(namingPolicy16);
        boolean boolean18 = generator10.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = strComparator23.thenComparing(strComparator24);
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = strComparator26.thenComparing(strComparator27);
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = strComparator29.thenComparing(strComparator30);
        boolean boolean32 = strComparator27.equals((java.lang.Object) strComparator31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { '4', strComparator24, strComparator27, 0.0d };
        generator19.setArrays(objArray34);
        generator10.setArrays(objArray34);
        generator0.setArrays(objArray34);
        boolean boolean38 = generator0.getUseCache();
        boolean boolean39 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator40.setUseCache(true);
        boolean boolean43 = generator40.getAttemptLoad();
        java.lang.ClassLoader classLoader44 = null;
        generator40.setClassLoader(classLoader44);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator40.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader48 = null;
        generator47.setClassLoader(classLoader48);
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = strComparator51.thenComparing(strComparator52);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = strComparator57.thenComparing(strComparator58);
        boolean boolean60 = strComparator55.equals((java.lang.Object) strComparator59);
        java.lang.Object[] objArray62 = new java.lang.Object[] { '4', strComparator52, strComparator55, 0.0d };
        generator47.setArrays(objArray62);
        generator40.setArrays(objArray62);
        generator40.setUseCache(false);
        generator40.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator40.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator70 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader71 = null;
        generator70.setClassLoader(classLoader71);
        java.lang.ClassLoader classLoader73 = generator70.getClassLoader();
        generator70.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator76 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean77 = generator76.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator76.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator76.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator80 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator80.setUseCache(true);
        java.lang.ClassLoader classLoader83 = generator80.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator84 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator84.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator84.getStrategy();
        generator80.setStrategy(generatorStrategy87);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = generator80.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy90 = generator80.getNamingPolicy();
        generator76.setNamingPolicy(namingPolicy90);
        generator70.setNamingPolicy(namingPolicy90);
        org.mockito.cglib.core.NamingPolicy namingPolicy93 = generator70.getNamingPolicy();
        generator40.setNamingPolicy(namingPolicy93);
        generator0.setNamingPolicy(namingPolicy93);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertNotNull(generatorStrategy89);
        org.junit.Assert.assertNotNull(namingPolicy90);
        org.junit.Assert.assertNotNull(namingPolicy93);
    }

    @Test
    public void test2143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2143");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        boolean boolean14 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2144");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator5.setUseCache(true);
        boolean boolean8 = generator5.getAttemptLoad();
        boolean boolean9 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator5.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator5.setStrategy(generatorStrategy16);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator18.getNamingPolicy();
        generator18.setUseCache(false);
        boolean boolean29 = generator18.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator18.getNamingPolicy();
        generator18.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator18.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy33);
        generator0.setNamingPolicy(namingPolicy33);
        boolean boolean36 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader37 = generator0.getClassLoader();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator0.getStrategy();
        boolean boolean41 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator42.getStrategy();
        java.lang.ClassLoader classLoader44 = generator42.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = null;
        generator42.setStrategy(generatorStrategy45);
        boolean boolean47 = generator42.getAttemptLoad();
        generator42.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator50.setUseCache(true);
        boolean boolean53 = generator50.getAttemptLoad();
        java.lang.ClassLoader classLoader54 = null;
        generator50.setClassLoader(classLoader54);
        generator50.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator58.setUseCache(true);
        boolean boolean61 = generator58.getAttemptLoad();
        boolean boolean62 = generator58.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator58.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator58.getStrategy();
        generator50.setStrategy(generatorStrategy64);
        org.mockito.cglib.util.ParallelSorter.Generator generator66 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader67 = null;
        generator66.setClassLoader(classLoader67);
        java.util.Comparator<java.lang.String> strComparator70 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator71 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator72 = strComparator70.thenComparing(strComparator71);
        java.util.Comparator<java.lang.String> strComparator73 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator74 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator75 = strComparator73.thenComparing(strComparator74);
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator78 = strComparator76.thenComparing(strComparator77);
        boolean boolean79 = strComparator74.equals((java.lang.Object) strComparator78);
        java.lang.Object[] objArray81 = new java.lang.Object[] { '4', strComparator71, strComparator74, 0.0d };
        generator66.setArrays(objArray81);
        org.mockito.cglib.util.ParallelSorter.Generator generator83 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader84 = null;
        generator83.setClassLoader(classLoader84);
        java.lang.ClassLoader classLoader86 = null;
        generator83.setClassLoader(classLoader86);
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = generator83.getNamingPolicy();
        generator66.setNamingPolicy(namingPolicy88);
        java.lang.ClassLoader classLoader90 = generator66.getClassLoader();
        generator50.setClassLoader(classLoader90);
        java.lang.ClassLoader classLoader92 = generator50.getClassLoader();
        java.lang.ClassLoader classLoader93 = generator50.getClassLoader();
        generator42.setClassLoader(classLoader93);
        generator0.setClassLoader(classLoader93);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy88);
        org.junit.Assert.assertNotNull(classLoader90);
        org.junit.Assert.assertNotNull(classLoader92);
        org.junit.Assert.assertNotNull(classLoader93);
    }

    @Test
    public void test2145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2145");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        generator0.setUseCache(false);
        boolean boolean8 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        java.lang.ClassLoader classLoader18 = generator15.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader23 = null;
        generator22.setClassLoader(classLoader23);
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = strComparator26.thenComparing(strComparator27);
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = strComparator29.thenComparing(strComparator30);
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = strComparator32.thenComparing(strComparator33);
        boolean boolean35 = strComparator30.equals((java.lang.Object) strComparator34);
        java.lang.Object[] objArray37 = new java.lang.Object[] { '4', strComparator27, strComparator30, 0.0d };
        generator22.setArrays(objArray37);
        generator19.setArrays(objArray37);
        generator15.setArrays(objArray37);
        java.lang.ClassLoader classLoader41 = generator15.getClassLoader();
        boolean boolean42 = generator15.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator43.setUseCache(true);
        boolean boolean46 = generator43.getAttemptLoad();
        boolean boolean47 = generator43.getUseCache();
        generator43.setAttemptLoad(true);
        generator43.setUseCache(true);
        generator43.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader55 = null;
        generator54.setClassLoader(classLoader55);
        java.lang.ClassLoader classLoader57 = null;
        generator54.setClassLoader(classLoader57);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator54.getNamingPolicy();
        generator43.setNamingPolicy(namingPolicy59);
        java.lang.ClassLoader classLoader61 = generator43.getClassLoader();
        generator15.setClassLoader(classLoader61);
        generator0.setClassLoader(classLoader61);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(generatorStrategy66);
    }

    @Test
    public void test2146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2146");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        generator0.setAttemptLoad(false);
        boolean boolean17 = generator0.getUseCache();
        java.lang.ClassLoader classLoader18 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader22 = null;
        generator21.setClassLoader(classLoader22);
        java.lang.ClassLoader classLoader24 = null;
        generator21.setClassLoader(classLoader24);
        generator21.setAttemptLoad(true);
        boolean boolean28 = generator21.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator21.getNamingPolicy();
        boolean boolean30 = generator21.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader33 = null;
        generator32.setClassLoader(classLoader33);
        java.lang.ClassLoader classLoader35 = null;
        generator32.setClassLoader(classLoader35);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator32.getNamingPolicy();
        generator31.setNamingPolicy(namingPolicy37);
        boolean boolean39 = generator31.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader41 = null;
        generator40.setClassLoader(classLoader41);
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = strComparator44.thenComparing(strComparator45);
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = strComparator47.thenComparing(strComparator48);
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = strComparator50.thenComparing(strComparator51);
        boolean boolean53 = strComparator48.equals((java.lang.Object) strComparator52);
        java.lang.Object[] objArray55 = new java.lang.Object[] { '4', strComparator45, strComparator48, 0.0d };
        generator40.setArrays(objArray55);
        generator31.setArrays(objArray55);
        generator21.setArrays(objArray55);
        generator0.setArrays(objArray55);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter60 = org.mockito.cglib.util.ParallelSorter.create(objArray55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test2147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2147");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator7.setNamingPolicy(namingPolicy13);
        boolean boolean15 = generator7.getUseCache();
        boolean boolean16 = generator7.getUseCache();
        generator7.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        java.lang.ClassLoader classLoader22 = generator19.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader24 = null;
        generator23.setClassLoader(classLoader24);
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = strComparator27.thenComparing(strComparator28);
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = strComparator30.thenComparing(strComparator31);
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = strComparator33.thenComparing(strComparator34);
        boolean boolean36 = strComparator31.equals((java.lang.Object) strComparator35);
        java.lang.Object[] objArray38 = new java.lang.Object[] { '4', strComparator28, strComparator31, 0.0d };
        generator23.setArrays(objArray38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader41 = null;
        generator40.setClassLoader(classLoader41);
        java.lang.ClassLoader classLoader43 = null;
        generator40.setClassLoader(classLoader43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator40.getNamingPolicy();
        generator23.setNamingPolicy(namingPolicy45);
        generator19.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator19.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator19.getStrategy();
        generator7.setStrategy(generatorStrategy49);
        generator0.setStrategy(generatorStrategy49);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator0.setStrategy(generatorStrategy52);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator59.setUseCache(true);
        boolean boolean62 = generator59.getAttemptLoad();
        boolean boolean63 = generator59.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator59.getStrategy();
        generator58.setStrategy(generatorStrategy64);
        org.mockito.cglib.util.ParallelSorter.Generator generator66 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator66.setUseCache(true);
        boolean boolean69 = generator66.getAttemptLoad();
        boolean boolean70 = generator66.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator66.getStrategy();
        generator58.setStrategy(generatorStrategy71);
        generator58.setAttemptLoad(false);
        boolean boolean75 = generator58.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator58.getStrategy();
        generator0.setStrategy(generatorStrategy76);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(generatorStrategy76);
    }

    @Test
    public void test2148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2148");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader8 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(classLoader8);
    }

    @Test
    public void test2149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2149");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.Class<?> wildcardClass10 = generator0.getClass();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2150");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader5 = null;
        generator4.setClassLoader(classLoader5);
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader8 = null;
        generator7.setClassLoader(classLoader8);
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator13 = strComparator11.thenComparing(strComparator12);
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = strComparator14.thenComparing(strComparator15);
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = strComparator17.thenComparing(strComparator18);
        boolean boolean20 = strComparator15.equals((java.lang.Object) strComparator19);
        java.lang.Object[] objArray22 = new java.lang.Object[] { '4', strComparator12, strComparator15, 0.0d };
        generator7.setArrays(objArray22);
        generator4.setArrays(objArray22);
        generator0.setArrays(objArray22);
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        boolean boolean27 = generator0.getUseCache();
        boolean boolean28 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter29 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test2151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2151");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader11 = null;
        generator10.setClassLoader(classLoader11);
        java.lang.ClassLoader classLoader13 = null;
        generator10.setClassLoader(classLoader13);
        boolean boolean15 = generator10.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator10.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        generator10.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator10.setStrategy(generatorStrategy19);
        java.lang.ClassLoader classLoader21 = generator10.getClassLoader();
        generator0.setClassLoader(classLoader21);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter23 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(classLoader21);
    }

    @Test
    public void test2152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2152");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        java.lang.ClassLoader classLoader13 = generator10.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator14.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator14.getStrategy();
        generator10.setStrategy(generatorStrategy17);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator10.getNamingPolicy();
        generator10.setUseCache(true);
        java.lang.ClassLoader classLoader22 = generator10.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator23.setUseCache(true);
        boolean boolean26 = generator23.getAttemptLoad();
        boolean boolean27 = generator23.getUseCache();
        generator23.setAttemptLoad(true);
        generator23.setUseCache(true);
        generator23.setAttemptLoad(true);
        generator23.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator23.getStrategy();
        java.lang.ClassLoader classLoader37 = generator23.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator23.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator23.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator23.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator42.setUseCache(true);
        boolean boolean45 = generator42.getAttemptLoad();
        boolean boolean46 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator42.getStrategy();
        generator41.setStrategy(generatorStrategy47);
        boolean boolean49 = generator41.getAttemptLoad();
        generator41.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader54 = null;
        generator53.setClassLoader(classLoader54);
        java.lang.ClassLoader classLoader56 = null;
        generator53.setClassLoader(classLoader56);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator53.getNamingPolicy();
        generator52.setNamingPolicy(namingPolicy58);
        boolean boolean60 = generator52.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader62 = null;
        generator61.setClassLoader(classLoader62);
        java.util.Comparator<java.lang.String> strComparator65 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator66 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator67 = strComparator65.thenComparing(strComparator66);
        java.util.Comparator<java.lang.String> strComparator68 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator69 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator70 = strComparator68.thenComparing(strComparator69);
        java.util.Comparator<java.lang.String> strComparator71 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator72 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator73 = strComparator71.thenComparing(strComparator72);
        boolean boolean74 = strComparator69.equals((java.lang.Object) strComparator73);
        java.lang.Object[] objArray76 = new java.lang.Object[] { '4', strComparator66, strComparator69, 0.0d };
        generator61.setArrays(objArray76);
        generator52.setArrays(objArray76);
        boolean boolean79 = generator52.getAttemptLoad();
        java.lang.Object[] objArray80 = new java.lang.Object[] { generator52 };
        generator41.setArrays(objArray80);
        generator23.setArrays(objArray80);
        generator10.setArrays(objArray80);
        generator0.setArrays(objArray80);
        org.mockito.cglib.util.ParallelSorter.Generator generator85 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = generator85.getStrategy();
        java.lang.ClassLoader classLoader87 = generator85.getClassLoader();
        generator85.setUseCache(false);
        generator85.setUseCache(true);
        java.lang.ClassLoader classLoader92 = generator85.getClassLoader();
        generator0.setClassLoader(classLoader92);
        org.mockito.asm.ClassVisitor classVisitor94 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor94);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.util.ParallelSorter$Generator is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertNotNull(generatorStrategy86);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertNotNull(classLoader92);
    }

    @Test
    public void test2153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2153");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator13.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader25 = null;
        generator24.setClassLoader(classLoader25);
        java.lang.ClassLoader classLoader27 = null;
        generator24.setClassLoader(classLoader27);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator24.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        java.lang.ClassLoader classLoader34 = generator31.getClassLoader();
        generator16.setClassLoader(classLoader34);
        generator13.setClassLoader(classLoader34);
        generator13.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator40.setUseCache(true);
        boolean boolean43 = generator40.getAttemptLoad();
        boolean boolean44 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator40.getStrategy();
        generator39.setStrategy(generatorStrategy45);
        boolean boolean47 = generator39.getAttemptLoad();
        generator39.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader52 = null;
        generator51.setClassLoader(classLoader52);
        java.lang.ClassLoader classLoader54 = null;
        generator51.setClassLoader(classLoader54);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator51.getNamingPolicy();
        generator50.setNamingPolicy(namingPolicy56);
        boolean boolean58 = generator50.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader60 = null;
        generator59.setClassLoader(classLoader60);
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = strComparator63.thenComparing(strComparator64);
        java.util.Comparator<java.lang.String> strComparator66 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator67 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator68 = strComparator66.thenComparing(strComparator67);
        java.util.Comparator<java.lang.String> strComparator69 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator70 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator71 = strComparator69.thenComparing(strComparator70);
        boolean boolean72 = strComparator67.equals((java.lang.Object) strComparator71);
        java.lang.Object[] objArray74 = new java.lang.Object[] { '4', strComparator64, strComparator67, 0.0d };
        generator59.setArrays(objArray74);
        generator50.setArrays(objArray74);
        boolean boolean77 = generator50.getAttemptLoad();
        java.lang.Object[] objArray78 = new java.lang.Object[] { generator50 };
        generator39.setArrays(objArray78);
        generator13.setArrays(objArray78);
        generator0.setArrays(objArray78);
        java.lang.ClassLoader classLoader82 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter84 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.util.ParallelSorter$Generator is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertNotNull(generatorStrategy83);
    }

    @Test
    public void test2154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2154");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator4.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator3.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        boolean boolean19 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator20.getStrategy();
        generator20.setUseCache(true);
        generator20.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator20.getStrategy();
        generator0.setStrategy(generatorStrategy26);
        boolean boolean28 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        generator29.setAttemptLoad(true);
        generator29.setUseCache(true);
        generator29.setAttemptLoad(true);
        boolean boolean40 = generator29.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator29.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy41);
        java.lang.Class<?> wildcardClass43 = namingPolicy41.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test2155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2155");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        java.lang.ClassLoader classLoader5 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader8 = null;
        generator7.setClassLoader(classLoader8);
        java.lang.ClassLoader classLoader10 = null;
        generator7.setClassLoader(classLoader10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        boolean boolean27 = strComparator22.equals((java.lang.Object) strComparator26);
        java.lang.Object[] objArray29 = new java.lang.Object[] { '4', strComparator19, strComparator22, 0.0d };
        generator14.setArrays(objArray29);
        java.lang.ClassLoader classLoader31 = null;
        generator14.setClassLoader(classLoader31);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        generator40.setStrategy(generatorStrategy46);
        generator14.setStrategy(generatorStrategy46);
        generator6.setStrategy(generatorStrategy46);
        java.lang.ClassLoader classLoader50 = generator6.getClassLoader();
        generator0.setClassLoader(classLoader50);
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator52.setUseCache(true);
        boolean boolean55 = generator52.getAttemptLoad();
        boolean boolean56 = generator52.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator52.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator58.setUseCache(true);
        boolean boolean61 = generator58.getAttemptLoad();
        boolean boolean62 = generator58.getUseCache();
        generator58.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator65.getStrategy();
        generator58.setStrategy(generatorStrategy66);
        org.mockito.cglib.util.ParallelSorter.Generator generator68 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator68.setUseCache(true);
        java.lang.ClassLoader classLoader71 = generator68.getClassLoader();
        generator58.setClassLoader(classLoader71);
        generator52.setClassLoader(classLoader71);
        generator0.setClassLoader(classLoader71);
        boolean boolean75 = generator0.getUseCache();
        boolean boolean76 = generator0.getUseCache();
        java.lang.Class<?> wildcardClass77 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test2156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2156");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader8 = null;
        generator7.setClassLoader(classLoader8);
        java.lang.ClassLoader classLoader10 = null;
        generator7.setClassLoader(classLoader10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        boolean boolean27 = strComparator22.equals((java.lang.Object) strComparator26);
        java.lang.Object[] objArray29 = new java.lang.Object[] { '4', strComparator19, strComparator22, 0.0d };
        generator14.setArrays(objArray29);
        java.lang.ClassLoader classLoader31 = null;
        generator14.setClassLoader(classLoader31);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        generator40.setStrategy(generatorStrategy46);
        generator14.setStrategy(generatorStrategy46);
        generator6.setStrategy(generatorStrategy46);
        generator0.setStrategy(generatorStrategy46);
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator51.setUseCache(true);
        boolean boolean54 = generator51.getAttemptLoad();
        boolean boolean55 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator51.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator57.setUseCache(true);
        boolean boolean60 = generator57.getAttemptLoad();
        boolean boolean61 = generator57.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator57.getStrategy();
        generator51.setStrategy(generatorStrategy62);
        generator0.setStrategy(generatorStrategy62);
        generator0.setUseCache(false);
        java.lang.Class<?> wildcardClass67 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test2157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2157");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        boolean boolean23 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator19.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator25.setUseCache(true);
        boolean boolean28 = generator25.getAttemptLoad();
        boolean boolean29 = generator25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator25.getStrategy();
        generator19.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = generator19.getClassLoader();
        generator19.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        boolean boolean39 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator35.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        generator35.setStrategy(generatorStrategy46);
        java.lang.ClassLoader classLoader48 = generator35.getClassLoader();
        generator19.setClassLoader(classLoader48);
        boolean boolean50 = generator19.getAttemptLoad();
        generator19.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator19.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator54.setUseCache(true);
        boolean boolean57 = generator54.getAttemptLoad();
        boolean boolean58 = generator54.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator54.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator60.setUseCache(true);
        boolean boolean63 = generator60.getAttemptLoad();
        boolean boolean64 = generator60.getUseCache();
        generator60.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator67.getStrategy();
        generator60.setStrategy(generatorStrategy68);
        org.mockito.cglib.util.ParallelSorter.Generator generator70 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator70.setUseCache(true);
        java.lang.ClassLoader classLoader73 = generator70.getClassLoader();
        generator60.setClassLoader(classLoader73);
        generator54.setClassLoader(classLoader73);
        org.mockito.cglib.util.ParallelSorter.Generator generator76 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator77 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader78 = null;
        generator77.setClassLoader(classLoader78);
        java.lang.ClassLoader classLoader80 = null;
        generator77.setClassLoader(classLoader80);
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator77.getNamingPolicy();
        generator76.setNamingPolicy(namingPolicy82);
        boolean boolean84 = generator76.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator76.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator86 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator86.setUseCache(true);
        boolean boolean89 = generator86.getAttemptLoad();
        boolean boolean90 = generator86.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy91 = generator86.getStrategy();
        generator76.setStrategy(generatorStrategy91);
        generator54.setStrategy(generatorStrategy91);
        generator19.setStrategy(generatorStrategy91);
        generator0.setStrategy(generatorStrategy91);
        org.mockito.cglib.core.NamingPolicy namingPolicy96 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter99 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(namingPolicy85);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(generatorStrategy91);
        org.junit.Assert.assertNotNull(namingPolicy96);
    }

    @Test
    public void test2158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2158");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator5.setUseCache(true);
        boolean boolean8 = generator5.getAttemptLoad();
        boolean boolean9 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator5.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator5.setStrategy(generatorStrategy16);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator18.getNamingPolicy();
        generator18.setUseCache(false);
        boolean boolean29 = generator18.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator18.getNamingPolicy();
        generator18.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator18.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy33);
        generator0.setNamingPolicy(namingPolicy33);
        boolean boolean36 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader37 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader40 = null;
        generator39.setClassLoader(classLoader40);
        java.lang.ClassLoader classLoader42 = null;
        generator39.setClassLoader(classLoader42);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        generator38.setNamingPolicy(namingPolicy44);
        boolean boolean46 = generator38.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader48 = null;
        generator47.setClassLoader(classLoader48);
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = strComparator51.thenComparing(strComparator52);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = strComparator57.thenComparing(strComparator58);
        boolean boolean60 = strComparator55.equals((java.lang.Object) strComparator59);
        java.lang.Object[] objArray62 = new java.lang.Object[] { '4', strComparator52, strComparator55, 0.0d };
        generator47.setArrays(objArray62);
        generator38.setArrays(objArray62);
        generator0.setArrays(objArray62);
        org.mockito.cglib.util.ParallelSorter.Generator generator66 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator66.setUseCache(true);
        boolean boolean69 = generator66.getAttemptLoad();
        boolean boolean70 = generator66.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator66.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator72 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator72.setUseCache(true);
        boolean boolean75 = generator72.getAttemptLoad();
        boolean boolean76 = generator72.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator72.getStrategy();
        generator66.setStrategy(generatorStrategy77);
        java.lang.ClassLoader classLoader79 = generator66.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator66.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator66.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator82 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader83 = null;
        generator82.setClassLoader(classLoader83);
        boolean boolean85 = generator82.getAttemptLoad();
        generator82.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = generator82.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator89 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = generator89.getStrategy();
        java.lang.ClassLoader classLoader91 = generator89.getClassLoader();
        generator89.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy94 = generator89.getNamingPolicy();
        generator82.setNamingPolicy(namingPolicy94);
        generator66.setNamingPolicy(namingPolicy94);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy97 = generator66.getStrategy();
        generator0.setStrategy(generatorStrategy97);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(namingPolicy88);
        org.junit.Assert.assertNotNull(generatorStrategy90);
        org.junit.Assert.assertNotNull(classLoader91);
        org.junit.Assert.assertNotNull(namingPolicy94);
        org.junit.Assert.assertNotNull(generatorStrategy97);
    }

    @Test
    public void test2159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2159");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader8 = null;
        generator7.setClassLoader(classLoader8);
        java.lang.ClassLoader classLoader10 = null;
        generator7.setClassLoader(classLoader10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        boolean boolean27 = strComparator22.equals((java.lang.Object) strComparator26);
        java.lang.Object[] objArray29 = new java.lang.Object[] { '4', strComparator19, strComparator22, 0.0d };
        generator14.setArrays(objArray29);
        java.lang.ClassLoader classLoader31 = null;
        generator14.setClassLoader(classLoader31);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        generator40.setStrategy(generatorStrategy46);
        generator14.setStrategy(generatorStrategy46);
        generator6.setStrategy(generatorStrategy46);
        generator0.setStrategy(generatorStrategy46);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader53 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator54.setUseCache(true);
        boolean boolean57 = generator54.getAttemptLoad();
        java.lang.ClassLoader classLoader58 = null;
        generator54.setClassLoader(classLoader58);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator54.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy60);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy60);
    }

    @Test
    public void test2160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2160");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        boolean boolean13 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(namingPolicy16);
    }

    @Test
    public void test2161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2161");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.reverseOrder();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = strComparator0.equals((java.lang.Object) generator1);
        java.util.Comparator<java.lang.String> strComparator5 = strComparator0.reversed();
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strComparator5);
    }

    @Test
    public void test2162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2162");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator4.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator3.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        boolean boolean19 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator20.setStrategy(generatorStrategy26);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator28.setUseCache(true);
        boolean boolean31 = generator28.getAttemptLoad();
        boolean boolean32 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator28.getStrategy();
        generator20.setStrategy(generatorStrategy33);
        generator20.setAttemptLoad(false);
        boolean boolean37 = generator20.getUseCache();
        java.lang.ClassLoader classLoader38 = generator20.getClassLoader();
        generator0.setClassLoader(classLoader38);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(namingPolicy41);
    }

    @Test
    public void test2163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2163");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        boolean boolean28 = strComparator23.equals((java.lang.Object) strComparator27);
        java.lang.Object[] objArray30 = new java.lang.Object[] { '4', strComparator20, strComparator23, 0.0d };
        generator15.setArrays(objArray30);
        generator0.setArrays(objArray30);
        java.lang.ClassLoader classLoader33 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        java.lang.ClassLoader classLoader40 = null;
        generator37.setClassLoader(classLoader40);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator37.getNamingPolicy();
        generator36.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader45 = null;
        generator44.setClassLoader(classLoader45);
        java.lang.ClassLoader classLoader47 = null;
        generator44.setClassLoader(classLoader47);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator44.getNamingPolicy();
        generator36.setNamingPolicy(namingPolicy49);
        java.lang.ClassLoader classLoader51 = generator36.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator36.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader55 = null;
        generator54.setClassLoader(classLoader55);
        java.lang.ClassLoader classLoader57 = null;
        generator54.setClassLoader(classLoader57);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator54.getNamingPolicy();
        generator53.setNamingPolicy(namingPolicy59);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator53.getNamingPolicy();
        java.lang.ClassLoader classLoader62 = generator53.getClassLoader();
        generator36.setClassLoader(classLoader62);
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator36.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy64);
        org.mockito.cglib.util.ParallelSorter.Generator generator66 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader68 = null;
        generator67.setClassLoader(classLoader68);
        java.lang.ClassLoader classLoader70 = null;
        generator67.setClassLoader(classLoader70);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator67.getNamingPolicy();
        generator66.setNamingPolicy(namingPolicy72);
        org.mockito.cglib.util.ParallelSorter.Generator generator74 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader75 = null;
        generator74.setClassLoader(classLoader75);
        java.lang.ClassLoader classLoader77 = null;
        generator74.setClassLoader(classLoader77);
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator74.getNamingPolicy();
        generator66.setNamingPolicy(namingPolicy79);
        org.mockito.cglib.util.ParallelSorter.Generator generator81 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator81.setUseCache(true);
        java.lang.ClassLoader classLoader84 = generator81.getClassLoader();
        generator66.setClassLoader(classLoader84);
        generator66.setAttemptLoad(false);
        generator66.setUseCache(true);
        generator66.setUseCache(false);
        java.lang.ClassLoader classLoader92 = generator66.getClassLoader();
        boolean boolean93 = generator66.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy94 = generator66.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy95 = generator66.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy95);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertNotNull(classLoader84);
        org.junit.Assert.assertNotNull(classLoader92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(generatorStrategy94);
        org.junit.Assert.assertNotNull(namingPolicy95);
    }

    @Test
    public void test2164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2164");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getUseCache();
        java.lang.ClassLoader classLoader6 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator7.getStrategy();
        generator7.setUseCache(true);
        boolean boolean11 = generator7.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        generator12.setUseCache(true);
        generator12.setAttemptLoad(true);
        generator12.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader26 = null;
        generator25.setClassLoader(classLoader26);
        java.lang.ClassLoader classLoader28 = null;
        generator25.setClassLoader(classLoader28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator25.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator25.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy31);
        generator7.setNamingPolicy(namingPolicy31);
        generator0.setNamingPolicy(namingPolicy31);
        boolean boolean35 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = strComparator41.thenComparing(strComparator42);
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = strComparator44.thenComparing(strComparator45);
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = strComparator47.thenComparing(strComparator48);
        boolean boolean50 = strComparator45.equals((java.lang.Object) strComparator49);
        java.lang.Object[] objArray52 = new java.lang.Object[] { '4', strComparator42, strComparator45, 0.0d };
        generator37.setArrays(objArray52);
        java.lang.ClassLoader classLoader54 = null;
        generator37.setClassLoader(classLoader54);
        generator37.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator37.getStrategy();
        generator0.setStrategy(generatorStrategy58);
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy58);
    }

    @Test
    public void test2165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2165");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader5 = null;
        generator4.setClassLoader(classLoader5);
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator10 = strComparator8.thenComparing(strComparator9);
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator13 = strComparator11.thenComparing(strComparator12);
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = strComparator14.thenComparing(strComparator15);
        boolean boolean17 = strComparator12.equals((java.lang.Object) strComparator16);
        java.lang.Object[] objArray19 = new java.lang.Object[] { '4', strComparator9, strComparator12, 0.0d };
        generator4.setArrays(objArray19);
        java.lang.ClassLoader classLoader21 = null;
        generator4.setClassLoader(classLoader21);
        boolean boolean23 = generator4.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator24.setUseCache(true);
        boolean boolean27 = generator24.getAttemptLoad();
        boolean boolean28 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator24.getStrategy();
        generator4.setStrategy(generatorStrategy29);
        generator0.setStrategy(generatorStrategy29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator0.getStrategy();
        boolean boolean33 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter37 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
    }

    @Test
    public void test2166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2166");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        boolean boolean9 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator0.setStrategy(generatorStrategy10);
        boolean boolean12 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        boolean boolean15 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter16 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test2167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2167");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        java.lang.ClassLoader classLoader21 = null;
        generator18.setClassLoader(classLoader21);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator18.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy23);
        boolean boolean25 = generator17.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader27 = null;
        generator26.setClassLoader(classLoader27);
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = strComparator30.thenComparing(strComparator31);
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = strComparator33.thenComparing(strComparator34);
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = strComparator36.thenComparing(strComparator37);
        boolean boolean39 = strComparator34.equals((java.lang.Object) strComparator38);
        java.lang.Object[] objArray41 = new java.lang.Object[] { '4', strComparator31, strComparator34, 0.0d };
        generator26.setArrays(objArray41);
        generator17.setArrays(objArray41);
        generator11.setArrays(objArray41);
        generator0.setArrays(objArray41);
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator46.setUseCache(true);
        java.lang.ClassLoader classLoader49 = generator46.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader51 = null;
        generator50.setClassLoader(classLoader51);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = strComparator57.thenComparing(strComparator58);
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = strComparator60.thenComparing(strComparator61);
        boolean boolean63 = strComparator58.equals((java.lang.Object) strComparator62);
        java.lang.Object[] objArray65 = new java.lang.Object[] { '4', strComparator55, strComparator58, 0.0d };
        generator50.setArrays(objArray65);
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader68 = null;
        generator67.setClassLoader(classLoader68);
        java.lang.ClassLoader classLoader70 = null;
        generator67.setClassLoader(classLoader70);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator67.getNamingPolicy();
        generator50.setNamingPolicy(namingPolicy72);
        generator46.setNamingPolicy(namingPolicy72);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator46.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy75);
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(namingPolicy75);
    }

    @Test
    public void test2168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2168");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        java.lang.ClassLoader classLoader18 = generator15.getClassLoader();
        generator0.setClassLoader(classLoader18);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator0.getStrategy();
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator27.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator27.getStrategy();
        boolean boolean31 = generator27.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator32.setUseCache(true);
        boolean boolean35 = generator32.getAttemptLoad();
        boolean boolean36 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator32.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator38.setUseCache(true);
        boolean boolean41 = generator38.getAttemptLoad();
        boolean boolean42 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator38.getStrategy();
        generator32.setStrategy(generatorStrategy43);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader47 = null;
        generator46.setClassLoader(classLoader47);
        java.lang.ClassLoader classLoader49 = null;
        generator46.setClassLoader(classLoader49);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator46.getNamingPolicy();
        generator45.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator45.getNamingPolicy();
        generator45.setUseCache(false);
        boolean boolean56 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator45.getNamingPolicy();
        generator45.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator45.getNamingPolicy();
        generator32.setNamingPolicy(namingPolicy60);
        generator27.setNamingPolicy(namingPolicy60);
        boolean boolean63 = generator27.getAttemptLoad();
        java.lang.ClassLoader classLoader64 = generator27.getClassLoader();
        generator27.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator27.getStrategy();
        generator0.setStrategy(generatorStrategy67);
        org.mockito.cglib.util.ParallelSorter.Generator generator69 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator70 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader71 = null;
        generator70.setClassLoader(classLoader71);
        java.lang.ClassLoader classLoader73 = null;
        generator70.setClassLoader(classLoader73);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator70.getNamingPolicy();
        generator69.setNamingPolicy(namingPolicy75);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator69.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator69.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator69.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy79);
        boolean boolean81 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test2169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2169");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        boolean boolean8 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader10 = null;
        generator9.setClassLoader(classLoader10);
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = strComparator13.thenComparing(strComparator14);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        boolean boolean22 = strComparator17.equals((java.lang.Object) strComparator21);
        java.lang.Object[] objArray24 = new java.lang.Object[] { '4', strComparator14, strComparator17, 0.0d };
        generator9.setArrays(objArray24);
        java.lang.ClassLoader classLoader26 = null;
        generator9.setClassLoader(classLoader26);
        boolean boolean28 = generator9.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator29.getStrategy();
        generator9.setStrategy(generatorStrategy34);
        generator0.setStrategy(generatorStrategy34);
        boolean boolean37 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator38.getStrategy();
        generator38.setUseCache(true);
        generator38.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator38.getStrategy();
        generator0.setStrategy(generatorStrategy44);
        boolean boolean46 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter49 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test2170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2170");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        boolean boolean11 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        java.lang.ClassLoader classLoader18 = null;
        generator15.setClassLoader(classLoader18);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator15.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader23 = null;
        generator22.setClassLoader(classLoader23);
        java.lang.ClassLoader classLoader25 = null;
        generator22.setClassLoader(classLoader25);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator22.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy27);
        java.lang.ClassLoader classLoader29 = generator14.getClassLoader();
        generator0.setClassLoader(classLoader29);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        boolean boolean37 = generator0.getUseCache();
        boolean boolean38 = generator0.getAttemptLoad();
        boolean boolean39 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test2171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2171");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator5.setUseCache(true);
        boolean boolean8 = generator5.getAttemptLoad();
        boolean boolean9 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator5.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator5.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader13 = null;
        generator12.setClassLoader(classLoader13);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        boolean boolean25 = strComparator20.equals((java.lang.Object) strComparator24);
        java.lang.Object[] objArray27 = new java.lang.Object[] { '4', strComparator17, strComparator20, 0.0d };
        generator12.setArrays(objArray27);
        java.lang.ClassLoader classLoader29 = null;
        generator12.setClassLoader(classLoader29);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        java.lang.ClassLoader classLoader34 = null;
        generator31.setClassLoader(classLoader34);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator31.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy36);
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator39.setUseCache(true);
        boolean boolean42 = generator39.getAttemptLoad();
        boolean boolean43 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator39.getStrategy();
        generator38.setStrategy(generatorStrategy44);
        generator12.setStrategy(generatorStrategy44);
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader49 = null;
        generator48.setClassLoader(classLoader49);
        java.lang.ClassLoader classLoader51 = null;
        generator48.setClassLoader(classLoader51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator48.getNamingPolicy();
        generator47.setNamingPolicy(namingPolicy53);
        generator12.setNamingPolicy(namingPolicy53);
        generator5.setNamingPolicy(namingPolicy53);
        generator0.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean60 = generator59.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator59.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader64 = null;
        generator63.setClassLoader(classLoader64);
        java.lang.ClassLoader classLoader66 = null;
        generator63.setClassLoader(classLoader66);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator63.getNamingPolicy();
        generator62.setNamingPolicy(namingPolicy68);
        org.mockito.cglib.util.ParallelSorter.Generator generator70 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader71 = null;
        generator70.setClassLoader(classLoader71);
        java.lang.ClassLoader classLoader73 = null;
        generator70.setClassLoader(classLoader73);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator70.getNamingPolicy();
        generator62.setNamingPolicy(namingPolicy75);
        org.mockito.cglib.util.ParallelSorter.Generator generator77 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator77.setUseCache(true);
        java.lang.ClassLoader classLoader80 = generator77.getClassLoader();
        generator62.setClassLoader(classLoader80);
        generator59.setClassLoader(classLoader80);
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = generator59.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy83);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(namingPolicy83);
    }

    @Test
    public void test2172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2172");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        boolean boolean8 = generator0.getAttemptLoad();
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader10 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader12 = null;
        generator11.setClassLoader(classLoader12);
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = strComparator15.thenComparing(strComparator16);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        boolean boolean24 = strComparator19.equals((java.lang.Object) strComparator23);
        java.lang.Object[] objArray26 = new java.lang.Object[] { '4', strComparator16, strComparator19, 0.0d };
        generator11.setArrays(objArray26);
        java.lang.ClassLoader classLoader28 = null;
        generator11.setClassLoader(classLoader28);
        generator11.setAttemptLoad(true);
        java.lang.ClassLoader classLoader32 = generator11.getClassLoader();
        generator0.setClassLoader(classLoader32);
        boolean boolean34 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader37 = null;
        generator36.setClassLoader(classLoader37);
        java.lang.ClassLoader classLoader39 = null;
        generator36.setClassLoader(classLoader39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator36.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator35.getNamingPolicy();
        boolean boolean44 = generator35.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator45.setUseCache(true);
        java.lang.ClassLoader classLoader48 = generator45.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader50 = null;
        generator49.setClassLoader(classLoader50);
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = strComparator53.thenComparing(strComparator54);
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = strComparator56.thenComparing(strComparator57);
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = strComparator59.thenComparing(strComparator60);
        boolean boolean62 = strComparator57.equals((java.lang.Object) strComparator61);
        java.lang.Object[] objArray64 = new java.lang.Object[] { '4', strComparator54, strComparator57, 0.0d };
        generator49.setArrays(objArray64);
        org.mockito.cglib.util.ParallelSorter.Generator generator66 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader67 = null;
        generator66.setClassLoader(classLoader67);
        java.lang.ClassLoader classLoader69 = null;
        generator66.setClassLoader(classLoader69);
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator66.getNamingPolicy();
        generator49.setNamingPolicy(namingPolicy71);
        generator45.setNamingPolicy(namingPolicy71);
        generator35.setNamingPolicy(namingPolicy71);
        java.lang.ClassLoader classLoader75 = generator35.getClassLoader();
        generator0.setClassLoader(classLoader75);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(classLoader75);
    }

    @Test
    public void test2173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2173");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator27.setUseCache(true);
        boolean boolean30 = generator27.getAttemptLoad();
        boolean boolean31 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator27.getStrategy();
        generator26.setStrategy(generatorStrategy32);
        generator0.setStrategy(generatorStrategy32);
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader37 = null;
        generator36.setClassLoader(classLoader37);
        java.lang.ClassLoader classLoader39 = null;
        generator36.setClassLoader(classLoader39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator36.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy41);
        generator0.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator0.getStrategy();
        boolean boolean45 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator48.setUseCache(true);
        boolean boolean51 = generator48.getAttemptLoad();
        boolean boolean52 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator48.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator48.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator48.getStrategy();
        boolean boolean56 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator48.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator48.getStrategy();
        generator0.setStrategy(generatorStrategy58);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator0.getStrategy();
        boolean boolean62 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader63 = generator0.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter64 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(classLoader63);
    }

    @Test
    public void test2174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2174");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader5 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        boolean boolean7 = generator0.getAttemptLoad();
        boolean boolean8 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2175");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        generator6.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator13.getStrategy();
        generator6.setStrategy(generatorStrategy14);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        java.lang.ClassLoader classLoader19 = generator16.getClassLoader();
        generator6.setClassLoader(classLoader19);
        generator0.setClassLoader(classLoader19);
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader24 = null;
        generator23.setClassLoader(classLoader24);
        java.lang.ClassLoader classLoader26 = null;
        generator23.setClassLoader(classLoader26);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator23.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy28);
        boolean boolean30 = generator22.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator22.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator32.setUseCache(true);
        boolean boolean35 = generator32.getAttemptLoad();
        boolean boolean36 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator32.getStrategy();
        generator22.setStrategy(generatorStrategy37);
        generator0.setStrategy(generatorStrategy37);
        boolean boolean40 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader42 = null;
        generator41.setClassLoader(classLoader42);
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = strComparator45.thenComparing(strComparator46);
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = strComparator48.thenComparing(strComparator49);
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = strComparator51.thenComparing(strComparator52);
        boolean boolean54 = strComparator49.equals((java.lang.Object) strComparator53);
        java.lang.Object[] objArray56 = new java.lang.Object[] { '4', strComparator46, strComparator49, 0.0d };
        generator41.setArrays(objArray56);
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader59 = null;
        generator58.setClassLoader(classLoader59);
        java.lang.ClassLoader classLoader61 = null;
        generator58.setClassLoader(classLoader61);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator58.getNamingPolicy();
        generator41.setNamingPolicy(namingPolicy63);
        java.lang.ClassLoader classLoader65 = generator41.getClassLoader();
        generator41.setUseCache(false);
        generator41.setUseCache(false);
        boolean boolean70 = generator41.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator41.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy71);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter74 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(generatorStrategy73);
    }

    @Test
    public void test2176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2176");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        boolean boolean8 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader10 = null;
        generator9.setClassLoader(classLoader10);
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = strComparator13.thenComparing(strComparator14);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        boolean boolean22 = strComparator17.equals((java.lang.Object) strComparator21);
        java.lang.Object[] objArray24 = new java.lang.Object[] { '4', strComparator14, strComparator17, 0.0d };
        generator9.setArrays(objArray24);
        generator0.setArrays(objArray24);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader30 = null;
        generator29.setClassLoader(classLoader30);
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = strComparator33.thenComparing(strComparator34);
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = strComparator36.thenComparing(strComparator37);
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = strComparator39.thenComparing(strComparator40);
        boolean boolean42 = strComparator37.equals((java.lang.Object) strComparator41);
        java.lang.Object[] objArray44 = new java.lang.Object[] { '4', strComparator34, strComparator37, 0.0d };
        generator29.setArrays(objArray44);
        java.lang.ClassLoader classLoader46 = null;
        generator29.setClassLoader(classLoader46);
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader49 = null;
        generator48.setClassLoader(classLoader49);
        java.lang.ClassLoader classLoader51 = null;
        generator48.setClassLoader(classLoader51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator48.getNamingPolicy();
        generator29.setNamingPolicy(namingPolicy53);
        boolean boolean55 = generator29.getUseCache();
        java.lang.ClassLoader classLoader56 = generator29.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator29.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator58.setUseCache(true);
        boolean boolean61 = generator58.getAttemptLoad();
        boolean boolean62 = generator58.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator58.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator64 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator64.setUseCache(true);
        boolean boolean67 = generator64.getAttemptLoad();
        boolean boolean68 = generator64.getUseCache();
        generator64.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator71 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator71.getStrategy();
        generator64.setStrategy(generatorStrategy72);
        org.mockito.cglib.util.ParallelSorter.Generator generator74 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator74.setUseCache(true);
        java.lang.ClassLoader classLoader77 = generator74.getClassLoader();
        generator64.setClassLoader(classLoader77);
        generator58.setClassLoader(classLoader77);
        java.lang.ClassLoader classLoader80 = generator58.getClassLoader();
        generator29.setClassLoader(classLoader80);
        java.lang.ClassLoader classLoader82 = generator29.getClassLoader();
        generator0.setClassLoader(classLoader82);
        org.mockito.asm.ClassVisitor classVisitor84 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(classLoader82);
    }

    @Test
    public void test2177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2177");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        boolean boolean8 = generator0.getUseCache();
        boolean boolean9 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean12 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        generator14.setStrategy(generatorStrategy20);
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator22.getStrategy();
        generator14.setStrategy(generatorStrategy27);
        generator14.setAttemptLoad(false);
        boolean boolean31 = generator14.getUseCache();
        java.lang.ClassLoader classLoader32 = generator14.getClassLoader();
        boolean boolean33 = generator14.getUseCache();
        boolean boolean34 = generator14.getAttemptLoad();
        java.lang.ClassLoader classLoader35 = generator14.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader37 = null;
        generator36.setClassLoader(classLoader37);
        boolean boolean39 = generator36.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        java.lang.ClassLoader classLoader41 = generator36.getClassLoader();
        generator36.setUseCache(false);
        boolean boolean44 = generator36.getUseCache();
        generator36.setUseCache(false);
        boolean boolean47 = generator36.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator48.setUseCache(true);
        boolean boolean51 = generator48.getAttemptLoad();
        java.lang.ClassLoader classLoader52 = null;
        generator48.setClassLoader(classLoader52);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator48.getNamingPolicy();
        boolean boolean55 = generator48.getUseCache();
        java.lang.Object[] objArray56 = new java.lang.Object[] {};
        generator48.setArrays(objArray56);
        generator36.setArrays(objArray56);
        generator14.setArrays(objArray56);
        java.lang.ClassLoader classLoader60 = generator14.getClassLoader();
        generator0.setClassLoader(classLoader60);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertNotNull(classLoader60);
    }

    @Test
    public void test2178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2178");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader12 = null;
        generator11.setClassLoader(classLoader12);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        boolean boolean27 = strComparator22.equals((java.lang.Object) strComparator26);
        java.lang.Object[] objArray29 = new java.lang.Object[] { '4', strComparator19, strComparator22, 0.0d };
        generator14.setArrays(objArray29);
        generator11.setArrays(objArray29);
        generator0.setArrays(objArray29);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter33 = org.mockito.cglib.util.ParallelSorter.create(objArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test2179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2179");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        boolean boolean9 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator0.setStrategy(generatorStrategy10);
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator13.setUseCache(true);
        boolean boolean16 = generator13.getAttemptLoad();
        boolean boolean17 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator13.getStrategy();
        generator12.setStrategy(generatorStrategy18);
        boolean boolean20 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator12.getNamingPolicy();
        java.lang.ClassLoader classLoader22 = generator12.getClassLoader();
        generator0.setClassLoader(classLoader22);
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator25.setUseCache(true);
        boolean boolean28 = generator25.getAttemptLoad();
        boolean boolean29 = generator25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator25.getStrategy();
        generator24.setStrategy(generatorStrategy30);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator32.setUseCache(true);
        boolean boolean35 = generator32.getAttemptLoad();
        boolean boolean36 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator32.getStrategy();
        generator24.setStrategy(generatorStrategy37);
        generator24.setAttemptLoad(false);
        boolean boolean41 = generator24.getUseCache();
        java.lang.ClassLoader classLoader42 = generator24.getClassLoader();
        generator0.setClassLoader(classLoader42);
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader45 = null;
        generator44.setClassLoader(classLoader45);
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = strComparator48.thenComparing(strComparator49);
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = strComparator51.thenComparing(strComparator52);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        boolean boolean57 = strComparator52.equals((java.lang.Object) strComparator56);
        java.lang.Object[] objArray59 = new java.lang.Object[] { '4', strComparator49, strComparator52, 0.0d };
        generator44.setArrays(objArray59);
        java.lang.ClassLoader classLoader61 = null;
        generator44.setClassLoader(classLoader61);
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader64 = null;
        generator63.setClassLoader(classLoader64);
        java.lang.ClassLoader classLoader66 = null;
        generator63.setClassLoader(classLoader66);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator63.getNamingPolicy();
        generator44.setNamingPolicy(namingPolicy68);
        org.mockito.cglib.util.ParallelSorter.Generator generator70 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator71 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator71.setUseCache(true);
        boolean boolean74 = generator71.getAttemptLoad();
        boolean boolean75 = generator71.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator71.getStrategy();
        generator70.setStrategy(generatorStrategy76);
        generator44.setStrategy(generatorStrategy76);
        org.mockito.cglib.util.ParallelSorter.Generator generator79 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator80 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader81 = null;
        generator80.setClassLoader(classLoader81);
        java.lang.ClassLoader classLoader83 = null;
        generator80.setClassLoader(classLoader83);
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator80.getNamingPolicy();
        generator79.setNamingPolicy(namingPolicy85);
        generator44.setNamingPolicy(namingPolicy85);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator44.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator44.getNamingPolicy();
        java.lang.ClassLoader classLoader90 = generator44.getClassLoader();
        generator0.setClassLoader(classLoader90);
        generator0.setUseCache(true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertNotNull(namingPolicy85);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertNotNull(namingPolicy89);
        org.junit.Assert.assertNotNull(classLoader90);
    }

    @Test
    public void test2180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2180");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy22);
        java.lang.ClassLoader classLoader24 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator26.getStrategy();
        java.lang.ClassLoader classLoader28 = generator26.getClassLoader();
        generator26.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        boolean boolean34 = generator31.getAttemptLoad();
        boolean boolean35 = generator31.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator36.setUseCache(true);
        boolean boolean39 = generator36.getAttemptLoad();
        boolean boolean40 = generator36.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator36.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator36.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator36.getStrategy();
        generator31.setStrategy(generatorStrategy43);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator45.setUseCache(true);
        boolean boolean48 = generator45.getAttemptLoad();
        boolean boolean49 = generator45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator45.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator51.setUseCache(true);
        boolean boolean54 = generator51.getAttemptLoad();
        boolean boolean55 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator51.getStrategy();
        generator45.setStrategy(generatorStrategy56);
        java.lang.ClassLoader classLoader58 = generator45.getClassLoader();
        generator45.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator61.setUseCache(true);
        boolean boolean64 = generator61.getAttemptLoad();
        boolean boolean65 = generator61.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator61.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator67.setUseCache(true);
        boolean boolean70 = generator67.getAttemptLoad();
        boolean boolean71 = generator67.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator67.getStrategy();
        generator61.setStrategy(generatorStrategy72);
        java.lang.ClassLoader classLoader74 = generator61.getClassLoader();
        generator45.setClassLoader(classLoader74);
        generator31.setClassLoader(classLoader74);
        generator26.setClassLoader(classLoader74);
        generator0.setClassLoader(classLoader74);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter84 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(namingPolicy81);
    }

    @Test
    public void test2181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2181");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        boolean boolean17 = generator0.getUseCache();
        java.lang.ClassLoader classLoader18 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
    }

    @Test
    public void test2182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2182");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader21 = null;
        generator20.setClassLoader(classLoader21);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = strComparator27.thenComparing(strComparator28);
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = strComparator30.thenComparing(strComparator31);
        boolean boolean33 = strComparator28.equals((java.lang.Object) strComparator32);
        java.lang.Object[] objArray35 = new java.lang.Object[] { '4', strComparator25, strComparator28, 0.0d };
        generator20.setArrays(objArray35);
        java.lang.ClassLoader classLoader37 = null;
        generator20.setClassLoader(classLoader37);
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader40 = null;
        generator39.setClassLoader(classLoader40);
        java.lang.ClassLoader classLoader42 = null;
        generator39.setClassLoader(classLoader42);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        generator20.setNamingPolicy(namingPolicy44);
        boolean boolean46 = generator20.getUseCache();
        java.lang.ClassLoader classLoader47 = generator20.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator20.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator49.setUseCache(true);
        boolean boolean52 = generator49.getAttemptLoad();
        boolean boolean53 = generator49.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator49.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator55.setUseCache(true);
        boolean boolean58 = generator55.getAttemptLoad();
        boolean boolean59 = generator55.getUseCache();
        generator55.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator62.getStrategy();
        generator55.setStrategy(generatorStrategy63);
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator65.setUseCache(true);
        java.lang.ClassLoader classLoader68 = generator65.getClassLoader();
        generator55.setClassLoader(classLoader68);
        generator49.setClassLoader(classLoader68);
        java.lang.ClassLoader classLoader71 = generator49.getClassLoader();
        generator20.setClassLoader(classLoader71);
        java.lang.ClassLoader classLoader73 = generator20.getClassLoader();
        generator0.setClassLoader(classLoader73);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(namingPolicy75);
    }

    @Test
    public void test2183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2183");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader13 = null;
        generator12.setClassLoader(classLoader13);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        boolean boolean25 = strComparator20.equals((java.lang.Object) strComparator24);
        java.lang.Object[] objArray27 = new java.lang.Object[] { '4', strComparator17, strComparator20, 0.0d };
        generator12.setArrays(objArray27);
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader30 = null;
        generator29.setClassLoader(classLoader30);
        java.lang.ClassLoader classLoader32 = null;
        generator29.setClassLoader(classLoader32);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator36.setUseCache(true);
        boolean boolean39 = generator36.getAttemptLoad();
        boolean boolean40 = generator36.getUseCache();
        generator36.setAttemptLoad(true);
        generator36.setUseCache(true);
        generator36.setAttemptLoad(true);
        generator36.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator36.getStrategy();
        java.lang.ClassLoader classLoader50 = generator36.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator36.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator36.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy52);
        java.lang.ClassLoader classLoader54 = generator12.getClassLoader();
        generator0.setClassLoader(classLoader54);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator0.getNamingPolicy();
        boolean boolean57 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator58.setUseCache(true);
        boolean boolean61 = generator58.getAttemptLoad();
        boolean boolean62 = generator58.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator58.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator64 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator64.setUseCache(true);
        boolean boolean67 = generator64.getAttemptLoad();
        boolean boolean68 = generator64.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator64.getStrategy();
        generator58.setStrategy(generatorStrategy69);
        java.lang.ClassLoader classLoader71 = generator58.getClassLoader();
        generator58.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator74 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator74.setUseCache(true);
        boolean boolean77 = generator74.getAttemptLoad();
        boolean boolean78 = generator74.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator74.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator80 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator80.setUseCache(true);
        boolean boolean83 = generator80.getAttemptLoad();
        boolean boolean84 = generator80.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator80.getStrategy();
        generator74.setStrategy(generatorStrategy85);
        java.lang.ClassLoader classLoader87 = generator74.getClassLoader();
        generator58.setClassLoader(classLoader87);
        boolean boolean89 = generator58.getAttemptLoad();
        boolean boolean90 = generator58.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy91 = generator58.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy91);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(namingPolicy91);
    }

    @Test
    public void test2184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2184");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        boolean boolean9 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2185");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = generator0.getClassLoader();
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader13 = null;
        generator12.setClassLoader(classLoader13);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        boolean boolean25 = strComparator20.equals((java.lang.Object) strComparator24);
        java.lang.Object[] objArray27 = new java.lang.Object[] { '4', strComparator17, strComparator20, 0.0d };
        generator12.setArrays(objArray27);
        java.lang.ClassLoader classLoader29 = null;
        generator12.setClassLoader(classLoader29);
        generator12.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator33.setUseCache(true);
        boolean boolean36 = generator33.getAttemptLoad();
        boolean boolean37 = generator33.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy38);
        java.lang.ClassLoader classLoader40 = generator12.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader42 = null;
        generator41.setClassLoader(classLoader42);
        java.lang.ClassLoader classLoader44 = null;
        generator41.setClassLoader(classLoader44);
        generator41.setAttemptLoad(true);
        boolean boolean48 = generator41.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator41.getNamingPolicy();
        java.lang.ClassLoader classLoader50 = generator41.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader52 = null;
        generator51.setClassLoader(classLoader52);
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader55 = null;
        generator54.setClassLoader(classLoader55);
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = strComparator58.thenComparing(strComparator59);
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator63 = strComparator61.thenComparing(strComparator62);
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator66 = strComparator64.thenComparing(strComparator65);
        boolean boolean67 = strComparator62.equals((java.lang.Object) strComparator66);
        java.lang.Object[] objArray69 = new java.lang.Object[] { '4', strComparator59, strComparator62, 0.0d };
        generator54.setArrays(objArray69);
        generator51.setArrays(objArray69);
        generator41.setArrays(objArray69);
        generator12.setArrays(objArray69);
        generator0.setArrays(objArray69);
        org.mockito.cglib.util.ParallelSorter.Generator generator75 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator75.setUseCache(true);
        boolean boolean78 = generator75.getAttemptLoad();
        boolean boolean79 = generator75.getUseCache();
        generator75.setAttemptLoad(true);
        generator75.setUseCache(true);
        generator75.setUseCache(false);
        boolean boolean86 = generator75.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator75.getNamingPolicy();
        boolean boolean88 = generator75.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator89 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean90 = generator89.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy91 = generator89.getStrategy();
        java.lang.ClassLoader classLoader92 = generator89.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = generator89.getStrategy();
        generator75.setStrategy(generatorStrategy93);
        java.lang.ClassLoader classLoader95 = generator75.getClassLoader();
        generator0.setClassLoader(classLoader95);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(namingPolicy87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(generatorStrategy91);
        org.junit.Assert.assertNotNull(classLoader92);
        org.junit.Assert.assertNotNull(generatorStrategy93);
        org.junit.Assert.assertNotNull(classLoader95);
    }

    @Test
    public void test2186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2186");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator4.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator3.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator0.getStrategy();
        java.lang.ClassLoader classLoader20 = generator0.getClassLoader();
        java.lang.Class<?> wildcardClass21 = classLoader20.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test2187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2187");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        java.lang.ClassLoader classLoader21 = null;
        generator18.setClassLoader(classLoader21);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator18.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy23);
        boolean boolean25 = generator17.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader27 = null;
        generator26.setClassLoader(classLoader27);
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = strComparator30.thenComparing(strComparator31);
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = strComparator33.thenComparing(strComparator34);
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = strComparator36.thenComparing(strComparator37);
        boolean boolean39 = strComparator34.equals((java.lang.Object) strComparator38);
        java.lang.Object[] objArray41 = new java.lang.Object[] { '4', strComparator31, strComparator34, 0.0d };
        generator26.setArrays(objArray41);
        generator17.setArrays(objArray41);
        generator11.setArrays(objArray41);
        generator0.setArrays(objArray41);
        org.mockito.asm.ClassVisitor classVisitor46 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test2188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2188");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        boolean boolean28 = strComparator23.equals((java.lang.Object) strComparator27);
        java.lang.Object[] objArray30 = new java.lang.Object[] { '4', strComparator20, strComparator23, 0.0d };
        generator15.setArrays(objArray30);
        generator0.setArrays(objArray30);
        boolean boolean33 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor35 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(namingPolicy34);
    }

    @Test
    public void test2189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2189");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator4.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator3.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        boolean boolean19 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator20.setStrategy(generatorStrategy26);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator28.setUseCache(true);
        boolean boolean31 = generator28.getAttemptLoad();
        boolean boolean32 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator28.getStrategy();
        generator20.setStrategy(generatorStrategy33);
        generator20.setAttemptLoad(false);
        boolean boolean37 = generator20.getUseCache();
        java.lang.ClassLoader classLoader38 = generator20.getClassLoader();
        generator0.setClassLoader(classLoader38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator40.getStrategy();
        java.lang.ClassLoader classLoader42 = generator40.getClassLoader();
        generator0.setClassLoader(classLoader42);
        boolean boolean44 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader49 = null;
        generator48.setClassLoader(classLoader49);
        java.lang.ClassLoader classLoader51 = null;
        generator48.setClassLoader(classLoader51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator48.getNamingPolicy();
        generator47.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator47.getNamingPolicy();
        boolean boolean56 = generator47.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator47.setStrategy(generatorStrategy57);
        java.lang.ClassLoader classLoader59 = generator47.getClassLoader();
        generator0.setClassLoader(classLoader59);
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(classLoader59);
    }

    @Test
    public void test2190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2190");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        java.lang.ClassLoader classLoader13 = generator10.getClassLoader();
        generator0.setClassLoader(classLoader13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader30 = null;
        generator29.setClassLoader(classLoader30);
        java.lang.ClassLoader classLoader32 = null;
        generator29.setClassLoader(classLoader32);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        generator28.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator28.getNamingPolicy();
        generator28.setUseCache(false);
        boolean boolean39 = generator28.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator28.getNamingPolicy();
        generator28.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator28.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy43);
        generator15.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator47.setUseCache(true);
        boolean boolean50 = generator47.getAttemptLoad();
        boolean boolean51 = generator47.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator47.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator53.setUseCache(true);
        boolean boolean56 = generator53.getAttemptLoad();
        boolean boolean57 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator53.getStrategy();
        generator47.setStrategy(generatorStrategy58);
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader62 = null;
        generator61.setClassLoader(classLoader62);
        java.lang.ClassLoader classLoader64 = null;
        generator61.setClassLoader(classLoader64);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator61.getNamingPolicy();
        generator60.setNamingPolicy(namingPolicy66);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator60.getNamingPolicy();
        generator60.setUseCache(false);
        boolean boolean71 = generator60.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator60.getNamingPolicy();
        generator60.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator60.getNamingPolicy();
        generator47.setNamingPolicy(namingPolicy75);
        generator15.setNamingPolicy(namingPolicy75);
        generator0.setNamingPolicy(namingPolicy75);
        boolean boolean79 = generator0.getUseCache();
        boolean boolean80 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test2191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2191");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        generator0.setAttemptLoad(false);
        boolean boolean17 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor20 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2192");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator0.getNamingPolicy();
        boolean boolean30 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        boolean boolean34 = generator31.getAttemptLoad();
        boolean boolean35 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator31.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator31.getNamingPolicy();
        java.lang.Object[] objArray38 = null;
        generator31.setArrays(objArray38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator40.setUseCache(true);
        boolean boolean43 = generator40.getAttemptLoad();
        boolean boolean44 = generator40.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator40.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator46.setUseCache(true);
        boolean boolean49 = generator46.getAttemptLoad();
        boolean boolean50 = generator46.getUseCache();
        generator46.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator53.getStrategy();
        generator46.setStrategy(generatorStrategy54);
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator56.setUseCache(true);
        java.lang.ClassLoader classLoader59 = generator56.getClassLoader();
        generator46.setClassLoader(classLoader59);
        generator40.setClassLoader(classLoader59);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator40.getNamingPolicy();
        generator31.setNamingPolicy(namingPolicy62);
        org.mockito.cglib.util.ParallelSorter.Generator generator64 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader65 = null;
        generator64.setClassLoader(classLoader65);
        java.lang.ClassLoader classLoader67 = null;
        generator64.setClassLoader(classLoader67);
        generator64.setAttemptLoad(true);
        boolean boolean71 = generator64.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator64.getNamingPolicy();
        java.lang.ClassLoader classLoader73 = generator64.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator74 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader75 = null;
        generator74.setClassLoader(classLoader75);
        org.mockito.cglib.util.ParallelSorter.Generator generator77 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader78 = null;
        generator77.setClassLoader(classLoader78);
        java.util.Comparator<java.lang.String> strComparator81 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator82 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator83 = strComparator81.thenComparing(strComparator82);
        java.util.Comparator<java.lang.String> strComparator84 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator85 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator86 = strComparator84.thenComparing(strComparator85);
        java.util.Comparator<java.lang.String> strComparator87 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator88 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator89 = strComparator87.thenComparing(strComparator88);
        boolean boolean90 = strComparator85.equals((java.lang.Object) strComparator89);
        java.lang.Object[] objArray92 = new java.lang.Object[] { '4', strComparator82, strComparator85, 0.0d };
        generator77.setArrays(objArray92);
        generator74.setArrays(objArray92);
        generator64.setArrays(objArray92);
        generator31.setArrays(objArray92);
        generator0.setArrays(objArray92);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertNotNull(strComparator84);
        org.junit.Assert.assertNotNull(strComparator85);
        org.junit.Assert.assertNotNull(strComparator86);
        org.junit.Assert.assertNotNull(strComparator87);
        org.junit.Assert.assertNotNull(strComparator88);
        org.junit.Assert.assertNotNull(strComparator89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test2193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2193");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(false);
        boolean boolean14 = generator0.getAttemptLoad();
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = strComparator15.thenComparing(strComparator16);
        java.util.Comparator<java.lang.String> strComparator18 = strComparator15.reversed();
        java.util.Comparator<java.lang.String> strComparator19 = strComparator18.reversed();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        java.lang.ClassLoader classLoader24 = generator21.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator25.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator25.getStrategy();
        generator21.setStrategy(generatorStrategy28);
        boolean boolean30 = strComparator20.equals((java.lang.Object) generator21);
        generator21.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator33.setUseCache(true);
        boolean boolean36 = generator33.getAttemptLoad();
        java.lang.ClassLoader classLoader37 = null;
        generator33.setClassLoader(classLoader37);
        generator33.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        generator41.setNamingPolicy(namingPolicy47);
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader50 = null;
        generator49.setClassLoader(classLoader50);
        java.lang.ClassLoader classLoader52 = null;
        generator49.setClassLoader(classLoader52);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator49.getNamingPolicy();
        generator41.setNamingPolicy(namingPolicy54);
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator56.setUseCache(true);
        java.lang.ClassLoader classLoader59 = generator56.getClassLoader();
        generator41.setClassLoader(classLoader59);
        generator41.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader64 = null;
        generator63.setClassLoader(classLoader64);
        java.lang.ClassLoader classLoader66 = generator63.getClassLoader();
        generator41.setClassLoader(classLoader66);
        boolean boolean68 = generator41.getAttemptLoad();
        java.lang.ClassLoader classLoader69 = generator41.getClassLoader();
        generator33.setClassLoader(classLoader69);
        generator21.setClassLoader(classLoader69);
        generator0.setClassLoader(classLoader69);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(classLoader69);
    }

    @Test
    public void test2194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2194");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        generator6.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator13.getStrategy();
        generator6.setStrategy(generatorStrategy14);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        java.lang.ClassLoader classLoader19 = generator16.getClassLoader();
        generator6.setClassLoader(classLoader19);
        generator0.setClassLoader(classLoader19);
        java.lang.ClassLoader classLoader22 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader23 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor26 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader23);
    }

    @Test
    public void test2195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2195");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        boolean boolean13 = generator10.getAttemptLoad();
        boolean boolean14 = generator10.getUseCache();
        generator10.setAttemptLoad(true);
        generator10.setUseCache(true);
        generator10.setAttemptLoad(true);
        generator10.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator23.getStrategy();
        java.lang.ClassLoader classLoader25 = generator23.getClassLoader();
        generator23.setUseCache(false);
        boolean boolean28 = generator23.getAttemptLoad();
        boolean boolean29 = generator23.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        boolean boolean34 = generator31.getAttemptLoad();
        boolean boolean35 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator31.getStrategy();
        generator30.setStrategy(generatorStrategy36);
        boolean boolean38 = generator30.getAttemptLoad();
        generator30.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        generator41.setNamingPolicy(namingPolicy47);
        boolean boolean49 = generator41.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader51 = null;
        generator50.setClassLoader(classLoader51);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = strComparator57.thenComparing(strComparator58);
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = strComparator60.thenComparing(strComparator61);
        boolean boolean63 = strComparator58.equals((java.lang.Object) strComparator62);
        java.lang.Object[] objArray65 = new java.lang.Object[] { '4', strComparator55, strComparator58, 0.0d };
        generator50.setArrays(objArray65);
        generator41.setArrays(objArray65);
        boolean boolean68 = generator41.getAttemptLoad();
        java.lang.Object[] objArray69 = new java.lang.Object[] { generator41 };
        generator30.setArrays(objArray69);
        generator23.setArrays(objArray69);
        generator10.setArrays(objArray69);
        generator0.setArrays(objArray69);
        org.mockito.asm.ClassVisitor classVisitor74 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.util.ParallelSorter$Generator is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objArray69);
    }

    @Test
    public void test2196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2196");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        java.lang.ClassLoader classLoader13 = generator10.getClassLoader();
        generator0.setClassLoader(classLoader13);
        boolean boolean15 = generator0.getAttemptLoad();
        boolean boolean16 = generator0.getUseCache();
        boolean boolean17 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator18.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator27.setUseCache(true);
        boolean boolean30 = generator27.getAttemptLoad();
        boolean boolean31 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator27.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader35 = null;
        generator34.setClassLoader(classLoader35);
        java.lang.ClassLoader classLoader37 = null;
        generator34.setClassLoader(classLoader37);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator34.getNamingPolicy();
        generator33.setNamingPolicy(namingPolicy39);
        boolean boolean41 = generator33.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = strComparator46.thenComparing(strComparator47);
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = strComparator49.thenComparing(strComparator50);
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = strComparator52.thenComparing(strComparator53);
        boolean boolean55 = strComparator50.equals((java.lang.Object) strComparator54);
        java.lang.Object[] objArray57 = new java.lang.Object[] { '4', strComparator47, strComparator50, 0.0d };
        generator42.setArrays(objArray57);
        generator33.setArrays(objArray57);
        generator27.setArrays(objArray57);
        generator18.setArrays(objArray57);
        generator0.setArrays(objArray57);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter63 = org.mockito.cglib.util.ParallelSorter.create(objArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test2197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2197");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        boolean boolean10 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator13.setUseCache(true);
        boolean boolean16 = generator13.getAttemptLoad();
        boolean boolean17 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator13.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator13.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator13.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator22.getStrategy();
        generator21.setStrategy(generatorStrategy27);
        boolean boolean29 = generator21.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator21.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        boolean boolean34 = generator31.getAttemptLoad();
        boolean boolean35 = generator31.getUseCache();
        generator31.setAttemptLoad(true);
        generator31.setUseCache(true);
        generator31.setAttemptLoad(true);
        generator31.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator44.getStrategy();
        java.lang.ClassLoader classLoader46 = generator44.getClassLoader();
        generator44.setUseCache(false);
        boolean boolean49 = generator44.getAttemptLoad();
        boolean boolean50 = generator44.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator52.setUseCache(true);
        boolean boolean55 = generator52.getAttemptLoad();
        boolean boolean56 = generator52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator52.getStrategy();
        generator51.setStrategy(generatorStrategy57);
        boolean boolean59 = generator51.getAttemptLoad();
        generator51.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader64 = null;
        generator63.setClassLoader(classLoader64);
        java.lang.ClassLoader classLoader66 = null;
        generator63.setClassLoader(classLoader66);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator63.getNamingPolicy();
        generator62.setNamingPolicy(namingPolicy68);
        boolean boolean70 = generator62.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator71 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader72 = null;
        generator71.setClassLoader(classLoader72);
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = strComparator75.thenComparing(strComparator76);
        java.util.Comparator<java.lang.String> strComparator78 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = strComparator78.thenComparing(strComparator79);
        java.util.Comparator<java.lang.String> strComparator81 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator82 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator83 = strComparator81.thenComparing(strComparator82);
        boolean boolean84 = strComparator79.equals((java.lang.Object) strComparator83);
        java.lang.Object[] objArray86 = new java.lang.Object[] { '4', strComparator76, strComparator79, 0.0d };
        generator71.setArrays(objArray86);
        generator62.setArrays(objArray86);
        boolean boolean89 = generator62.getAttemptLoad();
        java.lang.Object[] objArray90 = new java.lang.Object[] { generator62 };
        generator51.setArrays(objArray90);
        generator44.setArrays(objArray90);
        generator31.setArrays(objArray90);
        generator21.setArrays(objArray90);
        generator13.setArrays(objArray90);
        generator0.setArrays(objArray90);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter97 = org.mockito.cglib.util.ParallelSorter.create(objArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.util.ParallelSorter$Generator is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(objArray90);
    }

    @Test
    public void test2198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2198");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator0.getNamingPolicy();
        boolean boolean17 = generator0.getUseCache();
        java.lang.ClassLoader classLoader18 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor19 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(classLoader18);
    }

    @Test
    public void test2199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2199");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        boolean boolean8 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader10 = null;
        generator9.setClassLoader(classLoader10);
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = strComparator13.thenComparing(strComparator14);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        boolean boolean22 = strComparator17.equals((java.lang.Object) strComparator21);
        java.lang.Object[] objArray24 = new java.lang.Object[] { '4', strComparator14, strComparator17, 0.0d };
        generator9.setArrays(objArray24);
        java.lang.ClassLoader classLoader26 = null;
        generator9.setClassLoader(classLoader26);
        boolean boolean28 = generator9.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator29.getStrategy();
        generator9.setStrategy(generatorStrategy34);
        generator0.setStrategy(generatorStrategy34);
        java.lang.ClassLoader classLoader37 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader40 = null;
        generator39.setClassLoader(classLoader40);
        java.lang.ClassLoader classLoader42 = null;
        generator39.setClassLoader(classLoader42);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        generator38.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator38.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator47.setUseCache(true);
        boolean boolean50 = generator47.getAttemptLoad();
        boolean boolean51 = generator47.getUseCache();
        generator47.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator54.getStrategy();
        generator47.setStrategy(generatorStrategy55);
        generator38.setStrategy(generatorStrategy55);
        java.lang.ClassLoader classLoader58 = generator38.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator38.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader62 = null;
        generator61.setClassLoader(classLoader62);
        java.lang.ClassLoader classLoader64 = null;
        generator61.setClassLoader(classLoader64);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator61.getNamingPolicy();
        generator60.setNamingPolicy(namingPolicy66);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator60.getNamingPolicy();
        boolean boolean69 = generator60.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = null;
        generator60.setStrategy(generatorStrategy70);
        org.mockito.cglib.util.ParallelSorter.Generator generator72 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator73 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator73.setUseCache(true);
        boolean boolean76 = generator73.getAttemptLoad();
        boolean boolean77 = generator73.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator73.getStrategy();
        generator72.setStrategy(generatorStrategy78);
        boolean boolean80 = generator72.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator72.getNamingPolicy();
        java.lang.ClassLoader classLoader82 = generator72.getClassLoader();
        generator60.setClassLoader(classLoader82);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator60.getStrategy();
        generator38.setStrategy(generatorStrategy84);
        generator0.setStrategy(generatorStrategy84);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertNotNull(generatorStrategy84);
    }

    @Test
    public void test2200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2200");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        boolean boolean11 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader15 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator18.getStrategy();
        java.lang.ClassLoader classLoader20 = generator18.getClassLoader();
        generator18.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator23.setUseCache(true);
        boolean boolean26 = generator23.getAttemptLoad();
        boolean boolean27 = generator23.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator28.setUseCache(true);
        boolean boolean31 = generator28.getAttemptLoad();
        boolean boolean32 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator28.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator28.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator28.getStrategy();
        generator23.setStrategy(generatorStrategy35);
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator37.setUseCache(true);
        boolean boolean40 = generator37.getAttemptLoad();
        boolean boolean41 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator37.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator43.setUseCache(true);
        boolean boolean46 = generator43.getAttemptLoad();
        boolean boolean47 = generator43.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator43.getStrategy();
        generator37.setStrategy(generatorStrategy48);
        java.lang.ClassLoader classLoader50 = generator37.getClassLoader();
        generator37.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator53.setUseCache(true);
        boolean boolean56 = generator53.getAttemptLoad();
        boolean boolean57 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator53.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator59.setUseCache(true);
        boolean boolean62 = generator59.getAttemptLoad();
        boolean boolean63 = generator59.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator59.getStrategy();
        generator53.setStrategy(generatorStrategy64);
        java.lang.ClassLoader classLoader66 = generator53.getClassLoader();
        generator37.setClassLoader(classLoader66);
        generator23.setClassLoader(classLoader66);
        generator18.setClassLoader(classLoader66);
        generator0.setClassLoader(classLoader66);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter71 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(classLoader66);
    }

    @Test
    public void test2201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2201");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader13 = null;
        generator12.setClassLoader(classLoader13);
        java.lang.ClassLoader classLoader15 = null;
        generator12.setClassLoader(classLoader15);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy17);
        boolean boolean19 = generator11.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader21 = null;
        generator20.setClassLoader(classLoader21);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = strComparator27.thenComparing(strComparator28);
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = strComparator30.thenComparing(strComparator31);
        boolean boolean33 = strComparator28.equals((java.lang.Object) strComparator32);
        java.lang.Object[] objArray35 = new java.lang.Object[] { '4', strComparator25, strComparator28, 0.0d };
        generator20.setArrays(objArray35);
        generator11.setArrays(objArray35);
        boolean boolean38 = generator11.getAttemptLoad();
        java.lang.Object[] objArray39 = new java.lang.Object[] { generator11 };
        generator0.setArrays(objArray39);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader42 = null;
        generator41.setClassLoader(classLoader42);
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = strComparator45.thenComparing(strComparator46);
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = strComparator48.thenComparing(strComparator49);
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = strComparator51.thenComparing(strComparator52);
        boolean boolean54 = strComparator49.equals((java.lang.Object) strComparator53);
        java.lang.Object[] objArray56 = new java.lang.Object[] { '4', strComparator46, strComparator49, 0.0d };
        generator41.setArrays(objArray56);
        java.lang.ClassLoader classLoader58 = null;
        generator41.setClassLoader(classLoader58);
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader61 = null;
        generator60.setClassLoader(classLoader61);
        java.lang.ClassLoader classLoader63 = null;
        generator60.setClassLoader(classLoader63);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator60.getNamingPolicy();
        generator41.setNamingPolicy(namingPolicy65);
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator68 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader69 = null;
        generator68.setClassLoader(classLoader69);
        java.lang.ClassLoader classLoader71 = null;
        generator68.setClassLoader(classLoader71);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator68.getNamingPolicy();
        generator67.setNamingPolicy(namingPolicy73);
        org.mockito.cglib.util.ParallelSorter.Generator generator75 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader76 = null;
        generator75.setClassLoader(classLoader76);
        java.lang.ClassLoader classLoader78 = null;
        generator75.setClassLoader(classLoader78);
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator75.getNamingPolicy();
        generator67.setNamingPolicy(namingPolicy80);
        org.mockito.cglib.util.ParallelSorter.Generator generator82 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator82.setUseCache(true);
        java.lang.ClassLoader classLoader85 = generator82.getClassLoader();
        generator67.setClassLoader(classLoader85);
        generator67.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator89 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader90 = null;
        generator89.setClassLoader(classLoader90);
        java.lang.ClassLoader classLoader92 = generator89.getClassLoader();
        generator67.setClassLoader(classLoader92);
        generator41.setClassLoader(classLoader92);
        generator0.setClassLoader(classLoader92);
        org.mockito.cglib.core.NamingPolicy namingPolicy96 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader97 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader98 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertNotNull(classLoader85);
        org.junit.Assert.assertNotNull(classLoader92);
        org.junit.Assert.assertNotNull(namingPolicy96);
        org.junit.Assert.assertNotNull(classLoader97);
        org.junit.Assert.assertNotNull(classLoader98);
    }

    @Test
    public void test2202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2202");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader8 = null;
        generator7.setClassLoader(classLoader8);
        java.lang.ClassLoader classLoader10 = null;
        generator7.setClassLoader(classLoader10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        boolean boolean27 = strComparator22.equals((java.lang.Object) strComparator26);
        java.lang.Object[] objArray29 = new java.lang.Object[] { '4', strComparator19, strComparator22, 0.0d };
        generator14.setArrays(objArray29);
        java.lang.ClassLoader classLoader31 = null;
        generator14.setClassLoader(classLoader31);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        generator40.setStrategy(generatorStrategy46);
        generator14.setStrategy(generatorStrategy46);
        generator6.setStrategy(generatorStrategy46);
        generator0.setStrategy(generatorStrategy46);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(namingPolicy51);
    }

    @Test
    public void test2203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2203");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        java.lang.ClassLoader classLoader7 = generator4.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator8.getStrategy();
        generator4.setStrategy(generatorStrategy11);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy14);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader17 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(classLoader17);
    }

    @Test
    public void test2204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2204");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator22.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator28.setUseCache(true);
        boolean boolean31 = generator28.getAttemptLoad();
        boolean boolean32 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator28.getStrategy();
        generator22.setStrategy(generatorStrategy33);
        java.lang.ClassLoader classLoader35 = generator22.getClassLoader();
        generator22.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator38.setUseCache(true);
        boolean boolean41 = generator38.getAttemptLoad();
        boolean boolean42 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator38.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator44.setUseCache(true);
        boolean boolean47 = generator44.getAttemptLoad();
        boolean boolean48 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator44.getStrategy();
        generator38.setStrategy(generatorStrategy49);
        java.lang.ClassLoader classLoader51 = generator38.getClassLoader();
        generator22.setClassLoader(classLoader51);
        boolean boolean53 = generator22.getAttemptLoad();
        generator22.setUseCache(true);
        generator22.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator58.setUseCache(true);
        boolean boolean61 = generator58.getAttemptLoad();
        boolean boolean62 = generator58.getUseCache();
        generator58.setAttemptLoad(true);
        generator58.setUseCache(true);
        generator58.setUseCache(false);
        boolean boolean69 = generator58.getUseCache();
        java.lang.ClassLoader classLoader70 = generator58.getClassLoader();
        boolean boolean71 = generator58.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator72 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader73 = null;
        generator72.setClassLoader(classLoader73);
        org.mockito.cglib.util.ParallelSorter.Generator generator75 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader76 = null;
        generator75.setClassLoader(classLoader76);
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator81 = strComparator79.thenComparing(strComparator80);
        java.util.Comparator<java.lang.String> strComparator82 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator83 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator84 = strComparator82.thenComparing(strComparator83);
        java.util.Comparator<java.lang.String> strComparator85 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator86 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator87 = strComparator85.thenComparing(strComparator86);
        boolean boolean88 = strComparator83.equals((java.lang.Object) strComparator87);
        java.lang.Object[] objArray90 = new java.lang.Object[] { '4', strComparator80, strComparator83, 0.0d };
        generator75.setArrays(objArray90);
        generator72.setArrays(objArray90);
        generator58.setArrays(objArray90);
        generator22.setArrays(objArray90);
        generator0.setArrays(objArray90);
        org.mockito.cglib.core.NamingPolicy namingPolicy96 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertNotNull(strComparator84);
        org.junit.Assert.assertNotNull(strComparator85);
        org.junit.Assert.assertNotNull(strComparator86);
        org.junit.Assert.assertNotNull(strComparator87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy96);
    }

    @Test
    public void test2205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2205");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.reverseOrder();
        int int3 = strComparator0.compare("", "hi!");
        java.util.Comparator<java.lang.String> strComparator4 = strComparator0.reversed();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.reverseOrder();
        boolean boolean6 = strComparator4.equals((java.lang.Object) strComparator5);
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator7.setUseCache(true);
        boolean boolean10 = generator7.getAttemptLoad();
        generator7.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader14 = null;
        generator13.setClassLoader(classLoader14);
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = strComparator17.thenComparing(strComparator18);
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = strComparator20.thenComparing(strComparator21);
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = strComparator23.thenComparing(strComparator24);
        boolean boolean26 = strComparator21.equals((java.lang.Object) strComparator25);
        java.lang.Object[] objArray28 = new java.lang.Object[] { '4', strComparator18, strComparator21, 0.0d };
        generator13.setArrays(objArray28);
        java.lang.ClassLoader classLoader30 = null;
        generator13.setClassLoader(classLoader30);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader33 = null;
        generator32.setClassLoader(classLoader33);
        java.lang.ClassLoader classLoader35 = null;
        generator32.setClassLoader(classLoader35);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator32.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator40.setUseCache(true);
        boolean boolean43 = generator40.getAttemptLoad();
        boolean boolean44 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator40.getStrategy();
        generator39.setStrategy(generatorStrategy45);
        generator13.setStrategy(generatorStrategy45);
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader50 = null;
        generator49.setClassLoader(classLoader50);
        java.lang.ClassLoader classLoader52 = null;
        generator49.setClassLoader(classLoader52);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator49.getNamingPolicy();
        generator48.setNamingPolicy(namingPolicy54);
        generator13.setNamingPolicy(namingPolicy54);
        generator7.setNamingPolicy(namingPolicy54);
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.reverseOrder();
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator59.setUseCache(true);
        boolean boolean62 = strComparator58.equals((java.lang.Object) generator59);
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = strComparator63.thenComparing(strComparator64);
        java.util.Comparator<java.lang.String> strComparator66 = strComparator63.reversed();
        java.util.Comparator<java.lang.String> strComparator67 = strComparator66.reversed();
        java.util.Comparator<java.lang.String> strComparator68 = strComparator66.reversed();
        java.util.Comparator<java.lang.String> strComparator69 = strComparator68.reversed();
        java.util.Comparator<java.lang.String> strComparator70 = java.util.Comparator.nullsFirst(strComparator68);
        java.util.Comparator<java.lang.String> strComparator71 = strComparator58.thenComparing(strComparator70);
        org.mockito.cglib.util.ParallelSorter.Generator generator72 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator72.setUseCache(true);
        boolean boolean75 = generator72.getAttemptLoad();
        boolean boolean76 = generator72.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator72.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator72.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator72.getStrategy();
        boolean boolean80 = strComparator58.equals((java.lang.Object) generatorStrategy79);
        generator7.setStrategy(generatorStrategy79);
        boolean boolean82 = strComparator5.equals((java.lang.Object) generatorStrategy79);
        int int85 = strComparator5.compare("", "");
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test2206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2206");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader8 = null;
        generator7.setClassLoader(classLoader8);
        java.lang.ClassLoader classLoader10 = null;
        generator7.setClassLoader(classLoader10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        boolean boolean27 = strComparator22.equals((java.lang.Object) strComparator26);
        java.lang.Object[] objArray29 = new java.lang.Object[] { '4', strComparator19, strComparator22, 0.0d };
        generator14.setArrays(objArray29);
        java.lang.ClassLoader classLoader31 = null;
        generator14.setClassLoader(classLoader31);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        generator40.setStrategy(generatorStrategy46);
        generator14.setStrategy(generatorStrategy46);
        generator6.setStrategy(generatorStrategy46);
        generator0.setStrategy(generatorStrategy46);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
    }

    @Test
    public void test2207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2207");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        boolean boolean16 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2208");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        boolean boolean19 = generator16.getAttemptLoad();
        boolean boolean20 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator16.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator22.getStrategy();
        generator16.setStrategy(generatorStrategy27);
        java.lang.ClassLoader classLoader29 = generator16.getClassLoader();
        generator0.setClassLoader(classLoader29);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        boolean boolean34 = generator31.getAttemptLoad();
        boolean boolean35 = generator31.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator31.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator0.getStrategy();
        boolean boolean39 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader42 = null;
        generator41.setClassLoader(classLoader42);
        java.lang.ClassLoader classLoader44 = null;
        generator41.setClassLoader(classLoader44);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator41.getNamingPolicy();
        generator40.setNamingPolicy(namingPolicy46);
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader49 = null;
        generator48.setClassLoader(classLoader49);
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = strComparator52.thenComparing(strComparator53);
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = strComparator55.thenComparing(strComparator56);
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = strComparator58.thenComparing(strComparator59);
        boolean boolean61 = strComparator56.equals((java.lang.Object) strComparator60);
        java.lang.Object[] objArray63 = new java.lang.Object[] { '4', strComparator53, strComparator56, 0.0d };
        generator48.setArrays(objArray63);
        generator40.setArrays(objArray63);
        generator0.setArrays(objArray63);
        boolean boolean67 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter68 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test2209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2209");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        boolean boolean7 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor10 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2210");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getUseCache();
        java.lang.ClassLoader classLoader6 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator7.getStrategy();
        generator7.setUseCache(true);
        boolean boolean11 = generator7.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        generator12.setUseCache(true);
        generator12.setAttemptLoad(true);
        generator12.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader26 = null;
        generator25.setClassLoader(classLoader26);
        java.lang.ClassLoader classLoader28 = null;
        generator25.setClassLoader(classLoader28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator25.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator25.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy31);
        generator7.setNamingPolicy(namingPolicy31);
        generator0.setNamingPolicy(namingPolicy31);
        boolean boolean35 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test2211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2211");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator0.getNamingPolicy();
        boolean boolean17 = generator0.getUseCache();
        java.lang.ClassLoader classLoader18 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader21 = null;
        generator20.setClassLoader(classLoader21);
        java.lang.ClassLoader classLoader23 = null;
        generator20.setClassLoader(classLoader23);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator20.getNamingPolicy();
        generator19.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.lang.ClassLoader classLoader30 = null;
        generator27.setClassLoader(classLoader30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator19.setNamingPolicy(namingPolicy32);
        generator19.setAttemptLoad(false);
        generator19.setUseCache(false);
        generator19.setAttemptLoad(true);
        java.lang.ClassLoader classLoader40 = generator19.getClassLoader();
        generator0.setClassLoader(classLoader40);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(classLoader40);
    }

    @Test
    public void test2212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2212");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        boolean boolean13 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2213");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        boolean boolean9 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator0.setStrategy(generatorStrategy10);
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        java.lang.ClassLoader classLoader18 = null;
        generator15.setClassLoader(classLoader18);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator15.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader23 = null;
        generator22.setClassLoader(classLoader23);
        java.lang.ClassLoader classLoader25 = null;
        generator22.setClassLoader(classLoader25);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator22.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy27);
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        java.lang.ClassLoader classLoader32 = generator29.getClassLoader();
        generator14.setClassLoader(classLoader32);
        generator14.setAttemptLoad(false);
        generator14.setUseCache(true);
        generator14.setUseCache(false);
        java.lang.ClassLoader classLoader40 = generator14.getClassLoader();
        generator0.setClassLoader(classLoader40);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(namingPolicy42);
    }

    @Test
    public void test2214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2214");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        java.lang.ClassLoader classLoader5 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean8 = generator0.getUseCache();
        java.lang.ClassLoader classLoader9 = generator0.getClassLoader();
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(classLoader9);
    }

    @Test
    public void test2215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2215");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
    }

    @Test
    public void test2216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2216");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        generator0.setAttemptLoad(true);
        boolean boolean17 = generator0.getAttemptLoad();
        boolean boolean18 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test2217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2217");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader9 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader10 = generator0.getClassLoader();
        boolean boolean11 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        generator12.setUseCache(true);
        generator12.setAttemptLoad(true);
        generator12.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator12.getStrategy();
        java.lang.ClassLoader classLoader26 = generator12.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator12.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator12.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator12.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        boolean boolean34 = generator31.getAttemptLoad();
        boolean boolean35 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator31.getStrategy();
        generator30.setStrategy(generatorStrategy36);
        boolean boolean38 = generator30.getAttemptLoad();
        generator30.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        generator41.setNamingPolicy(namingPolicy47);
        boolean boolean49 = generator41.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader51 = null;
        generator50.setClassLoader(classLoader51);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = strComparator57.thenComparing(strComparator58);
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = strComparator60.thenComparing(strComparator61);
        boolean boolean63 = strComparator58.equals((java.lang.Object) strComparator62);
        java.lang.Object[] objArray65 = new java.lang.Object[] { '4', strComparator55, strComparator58, 0.0d };
        generator50.setArrays(objArray65);
        generator41.setArrays(objArray65);
        boolean boolean68 = generator41.getAttemptLoad();
        java.lang.Object[] objArray69 = new java.lang.Object[] { generator41 };
        generator30.setArrays(objArray69);
        generator12.setArrays(objArray69);
        generator0.setArrays(objArray69);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass74 = generatorStrategy73.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test2218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2218");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader21 = generator0.getClassLoader();
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader21);
    }

    @Test
    public void test2219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2219");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        generator15.setUseCache(true);
        generator15.setAttemptLoad(true);
        generator15.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator15.getStrategy();
        java.lang.ClassLoader classLoader29 = generator15.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader31 = null;
        generator30.setClassLoader(classLoader31);
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = strComparator34.thenComparing(strComparator35);
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = strComparator37.thenComparing(strComparator38);
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = strComparator40.thenComparing(strComparator41);
        boolean boolean43 = strComparator38.equals((java.lang.Object) strComparator42);
        java.lang.Object[] objArray45 = new java.lang.Object[] { '4', strComparator35, strComparator38, 0.0d };
        generator30.setArrays(objArray45);
        generator15.setArrays(objArray45);
        generator0.setArrays(objArray45);
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test2220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2220");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator5.setUseCache(true);
        boolean boolean8 = generator5.getAttemptLoad();
        java.lang.ClassLoader classLoader9 = null;
        generator5.setClassLoader(classLoader9);
        boolean boolean11 = generator5.getUseCache();
        boolean boolean12 = generator5.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator13.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator17.setUseCache(true);
        boolean boolean20 = generator17.getAttemptLoad();
        boolean boolean21 = generator17.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator17.getStrategy();
        generator16.setStrategy(generatorStrategy22);
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator24.setUseCache(true);
        boolean boolean27 = generator24.getAttemptLoad();
        boolean boolean28 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator24.getStrategy();
        generator16.setStrategy(generatorStrategy29);
        generator13.setStrategy(generatorStrategy29);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean33 = generator32.getAttemptLoad();
        java.lang.ClassLoader classLoader34 = generator32.getClassLoader();
        generator13.setClassLoader(classLoader34);
        generator5.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader37 = generator5.getClassLoader();
        generator5.setAttemptLoad(true);
        java.lang.ClassLoader classLoader40 = generator5.getClassLoader();
        generator0.setClassLoader(classLoader40);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator42.getStrategy();
        java.lang.ClassLoader classLoader44 = generator42.getClassLoader();
        generator42.setUseCache(false);
        boolean boolean47 = generator42.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator42.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator49.setUseCache(true);
        boolean boolean52 = generator49.getAttemptLoad();
        boolean boolean53 = generator49.getUseCache();
        generator49.setAttemptLoad(true);
        generator49.setUseCache(true);
        generator49.setUseCache(false);
        boolean boolean60 = generator49.getUseCache();
        java.lang.ClassLoader classLoader61 = generator49.getClassLoader();
        boolean boolean62 = generator49.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader64 = null;
        generator63.setClassLoader(classLoader64);
        org.mockito.cglib.util.ParallelSorter.Generator generator66 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader67 = null;
        generator66.setClassLoader(classLoader67);
        java.util.Comparator<java.lang.String> strComparator70 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator71 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator72 = strComparator70.thenComparing(strComparator71);
        java.util.Comparator<java.lang.String> strComparator73 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator74 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator75 = strComparator73.thenComparing(strComparator74);
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator78 = strComparator76.thenComparing(strComparator77);
        boolean boolean79 = strComparator74.equals((java.lang.Object) strComparator78);
        java.lang.Object[] objArray81 = new java.lang.Object[] { '4', strComparator71, strComparator74, 0.0d };
        generator66.setArrays(objArray81);
        generator63.setArrays(objArray81);
        generator49.setArrays(objArray81);
        generator42.setArrays(objArray81);
        generator0.setArrays(objArray81);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter87 = org.mockito.cglib.util.ParallelSorter.create(objArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test2221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2221");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.lang.ClassLoader classLoader17 = null;
        generator14.setClassLoader(classLoader17);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator14.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator13.getNamingPolicy();
        generator13.setUseCache(false);
        boolean boolean24 = generator13.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator13.getNamingPolicy();
        generator13.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator13.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy28);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator32.setUseCache(true);
        boolean boolean35 = generator32.getAttemptLoad();
        boolean boolean36 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator32.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator38.setUseCache(true);
        boolean boolean41 = generator38.getAttemptLoad();
        boolean boolean42 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator38.getStrategy();
        generator32.setStrategy(generatorStrategy43);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader47 = null;
        generator46.setClassLoader(classLoader47);
        java.lang.ClassLoader classLoader49 = null;
        generator46.setClassLoader(classLoader49);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator46.getNamingPolicy();
        generator45.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator45.getNamingPolicy();
        generator45.setUseCache(false);
        boolean boolean56 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator45.getNamingPolicy();
        generator45.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator45.getNamingPolicy();
        generator32.setNamingPolicy(namingPolicy60);
        generator0.setNamingPolicy(namingPolicy60);
        boolean boolean63 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor64 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test2222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2222");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        generator0.setAttemptLoad(false);
        boolean boolean17 = generator0.getUseCache();
        java.lang.ClassLoader classLoader18 = generator0.getClassLoader();
        boolean boolean19 = generator0.getUseCache();
        boolean boolean20 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator25.setUseCache(true);
        boolean boolean28 = generator25.getAttemptLoad();
        boolean boolean29 = generator25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator25.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator25.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator25.getStrategy();
        boolean boolean33 = generator25.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader35 = null;
        generator34.setClassLoader(classLoader35);
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = strComparator38.thenComparing(strComparator39);
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = strComparator41.thenComparing(strComparator42);
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = strComparator44.thenComparing(strComparator45);
        boolean boolean47 = strComparator42.equals((java.lang.Object) strComparator46);
        java.lang.Object[] objArray49 = new java.lang.Object[] { '4', strComparator39, strComparator42, 0.0d };
        generator34.setArrays(objArray49);
        java.lang.ClassLoader classLoader51 = null;
        generator34.setClassLoader(classLoader51);
        boolean boolean53 = generator34.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator54.setUseCache(true);
        boolean boolean57 = generator54.getAttemptLoad();
        boolean boolean58 = generator54.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator54.getStrategy();
        generator34.setStrategy(generatorStrategy59);
        generator25.setStrategy(generatorStrategy59);
        generator22.setStrategy(generatorStrategy59);
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator64 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator64.setUseCache(true);
        boolean boolean67 = generator64.getAttemptLoad();
        boolean boolean68 = generator64.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator64.getStrategy();
        generator63.setStrategy(generatorStrategy69);
        org.mockito.cglib.util.ParallelSorter.Generator generator71 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator71.setUseCache(true);
        boolean boolean74 = generator71.getAttemptLoad();
        boolean boolean75 = generator71.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator71.getStrategy();
        generator63.setStrategy(generatorStrategy76);
        generator63.setAttemptLoad(false);
        boolean boolean80 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator63.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator63.getStrategy();
        generator22.setStrategy(generatorStrategy82);
        generator0.setStrategy(generatorStrategy82);
        boolean boolean85 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy86 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator0.getNamingPolicy();
        boolean boolean88 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(namingPolicy86);
        org.junit.Assert.assertNotNull(namingPolicy87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test2223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2223");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = strComparator3.thenComparing(strComparator4);
        java.util.Comparator<java.lang.String> strComparator6 = strComparator2.thenComparing(strComparator3);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        java.util.Comparator<java.lang.String> strComparator13 = strComparator9.thenComparing(strComparator10);
        boolean boolean14 = strComparator6.equals((java.lang.Object) strComparator10);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        boolean boolean28 = strComparator23.equals((java.lang.Object) strComparator27);
        java.lang.Object[] objArray30 = new java.lang.Object[] { '4', strComparator20, strComparator23, 0.0d };
        generator15.setArrays(objArray30);
        java.lang.ClassLoader classLoader32 = null;
        generator15.setClassLoader(classLoader32);
        boolean boolean34 = generator15.getAttemptLoad();
        boolean boolean35 = strComparator10.equals((java.lang.Object) generator15);
        generator15.setUseCache(true);
        boolean boolean38 = generator15.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor39 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator15.generateClass(classVisitor39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test2224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2224");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator0.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader33 = null;
        generator32.setClassLoader(classLoader33);
        java.lang.ClassLoader classLoader35 = null;
        generator32.setClassLoader(classLoader35);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator32.getNamingPolicy();
        generator31.setNamingPolicy(namingPolicy37);
        boolean boolean39 = generator31.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader41 = null;
        generator40.setClassLoader(classLoader41);
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = strComparator44.thenComparing(strComparator45);
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = strComparator47.thenComparing(strComparator48);
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = strComparator50.thenComparing(strComparator51);
        boolean boolean53 = strComparator48.equals((java.lang.Object) strComparator52);
        java.lang.Object[] objArray55 = new java.lang.Object[] { '4', strComparator45, strComparator48, 0.0d };
        generator40.setArrays(objArray55);
        generator31.setArrays(objArray55);
        generator0.setArrays(objArray55);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter59 = org.mockito.cglib.util.ParallelSorter.create(objArray55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test2225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2225");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        boolean boolean13 = generator0.getUseCache();
        boolean boolean14 = generator0.getAttemptLoad();
        boolean boolean15 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader17 = null;
        generator16.setClassLoader(classLoader17);
        java.lang.ClassLoader classLoader19 = null;
        generator16.setClassLoader(classLoader19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator16.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy22);
        java.lang.ClassLoader classLoader24 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        boolean boolean27 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator33.setUseCache(true);
        boolean boolean36 = generator33.getAttemptLoad();
        boolean boolean37 = generator33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator33.getStrategy();
        generator32.setStrategy(generatorStrategy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator40.setUseCache(true);
        boolean boolean43 = generator40.getAttemptLoad();
        boolean boolean44 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator40.getStrategy();
        generator32.setStrategy(generatorStrategy45);
        generator32.setAttemptLoad(false);
        boolean boolean49 = generator32.getUseCache();
        java.lang.ClassLoader classLoader50 = generator32.getClassLoader();
        generator32.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator32.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(namingPolicy53);
    }

    @Test
    public void test2226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2226");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        boolean boolean4 = generator0.getAttemptLoad();
        boolean boolean5 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor6 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test2227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2227");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator21.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy26);
        java.lang.ClassLoader classLoader28 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        boolean boolean31 = generator0.getAttemptLoad();
        java.lang.Class<?> wildcardClass32 = generator0.getClass();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test2228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2228");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader13 = null;
        generator12.setClassLoader(classLoader13);
        java.lang.ClassLoader classLoader15 = null;
        generator12.setClassLoader(classLoader15);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy17);
        boolean boolean19 = generator11.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader21 = null;
        generator20.setClassLoader(classLoader21);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = strComparator27.thenComparing(strComparator28);
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = strComparator30.thenComparing(strComparator31);
        boolean boolean33 = strComparator28.equals((java.lang.Object) strComparator32);
        java.lang.Object[] objArray35 = new java.lang.Object[] { '4', strComparator25, strComparator28, 0.0d };
        generator20.setArrays(objArray35);
        generator11.setArrays(objArray35);
        boolean boolean38 = generator11.getAttemptLoad();
        java.lang.Object[] objArray39 = new java.lang.Object[] { generator11 };
        generator0.setArrays(objArray39);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader42 = null;
        generator41.setClassLoader(classLoader42);
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = strComparator45.thenComparing(strComparator46);
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = strComparator48.thenComparing(strComparator49);
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = strComparator51.thenComparing(strComparator52);
        boolean boolean54 = strComparator49.equals((java.lang.Object) strComparator53);
        java.lang.Object[] objArray56 = new java.lang.Object[] { '4', strComparator46, strComparator49, 0.0d };
        generator41.setArrays(objArray56);
        java.lang.ClassLoader classLoader58 = null;
        generator41.setClassLoader(classLoader58);
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader61 = null;
        generator60.setClassLoader(classLoader61);
        java.lang.ClassLoader classLoader63 = null;
        generator60.setClassLoader(classLoader63);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator60.getNamingPolicy();
        generator41.setNamingPolicy(namingPolicy65);
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator68 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader69 = null;
        generator68.setClassLoader(classLoader69);
        java.lang.ClassLoader classLoader71 = null;
        generator68.setClassLoader(classLoader71);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator68.getNamingPolicy();
        generator67.setNamingPolicy(namingPolicy73);
        org.mockito.cglib.util.ParallelSorter.Generator generator75 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader76 = null;
        generator75.setClassLoader(classLoader76);
        java.lang.ClassLoader classLoader78 = null;
        generator75.setClassLoader(classLoader78);
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator75.getNamingPolicy();
        generator67.setNamingPolicy(namingPolicy80);
        org.mockito.cglib.util.ParallelSorter.Generator generator82 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator82.setUseCache(true);
        java.lang.ClassLoader classLoader85 = generator82.getClassLoader();
        generator67.setClassLoader(classLoader85);
        generator67.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator89 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader90 = null;
        generator89.setClassLoader(classLoader90);
        java.lang.ClassLoader classLoader92 = generator89.getClassLoader();
        generator67.setClassLoader(classLoader92);
        generator41.setClassLoader(classLoader92);
        generator0.setClassLoader(classLoader92);
        org.mockito.cglib.core.NamingPolicy namingPolicy96 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter97 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.util.ParallelSorter$Generator is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertNotNull(classLoader85);
        org.junit.Assert.assertNotNull(classLoader92);
        org.junit.Assert.assertNotNull(namingPolicy96);
    }

    @Test
    public void test2229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2229");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader10 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader11 = generator0.getClassLoader();
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader14);
    }

    @Test
    public void test2230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2230");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = strComparator0.reversed();
        java.util.Comparator<java.lang.String> strComparator4 = strComparator3.reversed();
        java.util.Comparator<java.lang.String> strComparator5 = strComparator3.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        java.lang.ClassLoader classLoader9 = generator6.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator10.getStrategy();
        generator6.setStrategy(generatorStrategy13);
        boolean boolean15 = strComparator5.equals((java.lang.Object) generator6);
        java.lang.ClassLoader classLoader16 = generator6.getClassLoader();
        boolean boolean17 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator6.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator23.setUseCache(true);
        boolean boolean26 = generator23.getAttemptLoad();
        boolean boolean27 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator23.getStrategy();
        generator22.setStrategy(generatorStrategy28);
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator30.setUseCache(true);
        boolean boolean33 = generator30.getAttemptLoad();
        boolean boolean34 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator30.getStrategy();
        generator22.setStrategy(generatorStrategy35);
        generator19.setStrategy(generatorStrategy35);
        boolean boolean38 = generator19.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator40.setUseCache(true);
        boolean boolean43 = generator40.getAttemptLoad();
        boolean boolean44 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator40.getStrategy();
        generator39.setStrategy(generatorStrategy45);
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator47.setUseCache(true);
        boolean boolean50 = generator47.getAttemptLoad();
        boolean boolean51 = generator47.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator47.getStrategy();
        generator39.setStrategy(generatorStrategy52);
        generator39.setAttemptLoad(false);
        boolean boolean56 = generator39.getUseCache();
        java.lang.ClassLoader classLoader57 = generator39.getClassLoader();
        generator19.setClassLoader(classLoader57);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator19.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean61 = generator60.getAttemptLoad();
        java.lang.ClassLoader classLoader62 = generator60.getClassLoader();
        java.lang.ClassLoader classLoader63 = generator60.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator64 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator65.setUseCache(true);
        boolean boolean68 = generator65.getAttemptLoad();
        boolean boolean69 = generator65.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator65.getStrategy();
        generator64.setStrategy(generatorStrategy70);
        org.mockito.cglib.util.ParallelSorter.Generator generator72 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator72.setUseCache(true);
        boolean boolean75 = generator72.getAttemptLoad();
        boolean boolean76 = generator72.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator72.getStrategy();
        generator64.setStrategy(generatorStrategy77);
        generator60.setStrategy(generatorStrategy77);
        org.mockito.cglib.util.ParallelSorter.Generator generator80 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator80.getStrategy();
        generator60.setStrategy(generatorStrategy81);
        generator19.setStrategy(generatorStrategy81);
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator19.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy84);
        generator6.setUseCache(true);
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(namingPolicy84);
    }

    @Test
    public void test2231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2231");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        boolean boolean18 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader19 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        java.lang.ClassLoader classLoader24 = null;
        generator20.setClassLoader(classLoader24);
        generator20.setUseCache(false);
        boolean boolean28 = generator20.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader30 = null;
        generator29.setClassLoader(classLoader30);
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = strComparator33.thenComparing(strComparator34);
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = strComparator36.thenComparing(strComparator37);
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = strComparator39.thenComparing(strComparator40);
        boolean boolean42 = strComparator37.equals((java.lang.Object) strComparator41);
        java.lang.Object[] objArray44 = new java.lang.Object[] { '4', strComparator34, strComparator37, 0.0d };
        generator29.setArrays(objArray44);
        java.lang.ClassLoader classLoader46 = null;
        generator29.setClassLoader(classLoader46);
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader49 = null;
        generator48.setClassLoader(classLoader49);
        java.lang.ClassLoader classLoader51 = null;
        generator48.setClassLoader(classLoader51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator48.getNamingPolicy();
        generator29.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator56.setUseCache(true);
        boolean boolean59 = generator56.getAttemptLoad();
        boolean boolean60 = generator56.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator56.getStrategy();
        generator55.setStrategy(generatorStrategy61);
        generator29.setStrategy(generatorStrategy61);
        org.mockito.cglib.util.ParallelSorter.Generator generator64 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader66 = null;
        generator65.setClassLoader(classLoader66);
        java.lang.ClassLoader classLoader68 = null;
        generator65.setClassLoader(classLoader68);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator65.getNamingPolicy();
        generator64.setNamingPolicy(namingPolicy70);
        generator29.setNamingPolicy(namingPolicy70);
        generator20.setNamingPolicy(namingPolicy70);
        generator0.setNamingPolicy(namingPolicy70);
        java.lang.Class<?> wildcardClass75 = namingPolicy70.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test2232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2232");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        boolean boolean10 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader13 = null;
        generator12.setClassLoader(classLoader13);
        java.lang.ClassLoader classLoader15 = null;
        generator12.setClassLoader(classLoader15);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy24);
        generator11.setAttemptLoad(false);
        generator11.setUseCache(false);
        generator11.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader33 = null;
        generator32.setClassLoader(classLoader33);
        boolean boolean35 = generator32.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator32.getStrategy();
        java.lang.ClassLoader classLoader37 = generator32.getClassLoader();
        boolean boolean38 = generator32.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader42 = null;
        generator41.setClassLoader(classLoader42);
        java.lang.ClassLoader classLoader44 = null;
        generator41.setClassLoader(classLoader44);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator41.getNamingPolicy();
        generator40.setNamingPolicy(namingPolicy46);
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator48.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator52.setUseCache(true);
        boolean boolean55 = generator52.getAttemptLoad();
        boolean boolean56 = generator52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator52.getStrategy();
        generator51.setStrategy(generatorStrategy57);
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator59.setUseCache(true);
        boolean boolean62 = generator59.getAttemptLoad();
        boolean boolean63 = generator59.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator59.getStrategy();
        generator51.setStrategy(generatorStrategy64);
        generator48.setStrategy(generatorStrategy64);
        generator40.setStrategy(generatorStrategy64);
        org.mockito.cglib.util.ParallelSorter.Generator generator68 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader69 = null;
        generator68.setClassLoader(classLoader69);
        org.mockito.cglib.util.ParallelSorter.Generator generator71 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader72 = null;
        generator71.setClassLoader(classLoader72);
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = strComparator75.thenComparing(strComparator76);
        java.util.Comparator<java.lang.String> strComparator78 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = strComparator78.thenComparing(strComparator79);
        java.util.Comparator<java.lang.String> strComparator81 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator82 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator83 = strComparator81.thenComparing(strComparator82);
        boolean boolean84 = strComparator79.equals((java.lang.Object) strComparator83);
        java.lang.Object[] objArray86 = new java.lang.Object[] { '4', strComparator76, strComparator79, 0.0d };
        generator71.setArrays(objArray86);
        generator68.setArrays(objArray86);
        generator40.setArrays(objArray86);
        generator39.setArrays(objArray86);
        generator32.setArrays(objArray86);
        generator11.setArrays(objArray86);
        generator0.setArrays(objArray86);
        boolean boolean94 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test2233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2233");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass10 = namingPolicy9.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2234");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator30.setUseCache(true);
        boolean boolean33 = generator30.getAttemptLoad();
        boolean boolean34 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator30.getStrategy();
        generator29.setStrategy(generatorStrategy35);
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator37.setUseCache(true);
        boolean boolean40 = generator37.getAttemptLoad();
        boolean boolean41 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator37.getStrategy();
        generator29.setStrategy(generatorStrategy42);
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader45 = null;
        generator44.setClassLoader(classLoader45);
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = strComparator48.thenComparing(strComparator49);
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = strComparator51.thenComparing(strComparator52);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        boolean boolean57 = strComparator52.equals((java.lang.Object) strComparator56);
        java.lang.Object[] objArray59 = new java.lang.Object[] { '4', strComparator49, strComparator52, 0.0d };
        generator44.setArrays(objArray59);
        generator29.setArrays(objArray59);
        generator0.setArrays(objArray59);
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = strComparator63.thenComparing(strComparator64);
        org.mockito.cglib.util.ParallelSorter.Generator generator66 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator66.setUseCache(true);
        boolean boolean69 = generator66.getAttemptLoad();
        boolean boolean70 = generator66.getUseCache();
        generator66.setAttemptLoad(true);
        generator66.setUseCache(true);
        boolean boolean75 = strComparator63.equals((java.lang.Object) generator66);
        org.mockito.cglib.util.ParallelSorter.Generator generator76 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator76.setUseCache(true);
        java.lang.ClassLoader classLoader79 = generator76.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator80 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator80.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator80.getStrategy();
        generator76.setStrategy(generatorStrategy83);
        generator66.setStrategy(generatorStrategy83);
        generator0.setStrategy(generatorStrategy83);
        boolean boolean87 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test2235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2235");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.reverseOrder();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator6.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator6.getStrategy();
        generator1.setStrategy(generatorStrategy13);
        boolean boolean15 = strComparator0.equals((java.lang.Object) generator1);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator1.getNamingPolicy();
        generator1.setAttemptLoad(false);
        generator1.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        java.lang.ClassLoader classLoader25 = null;
        generator21.setClassLoader(classLoader25);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator21.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = strComparator32.thenComparing(strComparator33);
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = strComparator35.thenComparing(strComparator36);
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = strComparator38.thenComparing(strComparator39);
        boolean boolean41 = strComparator36.equals((java.lang.Object) strComparator40);
        java.lang.Object[] objArray43 = new java.lang.Object[] { '4', strComparator33, strComparator36, 0.0d };
        generator28.setArrays(objArray43);
        generator21.setArrays(objArray43);
        generator21.setUseCache(false);
        generator21.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator21.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader52 = null;
        generator51.setClassLoader(classLoader52);
        java.lang.ClassLoader classLoader54 = generator51.getClassLoader();
        generator51.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean58 = generator57.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator57.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator57.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator61.setUseCache(true);
        java.lang.ClassLoader classLoader64 = generator61.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator65.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator65.getStrategy();
        generator61.setStrategy(generatorStrategy68);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator61.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator61.getNamingPolicy();
        generator57.setNamingPolicy(namingPolicy71);
        generator51.setNamingPolicy(namingPolicy71);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator51.getNamingPolicy();
        generator21.setNamingPolicy(namingPolicy74);
        generator1.setNamingPolicy(namingPolicy74);
        boolean boolean77 = generator1.getUseCache();
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test2236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2236");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        boolean boolean19 = generator16.getAttemptLoad();
        boolean boolean20 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator16.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator22.getStrategy();
        generator16.setStrategy(generatorStrategy27);
        java.lang.ClassLoader classLoader29 = generator16.getClassLoader();
        generator0.setClassLoader(classLoader29);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        boolean boolean34 = generator31.getAttemptLoad();
        boolean boolean35 = generator31.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator31.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy36);
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator39.setUseCache(true);
        boolean boolean42 = generator39.getAttemptLoad();
        boolean boolean43 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator39.getStrategy();
        generator38.setStrategy(generatorStrategy44);
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator46.setUseCache(true);
        boolean boolean49 = generator46.getAttemptLoad();
        boolean boolean50 = generator46.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator46.getStrategy();
        generator38.setStrategy(generatorStrategy51);
        generator0.setStrategy(generatorStrategy51);
        boolean boolean54 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor55 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test2237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2237");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        boolean boolean11 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        boolean boolean13 = generator0.getUseCache();
        java.lang.Object[] objArray14 = null;
        generator0.setArrays(objArray14);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        boolean boolean19 = generator16.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader22 = null;
        generator21.setClassLoader(classLoader22);
        java.lang.ClassLoader classLoader24 = null;
        generator21.setClassLoader(classLoader24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator21.getNamingPolicy();
        generator20.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        java.lang.ClassLoader classLoader31 = null;
        generator28.setClassLoader(classLoader31);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator28.getNamingPolicy();
        generator20.setNamingPolicy(namingPolicy33);
        generator20.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator20.getStrategy();
        generator16.setStrategy(generatorStrategy37);
        generator0.setStrategy(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(generatorStrategy37);
    }

    @Test
    public void test2238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2238");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = strComparator1.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader6 = null;
        generator5.setClassLoader(classLoader6);
        java.lang.ClassLoader classLoader8 = null;
        generator5.setClassLoader(classLoader8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator5.getNamingPolicy();
        generator4.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader13 = null;
        generator12.setClassLoader(classLoader13);
        java.lang.ClassLoader classLoader15 = null;
        generator12.setClassLoader(classLoader15);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator4.setNamingPolicy(namingPolicy17);
        generator4.setAttemptLoad(false);
        generator4.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator23.setUseCache(true);
        boolean boolean26 = generator23.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator23.getStrategy();
        generator4.setStrategy(generatorStrategy27);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator4.getNamingPolicy();
        java.lang.ClassLoader classLoader30 = generator4.getClassLoader();
        boolean boolean31 = strComparator1.equals((java.lang.Object) generator4);
        org.mockito.asm.ClassVisitor classVisitor32 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator4.generateClass(classVisitor32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test2239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2239");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        boolean boolean8 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        boolean boolean13 = generator10.getAttemptLoad();
        boolean boolean14 = generator10.getUseCache();
        generator10.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator10.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator10.getStrategy();
        generator0.setStrategy(generatorStrategy18);
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader22 = null;
        generator21.setClassLoader(classLoader22);
        java.lang.ClassLoader classLoader24 = null;
        generator21.setClassLoader(classLoader24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator21.getNamingPolicy();
        generator20.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        java.lang.ClassLoader classLoader31 = null;
        generator28.setClassLoader(classLoader31);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator28.getNamingPolicy();
        generator20.setNamingPolicy(namingPolicy33);
        generator20.setAttemptLoad(false);
        generator20.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator20.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy39);
        org.mockito.asm.ClassVisitor classVisitor41 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(namingPolicy39);
    }

    @Test
    public void test2240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2240");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        boolean boolean19 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        generator20.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader27 = null;
        generator26.setClassLoader(classLoader27);
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = strComparator30.thenComparing(strComparator31);
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = strComparator33.thenComparing(strComparator34);
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = strComparator36.thenComparing(strComparator37);
        boolean boolean39 = strComparator34.equals((java.lang.Object) strComparator38);
        java.lang.Object[] objArray41 = new java.lang.Object[] { '4', strComparator31, strComparator34, 0.0d };
        generator26.setArrays(objArray41);
        java.lang.ClassLoader classLoader43 = null;
        generator26.setClassLoader(classLoader43);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader46 = null;
        generator45.setClassLoader(classLoader46);
        java.lang.ClassLoader classLoader48 = null;
        generator45.setClassLoader(classLoader48);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator45.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy50);
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator53.setUseCache(true);
        boolean boolean56 = generator53.getAttemptLoad();
        boolean boolean57 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator53.getStrategy();
        generator52.setStrategy(generatorStrategy58);
        generator26.setStrategy(generatorStrategy58);
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader63 = null;
        generator62.setClassLoader(classLoader63);
        java.lang.ClassLoader classLoader65 = null;
        generator62.setClassLoader(classLoader65);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator62.getNamingPolicy();
        generator61.setNamingPolicy(namingPolicy67);
        generator26.setNamingPolicy(namingPolicy67);
        generator20.setNamingPolicy(namingPolicy67);
        generator0.setNamingPolicy(namingPolicy67);
        org.mockito.cglib.util.ParallelSorter.Generator generator72 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader73 = null;
        generator72.setClassLoader(classLoader73);
        org.mockito.cglib.util.ParallelSorter.Generator generator75 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader76 = null;
        generator75.setClassLoader(classLoader76);
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator81 = strComparator79.thenComparing(strComparator80);
        java.util.Comparator<java.lang.String> strComparator82 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator83 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator84 = strComparator82.thenComparing(strComparator83);
        java.util.Comparator<java.lang.String> strComparator85 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator86 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator87 = strComparator85.thenComparing(strComparator86);
        boolean boolean88 = strComparator83.equals((java.lang.Object) strComparator87);
        java.lang.Object[] objArray90 = new java.lang.Object[] { '4', strComparator80, strComparator83, 0.0d };
        generator75.setArrays(objArray90);
        generator72.setArrays(objArray90);
        generator0.setArrays(objArray90);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter94 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertNotNull(strComparator84);
        org.junit.Assert.assertNotNull(strComparator85);
        org.junit.Assert.assertNotNull(strComparator86);
        org.junit.Assert.assertNotNull(strComparator87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test2241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2241");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        boolean boolean19 = generator0.getAttemptLoad();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = strComparator20.thenComparing(strComparator21);
        java.util.Comparator<java.lang.String> strComparator23 = strComparator20.reversed();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator23.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader27 = null;
        generator26.setClassLoader(classLoader27);
        java.lang.ClassLoader classLoader29 = null;
        generator26.setClassLoader(classLoader29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator26.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy31);
        boolean boolean33 = strComparator23.equals((java.lang.Object) generator25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator25.getStrategy();
        generator0.setStrategy(generatorStrategy34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = strComparator41.thenComparing(strComparator42);
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = strComparator44.thenComparing(strComparator45);
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = strComparator47.thenComparing(strComparator48);
        boolean boolean50 = strComparator45.equals((java.lang.Object) strComparator49);
        java.lang.Object[] objArray52 = new java.lang.Object[] { '4', strComparator42, strComparator45, 0.0d };
        generator37.setArrays(objArray52);
        java.lang.ClassLoader classLoader54 = null;
        generator37.setClassLoader(classLoader54);
        boolean boolean56 = generator37.getAttemptLoad();
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = strComparator57.thenComparing(strComparator58);
        java.util.Comparator<java.lang.String> strComparator60 = strComparator57.reversed();
        java.util.Comparator<java.lang.String> strComparator61 = strComparator60.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader64 = null;
        generator63.setClassLoader(classLoader64);
        java.lang.ClassLoader classLoader66 = null;
        generator63.setClassLoader(classLoader66);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator63.getNamingPolicy();
        generator62.setNamingPolicy(namingPolicy68);
        boolean boolean70 = strComparator60.equals((java.lang.Object) generator62);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator62.getStrategy();
        generator37.setStrategy(generatorStrategy71);
        generator0.setStrategy(generatorStrategy71);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader76 = generator0.getClassLoader();
        boolean boolean77 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test2242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2242");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        boolean boolean8 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader10 = null;
        generator9.setClassLoader(classLoader10);
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = strComparator13.thenComparing(strComparator14);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        boolean boolean22 = strComparator17.equals((java.lang.Object) strComparator21);
        java.lang.Object[] objArray24 = new java.lang.Object[] { '4', strComparator14, strComparator17, 0.0d };
        generator9.setArrays(objArray24);
        java.lang.ClassLoader classLoader26 = null;
        generator9.setClassLoader(classLoader26);
        boolean boolean28 = generator9.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator29.getStrategy();
        generator9.setStrategy(generatorStrategy34);
        generator0.setStrategy(generatorStrategy34);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        java.lang.Object[] objArray41 = null;
        generator0.setArrays(objArray41);
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader44 = null;
        generator43.setClassLoader(classLoader44);
        boolean boolean46 = generator43.getAttemptLoad();
        generator43.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator43.getStrategy();
        generator0.setStrategy(generatorStrategy49);
        java.lang.Class<?> wildcardClass51 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test2243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2243");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator5.setUseCache(true);
        boolean boolean8 = generator5.getAttemptLoad();
        boolean boolean9 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator5.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator5.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader13 = null;
        generator12.setClassLoader(classLoader13);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        boolean boolean25 = strComparator20.equals((java.lang.Object) strComparator24);
        java.lang.Object[] objArray27 = new java.lang.Object[] { '4', strComparator17, strComparator20, 0.0d };
        generator12.setArrays(objArray27);
        java.lang.ClassLoader classLoader29 = null;
        generator12.setClassLoader(classLoader29);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        java.lang.ClassLoader classLoader34 = null;
        generator31.setClassLoader(classLoader34);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator31.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy36);
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator39.setUseCache(true);
        boolean boolean42 = generator39.getAttemptLoad();
        boolean boolean43 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator39.getStrategy();
        generator38.setStrategy(generatorStrategy44);
        generator12.setStrategy(generatorStrategy44);
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader49 = null;
        generator48.setClassLoader(classLoader49);
        java.lang.ClassLoader classLoader51 = null;
        generator48.setClassLoader(classLoader51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator48.getNamingPolicy();
        generator47.setNamingPolicy(namingPolicy53);
        generator12.setNamingPolicy(namingPolicy53);
        generator5.setNamingPolicy(namingPolicy53);
        generator0.setNamingPolicy(namingPolicy53);
        boolean boolean58 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator59.setUseCache(true);
        boolean boolean62 = generator59.getAttemptLoad();
        java.lang.ClassLoader classLoader63 = null;
        generator59.setClassLoader(classLoader63);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator59.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator66 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader67 = null;
        generator66.setClassLoader(classLoader67);
        java.util.Comparator<java.lang.String> strComparator70 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator71 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator72 = strComparator70.thenComparing(strComparator71);
        java.util.Comparator<java.lang.String> strComparator73 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator74 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator75 = strComparator73.thenComparing(strComparator74);
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator78 = strComparator76.thenComparing(strComparator77);
        boolean boolean79 = strComparator74.equals((java.lang.Object) strComparator78);
        java.lang.Object[] objArray81 = new java.lang.Object[] { '4', strComparator71, strComparator74, 0.0d };
        generator66.setArrays(objArray81);
        generator59.setArrays(objArray81);
        generator0.setArrays(objArray81);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy89);
    }

    @Test
    public void test2244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2244");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        boolean boolean6 = generator0.getUseCache();
        boolean boolean7 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator12.getStrategy();
        generator11.setStrategy(generatorStrategy17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        boolean boolean23 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator19.getStrategy();
        generator11.setStrategy(generatorStrategy24);
        generator8.setStrategy(generatorStrategy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean28 = generator27.getAttemptLoad();
        java.lang.ClassLoader classLoader29 = generator27.getClassLoader();
        generator8.setClassLoader(classLoader29);
        generator0.setClassLoader(classLoader29);
        java.lang.ClassLoader classLoader32 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter35 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader32);
    }

    @Test
    public void test2245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2245");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter7 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
    }

    @Test
    public void test2246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2246");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getAttemptLoad();
        boolean boolean6 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator7.setStrategy(generatorStrategy13);
        boolean boolean15 = generator7.getAttemptLoad();
        generator7.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy24);
        boolean boolean26 = generator18.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = strComparator31.thenComparing(strComparator32);
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = strComparator34.thenComparing(strComparator35);
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = strComparator37.thenComparing(strComparator38);
        boolean boolean40 = strComparator35.equals((java.lang.Object) strComparator39);
        java.lang.Object[] objArray42 = new java.lang.Object[] { '4', strComparator32, strComparator35, 0.0d };
        generator27.setArrays(objArray42);
        generator18.setArrays(objArray42);
        boolean boolean45 = generator18.getAttemptLoad();
        java.lang.Object[] objArray46 = new java.lang.Object[] { generator18 };
        generator7.setArrays(objArray46);
        generator0.setArrays(objArray46);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter49 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.util.ParallelSorter$Generator is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray46);
    }

    @Test
    public void test2247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2247");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator13 = strComparator11.thenComparing(strComparator12);
        java.util.Comparator<java.lang.String> strComparator14 = strComparator11.reversed();
        java.util.Comparator<java.lang.String> strComparator15 = strComparator14.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy22);
        boolean boolean24 = strComparator14.equals((java.lang.Object) generator16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator16.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator16.getStrategy();
        boolean boolean27 = generator16.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator29.getStrategy();
        generator28.setStrategy(generatorStrategy34);
        boolean boolean36 = generator28.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader39 = null;
        generator38.setClassLoader(classLoader39);
        java.lang.ClassLoader classLoader41 = null;
        generator38.setClassLoader(classLoader41);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator38.getNamingPolicy();
        generator37.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader46 = null;
        generator45.setClassLoader(classLoader46);
        java.lang.ClassLoader classLoader48 = null;
        generator45.setClassLoader(classLoader48);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator45.getNamingPolicy();
        generator37.setNamingPolicy(namingPolicy50);
        generator28.setNamingPolicy(namingPolicy50);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator28.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy53);
        generator0.setNamingPolicy(namingPolicy53);
        java.lang.ClassLoader classLoader56 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader57 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor58 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader57);
    }

    @Test
    public void test2248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2248");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator6.getStrategy();
        java.lang.ClassLoader classLoader8 = generator6.getClassLoader();
        generator6.setUseCache(false);
        boolean boolean11 = generator6.getAttemptLoad();
        boolean boolean12 = generator6.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator14.setUseCache(true);
        boolean boolean17 = generator14.getAttemptLoad();
        boolean boolean18 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator14.getStrategy();
        generator13.setStrategy(generatorStrategy19);
        boolean boolean21 = generator13.getAttemptLoad();
        generator13.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader26 = null;
        generator25.setClassLoader(classLoader26);
        java.lang.ClassLoader classLoader28 = null;
        generator25.setClassLoader(classLoader28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator25.getNamingPolicy();
        generator24.setNamingPolicy(namingPolicy30);
        boolean boolean32 = generator24.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = strComparator37.thenComparing(strComparator38);
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = strComparator40.thenComparing(strComparator41);
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = strComparator43.thenComparing(strComparator44);
        boolean boolean46 = strComparator41.equals((java.lang.Object) strComparator45);
        java.lang.Object[] objArray48 = new java.lang.Object[] { '4', strComparator38, strComparator41, 0.0d };
        generator33.setArrays(objArray48);
        generator24.setArrays(objArray48);
        boolean boolean51 = generator24.getAttemptLoad();
        java.lang.Object[] objArray52 = new java.lang.Object[] { generator24 };
        generator13.setArrays(objArray52);
        generator6.setArrays(objArray52);
        generator0.setArrays(objArray52);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter57 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.util.ParallelSorter$Generator is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(namingPolicy56);
    }

    @Test
    public void test2249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2249");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator4.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator3.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator0.getStrategy();
        boolean boolean22 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor23 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test2250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2250");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy22);
        java.lang.ClassLoader classLoader24 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator26.getStrategy();
        java.lang.ClassLoader classLoader28 = generator26.getClassLoader();
        generator26.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        boolean boolean34 = generator31.getAttemptLoad();
        boolean boolean35 = generator31.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator36.setUseCache(true);
        boolean boolean39 = generator36.getAttemptLoad();
        boolean boolean40 = generator36.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator36.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator36.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator36.getStrategy();
        generator31.setStrategy(generatorStrategy43);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator45.setUseCache(true);
        boolean boolean48 = generator45.getAttemptLoad();
        boolean boolean49 = generator45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator45.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator51.setUseCache(true);
        boolean boolean54 = generator51.getAttemptLoad();
        boolean boolean55 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator51.getStrategy();
        generator45.setStrategy(generatorStrategy56);
        java.lang.ClassLoader classLoader58 = generator45.getClassLoader();
        generator45.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator61.setUseCache(true);
        boolean boolean64 = generator61.getAttemptLoad();
        boolean boolean65 = generator61.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator61.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator67.setUseCache(true);
        boolean boolean70 = generator67.getAttemptLoad();
        boolean boolean71 = generator67.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator67.getStrategy();
        generator61.setStrategy(generatorStrategy72);
        java.lang.ClassLoader classLoader74 = generator61.getClassLoader();
        generator45.setClassLoader(classLoader74);
        generator31.setClassLoader(classLoader74);
        generator26.setClassLoader(classLoader74);
        generator0.setClassLoader(classLoader74);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(namingPolicy81);
    }

    @Test
    public void test2251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2251");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader7 = null;
        generator6.setClassLoader(classLoader7);
        java.lang.ClassLoader classLoader9 = null;
        generator6.setClassLoader(classLoader9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator6.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy11);
        generator0.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator14.getStrategy();
        java.lang.ClassLoader classLoader16 = generator14.getClassLoader();
        generator14.setUseCache(false);
        boolean boolean19 = generator14.getUseCache();
        java.lang.ClassLoader classLoader20 = generator14.getClassLoader();
        java.lang.ClassLoader classLoader21 = generator14.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator14.getNamingPolicy();
        boolean boolean23 = generator14.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator24.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator28.setUseCache(true);
        boolean boolean31 = generator28.getAttemptLoad();
        boolean boolean32 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator28.getStrategy();
        generator27.setStrategy(generatorStrategy33);
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        boolean boolean39 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator35.getStrategy();
        generator27.setStrategy(generatorStrategy40);
        generator24.setStrategy(generatorStrategy40);
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean44 = generator43.getAttemptLoad();
        java.lang.ClassLoader classLoader45 = generator43.getClassLoader();
        generator24.setClassLoader(classLoader45);
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator47.setUseCache(true);
        boolean boolean50 = generator47.getAttemptLoad();
        boolean boolean51 = generator47.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator47.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator47.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator55.setUseCache(true);
        boolean boolean58 = generator55.getAttemptLoad();
        boolean boolean59 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator55.getStrategy();
        generator54.setStrategy(generatorStrategy60);
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator62.setUseCache(true);
        boolean boolean65 = generator62.getAttemptLoad();
        boolean boolean66 = generator62.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator62.getStrategy();
        generator54.setStrategy(generatorStrategy67);
        org.mockito.cglib.util.ParallelSorter.Generator generator69 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader70 = null;
        generator69.setClassLoader(classLoader70);
        java.util.Comparator<java.lang.String> strComparator73 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator74 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator75 = strComparator73.thenComparing(strComparator74);
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator78 = strComparator76.thenComparing(strComparator77);
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator81 = strComparator79.thenComparing(strComparator80);
        boolean boolean82 = strComparator77.equals((java.lang.Object) strComparator81);
        java.lang.Object[] objArray84 = new java.lang.Object[] { '4', strComparator74, strComparator77, 0.0d };
        generator69.setArrays(objArray84);
        generator54.setArrays(objArray84);
        generator47.setArrays(objArray84);
        generator24.setArrays(objArray84);
        generator14.setArrays(objArray84);
        generator0.setArrays(objArray84);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy93 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy94 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy95 = generator0.getNamingPolicy();
        boolean boolean96 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy97 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy93);
        org.junit.Assert.assertNotNull(generatorStrategy94);
        org.junit.Assert.assertNotNull(namingPolicy95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(generatorStrategy97);
    }

    @Test
    public void test2252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2252");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        java.lang.ClassLoader classLoader15 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        boolean boolean19 = generator16.getAttemptLoad();
        boolean boolean20 = generator16.getUseCache();
        generator16.setAttemptLoad(true);
        generator16.setUseCache(true);
        generator16.setUseCache(false);
        boolean boolean27 = generator16.getUseCache();
        java.lang.ClassLoader classLoader28 = generator16.getClassLoader();
        generator0.setClassLoader(classLoader28);
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        java.lang.ClassLoader classLoader34 = null;
        generator31.setClassLoader(classLoader34);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator31.getNamingPolicy();
        generator30.setNamingPolicy(namingPolicy36);
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader39 = null;
        generator38.setClassLoader(classLoader39);
        java.lang.ClassLoader classLoader41 = null;
        generator38.setClassLoader(classLoader41);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator38.getNamingPolicy();
        generator30.setNamingPolicy(namingPolicy43);
        generator30.setAttemptLoad(false);
        generator30.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator49.setUseCache(true);
        boolean boolean52 = generator49.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator49.getStrategy();
        generator30.setStrategy(generatorStrategy53);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator30.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy55);
        generator0.setUseCache(false);
        java.lang.Class<?> wildcardClass59 = generator0.getClass();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2253");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator0.setStrategy(generatorStrategy20);
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean23 = generator22.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator22.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader27 = null;
        generator26.setClassLoader(classLoader27);
        java.lang.ClassLoader classLoader29 = null;
        generator26.setClassLoader(classLoader29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator26.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator40.setUseCache(true);
        java.lang.ClassLoader classLoader43 = generator40.getClassLoader();
        generator25.setClassLoader(classLoader43);
        generator22.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader46 = generator22.getClassLoader();
        generator0.setClassLoader(classLoader46);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader52 = generator0.getClassLoader();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader52);
    }

    @Test
    public void test2254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2254");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader7 = null;
        generator6.setClassLoader(classLoader7);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = strComparator13.thenComparing(strComparator14);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        boolean boolean19 = strComparator14.equals((java.lang.Object) strComparator18);
        java.lang.Object[] objArray21 = new java.lang.Object[] { '4', strComparator11, strComparator14, 0.0d };
        generator6.setArrays(objArray21);
        java.lang.ClassLoader classLoader23 = null;
        generator6.setClassLoader(classLoader23);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader26 = null;
        generator25.setClassLoader(classLoader26);
        java.lang.ClassLoader classLoader28 = null;
        generator25.setClassLoader(classLoader28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator25.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator33.setUseCache(true);
        boolean boolean36 = generator33.getAttemptLoad();
        boolean boolean37 = generator33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator33.getStrategy();
        generator32.setStrategy(generatorStrategy38);
        generator6.setStrategy(generatorStrategy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        generator41.setNamingPolicy(namingPolicy47);
        generator6.setNamingPolicy(namingPolicy47);
        generator0.setNamingPolicy(namingPolicy47);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(namingPolicy53);
    }

    @Test
    public void test2255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2255");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator4.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator3.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        boolean boolean19 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader26 = null;
        generator25.setClassLoader(classLoader26);
        java.lang.ClassLoader classLoader28 = null;
        generator25.setClassLoader(classLoader28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator25.getNamingPolicy();
        generator24.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator32.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator36.setUseCache(true);
        boolean boolean39 = generator36.getAttemptLoad();
        boolean boolean40 = generator36.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator36.getStrategy();
        generator35.setStrategy(generatorStrategy41);
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator43.setUseCache(true);
        boolean boolean46 = generator43.getAttemptLoad();
        boolean boolean47 = generator43.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator43.getStrategy();
        generator35.setStrategy(generatorStrategy48);
        generator32.setStrategy(generatorStrategy48);
        generator24.setStrategy(generatorStrategy48);
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader53 = null;
        generator52.setClassLoader(classLoader53);
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader56 = null;
        generator55.setClassLoader(classLoader56);
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = strComparator59.thenComparing(strComparator60);
        java.util.Comparator<java.lang.String> strComparator62 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = strComparator62.thenComparing(strComparator63);
        java.util.Comparator<java.lang.String> strComparator65 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator66 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator67 = strComparator65.thenComparing(strComparator66);
        boolean boolean68 = strComparator63.equals((java.lang.Object) strComparator67);
        java.lang.Object[] objArray70 = new java.lang.Object[] { '4', strComparator60, strComparator63, 0.0d };
        generator55.setArrays(objArray70);
        generator52.setArrays(objArray70);
        generator24.setArrays(objArray70);
        generator23.setArrays(objArray70);
        java.lang.ClassLoader classLoader75 = generator23.getClassLoader();
        generator0.setClassLoader(classLoader75);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader75);
    }

    @Test
    public void test2256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2256");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        boolean boolean10 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator13.setUseCache(true);
        boolean boolean16 = generator13.getAttemptLoad();
        boolean boolean17 = generator13.getUseCache();
        generator13.setAttemptLoad(true);
        boolean boolean20 = generator13.getUseCache();
        generator13.setAttemptLoad(true);
        java.lang.ClassLoader classLoader23 = generator13.getClassLoader();
        generator0.setClassLoader(classLoader23);
        java.lang.Class<?> wildcardClass25 = classLoader23.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test2257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2257");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        boolean boolean11 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator13.setUseCache(true);
        boolean boolean16 = generator13.getAttemptLoad();
        boolean boolean17 = generator13.getUseCache();
        generator13.setAttemptLoad(true);
        generator13.setUseCache(true);
        generator13.setUseCache(false);
        boolean boolean24 = generator13.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator13.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy25);
        boolean boolean27 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test2258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2258");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator0.setNamingPolicy(namingPolicy29);
        generator0.setUseCache(true);
        boolean boolean33 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator0.getStrategy();
        boolean boolean35 = generator0.getAttemptLoad();
        boolean boolean36 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test2259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2259");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader12 = null;
        generator11.setClassLoader(classLoader12);
        java.lang.ClassLoader classLoader14 = null;
        generator11.setClassLoader(classLoader14);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator11.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor24 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test2260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2260");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator5.setUseCache(true);
        boolean boolean8 = generator5.getAttemptLoad();
        boolean boolean9 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator5.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator5.setStrategy(generatorStrategy16);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator18.getNamingPolicy();
        generator18.setUseCache(false);
        boolean boolean29 = generator18.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator18.getNamingPolicy();
        generator18.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator18.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy33);
        generator0.setNamingPolicy(namingPolicy33);
        boolean boolean36 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader37 = generator0.getClassLoader();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
    }

    @Test
    public void test2261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2261");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator30.setUseCache(true);
        boolean boolean33 = generator30.getAttemptLoad();
        boolean boolean34 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator30.getStrategy();
        generator29.setStrategy(generatorStrategy35);
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator37.setUseCache(true);
        boolean boolean40 = generator37.getAttemptLoad();
        boolean boolean41 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator37.getStrategy();
        generator29.setStrategy(generatorStrategy42);
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader45 = null;
        generator44.setClassLoader(classLoader45);
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = strComparator48.thenComparing(strComparator49);
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = strComparator51.thenComparing(strComparator52);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        boolean boolean57 = strComparator52.equals((java.lang.Object) strComparator56);
        java.lang.Object[] objArray59 = new java.lang.Object[] { '4', strComparator49, strComparator52, 0.0d };
        generator44.setArrays(objArray59);
        generator29.setArrays(objArray59);
        generator0.setArrays(objArray59);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = null;
        generator0.setNamingPolicy(namingPolicy63);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator68 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader69 = null;
        generator68.setClassLoader(classLoader69);
        java.lang.ClassLoader classLoader71 = null;
        generator68.setClassLoader(classLoader71);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator68.getNamingPolicy();
        generator67.setNamingPolicy(namingPolicy73);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator67.getNamingPolicy();
        generator67.setUseCache(false);
        boolean boolean78 = generator67.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator67.getNamingPolicy();
        generator67.setUseCache(true);
        java.lang.ClassLoader classLoader82 = generator67.getClassLoader();
        generator0.setClassLoader(classLoader82);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertNotNull(classLoader82);
    }

    @Test
    public void test2262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2262");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        boolean boolean19 = generator16.getAttemptLoad();
        boolean boolean20 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator16.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator22.getStrategy();
        generator16.setStrategy(generatorStrategy27);
        java.lang.ClassLoader classLoader29 = generator16.getClassLoader();
        generator0.setClassLoader(classLoader29);
        boolean boolean31 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator37.setUseCache(true);
        boolean boolean40 = generator37.getAttemptLoad();
        boolean boolean41 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator37.getStrategy();
        generator36.setStrategy(generatorStrategy42);
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator44.setUseCache(true);
        boolean boolean47 = generator44.getAttemptLoad();
        boolean boolean48 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator44.getStrategy();
        generator36.setStrategy(generatorStrategy49);
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator51.setUseCache(true);
        boolean boolean54 = generator51.getAttemptLoad();
        boolean boolean55 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator51.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator57.setUseCache(true);
        boolean boolean60 = generator57.getAttemptLoad();
        boolean boolean61 = generator57.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator57.getStrategy();
        generator51.setStrategy(generatorStrategy62);
        generator36.setStrategy(generatorStrategy62);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        generator36.setNamingPolicy(namingPolicy65);
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator68 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader69 = null;
        generator68.setClassLoader(classLoader69);
        java.lang.ClassLoader classLoader71 = null;
        generator68.setClassLoader(classLoader71);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator68.getNamingPolicy();
        generator67.setNamingPolicy(namingPolicy73);
        boolean boolean75 = generator67.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator76 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader77 = null;
        generator76.setClassLoader(classLoader77);
        java.util.Comparator<java.lang.String> strComparator80 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator81 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator82 = strComparator80.thenComparing(strComparator81);
        java.util.Comparator<java.lang.String> strComparator83 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator84 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator85 = strComparator83.thenComparing(strComparator84);
        java.util.Comparator<java.lang.String> strComparator86 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator87 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator88 = strComparator86.thenComparing(strComparator87);
        boolean boolean89 = strComparator84.equals((java.lang.Object) strComparator88);
        java.lang.Object[] objArray91 = new java.lang.Object[] { '4', strComparator81, strComparator84, 0.0d };
        generator76.setArrays(objArray91);
        generator67.setArrays(objArray91);
        generator36.setArrays(objArray91);
        generator0.setArrays(objArray91);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter96 = org.mockito.cglib.util.ParallelSorter.create(objArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertNotNull(strComparator84);
        org.junit.Assert.assertNotNull(strComparator85);
        org.junit.Assert.assertNotNull(strComparator86);
        org.junit.Assert.assertNotNull(strComparator87);
        org.junit.Assert.assertNotNull(strComparator88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test2263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2263");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader8 = null;
        generator7.setClassLoader(classLoader8);
        java.lang.ClassLoader classLoader10 = null;
        generator7.setClassLoader(classLoader10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy12);
        boolean boolean14 = generator6.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        boolean boolean28 = strComparator23.equals((java.lang.Object) strComparator27);
        java.lang.Object[] objArray30 = new java.lang.Object[] { '4', strComparator20, strComparator23, 0.0d };
        generator15.setArrays(objArray30);
        generator6.setArrays(objArray30);
        generator0.setArrays(objArray30);
        boolean boolean34 = generator0.getAttemptLoad();
        boolean boolean35 = generator0.getUseCache();
        boolean boolean36 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass38 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test2264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2264");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        boolean boolean8 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader10 = null;
        generator9.setClassLoader(classLoader10);
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = strComparator13.thenComparing(strComparator14);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        boolean boolean22 = strComparator17.equals((java.lang.Object) strComparator21);
        java.lang.Object[] objArray24 = new java.lang.Object[] { '4', strComparator14, strComparator17, 0.0d };
        generator9.setArrays(objArray24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator9.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator9.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy27);
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader31 = null;
        generator30.setClassLoader(classLoader31);
        java.lang.ClassLoader classLoader33 = null;
        generator30.setClassLoader(classLoader33);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator30.getNamingPolicy();
        generator29.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator29.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator38.setUseCache(true);
        boolean boolean41 = generator38.getAttemptLoad();
        boolean boolean42 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator38.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader46 = null;
        generator45.setClassLoader(classLoader46);
        java.lang.ClassLoader classLoader48 = null;
        generator45.setClassLoader(classLoader48);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator45.getNamingPolicy();
        generator44.setNamingPolicy(namingPolicy50);
        boolean boolean52 = generator44.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader54 = null;
        generator53.setClassLoader(classLoader54);
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = strComparator57.thenComparing(strComparator58);
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = strComparator60.thenComparing(strComparator61);
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = strComparator63.thenComparing(strComparator64);
        boolean boolean66 = strComparator61.equals((java.lang.Object) strComparator65);
        java.lang.Object[] objArray68 = new java.lang.Object[] { '4', strComparator58, strComparator61, 0.0d };
        generator53.setArrays(objArray68);
        generator44.setArrays(objArray68);
        generator38.setArrays(objArray68);
        generator29.setArrays(objArray68);
        generator0.setArrays(objArray68);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy74);
    }

    @Test
    public void test2265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2265");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        boolean boolean16 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        java.lang.ClassLoader classLoader21 = null;
        generator18.setClassLoader(classLoader21);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator18.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy23);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader26 = null;
        generator25.setClassLoader(classLoader26);
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = strComparator29.thenComparing(strComparator30);
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = strComparator32.thenComparing(strComparator33);
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = strComparator35.thenComparing(strComparator36);
        boolean boolean38 = strComparator33.equals((java.lang.Object) strComparator37);
        java.lang.Object[] objArray40 = new java.lang.Object[] { '4', strComparator30, strComparator33, 0.0d };
        generator25.setArrays(objArray40);
        generator17.setArrays(objArray40);
        generator0.setArrays(objArray40);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter44 = org.mockito.cglib.util.ParallelSorter.create(objArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test2266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2266");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader8 = null;
        generator7.setClassLoader(classLoader8);
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator13 = strComparator11.thenComparing(strComparator12);
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = strComparator14.thenComparing(strComparator15);
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = strComparator17.thenComparing(strComparator18);
        boolean boolean20 = strComparator15.equals((java.lang.Object) strComparator19);
        java.lang.Object[] objArray22 = new java.lang.Object[] { '4', strComparator12, strComparator15, 0.0d };
        generator7.setArrays(objArray22);
        generator0.setArrays(objArray22);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor26 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy25);
    }

    @Test
    public void test2267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2267");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader5 = null;
        generator4.setClassLoader(classLoader5);
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator10 = strComparator8.thenComparing(strComparator9);
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator13 = strComparator11.thenComparing(strComparator12);
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = strComparator14.thenComparing(strComparator15);
        boolean boolean17 = strComparator12.equals((java.lang.Object) strComparator16);
        java.lang.Object[] objArray19 = new java.lang.Object[] { '4', strComparator9, strComparator12, 0.0d };
        generator4.setArrays(objArray19);
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader22 = null;
        generator21.setClassLoader(classLoader22);
        java.lang.ClassLoader classLoader24 = null;
        generator21.setClassLoader(classLoader24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator21.getNamingPolicy();
        generator4.setNamingPolicy(namingPolicy26);
        generator0.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        boolean boolean39 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator35.getStrategy();
        generator34.setStrategy(generatorStrategy40);
        boolean boolean42 = generator34.getAttemptLoad();
        generator34.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader47 = null;
        generator46.setClassLoader(classLoader47);
        java.lang.ClassLoader classLoader49 = null;
        generator46.setClassLoader(classLoader49);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator46.getNamingPolicy();
        generator45.setNamingPolicy(namingPolicy51);
        boolean boolean53 = generator45.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader55 = null;
        generator54.setClassLoader(classLoader55);
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = strComparator58.thenComparing(strComparator59);
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator63 = strComparator61.thenComparing(strComparator62);
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator66 = strComparator64.thenComparing(strComparator65);
        boolean boolean67 = strComparator62.equals((java.lang.Object) strComparator66);
        java.lang.Object[] objArray69 = new java.lang.Object[] { '4', strComparator59, strComparator62, 0.0d };
        generator54.setArrays(objArray69);
        generator45.setArrays(objArray69);
        boolean boolean72 = generator45.getAttemptLoad();
        java.lang.Object[] objArray73 = new java.lang.Object[] { generator45 };
        generator34.setArrays(objArray73);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator34.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator76 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator76.setUseCache(true);
        boolean boolean79 = generator76.getAttemptLoad();
        boolean boolean80 = generator76.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator76.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator76.getNamingPolicy();
        generator34.setNamingPolicy(namingPolicy82);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator34.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator34.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy85);
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor88 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertNotNull(namingPolicy85);
        org.junit.Assert.assertNotNull(namingPolicy87);
    }

    @Test
    public void test2268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2268");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator5.getStrategy();
        java.lang.ClassLoader classLoader7 = generator5.getClassLoader();
        generator5.setUseCache(false);
        boolean boolean10 = generator5.getUseCache();
        java.lang.ClassLoader classLoader11 = generator5.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator12.getStrategy();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator17.setUseCache(true);
        boolean boolean20 = generator17.getAttemptLoad();
        boolean boolean21 = generator17.getUseCache();
        generator17.setAttemptLoad(true);
        generator17.setUseCache(true);
        generator17.setAttemptLoad(true);
        generator17.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader31 = null;
        generator30.setClassLoader(classLoader31);
        java.lang.ClassLoader classLoader33 = null;
        generator30.setClassLoader(classLoader33);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator30.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator30.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy36);
        generator12.setNamingPolicy(namingPolicy36);
        generator5.setNamingPolicy(namingPolicy36);
        generator0.setNamingPolicy(namingPolicy36);
        generator0.setAttemptLoad(false);
        boolean boolean43 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test2269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2269");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        boolean boolean11 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter15 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(generatorStrategy12);
    }

    @Test
    public void test2270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2270");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        boolean boolean13 = generator0.getUseCache();
        java.lang.Class<?> wildcardClass14 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test2271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2271");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        generator0.setAttemptLoad(false);
        boolean boolean17 = generator0.getUseCache();
        boolean boolean18 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = strComparator23.thenComparing(strComparator24);
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = strComparator26.thenComparing(strComparator27);
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = strComparator29.thenComparing(strComparator30);
        boolean boolean32 = strComparator27.equals((java.lang.Object) strComparator31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { '4', strComparator24, strComparator27, 0.0d };
        generator19.setArrays(objArray34);
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader37 = null;
        generator36.setClassLoader(classLoader37);
        java.lang.ClassLoader classLoader39 = null;
        generator36.setClassLoader(classLoader39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator36.getNamingPolicy();
        generator19.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader45 = null;
        generator44.setClassLoader(classLoader45);
        java.lang.ClassLoader classLoader47 = null;
        generator44.setClassLoader(classLoader47);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator44.getNamingPolicy();
        generator43.setNamingPolicy(namingPolicy49);
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader52 = null;
        generator51.setClassLoader(classLoader52);
        java.lang.ClassLoader classLoader54 = null;
        generator51.setClassLoader(classLoader54);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator51.getNamingPolicy();
        generator43.setNamingPolicy(namingPolicy56);
        java.lang.ClassLoader classLoader58 = generator43.getClassLoader();
        generator19.setClassLoader(classLoader58);
        generator0.setClassLoader(classLoader58);
        org.mockito.asm.ClassVisitor classVisitor61 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(classLoader58);
    }

    @Test
    public void test2272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2272");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = strComparator3.thenComparing(strComparator4);
        java.util.Comparator<java.lang.String> strComparator6 = strComparator2.thenComparing(strComparator3);
        java.util.Comparator<java.lang.String> strComparator7 = strComparator2.reversed();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator10 = strComparator8.thenComparing(strComparator9);
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator13 = strComparator11.thenComparing(strComparator12);
        java.util.Comparator<java.lang.String> strComparator14 = strComparator10.thenComparing(strComparator11);
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = strComparator15.thenComparing(strComparator16);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        java.util.Comparator<java.lang.String> strComparator21 = strComparator17.thenComparing(strComparator18);
        boolean boolean22 = strComparator14.equals((java.lang.Object) strComparator18);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader24 = null;
        generator23.setClassLoader(classLoader24);
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = strComparator27.thenComparing(strComparator28);
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = strComparator30.thenComparing(strComparator31);
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = strComparator33.thenComparing(strComparator34);
        boolean boolean36 = strComparator31.equals((java.lang.Object) strComparator35);
        java.lang.Object[] objArray38 = new java.lang.Object[] { '4', strComparator28, strComparator31, 0.0d };
        generator23.setArrays(objArray38);
        java.lang.ClassLoader classLoader40 = null;
        generator23.setClassLoader(classLoader40);
        boolean boolean42 = generator23.getAttemptLoad();
        boolean boolean43 = strComparator18.equals((java.lang.Object) generator23);
        boolean boolean44 = strComparator2.equals((java.lang.Object) generator23);
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = strComparator45.thenComparing(strComparator46);
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = strComparator48.thenComparing(strComparator49);
        java.util.Comparator<java.lang.String> strComparator51 = strComparator47.thenComparing(strComparator48);
        java.util.Comparator<java.lang.String> strComparator52 = strComparator47.reversed();
        java.util.Comparator<java.lang.String> strComparator53 = strComparator47.reversed();
        java.util.Comparator<java.lang.String> strComparator54 = strComparator53.reversed();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.nullsLast(strComparator53);
        java.util.Comparator<java.lang.String> strComparator56 = strComparator2.thenComparing(strComparator53);
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader59 = null;
        generator58.setClassLoader(classLoader59);
        java.lang.ClassLoader classLoader61 = null;
        generator58.setClassLoader(classLoader61);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator58.getNamingPolicy();
        generator57.setNamingPolicy(namingPolicy63);
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader66 = null;
        generator65.setClassLoader(classLoader66);
        java.lang.ClassLoader classLoader68 = null;
        generator65.setClassLoader(classLoader68);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator65.getNamingPolicy();
        generator57.setNamingPolicy(namingPolicy70);
        org.mockito.cglib.util.ParallelSorter.Generator generator72 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator72.setUseCache(true);
        java.lang.ClassLoader classLoader75 = generator72.getClassLoader();
        generator57.setClassLoader(classLoader75);
        generator57.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator79 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader80 = null;
        generator79.setClassLoader(classLoader80);
        java.lang.ClassLoader classLoader82 = generator79.getClassLoader();
        generator57.setClassLoader(classLoader82);
        boolean boolean84 = generator57.getAttemptLoad();
        boolean boolean85 = generator57.getUseCache();
        generator57.setAttemptLoad(false);
        boolean boolean88 = strComparator56.equals((java.lang.Object) false);
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test2273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2273");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator4.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator3.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader21 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        generator22.setUseCache(true);
        generator22.setAttemptLoad(true);
        generator22.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator22.getStrategy();
        generator0.setStrategy(generatorStrategy35);
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator39.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator43.setUseCache(true);
        boolean boolean46 = generator43.getAttemptLoad();
        boolean boolean47 = generator43.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator43.getStrategy();
        generator42.setStrategy(generatorStrategy48);
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator50.setUseCache(true);
        boolean boolean53 = generator50.getAttemptLoad();
        boolean boolean54 = generator50.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator50.getStrategy();
        generator42.setStrategy(generatorStrategy55);
        generator39.setStrategy(generatorStrategy55);
        boolean boolean58 = generator39.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader60 = null;
        generator59.setClassLoader(classLoader60);
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = strComparator63.thenComparing(strComparator64);
        java.util.Comparator<java.lang.String> strComparator66 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator67 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator68 = strComparator66.thenComparing(strComparator67);
        java.util.Comparator<java.lang.String> strComparator69 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator70 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator71 = strComparator69.thenComparing(strComparator70);
        boolean boolean72 = strComparator67.equals((java.lang.Object) strComparator71);
        java.lang.Object[] objArray74 = new java.lang.Object[] { '4', strComparator64, strComparator67, 0.0d };
        generator59.setArrays(objArray74);
        generator39.setArrays(objArray74);
        generator0.setArrays(objArray74);
        boolean boolean78 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor79 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test2274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2274");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader12 = null;
        generator11.setClassLoader(classLoader12);
        java.lang.ClassLoader classLoader14 = null;
        generator11.setClassLoader(classLoader14);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator11.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator22.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator22.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator22.getStrategy();
        boolean boolean30 = generator22.getAttemptLoad();
        boolean boolean31 = generator22.getAttemptLoad();
        java.lang.ClassLoader classLoader32 = generator22.getClassLoader();
        generator22.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator22.getStrategy();
        generator0.setStrategy(generatorStrategy35);
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        java.lang.ClassLoader classLoader40 = null;
        generator37.setClassLoader(classLoader40);
        generator37.setAttemptLoad(true);
        boolean boolean44 = generator37.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator37.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy45);
        generator0.setUseCache(false);
        java.lang.Class<?> wildcardClass49 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test2275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2275");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = strComparator0.reversed();
        java.util.Comparator<java.lang.String> strComparator4 = strComparator3.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader7 = null;
        generator6.setClassLoader(classLoader7);
        java.lang.ClassLoader classLoader9 = null;
        generator6.setClassLoader(classLoader9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator6.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy11);
        boolean boolean13 = strComparator3.equals((java.lang.Object) generator5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator5.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator5.getStrategy();
        boolean boolean16 = generator5.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        boolean boolean22 = generator17.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator17.getStrategy();
        java.lang.ClassLoader classLoader24 = generator17.getClassLoader();
        generator5.setClassLoader(classLoader24);
        boolean boolean26 = generator5.getAttemptLoad();
        boolean boolean27 = generator5.getUseCache();
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test2276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2276");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        java.lang.ClassLoader classLoader18 = generator15.getClassLoader();
        generator0.setClassLoader(classLoader18);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter25 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(namingPolicy24);
    }

    @Test
    public void test2277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2277");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        java.lang.ClassLoader classLoader18 = generator15.getClassLoader();
        generator0.setClassLoader(classLoader18);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator0.getStrategy();
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator27.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator27.getStrategy();
        boolean boolean31 = generator27.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator32.setUseCache(true);
        boolean boolean35 = generator32.getAttemptLoad();
        boolean boolean36 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator32.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator38.setUseCache(true);
        boolean boolean41 = generator38.getAttemptLoad();
        boolean boolean42 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator38.getStrategy();
        generator32.setStrategy(generatorStrategy43);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader47 = null;
        generator46.setClassLoader(classLoader47);
        java.lang.ClassLoader classLoader49 = null;
        generator46.setClassLoader(classLoader49);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator46.getNamingPolicy();
        generator45.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator45.getNamingPolicy();
        generator45.setUseCache(false);
        boolean boolean56 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator45.getNamingPolicy();
        generator45.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator45.getNamingPolicy();
        generator32.setNamingPolicy(namingPolicy60);
        generator27.setNamingPolicy(namingPolicy60);
        boolean boolean63 = generator27.getAttemptLoad();
        java.lang.ClassLoader classLoader64 = generator27.getClassLoader();
        generator27.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator27.getStrategy();
        generator0.setStrategy(generatorStrategy67);
        org.mockito.cglib.util.ParallelSorter.Generator generator69 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator70 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader71 = null;
        generator70.setClassLoader(classLoader71);
        java.lang.ClassLoader classLoader73 = null;
        generator70.setClassLoader(classLoader73);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator70.getNamingPolicy();
        generator69.setNamingPolicy(namingPolicy75);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator69.getNamingPolicy();
        boolean boolean78 = generator69.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = null;
        generator69.setStrategy(generatorStrategy79);
        org.mockito.cglib.util.ParallelSorter.Generator generator81 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator82 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator82.setUseCache(true);
        boolean boolean85 = generator82.getAttemptLoad();
        boolean boolean86 = generator82.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator82.getStrategy();
        generator81.setStrategy(generatorStrategy87);
        boolean boolean89 = generator81.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy90 = generator81.getNamingPolicy();
        java.lang.ClassLoader classLoader91 = generator81.getClassLoader();
        generator69.setClassLoader(classLoader91);
        org.mockito.cglib.core.NamingPolicy namingPolicy93 = generator69.getNamingPolicy();
        java.lang.ClassLoader classLoader94 = generator69.getClassLoader();
        generator0.setClassLoader(classLoader94);
        java.lang.ClassLoader classLoader96 = generator0.getClassLoader();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(namingPolicy90);
        org.junit.Assert.assertNotNull(classLoader91);
        org.junit.Assert.assertNotNull(namingPolicy93);
        org.junit.Assert.assertNotNull(classLoader94);
        org.junit.Assert.assertNotNull(classLoader96);
    }

    @Test
    public void test2278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2278");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator5.setUseCache(true);
        boolean boolean8 = generator5.getAttemptLoad();
        boolean boolean9 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator5.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator5.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader13 = null;
        generator12.setClassLoader(classLoader13);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        boolean boolean25 = strComparator20.equals((java.lang.Object) strComparator24);
        java.lang.Object[] objArray27 = new java.lang.Object[] { '4', strComparator17, strComparator20, 0.0d };
        generator12.setArrays(objArray27);
        java.lang.ClassLoader classLoader29 = null;
        generator12.setClassLoader(classLoader29);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        java.lang.ClassLoader classLoader34 = null;
        generator31.setClassLoader(classLoader34);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator31.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy36);
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator39.setUseCache(true);
        boolean boolean42 = generator39.getAttemptLoad();
        boolean boolean43 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator39.getStrategy();
        generator38.setStrategy(generatorStrategy44);
        generator12.setStrategy(generatorStrategy44);
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader49 = null;
        generator48.setClassLoader(classLoader49);
        java.lang.ClassLoader classLoader51 = null;
        generator48.setClassLoader(classLoader51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator48.getNamingPolicy();
        generator47.setNamingPolicy(namingPolicy53);
        generator12.setNamingPolicy(namingPolicy53);
        generator5.setNamingPolicy(namingPolicy53);
        generator0.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(namingPolicy59);
    }

    @Test
    public void test2279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2279");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader8 = null;
        generator7.setClassLoader(classLoader8);
        java.lang.ClassLoader classLoader10 = null;
        generator7.setClassLoader(classLoader10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        boolean boolean27 = strComparator22.equals((java.lang.Object) strComparator26);
        java.lang.Object[] objArray29 = new java.lang.Object[] { '4', strComparator19, strComparator22, 0.0d };
        generator14.setArrays(objArray29);
        java.lang.ClassLoader classLoader31 = null;
        generator14.setClassLoader(classLoader31);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        generator40.setStrategy(generatorStrategy46);
        generator14.setStrategy(generatorStrategy46);
        generator6.setStrategy(generatorStrategy46);
        generator0.setStrategy(generatorStrategy46);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator52.setUseCache(true);
        boolean boolean55 = generator52.getAttemptLoad();
        boolean boolean56 = generator52.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator52.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy57);
        generator0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter61 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(namingPolicy57);
    }

    @Test
    public void test2280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2280");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader8 = null;
        generator7.setClassLoader(classLoader8);
        java.lang.ClassLoader classLoader10 = null;
        generator7.setClassLoader(classLoader10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        boolean boolean27 = strComparator22.equals((java.lang.Object) strComparator26);
        java.lang.Object[] objArray29 = new java.lang.Object[] { '4', strComparator19, strComparator22, 0.0d };
        generator14.setArrays(objArray29);
        java.lang.ClassLoader classLoader31 = null;
        generator14.setClassLoader(classLoader31);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        generator40.setStrategy(generatorStrategy46);
        generator14.setStrategy(generatorStrategy46);
        generator6.setStrategy(generatorStrategy46);
        generator0.setStrategy(generatorStrategy46);
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator53.setUseCache(true);
        boolean boolean56 = generator53.getAttemptLoad();
        java.lang.ClassLoader classLoader57 = null;
        generator53.setClassLoader(classLoader57);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator53.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader61 = null;
        generator60.setClassLoader(classLoader61);
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator66 = strComparator64.thenComparing(strComparator65);
        java.util.Comparator<java.lang.String> strComparator67 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator68 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator69 = strComparator67.thenComparing(strComparator68);
        java.util.Comparator<java.lang.String> strComparator70 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator71 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator72 = strComparator70.thenComparing(strComparator71);
        boolean boolean73 = strComparator68.equals((java.lang.Object) strComparator72);
        java.lang.Object[] objArray75 = new java.lang.Object[] { '4', strComparator65, strComparator68, 0.0d };
        generator60.setArrays(objArray75);
        generator53.setArrays(objArray75);
        generator0.setArrays(objArray75);
        boolean boolean79 = generator0.getAttemptLoad();
        boolean boolean80 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test2281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2281");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = strComparator3.thenComparing(strComparator4);
        boolean boolean6 = strComparator1.equals((java.lang.Object) strComparator5);
        boolean boolean8 = strComparator5.equals((java.lang.Object) 'a');
        java.util.Comparator<java.lang.String> strComparator9 = strComparator5.reversed();
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.nullsLast(strComparator9);
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
    }

    @Test
    public void test2282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2282");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getUseCache();
        boolean boolean6 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = null;
        generator0.setStrategy(generatorStrategy8);
        boolean boolean10 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator11.getStrategy();
        java.lang.ClassLoader classLoader13 = generator11.getClassLoader();
        generator11.setUseCache(false);
        boolean boolean16 = generator11.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator11.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        java.lang.ClassLoader classLoader19 = generator0.getClassLoader();
        java.lang.Class<?> wildcardClass20 = generator0.getClass();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test2283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2283");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        java.lang.ClassLoader classLoader6 = generator4.getClassLoader();
        boolean boolean7 = generator4.getAttemptLoad();
        java.lang.ClassLoader classLoader8 = generator4.getClassLoader();
        generator0.setClassLoader(classLoader8);
        boolean boolean10 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test2284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2284");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getUseCache();
        boolean boolean6 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator7.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        boolean boolean23 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator19.getStrategy();
        generator18.setStrategy(generatorStrategy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator26.setUseCache(true);
        boolean boolean29 = generator26.getAttemptLoad();
        boolean boolean30 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator26.getStrategy();
        generator18.setStrategy(generatorStrategy31);
        generator15.setStrategy(generatorStrategy31);
        generator7.setStrategy(generatorStrategy31);
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader36 = null;
        generator35.setClassLoader(classLoader36);
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader39 = null;
        generator38.setClassLoader(classLoader39);
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = strComparator42.thenComparing(strComparator43);
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = strComparator45.thenComparing(strComparator46);
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = strComparator48.thenComparing(strComparator49);
        boolean boolean51 = strComparator46.equals((java.lang.Object) strComparator50);
        java.lang.Object[] objArray53 = new java.lang.Object[] { '4', strComparator43, strComparator46, 0.0d };
        generator38.setArrays(objArray53);
        generator35.setArrays(objArray53);
        generator7.setArrays(objArray53);
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader58 = null;
        generator57.setClassLoader(classLoader58);
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator63 = strComparator61.thenComparing(strComparator62);
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator66 = strComparator64.thenComparing(strComparator65);
        java.util.Comparator<java.lang.String> strComparator67 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator68 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator69 = strComparator67.thenComparing(strComparator68);
        boolean boolean70 = strComparator65.equals((java.lang.Object) strComparator69);
        java.lang.Object[] objArray72 = new java.lang.Object[] { '4', strComparator62, strComparator65, 0.0d };
        generator57.setArrays(objArray72);
        org.mockito.cglib.util.ParallelSorter.Generator generator74 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader75 = null;
        generator74.setClassLoader(classLoader75);
        java.lang.ClassLoader classLoader77 = null;
        generator74.setClassLoader(classLoader77);
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator74.getNamingPolicy();
        generator57.setNamingPolicy(namingPolicy79);
        java.lang.ClassLoader classLoader81 = generator57.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator57.getStrategy();
        generator7.setStrategy(generatorStrategy82);
        generator0.setStrategy(generatorStrategy82);
        boolean boolean85 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor86 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertNotNull(classLoader81);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test2285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2285");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        boolean boolean8 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader14 = null;
        generator13.setClassLoader(classLoader14);
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = strComparator17.thenComparing(strComparator18);
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = strComparator20.thenComparing(strComparator21);
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = strComparator23.thenComparing(strComparator24);
        boolean boolean26 = strComparator21.equals((java.lang.Object) strComparator25);
        java.lang.Object[] objArray28 = new java.lang.Object[] { '4', strComparator18, strComparator21, 0.0d };
        generator13.setArrays(objArray28);
        boolean boolean30 = generator13.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        boolean boolean34 = generator31.getAttemptLoad();
        boolean boolean35 = generator31.getUseCache();
        generator31.setAttemptLoad(true);
        generator31.setUseCache(true);
        generator31.setUseCache(false);
        boolean boolean42 = generator31.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator31.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator44.setUseCache(true);
        boolean boolean47 = generator44.getAttemptLoad();
        boolean boolean48 = generator44.getUseCache();
        generator44.setAttemptLoad(true);
        generator44.setUseCache(true);
        generator44.setUseCache(false);
        boolean boolean55 = generator44.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator44.getNamingPolicy();
        generator31.setNamingPolicy(namingPolicy56);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator31.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy58);
        generator0.setNamingPolicy(namingPolicy58);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter61 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(namingPolicy58);
    }

    @Test
    public void test2286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2286");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy22);
        java.lang.ClassLoader classLoader24 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator26.getStrategy();
        java.lang.ClassLoader classLoader28 = generator26.getClassLoader();
        generator26.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        boolean boolean34 = generator31.getAttemptLoad();
        boolean boolean35 = generator31.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator36.setUseCache(true);
        boolean boolean39 = generator36.getAttemptLoad();
        boolean boolean40 = generator36.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator36.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator36.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator36.getStrategy();
        generator31.setStrategy(generatorStrategy43);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator45.setUseCache(true);
        boolean boolean48 = generator45.getAttemptLoad();
        boolean boolean49 = generator45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator45.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator51.setUseCache(true);
        boolean boolean54 = generator51.getAttemptLoad();
        boolean boolean55 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator51.getStrategy();
        generator45.setStrategy(generatorStrategy56);
        java.lang.ClassLoader classLoader58 = generator45.getClassLoader();
        generator45.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator61.setUseCache(true);
        boolean boolean64 = generator61.getAttemptLoad();
        boolean boolean65 = generator61.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator61.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator67.setUseCache(true);
        boolean boolean70 = generator67.getAttemptLoad();
        boolean boolean71 = generator67.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator67.getStrategy();
        generator61.setStrategy(generatorStrategy72);
        java.lang.ClassLoader classLoader74 = generator61.getClassLoader();
        generator45.setClassLoader(classLoader74);
        generator31.setClassLoader(classLoader74);
        generator26.setClassLoader(classLoader74);
        generator0.setClassLoader(classLoader74);
        generator0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter81 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(classLoader74);
    }

    @Test
    public void test2287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2287");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator0.setNamingPolicy(namingPolicy29);
        java.lang.ClassLoader classLoader31 = generator0.getClassLoader();
        boolean boolean32 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader33 = null;
        generator0.setClassLoader(classLoader33);
        boolean boolean35 = generator0.getAttemptLoad();
        boolean boolean36 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader37 = generator0.getClassLoader();
        boolean boolean38 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test2288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2288");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        boolean boolean8 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader10 = null;
        generator9.setClassLoader(classLoader10);
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = strComparator13.thenComparing(strComparator14);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        boolean boolean22 = strComparator17.equals((java.lang.Object) strComparator21);
        java.lang.Object[] objArray24 = new java.lang.Object[] { '4', strComparator14, strComparator17, 0.0d };
        generator9.setArrays(objArray24);
        java.lang.ClassLoader classLoader26 = null;
        generator9.setClassLoader(classLoader26);
        boolean boolean28 = generator9.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator29.getStrategy();
        generator9.setStrategy(generatorStrategy34);
        generator0.setStrategy(generatorStrategy34);
        boolean boolean37 = generator0.getAttemptLoad();
        boolean boolean38 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter39 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test2289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2289");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        boolean boolean13 = generator10.getAttemptLoad();
        boolean boolean14 = generator10.getUseCache();
        generator10.setAttemptLoad(true);
        generator10.setUseCache(true);
        generator10.setAttemptLoad(true);
        boolean boolean21 = generator10.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator10.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator24.setUseCache(true);
        boolean boolean27 = generator24.getAttemptLoad();
        boolean boolean28 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator24.getStrategy();
        generator23.setStrategy(generatorStrategy29);
        boolean boolean31 = generator23.getAttemptLoad();
        generator23.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader36 = null;
        generator35.setClassLoader(classLoader36);
        java.lang.ClassLoader classLoader38 = null;
        generator35.setClassLoader(classLoader38);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator35.getNamingPolicy();
        generator34.setNamingPolicy(namingPolicy40);
        boolean boolean42 = generator34.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader44 = null;
        generator43.setClassLoader(classLoader44);
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = strComparator47.thenComparing(strComparator48);
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = strComparator50.thenComparing(strComparator51);
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = strComparator53.thenComparing(strComparator54);
        boolean boolean56 = strComparator51.equals((java.lang.Object) strComparator55);
        java.lang.Object[] objArray58 = new java.lang.Object[] { '4', strComparator48, strComparator51, 0.0d };
        generator43.setArrays(objArray58);
        generator34.setArrays(objArray58);
        boolean boolean61 = generator34.getAttemptLoad();
        java.lang.Object[] objArray62 = new java.lang.Object[] { generator34 };
        generator23.setArrays(objArray62);
        generator10.setArrays(objArray62);
        generator0.setArrays(objArray62);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objArray62);
    }

    @Test
    public void test2290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2290");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        boolean boolean6 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator7.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator7.getStrategy();
        boolean boolean11 = generator7.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator12.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator18.setUseCache(true);
        boolean boolean21 = generator18.getAttemptLoad();
        boolean boolean22 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator18.getStrategy();
        generator12.setStrategy(generatorStrategy23);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader27 = null;
        generator26.setClassLoader(classLoader27);
        java.lang.ClassLoader classLoader29 = null;
        generator26.setClassLoader(classLoader29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator26.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator25.getNamingPolicy();
        generator25.setUseCache(false);
        boolean boolean36 = generator25.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator25.getNamingPolicy();
        generator25.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator25.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy40);
        generator7.setNamingPolicy(namingPolicy40);
        boolean boolean43 = generator7.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader45 = null;
        generator44.setClassLoader(classLoader45);
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader48 = null;
        generator47.setClassLoader(classLoader48);
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = strComparator51.thenComparing(strComparator52);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = strComparator57.thenComparing(strComparator58);
        boolean boolean60 = strComparator55.equals((java.lang.Object) strComparator59);
        java.lang.Object[] objArray62 = new java.lang.Object[] { '4', strComparator52, strComparator55, 0.0d };
        generator47.setArrays(objArray62);
        generator44.setArrays(objArray62);
        generator7.setArrays(objArray62);
        generator0.setArrays(objArray62);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor68 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy67);
    }

    @Test
    public void test2291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2291");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator6.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean9 = generator8.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator8.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader13 = null;
        generator12.setClassLoader(classLoader13);
        java.lang.ClassLoader classLoader15 = null;
        generator12.setClassLoader(classLoader15);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator26.setUseCache(true);
        java.lang.ClassLoader classLoader29 = generator26.getClassLoader();
        generator11.setClassLoader(classLoader29);
        generator8.setClassLoader(classLoader29);
        generator8.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        boolean boolean39 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator35.getStrategy();
        generator34.setStrategy(generatorStrategy40);
        boolean boolean42 = generator34.getAttemptLoad();
        generator34.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader47 = null;
        generator46.setClassLoader(classLoader47);
        java.lang.ClassLoader classLoader49 = null;
        generator46.setClassLoader(classLoader49);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator46.getNamingPolicy();
        generator45.setNamingPolicy(namingPolicy51);
        boolean boolean53 = generator45.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader55 = null;
        generator54.setClassLoader(classLoader55);
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = strComparator58.thenComparing(strComparator59);
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator63 = strComparator61.thenComparing(strComparator62);
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator66 = strComparator64.thenComparing(strComparator65);
        boolean boolean67 = strComparator62.equals((java.lang.Object) strComparator66);
        java.lang.Object[] objArray69 = new java.lang.Object[] { '4', strComparator59, strComparator62, 0.0d };
        generator54.setArrays(objArray69);
        generator45.setArrays(objArray69);
        boolean boolean72 = generator45.getAttemptLoad();
        java.lang.Object[] objArray73 = new java.lang.Object[] { generator45 };
        generator34.setArrays(objArray73);
        generator8.setArrays(objArray73);
        generator6.setArrays(objArray73);
        java.lang.ClassLoader classLoader77 = generator6.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy78);
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(namingPolicy80);
    }

    @Test
    public void test2292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2292");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = strComparator3.thenComparing(strComparator4);
        java.util.Comparator<java.lang.String> strComparator6 = strComparator2.thenComparing(strComparator3);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.reverseOrder();
        java.util.Comparator<java.lang.String> strComparator8 = strComparator3.thenComparing(strComparator7);
        java.util.Comparator<java.lang.String> strComparator9 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = strComparator9.thenComparing(strComparator10);
        java.util.Comparator<java.lang.String> strComparator12 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = strComparator12.thenComparing(strComparator13);
        java.util.Comparator<java.lang.String> strComparator15 = strComparator11.thenComparing(strComparator12);
        java.util.Comparator<java.lang.String> strComparator16 = strComparator15.reversed();
        java.util.Comparator<java.lang.String> strComparator17 = strComparator7.thenComparing(strComparator16);
        int int20 = strComparator16.compare("", "hi!");
        int int23 = strComparator16.compare("hi!", "hi!");
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test2293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2293");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator9.setUseCache(true);
        boolean boolean12 = generator9.getAttemptLoad();
        java.lang.ClassLoader classLoader13 = null;
        generator9.setClassLoader(classLoader13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader17 = null;
        generator16.setClassLoader(classLoader17);
        java.lang.ClassLoader classLoader19 = null;
        generator16.setClassLoader(classLoader19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader24 = null;
        generator23.setClassLoader(classLoader24);
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = strComparator27.thenComparing(strComparator28);
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = strComparator30.thenComparing(strComparator31);
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = strComparator33.thenComparing(strComparator34);
        boolean boolean36 = strComparator31.equals((java.lang.Object) strComparator35);
        java.lang.Object[] objArray38 = new java.lang.Object[] { '4', strComparator28, strComparator31, 0.0d };
        generator23.setArrays(objArray38);
        java.lang.ClassLoader classLoader40 = null;
        generator23.setClassLoader(classLoader40);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        generator23.setNamingPolicy(namingPolicy47);
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator50.setUseCache(true);
        boolean boolean53 = generator50.getAttemptLoad();
        boolean boolean54 = generator50.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator50.getStrategy();
        generator49.setStrategy(generatorStrategy55);
        generator23.setStrategy(generatorStrategy55);
        generator15.setStrategy(generatorStrategy55);
        generator9.setStrategy(generatorStrategy55);
        generator0.setStrategy(generatorStrategy55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator0.getStrategy();
        java.lang.ClassLoader classLoader62 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertNotNull(classLoader62);
    }

    @Test
    public void test2294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2294");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator6.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean9 = generator8.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator8.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader13 = null;
        generator12.setClassLoader(classLoader13);
        java.lang.ClassLoader classLoader15 = null;
        generator12.setClassLoader(classLoader15);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator26.setUseCache(true);
        java.lang.ClassLoader classLoader29 = generator26.getClassLoader();
        generator11.setClassLoader(classLoader29);
        generator8.setClassLoader(classLoader29);
        generator8.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        boolean boolean39 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator35.getStrategy();
        generator34.setStrategy(generatorStrategy40);
        boolean boolean42 = generator34.getAttemptLoad();
        generator34.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader47 = null;
        generator46.setClassLoader(classLoader47);
        java.lang.ClassLoader classLoader49 = null;
        generator46.setClassLoader(classLoader49);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator46.getNamingPolicy();
        generator45.setNamingPolicy(namingPolicy51);
        boolean boolean53 = generator45.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader55 = null;
        generator54.setClassLoader(classLoader55);
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = strComparator58.thenComparing(strComparator59);
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator63 = strComparator61.thenComparing(strComparator62);
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator66 = strComparator64.thenComparing(strComparator65);
        boolean boolean67 = strComparator62.equals((java.lang.Object) strComparator66);
        java.lang.Object[] objArray69 = new java.lang.Object[] { '4', strComparator59, strComparator62, 0.0d };
        generator54.setArrays(objArray69);
        generator45.setArrays(objArray69);
        boolean boolean72 = generator45.getAttemptLoad();
        java.lang.Object[] objArray73 = new java.lang.Object[] { generator45 };
        generator34.setArrays(objArray73);
        generator8.setArrays(objArray73);
        generator6.setArrays(objArray73);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator6.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator78 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader79 = null;
        generator78.setClassLoader(classLoader79);
        java.util.Comparator<java.lang.String> strComparator82 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator83 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator84 = strComparator82.thenComparing(strComparator83);
        java.util.Comparator<java.lang.String> strComparator85 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator86 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator87 = strComparator85.thenComparing(strComparator86);
        java.util.Comparator<java.lang.String> strComparator88 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator89 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator90 = strComparator88.thenComparing(strComparator89);
        boolean boolean91 = strComparator86.equals((java.lang.Object) strComparator90);
        java.lang.Object[] objArray93 = new java.lang.Object[] { '4', strComparator83, strComparator86, 0.0d };
        generator78.setArrays(objArray93);
        generator6.setArrays(objArray93);
        generator0.setArrays(objArray93);
        org.mockito.cglib.core.NamingPolicy namingPolicy97 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertNotNull(strComparator84);
        org.junit.Assert.assertNotNull(strComparator85);
        org.junit.Assert.assertNotNull(strComparator86);
        org.junit.Assert.assertNotNull(strComparator87);
        org.junit.Assert.assertNotNull(strComparator88);
        org.junit.Assert.assertNotNull(strComparator89);
        org.junit.Assert.assertNotNull(strComparator90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy97);
    }

    @Test
    public void test2295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2295");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader11 = null;
        generator10.setClassLoader(classLoader11);
        java.lang.ClassLoader classLoader13 = null;
        generator10.setClassLoader(classLoader13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator10.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy22);
        generator0.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean26 = generator25.getAttemptLoad();
        java.lang.ClassLoader classLoader27 = generator25.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator28.setUseCache(true);
        java.lang.ClassLoader classLoader31 = generator28.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator32.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator32.getStrategy();
        generator28.setStrategy(generatorStrategy35);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator28.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator28.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator25.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator25.getStrategy();
        generator0.setStrategy(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(generatorStrategy41);
    }

    @Test
    public void test2296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2296");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getAttemptLoad();
        boolean boolean6 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator7.setStrategy(generatorStrategy13);
        boolean boolean15 = generator7.getAttemptLoad();
        generator7.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy24);
        boolean boolean26 = generator18.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = strComparator31.thenComparing(strComparator32);
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = strComparator34.thenComparing(strComparator35);
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = strComparator37.thenComparing(strComparator38);
        boolean boolean40 = strComparator35.equals((java.lang.Object) strComparator39);
        java.lang.Object[] objArray42 = new java.lang.Object[] { '4', strComparator32, strComparator35, 0.0d };
        generator27.setArrays(objArray42);
        generator18.setArrays(objArray42);
        boolean boolean45 = generator18.getAttemptLoad();
        java.lang.Object[] objArray46 = new java.lang.Object[] { generator18 };
        generator7.setArrays(objArray46);
        generator0.setArrays(objArray46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator0.getStrategy();
        java.lang.ClassLoader classLoader50 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter52 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.util.ParallelSorter$Generator is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(generatorStrategy51);
    }

    @Test
    public void test2297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2297");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        boolean boolean6 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
    }

    @Test
    public void test2298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2298");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        boolean boolean8 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader10 = null;
        generator9.setClassLoader(classLoader10);
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = strComparator13.thenComparing(strComparator14);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        boolean boolean22 = strComparator17.equals((java.lang.Object) strComparator21);
        java.lang.Object[] objArray24 = new java.lang.Object[] { '4', strComparator14, strComparator17, 0.0d };
        generator9.setArrays(objArray24);
        java.lang.ClassLoader classLoader26 = null;
        generator9.setClassLoader(classLoader26);
        boolean boolean28 = generator9.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator29.getStrategy();
        generator9.setStrategy(generatorStrategy34);
        generator0.setStrategy(generatorStrategy34);
        java.lang.ClassLoader classLoader37 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader39 = null;
        generator38.setClassLoader(classLoader39);
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = strComparator42.thenComparing(strComparator43);
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = strComparator45.thenComparing(strComparator46);
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = strComparator48.thenComparing(strComparator49);
        boolean boolean51 = strComparator46.equals((java.lang.Object) strComparator50);
        java.lang.Object[] objArray53 = new java.lang.Object[] { '4', strComparator43, strComparator46, 0.0d };
        generator38.setArrays(objArray53);
        java.lang.ClassLoader classLoader55 = generator38.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader58 = null;
        generator57.setClassLoader(classLoader58);
        java.lang.ClassLoader classLoader60 = null;
        generator57.setClassLoader(classLoader60);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator57.getNamingPolicy();
        generator56.setNamingPolicy(namingPolicy62);
        org.mockito.cglib.util.ParallelSorter.Generator generator64 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader65 = null;
        generator64.setClassLoader(classLoader65);
        java.lang.ClassLoader classLoader67 = null;
        generator64.setClassLoader(classLoader67);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator64.getNamingPolicy();
        generator56.setNamingPolicy(namingPolicy69);
        java.lang.ClassLoader classLoader71 = generator56.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator56.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator56.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator74 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator74.setUseCache(true);
        boolean boolean77 = generator74.getAttemptLoad();
        boolean boolean78 = generator74.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator74.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator74.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator74.getStrategy();
        generator56.setStrategy(generatorStrategy81);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator56.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator56.getNamingPolicy();
        generator38.setNamingPolicy(namingPolicy84);
        generator0.setNamingPolicy(namingPolicy84);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertNotNull(namingPolicy84);
    }

    @Test
    public void test2299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2299");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator6.getStrategy();
        java.lang.ClassLoader classLoader8 = generator6.getClassLoader();
        generator6.setUseCache(false);
        boolean boolean11 = generator6.getUseCache();
        java.lang.ClassLoader classLoader12 = generator6.getClassLoader();
        generator0.setClassLoader(classLoader12);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator14.setUseCache(true);
        boolean boolean17 = generator14.getAttemptLoad();
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        generator14.setUseCache(true);
        generator14.setAttemptLoad(true);
        generator14.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator14.getStrategy();
        java.lang.ClassLoader classLoader28 = generator14.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        generator29.setAttemptLoad(true);
        generator29.setUseCache(true);
        generator29.setAttemptLoad(true);
        generator29.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator29.getStrategy();
        java.lang.ClassLoader classLoader43 = generator29.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader45 = null;
        generator44.setClassLoader(classLoader45);
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = strComparator48.thenComparing(strComparator49);
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = strComparator51.thenComparing(strComparator52);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        boolean boolean57 = strComparator52.equals((java.lang.Object) strComparator56);
        java.lang.Object[] objArray59 = new java.lang.Object[] { '4', strComparator49, strComparator52, 0.0d };
        generator44.setArrays(objArray59);
        generator29.setArrays(objArray59);
        generator14.setArrays(objArray59);
        generator0.setArrays(objArray59);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator66 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader68 = null;
        generator67.setClassLoader(classLoader68);
        java.lang.ClassLoader classLoader70 = null;
        generator67.setClassLoader(classLoader70);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator67.getNamingPolicy();
        generator66.setNamingPolicy(namingPolicy72);
        boolean boolean74 = generator66.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator75 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader76 = null;
        generator75.setClassLoader(classLoader76);
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator81 = strComparator79.thenComparing(strComparator80);
        java.util.Comparator<java.lang.String> strComparator82 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator83 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator84 = strComparator82.thenComparing(strComparator83);
        java.util.Comparator<java.lang.String> strComparator85 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator86 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator87 = strComparator85.thenComparing(strComparator86);
        boolean boolean88 = strComparator83.equals((java.lang.Object) strComparator87);
        java.lang.Object[] objArray90 = new java.lang.Object[] { '4', strComparator80, strComparator83, 0.0d };
        generator75.setArrays(objArray90);
        generator66.setArrays(objArray90);
        org.mockito.cglib.core.NamingPolicy namingPolicy93 = generator66.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy93);
        boolean boolean95 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor96 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor96);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertNotNull(strComparator84);
        org.junit.Assert.assertNotNull(strComparator85);
        org.junit.Assert.assertNotNull(strComparator86);
        org.junit.Assert.assertNotNull(strComparator87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test2300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2300");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getAttemptLoad();
        boolean boolean6 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator7.setStrategy(generatorStrategy13);
        boolean boolean15 = generator7.getAttemptLoad();
        generator7.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy24);
        boolean boolean26 = generator18.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = strComparator31.thenComparing(strComparator32);
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = strComparator34.thenComparing(strComparator35);
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = strComparator37.thenComparing(strComparator38);
        boolean boolean40 = strComparator35.equals((java.lang.Object) strComparator39);
        java.lang.Object[] objArray42 = new java.lang.Object[] { '4', strComparator32, strComparator35, 0.0d };
        generator27.setArrays(objArray42);
        generator18.setArrays(objArray42);
        boolean boolean45 = generator18.getAttemptLoad();
        java.lang.Object[] objArray46 = new java.lang.Object[] { generator18 };
        generator7.setArrays(objArray46);
        generator0.setArrays(objArray46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator0.getStrategy();
        java.lang.Object[] objArray50 = null;
        generator0.setArrays(objArray50);
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader54 = null;
        generator53.setClassLoader(classLoader54);
        java.lang.ClassLoader classLoader56 = null;
        generator53.setClassLoader(classLoader56);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator53.getNamingPolicy();
        generator52.setNamingPolicy(namingPolicy58);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator52.getNamingPolicy();
        boolean boolean61 = generator52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = null;
        generator52.setStrategy(generatorStrategy62);
        org.mockito.cglib.util.ParallelSorter.Generator generator64 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator65.setUseCache(true);
        boolean boolean68 = generator65.getAttemptLoad();
        boolean boolean69 = generator65.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator65.getStrategy();
        generator64.setStrategy(generatorStrategy70);
        boolean boolean72 = generator64.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator64.getNamingPolicy();
        java.lang.ClassLoader classLoader74 = generator64.getClassLoader();
        generator52.setClassLoader(classLoader74);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator52.getStrategy();
        generator0.setStrategy(generatorStrategy76);
        org.mockito.cglib.util.ParallelSorter.Generator generator78 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator79 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator79.setUseCache(true);
        boolean boolean82 = generator79.getAttemptLoad();
        boolean boolean83 = generator79.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator79.getStrategy();
        generator78.setStrategy(generatorStrategy84);
        boolean boolean86 = generator78.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator78.getStrategy();
        java.lang.ClassLoader classLoader88 = generator78.getClassLoader();
        java.lang.ClassLoader classLoader89 = generator78.getClassLoader();
        generator0.setClassLoader(classLoader89);
        org.mockito.cglib.core.NamingPolicy namingPolicy91 = generator0.getNamingPolicy();
        boolean boolean92 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertNotNull(classLoader88);
        org.junit.Assert.assertNotNull(classLoader89);
        org.junit.Assert.assertNotNull(namingPolicy91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test2301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2301");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.util.Comparator<java.lang.String> strComparator12 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = strComparator12.thenComparing(strComparator13);
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = strComparator15.thenComparing(strComparator16);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        boolean boolean21 = strComparator16.equals((java.lang.Object) strComparator20);
        java.lang.Object[] objArray23 = new java.lang.Object[] { '4', strComparator13, strComparator16, 0.0d };
        generator8.setArrays(objArray23);
        java.lang.ClassLoader classLoader25 = null;
        generator8.setClassLoader(classLoader25);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.lang.ClassLoader classLoader30 = null;
        generator27.setClassLoader(classLoader30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        boolean boolean39 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator35.getStrategy();
        generator34.setStrategy(generatorStrategy40);
        generator8.setStrategy(generatorStrategy40);
        generator0.setStrategy(generatorStrategy40);
        java.lang.ClassLoader classLoader44 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor48 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(generatorStrategy45);
    }

    @Test
    public void test2302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2302");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator5.setUseCache(true);
        boolean boolean8 = generator5.getAttemptLoad();
        boolean boolean9 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator5.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator5.setStrategy(generatorStrategy16);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator18.getNamingPolicy();
        generator18.setUseCache(false);
        boolean boolean29 = generator18.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator18.getNamingPolicy();
        generator18.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator18.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy33);
        generator0.setNamingPolicy(namingPolicy33);
        boolean boolean36 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader37 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader40 = null;
        generator39.setClassLoader(classLoader40);
        java.lang.ClassLoader classLoader42 = null;
        generator39.setClassLoader(classLoader42);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        generator38.setNamingPolicy(namingPolicy44);
        boolean boolean46 = generator38.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader48 = null;
        generator47.setClassLoader(classLoader48);
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = strComparator51.thenComparing(strComparator52);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = strComparator57.thenComparing(strComparator58);
        boolean boolean60 = strComparator55.equals((java.lang.Object) strComparator59);
        java.lang.Object[] objArray62 = new java.lang.Object[] { '4', strComparator52, strComparator55, 0.0d };
        generator47.setArrays(objArray62);
        generator38.setArrays(objArray62);
        generator0.setArrays(objArray62);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter66 = org.mockito.cglib.util.ParallelSorter.create(objArray62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test2303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2303");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = strComparator3.thenComparing(strComparator4);
        java.util.Comparator<java.lang.String> strComparator6 = strComparator2.thenComparing(strComparator3);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        java.util.Comparator<java.lang.String> strComparator13 = strComparator9.thenComparing(strComparator10);
        boolean boolean14 = strComparator6.equals((java.lang.Object) strComparator10);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        boolean boolean28 = strComparator23.equals((java.lang.Object) strComparator27);
        java.lang.Object[] objArray30 = new java.lang.Object[] { '4', strComparator20, strComparator23, 0.0d };
        generator15.setArrays(objArray30);
        java.lang.ClassLoader classLoader32 = null;
        generator15.setClassLoader(classLoader32);
        boolean boolean34 = generator15.getAttemptLoad();
        boolean boolean35 = strComparator10.equals((java.lang.Object) generator15);
        boolean boolean36 = generator15.getAttemptLoad();
        java.lang.ClassLoader classLoader37 = generator15.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator15.getStrategy();
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
    }

    @Test
    public void test2304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2304");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy22);
        java.lang.ClassLoader classLoader24 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator0.getStrategy();
        boolean boolean26 = generator0.getUseCache();
        java.lang.ClassLoader classLoader27 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader30 = null;
        generator29.setClassLoader(classLoader30);
        java.lang.ClassLoader classLoader32 = null;
        generator29.setClassLoader(classLoader32);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        generator28.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader37 = null;
        generator36.setClassLoader(classLoader37);
        java.lang.ClassLoader classLoader39 = null;
        generator36.setClassLoader(classLoader39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator36.getNamingPolicy();
        generator28.setNamingPolicy(namingPolicy41);
        java.lang.ClassLoader classLoader43 = generator28.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator28.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator28.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator46.setUseCache(true);
        boolean boolean49 = generator46.getAttemptLoad();
        boolean boolean50 = generator46.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator46.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator46.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator46.getStrategy();
        generator28.setStrategy(generatorStrategy53);
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator55.getStrategy();
        java.lang.ClassLoader classLoader57 = generator55.getClassLoader();
        generator55.setUseCache(false);
        boolean boolean60 = generator55.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator61.getStrategy();
        java.lang.ClassLoader classLoader63 = generator61.getClassLoader();
        generator61.setUseCache(false);
        boolean boolean66 = generator61.getUseCache();
        java.lang.ClassLoader classLoader67 = generator61.getClassLoader();
        generator55.setClassLoader(classLoader67);
        generator28.setClassLoader(classLoader67);
        boolean boolean70 = generator28.getUseCache();
        java.lang.Class<?> wildcardClass71 = generator28.getClass();
        java.lang.Object[] objArray72 = new java.lang.Object[] { generator28 };
        generator0.setArrays(objArray72);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(objArray72);
    }

    @Test
    public void test2305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2305");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator0.getNamingPolicy();
        boolean boolean19 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader22 = null;
        generator21.setClassLoader(classLoader22);
        java.lang.ClassLoader classLoader24 = null;
        generator21.setClassLoader(classLoader24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator21.getNamingPolicy();
        generator20.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        java.lang.ClassLoader classLoader31 = null;
        generator28.setClassLoader(classLoader31);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator28.getNamingPolicy();
        generator20.setNamingPolicy(namingPolicy33);
        java.lang.ClassLoader classLoader35 = generator20.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator20.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator20.getStrategy();
        boolean boolean38 = generator20.getUseCache();
        generator20.setUseCache(false);
        boolean boolean41 = generator20.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator42.setUseCache(true);
        boolean boolean45 = generator42.getAttemptLoad();
        boolean boolean46 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator42.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator48.setUseCache(true);
        boolean boolean51 = generator48.getAttemptLoad();
        boolean boolean52 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator48.getStrategy();
        generator42.setStrategy(generatorStrategy53);
        java.lang.ClassLoader classLoader55 = generator42.getClassLoader();
        generator42.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator58.setUseCache(true);
        boolean boolean61 = generator58.getAttemptLoad();
        boolean boolean62 = generator58.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator58.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator64 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator64.setUseCache(true);
        boolean boolean67 = generator64.getAttemptLoad();
        boolean boolean68 = generator64.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator64.getStrategy();
        generator58.setStrategy(generatorStrategy69);
        java.lang.ClassLoader classLoader71 = generator58.getClassLoader();
        generator42.setClassLoader(classLoader71);
        org.mockito.cglib.util.ParallelSorter.Generator generator73 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator73.setUseCache(true);
        boolean boolean76 = generator73.getAttemptLoad();
        boolean boolean77 = generator73.getUseCache();
        generator73.setAttemptLoad(true);
        boolean boolean80 = generator73.getUseCache();
        generator73.setAttemptLoad(true);
        generator73.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator85 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator85.setUseCache(true);
        boolean boolean88 = generator85.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = generator85.getStrategy();
        generator73.setStrategy(generatorStrategy89);
        generator42.setStrategy(generatorStrategy89);
        generator20.setStrategy(generatorStrategy89);
        generator0.setStrategy(generatorStrategy89);
        generator0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter96 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(generatorStrategy89);
    }

    @Test
    public void test2306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2306");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator14.setUseCache(true);
        boolean boolean17 = generator14.getAttemptLoad();
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator21.getStrategy();
        generator14.setStrategy(generatorStrategy22);
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator24.setUseCache(true);
        java.lang.ClassLoader classLoader27 = generator24.getClassLoader();
        generator14.setClassLoader(classLoader27);
        generator8.setClassLoader(classLoader27);
        java.lang.ClassLoader classLoader30 = generator8.getClassLoader();
        generator0.setClassLoader(classLoader30);
        boolean boolean32 = generator0.getUseCache();
        java.lang.ClassLoader classLoader33 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader34 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader37 = null;
        generator36.setClassLoader(classLoader37);
        java.lang.ClassLoader classLoader39 = null;
        generator36.setClassLoader(classLoader39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator36.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy41);
        boolean boolean43 = generator35.getUseCache();
        boolean boolean44 = generator35.getUseCache();
        generator35.setUseCache(true);
        boolean boolean47 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator35.getStrategy();
        generator0.setStrategy(generatorStrategy48);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter50 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
    }

    @Test
    public void test2307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2307");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        boolean boolean5 = generator0.getAttemptLoad();
        boolean boolean6 = generator0.getAttemptLoad();
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor8 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2308");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader11 = null;
        generator10.setClassLoader(classLoader11);
        java.lang.ClassLoader classLoader13 = null;
        generator10.setClassLoader(classLoader13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator10.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy22);
        generator0.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator0.getNamingPolicy();
        boolean boolean26 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator29.getStrategy();
        generator28.setStrategy(generatorStrategy34);
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator36.setUseCache(true);
        boolean boolean39 = generator36.getAttemptLoad();
        boolean boolean40 = generator36.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator36.getStrategy();
        generator28.setStrategy(generatorStrategy41);
        generator28.setAttemptLoad(false);
        boolean boolean45 = generator28.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator46.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator50.setUseCache(true);
        boolean boolean53 = generator50.getAttemptLoad();
        boolean boolean54 = generator50.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator50.getStrategy();
        generator49.setStrategy(generatorStrategy55);
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator57.setUseCache(true);
        boolean boolean60 = generator57.getAttemptLoad();
        boolean boolean61 = generator57.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator57.getStrategy();
        generator49.setStrategy(generatorStrategy62);
        generator46.setStrategy(generatorStrategy62);
        boolean boolean65 = generator46.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator66 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader67 = null;
        generator66.setClassLoader(classLoader67);
        java.util.Comparator<java.lang.String> strComparator70 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator71 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator72 = strComparator70.thenComparing(strComparator71);
        java.util.Comparator<java.lang.String> strComparator73 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator74 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator75 = strComparator73.thenComparing(strComparator74);
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator78 = strComparator76.thenComparing(strComparator77);
        boolean boolean79 = strComparator74.equals((java.lang.Object) strComparator78);
        java.lang.Object[] objArray81 = new java.lang.Object[] { '4', strComparator71, strComparator74, 0.0d };
        generator66.setArrays(objArray81);
        generator46.setArrays(objArray81);
        generator28.setArrays(objArray81);
        generator0.setArrays(objArray81);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy86);
    }

    @Test
    public void test2309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2309");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.ClassLoader classLoader11 = generator9.getClassLoader();
        generator9.setUseCache(false);
        generator9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator9.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator17.getStrategy();
        java.lang.ClassLoader classLoader19 = generator17.getClassLoader();
        generator17.setUseCache(false);
        boolean boolean22 = generator17.getUseCache();
        java.lang.ClassLoader classLoader23 = generator17.getClassLoader();
        generator9.setClassLoader(classLoader23);
        generator0.setClassLoader(classLoader23);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator26.setUseCache(true);
        java.lang.ClassLoader classLoader29 = generator26.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator30.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator30.getStrategy();
        generator26.setStrategy(generatorStrategy33);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator26.getNamingPolicy();
        generator26.setUseCache(true);
        java.lang.ClassLoader classLoader38 = generator26.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader42 = null;
        generator41.setClassLoader(classLoader42);
        java.lang.ClassLoader classLoader44 = null;
        generator41.setClassLoader(classLoader44);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator41.getNamingPolicy();
        generator40.setNamingPolicy(namingPolicy46);
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator48.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator52.setUseCache(true);
        boolean boolean55 = generator52.getAttemptLoad();
        boolean boolean56 = generator52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator52.getStrategy();
        generator51.setStrategy(generatorStrategy57);
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator59.setUseCache(true);
        boolean boolean62 = generator59.getAttemptLoad();
        boolean boolean63 = generator59.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator59.getStrategy();
        generator51.setStrategy(generatorStrategy64);
        generator48.setStrategy(generatorStrategy64);
        generator40.setStrategy(generatorStrategy64);
        org.mockito.cglib.util.ParallelSorter.Generator generator68 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader69 = null;
        generator68.setClassLoader(classLoader69);
        org.mockito.cglib.util.ParallelSorter.Generator generator71 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader72 = null;
        generator71.setClassLoader(classLoader72);
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = strComparator75.thenComparing(strComparator76);
        java.util.Comparator<java.lang.String> strComparator78 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = strComparator78.thenComparing(strComparator79);
        java.util.Comparator<java.lang.String> strComparator81 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator82 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator83 = strComparator81.thenComparing(strComparator82);
        boolean boolean84 = strComparator79.equals((java.lang.Object) strComparator83);
        java.lang.Object[] objArray86 = new java.lang.Object[] { '4', strComparator76, strComparator79, 0.0d };
        generator71.setArrays(objArray86);
        generator68.setArrays(objArray86);
        generator40.setArrays(objArray86);
        generator39.setArrays(objArray86);
        generator26.setArrays(objArray86);
        generator0.setArrays(objArray86);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter93 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test2310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2310");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        java.lang.ClassLoader classLoader15 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        boolean boolean19 = generator16.getAttemptLoad();
        boolean boolean20 = generator16.getUseCache();
        generator16.setAttemptLoad(true);
        generator16.setUseCache(true);
        generator16.setUseCache(false);
        boolean boolean27 = generator16.getUseCache();
        java.lang.ClassLoader classLoader28 = generator16.getClassLoader();
        generator0.setClassLoader(classLoader28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        boolean boolean34 = generator31.getAttemptLoad();
        boolean boolean35 = generator31.getUseCache();
        generator31.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator31.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator31.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader41 = null;
        generator40.setClassLoader(classLoader41);
        boolean boolean43 = generator40.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator40.getStrategy();
        java.lang.ClassLoader classLoader45 = generator40.getClassLoader();
        generator40.setUseCache(false);
        boolean boolean48 = generator40.getUseCache();
        generator40.setUseCache(false);
        boolean boolean51 = generator40.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator52.setUseCache(true);
        boolean boolean55 = generator52.getAttemptLoad();
        java.lang.ClassLoader classLoader56 = null;
        generator52.setClassLoader(classLoader56);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator52.getNamingPolicy();
        boolean boolean59 = generator52.getUseCache();
        java.lang.Object[] objArray60 = new java.lang.Object[] {};
        generator52.setArrays(objArray60);
        generator40.setArrays(objArray60);
        generator31.setArrays(objArray60);
        generator0.setArrays(objArray60);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter65 = org.mockito.cglib.util.ParallelSorter.create(objArray60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No arrays specified to sort");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
    }

    @Test
    public void test2311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2311");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator14.setUseCache(true);
        boolean boolean17 = generator14.getAttemptLoad();
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        generator14.setUseCache(true);
        generator14.setUseCache(false);
        generator14.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator14.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator28.setUseCache(true);
        boolean boolean31 = generator28.getAttemptLoad();
        boolean boolean32 = generator28.getUseCache();
        generator28.setAttemptLoad(true);
        generator28.setUseCache(true);
        generator28.setAttemptLoad(true);
        generator28.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator28.getStrategy();
        java.lang.ClassLoader classLoader42 = generator28.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader44 = null;
        generator43.setClassLoader(classLoader44);
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = strComparator47.thenComparing(strComparator48);
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = strComparator50.thenComparing(strComparator51);
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = strComparator53.thenComparing(strComparator54);
        boolean boolean56 = strComparator51.equals((java.lang.Object) strComparator55);
        java.lang.Object[] objArray58 = new java.lang.Object[] { '4', strComparator48, strComparator51, 0.0d };
        generator43.setArrays(objArray58);
        generator28.setArrays(objArray58);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy61);
        generator0.setNamingPolicy(namingPolicy61);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter64 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy61);
    }

    @Test
    public void test2312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2312");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator6.getStrategy();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator17.setUseCache(true);
        boolean boolean20 = generator17.getAttemptLoad();
        boolean boolean21 = generator17.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator17.getStrategy();
        generator11.setStrategy(generatorStrategy22);
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader26 = null;
        generator25.setClassLoader(classLoader26);
        java.lang.ClassLoader classLoader28 = null;
        generator25.setClassLoader(classLoader28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator25.getNamingPolicy();
        generator24.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator24.getNamingPolicy();
        generator24.setUseCache(false);
        boolean boolean35 = generator24.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator24.getNamingPolicy();
        generator24.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator24.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy39);
        generator6.setNamingPolicy(namingPolicy39);
        boolean boolean42 = generator6.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader44 = null;
        generator43.setClassLoader(classLoader44);
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader47 = null;
        generator46.setClassLoader(classLoader47);
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = strComparator50.thenComparing(strComparator51);
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = strComparator53.thenComparing(strComparator54);
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = strComparator56.thenComparing(strComparator57);
        boolean boolean59 = strComparator54.equals((java.lang.Object) strComparator58);
        java.lang.Object[] objArray61 = new java.lang.Object[] { '4', strComparator51, strComparator54, 0.0d };
        generator46.setArrays(objArray61);
        generator43.setArrays(objArray61);
        generator6.setArrays(objArray61);
        generator0.setArrays(objArray61);
        org.mockito.asm.ClassVisitor classVisitor66 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test2313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2313");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator9.setUseCache(true);
        boolean boolean12 = generator9.getAttemptLoad();
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator16.getStrategy();
        generator9.setStrategy(generatorStrategy17);
        generator0.setStrategy(generatorStrategy17);
        boolean boolean20 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator21.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator23.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.lang.ClassLoader classLoader30 = null;
        generator27.setClassLoader(classLoader30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader35 = null;
        generator34.setClassLoader(classLoader35);
        java.lang.ClassLoader classLoader37 = null;
        generator34.setClassLoader(classLoader37);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator34.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        java.lang.ClassLoader classLoader44 = generator41.getClassLoader();
        generator26.setClassLoader(classLoader44);
        generator23.setClassLoader(classLoader44);
        generator23.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator50.setUseCache(true);
        boolean boolean53 = generator50.getAttemptLoad();
        boolean boolean54 = generator50.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator50.getStrategy();
        generator49.setStrategy(generatorStrategy55);
        boolean boolean57 = generator49.getAttemptLoad();
        generator49.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader62 = null;
        generator61.setClassLoader(classLoader62);
        java.lang.ClassLoader classLoader64 = null;
        generator61.setClassLoader(classLoader64);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator61.getNamingPolicy();
        generator60.setNamingPolicy(namingPolicy66);
        boolean boolean68 = generator60.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator69 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader70 = null;
        generator69.setClassLoader(classLoader70);
        java.util.Comparator<java.lang.String> strComparator73 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator74 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator75 = strComparator73.thenComparing(strComparator74);
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator78 = strComparator76.thenComparing(strComparator77);
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator81 = strComparator79.thenComparing(strComparator80);
        boolean boolean82 = strComparator77.equals((java.lang.Object) strComparator81);
        java.lang.Object[] objArray84 = new java.lang.Object[] { '4', strComparator74, strComparator77, 0.0d };
        generator69.setArrays(objArray84);
        generator60.setArrays(objArray84);
        boolean boolean87 = generator60.getAttemptLoad();
        java.lang.Object[] objArray88 = new java.lang.Object[] { generator60 };
        generator49.setArrays(objArray88);
        generator23.setArrays(objArray88);
        generator21.setArrays(objArray88);
        generator0.setArrays(objArray88);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertNotNull(generatorStrategy93);
    }

    @Test
    public void test2314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2314");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        generator0.setAttemptLoad(false);
        boolean boolean17 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator18.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator22.getStrategy();
        generator21.setStrategy(generatorStrategy27);
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator29.getStrategy();
        generator21.setStrategy(generatorStrategy34);
        generator18.setStrategy(generatorStrategy34);
        boolean boolean37 = generator18.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader39 = null;
        generator38.setClassLoader(classLoader39);
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = strComparator42.thenComparing(strComparator43);
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = strComparator45.thenComparing(strComparator46);
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = strComparator48.thenComparing(strComparator49);
        boolean boolean51 = strComparator46.equals((java.lang.Object) strComparator50);
        java.lang.Object[] objArray53 = new java.lang.Object[] { '4', strComparator43, strComparator46, 0.0d };
        generator38.setArrays(objArray53);
        generator18.setArrays(objArray53);
        generator0.setArrays(objArray53);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator0.getNamingPolicy();
        boolean boolean58 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter61 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(generatorStrategy60);
    }

    @Test
    public void test2315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2315");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass25 = namingPolicy24.getClass();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test2316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2316");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        java.lang.ClassLoader classLoader15 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator18.setUseCache(true);
        boolean boolean21 = generator18.getAttemptLoad();
        boolean boolean22 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator18.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator18.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator18.getStrategy();
        generator0.setStrategy(generatorStrategy25);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader28 = generator0.getClassLoader();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator31.getStrategy();
        java.lang.ClassLoader classLoader33 = generator31.getClassLoader();
        generator31.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator31.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator38.setUseCache(true);
        boolean boolean41 = generator38.getAttemptLoad();
        boolean boolean42 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator38.getStrategy();
        generator37.setStrategy(generatorStrategy43);
        generator31.setStrategy(generatorStrategy43);
        generator31.setAttemptLoad(true);
        boolean boolean48 = generator31.getAttemptLoad();
        boolean boolean49 = generator31.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator31.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy50);
        boolean boolean52 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test2317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2317");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        boolean boolean28 = strComparator23.equals((java.lang.Object) strComparator27);
        java.lang.Object[] objArray30 = new java.lang.Object[] { '4', strComparator20, strComparator23, 0.0d };
        generator15.setArrays(objArray30);
        generator0.setArrays(objArray30);
        java.lang.ClassLoader classLoader33 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        java.lang.ClassLoader classLoader40 = null;
        generator37.setClassLoader(classLoader40);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator37.getNamingPolicy();
        generator36.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader45 = null;
        generator44.setClassLoader(classLoader45);
        java.lang.ClassLoader classLoader47 = null;
        generator44.setClassLoader(classLoader47);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator44.getNamingPolicy();
        generator36.setNamingPolicy(namingPolicy49);
        java.lang.ClassLoader classLoader51 = generator36.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator36.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader55 = null;
        generator54.setClassLoader(classLoader55);
        java.lang.ClassLoader classLoader57 = null;
        generator54.setClassLoader(classLoader57);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator54.getNamingPolicy();
        generator53.setNamingPolicy(namingPolicy59);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator53.getNamingPolicy();
        java.lang.ClassLoader classLoader62 = generator53.getClassLoader();
        generator36.setClassLoader(classLoader62);
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator36.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy64);
        org.mockito.cglib.util.ParallelSorter.Generator generator66 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader68 = null;
        generator67.setClassLoader(classLoader68);
        java.lang.ClassLoader classLoader70 = null;
        generator67.setClassLoader(classLoader70);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator67.getNamingPolicy();
        generator66.setNamingPolicy(namingPolicy72);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator66.getNamingPolicy();
        boolean boolean75 = generator66.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = null;
        generator66.setStrategy(generatorStrategy76);
        boolean boolean78 = generator66.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator66.getStrategy();
        generator66.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator66.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy82);
        boolean boolean84 = generator0.getAttemptLoad();
        boolean boolean85 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test2318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2318");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator0.setNamingPolicy(namingPolicy29);
        generator0.setUseCache(true);
        boolean boolean33 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader35 = null;
        generator34.setClassLoader(classLoader35);
        boolean boolean37 = generator34.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator34.getStrategy();
        java.lang.ClassLoader classLoader39 = generator34.getClassLoader();
        generator34.setUseCache(false);
        boolean boolean42 = generator34.getUseCache();
        generator34.setUseCache(false);
        boolean boolean45 = generator34.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator46.setUseCache(true);
        boolean boolean49 = generator46.getAttemptLoad();
        java.lang.ClassLoader classLoader50 = null;
        generator46.setClassLoader(classLoader50);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator46.getNamingPolicy();
        boolean boolean53 = generator46.getUseCache();
        java.lang.Object[] objArray54 = new java.lang.Object[] {};
        generator46.setArrays(objArray54);
        generator34.setArrays(objArray54);
        generator0.setArrays(objArray54);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter58 = org.mockito.cglib.util.ParallelSorter.create(objArray54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No arrays specified to sort");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
    }

    @Test
    public void test2319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2319");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        generator0.setUseCache(false);
        boolean boolean8 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader12 = null;
        generator11.setClassLoader(classLoader12);
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = strComparator15.thenComparing(strComparator16);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        boolean boolean24 = strComparator19.equals((java.lang.Object) strComparator23);
        java.lang.Object[] objArray26 = new java.lang.Object[] { '4', strComparator16, strComparator19, 0.0d };
        generator11.setArrays(objArray26);
        java.lang.ClassLoader classLoader28 = null;
        generator11.setClassLoader(classLoader28);
        boolean boolean30 = generator11.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        boolean boolean34 = generator31.getAttemptLoad();
        generator31.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = strComparator41.thenComparing(strComparator42);
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = strComparator44.thenComparing(strComparator45);
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = strComparator47.thenComparing(strComparator48);
        boolean boolean50 = strComparator45.equals((java.lang.Object) strComparator49);
        java.lang.Object[] objArray52 = new java.lang.Object[] { '4', strComparator42, strComparator45, 0.0d };
        generator37.setArrays(objArray52);
        java.lang.ClassLoader classLoader54 = null;
        generator37.setClassLoader(classLoader54);
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader57 = null;
        generator56.setClassLoader(classLoader57);
        java.lang.ClassLoader classLoader59 = null;
        generator56.setClassLoader(classLoader59);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator56.getNamingPolicy();
        generator37.setNamingPolicy(namingPolicy61);
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator64 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator64.setUseCache(true);
        boolean boolean67 = generator64.getAttemptLoad();
        boolean boolean68 = generator64.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator64.getStrategy();
        generator63.setStrategy(generatorStrategy69);
        generator37.setStrategy(generatorStrategy69);
        org.mockito.cglib.util.ParallelSorter.Generator generator72 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator73 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader74 = null;
        generator73.setClassLoader(classLoader74);
        java.lang.ClassLoader classLoader76 = null;
        generator73.setClassLoader(classLoader76);
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator73.getNamingPolicy();
        generator72.setNamingPolicy(namingPolicy78);
        generator37.setNamingPolicy(namingPolicy78);
        generator31.setNamingPolicy(namingPolicy78);
        generator11.setNamingPolicy(namingPolicy78);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator11.getStrategy();
        generator0.setStrategy(generatorStrategy83);
        boolean boolean85 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test2320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2320");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator4.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator3.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        boolean boolean19 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        boolean boolean24 = generator20.getUseCache();
        generator20.setAttemptLoad(true);
        generator20.setUseCache(true);
        generator20.setAttemptLoad(true);
        generator20.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator20.getStrategy();
        java.lang.ClassLoader classLoader34 = generator20.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator20.getStrategy();
        generator0.setStrategy(generatorStrategy35);
        java.lang.ClassLoader classLoader37 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader40 = null;
        generator39.setClassLoader(classLoader40);
        java.lang.ClassLoader classLoader42 = null;
        generator39.setClassLoader(classLoader42);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        generator38.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator38.getNamingPolicy();
        java.lang.ClassLoader classLoader47 = generator38.getClassLoader();
        generator0.setClassLoader(classLoader47);
        java.lang.ClassLoader classLoader49 = generator0.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter50 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader49);
    }

    @Test
    public void test2321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2321");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy22);
        java.lang.ClassLoader classLoader24 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator27.setUseCache(true);
        boolean boolean30 = generator27.getAttemptLoad();
        boolean boolean31 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator27.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator33.setUseCache(true);
        boolean boolean36 = generator33.getAttemptLoad();
        boolean boolean37 = generator33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator33.getStrategy();
        generator27.setStrategy(generatorStrategy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader42 = null;
        generator41.setClassLoader(classLoader42);
        java.lang.ClassLoader classLoader44 = null;
        generator41.setClassLoader(classLoader44);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator41.getNamingPolicy();
        generator40.setNamingPolicy(namingPolicy46);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator40.getNamingPolicy();
        generator40.setUseCache(false);
        boolean boolean51 = generator40.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator40.getNamingPolicy();
        generator40.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator40.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy55);
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator58.setUseCache(true);
        boolean boolean61 = generator58.getAttemptLoad();
        boolean boolean62 = generator58.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator58.getStrategy();
        generator57.setStrategy(generatorStrategy63);
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator65.setUseCache(true);
        boolean boolean68 = generator65.getAttemptLoad();
        boolean boolean69 = generator65.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator65.getStrategy();
        generator57.setStrategy(generatorStrategy70);
        generator57.setAttemptLoad(false);
        boolean boolean74 = generator57.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator57.getStrategy();
        generator27.setStrategy(generatorStrategy75);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator27.getStrategy();
        generator0.setStrategy(generatorStrategy77);
        java.lang.ClassLoader classLoader79 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor80 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(classLoader79);
    }

    @Test
    public void test2322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2322");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader5 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean8 = generator7.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator7.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader12 = null;
        generator11.setClassLoader(classLoader12);
        java.lang.ClassLoader classLoader14 = null;
        generator11.setClassLoader(classLoader14);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator11.getNamingPolicy();
        generator10.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        java.lang.ClassLoader classLoader21 = null;
        generator18.setClassLoader(classLoader21);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator18.getNamingPolicy();
        generator10.setNamingPolicy(namingPolicy23);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator25.setUseCache(true);
        java.lang.ClassLoader classLoader28 = generator25.getClassLoader();
        generator10.setClassLoader(classLoader28);
        generator7.setClassLoader(classLoader28);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator34.setUseCache(true);
        boolean boolean37 = generator34.getAttemptLoad();
        boolean boolean38 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator34.getStrategy();
        generator33.setStrategy(generatorStrategy39);
        boolean boolean41 = generator33.getAttemptLoad();
        generator33.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader46 = null;
        generator45.setClassLoader(classLoader46);
        java.lang.ClassLoader classLoader48 = null;
        generator45.setClassLoader(classLoader48);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator45.getNamingPolicy();
        generator44.setNamingPolicy(namingPolicy50);
        boolean boolean52 = generator44.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader54 = null;
        generator53.setClassLoader(classLoader54);
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = strComparator57.thenComparing(strComparator58);
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = strComparator60.thenComparing(strComparator61);
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = strComparator63.thenComparing(strComparator64);
        boolean boolean66 = strComparator61.equals((java.lang.Object) strComparator65);
        java.lang.Object[] objArray68 = new java.lang.Object[] { '4', strComparator58, strComparator61, 0.0d };
        generator53.setArrays(objArray68);
        generator44.setArrays(objArray68);
        boolean boolean71 = generator44.getAttemptLoad();
        java.lang.Object[] objArray72 = new java.lang.Object[] { generator44 };
        generator33.setArrays(objArray72);
        generator7.setArrays(objArray72);
        generator0.setArrays(objArray72);
        org.mockito.cglib.util.ParallelSorter.Generator generator76 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean77 = generator76.getAttemptLoad();
        generator76.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator76.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy80);
        java.lang.Class<?> wildcardClass82 = namingPolicy80.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test2323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2323");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        java.lang.ClassLoader classLoader4 = generator0.getClassLoader();
        java.lang.Class<?> wildcardClass5 = classLoader4.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test2324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2324");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        java.lang.ClassLoader classLoader15 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        boolean boolean18 = generator0.getUseCache();
        java.lang.ClassLoader classLoader19 = generator0.getClassLoader();
        boolean boolean20 = generator0.getUseCache();
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        java.util.Comparator<java.lang.String> strComparator24 = strComparator21.reversed();
        java.util.Comparator<java.lang.String> strComparator25 = strComparator24.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.lang.ClassLoader classLoader30 = null;
        generator27.setClassLoader(classLoader30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy32);
        boolean boolean34 = strComparator24.equals((java.lang.Object) generator26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator26.getStrategy();
        generator26.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator38.setUseCache(true);
        boolean boolean41 = generator38.getAttemptLoad();
        boolean boolean42 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator38.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator44.setUseCache(true);
        boolean boolean47 = generator44.getAttemptLoad();
        boolean boolean48 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator44.getStrategy();
        generator38.setStrategy(generatorStrategy49);
        java.lang.ClassLoader classLoader51 = generator38.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator38.getNamingPolicy();
        generator38.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator38.getStrategy();
        generator26.setStrategy(generatorStrategy55);
        generator0.setStrategy(generatorStrategy55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator0.getStrategy();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertNotNull(generatorStrategy58);
    }

    @Test
    public void test2325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2325");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator4.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator3.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        boolean boolean19 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator20.setStrategy(generatorStrategy26);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator28.setUseCache(true);
        boolean boolean31 = generator28.getAttemptLoad();
        boolean boolean32 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator28.getStrategy();
        generator20.setStrategy(generatorStrategy33);
        generator20.setAttemptLoad(false);
        boolean boolean37 = generator20.getUseCache();
        java.lang.ClassLoader classLoader38 = generator20.getClassLoader();
        generator0.setClassLoader(classLoader38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator40.getStrategy();
        java.lang.ClassLoader classLoader42 = generator40.getClassLoader();
        generator0.setClassLoader(classLoader42);
        boolean boolean44 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader49 = null;
        generator48.setClassLoader(classLoader49);
        java.lang.ClassLoader classLoader51 = null;
        generator48.setClassLoader(classLoader51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator48.getNamingPolicy();
        generator47.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator47.getNamingPolicy();
        boolean boolean56 = generator47.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator47.setStrategy(generatorStrategy57);
        java.lang.ClassLoader classLoader59 = generator47.getClassLoader();
        generator0.setClassLoader(classLoader59);
        boolean boolean61 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader62 = generator0.getClassLoader();
        boolean boolean63 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test2326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2326");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        boolean boolean11 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator12.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader17 = null;
        generator16.setClassLoader(classLoader17);
        java.lang.ClassLoader classLoader19 = null;
        generator16.setClassLoader(classLoader19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader24 = null;
        generator23.setClassLoader(classLoader24);
        java.lang.ClassLoader classLoader26 = null;
        generator23.setClassLoader(classLoader26);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator23.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator30.setUseCache(true);
        java.lang.ClassLoader classLoader33 = generator30.getClassLoader();
        generator15.setClassLoader(classLoader33);
        generator12.setClassLoader(classLoader33);
        generator0.setClassLoader(classLoader33);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator0.getNamingPolicy();
        boolean boolean39 = generator0.getUseCache();
        java.lang.Class<?> wildcardClass40 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test2327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2327");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.ClassLoader classLoader11 = generator9.getClassLoader();
        generator9.setUseCache(false);
        generator9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator9.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator17.getStrategy();
        java.lang.ClassLoader classLoader19 = generator17.getClassLoader();
        generator17.setUseCache(false);
        boolean boolean22 = generator17.getUseCache();
        java.lang.ClassLoader classLoader23 = generator17.getClassLoader();
        generator9.setClassLoader(classLoader23);
        generator0.setClassLoader(classLoader23);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator26.setUseCache(true);
        java.lang.ClassLoader classLoader29 = generator26.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator30.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator30.getStrategy();
        generator26.setStrategy(generatorStrategy33);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator26.getNamingPolicy();
        generator26.setUseCache(true);
        java.lang.ClassLoader classLoader38 = generator26.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader42 = null;
        generator41.setClassLoader(classLoader42);
        java.lang.ClassLoader classLoader44 = null;
        generator41.setClassLoader(classLoader44);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator41.getNamingPolicy();
        generator40.setNamingPolicy(namingPolicy46);
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator48.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator52.setUseCache(true);
        boolean boolean55 = generator52.getAttemptLoad();
        boolean boolean56 = generator52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator52.getStrategy();
        generator51.setStrategy(generatorStrategy57);
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator59.setUseCache(true);
        boolean boolean62 = generator59.getAttemptLoad();
        boolean boolean63 = generator59.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator59.getStrategy();
        generator51.setStrategy(generatorStrategy64);
        generator48.setStrategy(generatorStrategy64);
        generator40.setStrategy(generatorStrategy64);
        org.mockito.cglib.util.ParallelSorter.Generator generator68 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader69 = null;
        generator68.setClassLoader(classLoader69);
        org.mockito.cglib.util.ParallelSorter.Generator generator71 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader72 = null;
        generator71.setClassLoader(classLoader72);
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = strComparator75.thenComparing(strComparator76);
        java.util.Comparator<java.lang.String> strComparator78 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = strComparator78.thenComparing(strComparator79);
        java.util.Comparator<java.lang.String> strComparator81 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator82 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator83 = strComparator81.thenComparing(strComparator82);
        boolean boolean84 = strComparator79.equals((java.lang.Object) strComparator83);
        java.lang.Object[] objArray86 = new java.lang.Object[] { '4', strComparator76, strComparator79, 0.0d };
        generator71.setArrays(objArray86);
        generator68.setArrays(objArray86);
        generator40.setArrays(objArray86);
        generator39.setArrays(objArray86);
        generator26.setArrays(objArray86);
        generator0.setArrays(objArray86);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter93 = org.mockito.cglib.util.ParallelSorter.create(objArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test2328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2328");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        generator0.setAttemptLoad(false);
        boolean boolean17 = generator0.getUseCache();
        java.lang.ClassLoader classLoader18 = generator0.getClassLoader();
        boolean boolean19 = generator0.getUseCache();
        boolean boolean20 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator0.getStrategy();
        boolean boolean22 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator23.setUseCache(true);
        boolean boolean26 = generator23.getAttemptLoad();
        boolean boolean27 = generator23.getUseCache();
        generator23.setAttemptLoad(true);
        generator23.setUseCache(true);
        generator23.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader35 = null;
        generator34.setClassLoader(classLoader35);
        java.lang.ClassLoader classLoader37 = null;
        generator34.setClassLoader(classLoader37);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator34.getNamingPolicy();
        generator23.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator23.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(namingPolicy41);
    }

    @Test
    public void test2329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2329");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader4 = null;
        generator3.setClassLoader(classLoader4);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = strComparator13.thenComparing(strComparator14);
        boolean boolean16 = strComparator11.equals((java.lang.Object) strComparator15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { '4', strComparator8, strComparator11, 0.0d };
        generator3.setArrays(objArray18);
        generator0.setArrays(objArray18);
        boolean boolean21 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator0.getStrategy();
        java.lang.ClassLoader classLoader23 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        boolean boolean25 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter26 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test2330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2330");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        boolean boolean13 = generator10.getAttemptLoad();
        boolean boolean14 = generator10.getUseCache();
        generator10.setAttemptLoad(true);
        generator10.setUseCache(true);
        generator10.setAttemptLoad(true);
        generator10.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator23.getStrategy();
        java.lang.ClassLoader classLoader25 = generator23.getClassLoader();
        generator23.setUseCache(false);
        boolean boolean28 = generator23.getAttemptLoad();
        boolean boolean29 = generator23.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        boolean boolean34 = generator31.getAttemptLoad();
        boolean boolean35 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator31.getStrategy();
        generator30.setStrategy(generatorStrategy36);
        boolean boolean38 = generator30.getAttemptLoad();
        generator30.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        generator41.setNamingPolicy(namingPolicy47);
        boolean boolean49 = generator41.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader51 = null;
        generator50.setClassLoader(classLoader51);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = strComparator57.thenComparing(strComparator58);
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = strComparator60.thenComparing(strComparator61);
        boolean boolean63 = strComparator58.equals((java.lang.Object) strComparator62);
        java.lang.Object[] objArray65 = new java.lang.Object[] { '4', strComparator55, strComparator58, 0.0d };
        generator50.setArrays(objArray65);
        generator41.setArrays(objArray65);
        boolean boolean68 = generator41.getAttemptLoad();
        java.lang.Object[] objArray69 = new java.lang.Object[] { generator41 };
        generator30.setArrays(objArray69);
        generator23.setArrays(objArray69);
        generator10.setArrays(objArray69);
        generator0.setArrays(objArray69);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        boolean boolean77 = generator0.getUseCache();
        java.lang.ClassLoader classLoader78 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(classLoader78);
    }

    @Test
    public void test2331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2331");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader10 = null;
        generator9.setClassLoader(classLoader10);
        java.lang.ClassLoader classLoader12 = null;
        generator9.setClassLoader(classLoader12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator9.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy14);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        boolean boolean24 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator20.getStrategy();
        generator19.setStrategy(generatorStrategy25);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator27.setUseCache(true);
        boolean boolean30 = generator27.getAttemptLoad();
        boolean boolean31 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator27.getStrategy();
        generator19.setStrategy(generatorStrategy32);
        generator16.setStrategy(generatorStrategy32);
        generator8.setStrategy(generatorStrategy32);
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader37 = null;
        generator36.setClassLoader(classLoader37);
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader40 = null;
        generator39.setClassLoader(classLoader40);
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = strComparator43.thenComparing(strComparator44);
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = strComparator46.thenComparing(strComparator47);
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = strComparator49.thenComparing(strComparator50);
        boolean boolean52 = strComparator47.equals((java.lang.Object) strComparator51);
        java.lang.Object[] objArray54 = new java.lang.Object[] { '4', strComparator44, strComparator47, 0.0d };
        generator39.setArrays(objArray54);
        generator36.setArrays(objArray54);
        generator8.setArrays(objArray54);
        generator0.setArrays(objArray54);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor63 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test2332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2332");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        java.lang.ClassLoader classLoader10 = generator0.getClassLoader();
        boolean boolean11 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader13 = null;
        generator12.setClassLoader(classLoader13);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        boolean boolean25 = strComparator20.equals((java.lang.Object) strComparator24);
        java.lang.Object[] objArray27 = new java.lang.Object[] { '4', strComparator17, strComparator20, 0.0d };
        generator12.setArrays(objArray27);
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader30 = null;
        generator29.setClassLoader(classLoader30);
        java.lang.ClassLoader classLoader32 = null;
        generator29.setClassLoader(classLoader32);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy34);
        java.lang.ClassLoader classLoader36 = generator12.getClassLoader();
        generator12.setUseCache(false);
        generator12.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        java.lang.ClassLoader classLoader44 = generator41.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader46 = null;
        generator45.setClassLoader(classLoader46);
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = strComparator49.thenComparing(strComparator50);
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = strComparator52.thenComparing(strComparator53);
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = strComparator55.thenComparing(strComparator56);
        boolean boolean58 = strComparator53.equals((java.lang.Object) strComparator57);
        java.lang.Object[] objArray60 = new java.lang.Object[] { '4', strComparator50, strComparator53, 0.0d };
        generator45.setArrays(objArray60);
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader63 = null;
        generator62.setClassLoader(classLoader63);
        java.lang.ClassLoader classLoader65 = null;
        generator62.setClassLoader(classLoader65);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator62.getNamingPolicy();
        generator45.setNamingPolicy(namingPolicy67);
        generator41.setNamingPolicy(namingPolicy67);
        generator12.setNamingPolicy(namingPolicy67);
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy71);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNotNull(namingPolicy71);
    }

    @Test
    public void test2333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2333");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter27 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy26);
    }

    @Test
    public void test2334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2334");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        boolean boolean15 = generator0.getUseCache();
        boolean boolean16 = generator0.getAttemptLoad();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = strComparator17.thenComparing(strComparator18);
        java.util.Comparator<java.lang.String> strComparator20 = strComparator17.reversed();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator20.reversed();
        java.util.Comparator<java.lang.String> strComparator22 = strComparator20.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator23.setUseCache(true);
        java.lang.ClassLoader classLoader26 = generator23.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator27.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator27.getStrategy();
        generator23.setStrategy(generatorStrategy30);
        boolean boolean32 = strComparator22.equals((java.lang.Object) generator23);
        java.lang.ClassLoader classLoader33 = generator23.getClassLoader();
        generator0.setClassLoader(classLoader33);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(classLoader33);
    }

    @Test
    public void test2335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2335");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        generator0.setAttemptLoad(false);
        boolean boolean17 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator18.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator22.getStrategy();
        generator21.setStrategy(generatorStrategy27);
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator29.getStrategy();
        generator21.setStrategy(generatorStrategy34);
        generator18.setStrategy(generatorStrategy34);
        boolean boolean37 = generator18.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader39 = null;
        generator38.setClassLoader(classLoader39);
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = strComparator42.thenComparing(strComparator43);
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = strComparator45.thenComparing(strComparator46);
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = strComparator48.thenComparing(strComparator49);
        boolean boolean51 = strComparator46.equals((java.lang.Object) strComparator50);
        java.lang.Object[] objArray53 = new java.lang.Object[] { '4', strComparator43, strComparator46, 0.0d };
        generator38.setArrays(objArray53);
        generator18.setArrays(objArray53);
        generator0.setArrays(objArray53);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator58.setUseCache(true);
        boolean boolean61 = generator58.getAttemptLoad();
        boolean boolean62 = generator58.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator63.setUseCache(true);
        boolean boolean66 = generator63.getAttemptLoad();
        boolean boolean67 = generator63.getUseCache();
        generator63.setAttemptLoad(true);
        generator63.setUseCache(true);
        generator63.setAttemptLoad(true);
        generator63.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator63.getStrategy();
        java.lang.ClassLoader classLoader77 = generator63.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator63.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator63.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator63.getStrategy();
        generator58.setStrategy(generatorStrategy80);
        generator0.setStrategy(generatorStrategy80);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertNotNull(generatorStrategy83);
    }

    @Test
    public void test2336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2336");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        generator6.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator13.getStrategy();
        generator6.setStrategy(generatorStrategy14);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        java.lang.ClassLoader classLoader19 = generator16.getClassLoader();
        generator6.setClassLoader(classLoader19);
        generator0.setClassLoader(classLoader19);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        boolean boolean25 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test2337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2337");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator0.setNamingPolicy(namingPolicy29);
        java.lang.ClassLoader classLoader31 = generator0.getClassLoader();
        boolean boolean32 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader33 = null;
        generator0.setClassLoader(classLoader33);
        boolean boolean35 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        boolean boolean38 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test2338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2338");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.reverseOrder();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator6.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator6.getStrategy();
        generator1.setStrategy(generatorStrategy13);
        boolean boolean15 = strComparator0.equals((java.lang.Object) generator1);
        java.lang.Class<?> wildcardClass16 = generator1.getClass();
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test2339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2339");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader21 = generator0.getClassLoader();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(classLoader21);
    }

    @Test
    public void test2340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2340");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        boolean boolean6 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator7.setUseCache(true);
        boolean boolean10 = generator7.getAttemptLoad();
        java.lang.ClassLoader classLoader11 = null;
        generator7.setClassLoader(classLoader11);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.lang.ClassLoader classLoader17 = null;
        generator14.setClassLoader(classLoader17);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator14.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader22 = null;
        generator21.setClassLoader(classLoader22);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = strComparator28.thenComparing(strComparator29);
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = strComparator31.thenComparing(strComparator32);
        boolean boolean34 = strComparator29.equals((java.lang.Object) strComparator33);
        java.lang.Object[] objArray36 = new java.lang.Object[] { '4', strComparator26, strComparator29, 0.0d };
        generator21.setArrays(objArray36);
        java.lang.ClassLoader classLoader38 = null;
        generator21.setClassLoader(classLoader38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader41 = null;
        generator40.setClassLoader(classLoader41);
        java.lang.ClassLoader classLoader43 = null;
        generator40.setClassLoader(classLoader43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator40.getNamingPolicy();
        generator21.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator48.setUseCache(true);
        boolean boolean51 = generator48.getAttemptLoad();
        boolean boolean52 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator48.getStrategy();
        generator47.setStrategy(generatorStrategy53);
        generator21.setStrategy(generatorStrategy53);
        generator13.setStrategy(generatorStrategy53);
        generator7.setStrategy(generatorStrategy53);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator7.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator7.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy59);
        java.lang.ClassLoader classLoader61 = generator0.getClassLoader();
        boolean boolean62 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test2341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2341");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        generator13.setUseCache(true);
        generator13.setAttemptLoad(true);
        generator13.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        generator21.setUseCache(false);
        boolean boolean28 = generator21.getUseCache();
        java.lang.ClassLoader classLoader29 = generator21.getClassLoader();
        generator13.setClassLoader(classLoader29);
        generator0.setClassLoader(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classLoader29);
    }

    @Test
    public void test2342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2342");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = java.util.Comparator.naturalOrder();
        int int6 = strComparator3.compare("", "");
        java.util.Comparator<java.lang.String> strComparator7 = strComparator3.reversed();
        java.util.Comparator<java.lang.String> strComparator8 = strComparator0.thenComparing(strComparator3);
        int int11 = strComparator3.compare("hi!", "");
        java.util.Comparator<java.lang.String> strComparator12 = strComparator3.reversed();
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(strComparator12);
    }

    @Test
    public void test2343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2343");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        boolean boolean9 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2344");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        java.lang.ClassLoader classLoader15 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        boolean boolean19 = generator16.getAttemptLoad();
        boolean boolean20 = generator16.getUseCache();
        generator16.setAttemptLoad(true);
        generator16.setUseCache(true);
        generator16.setUseCache(false);
        boolean boolean27 = generator16.getUseCache();
        java.lang.ClassLoader classLoader28 = generator16.getClassLoader();
        generator0.setClassLoader(classLoader28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator0.getStrategy();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(generatorStrategy30);
    }

    @Test
    public void test2345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2345");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getUseCache();
        boolean boolean6 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor10 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(generatorStrategy7);
    }

    @Test
    public void test2346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2346");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        boolean boolean6 = generator0.getUseCache();
        boolean boolean7 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator12.getStrategy();
        generator11.setStrategy(generatorStrategy17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        boolean boolean23 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator19.getStrategy();
        generator11.setStrategy(generatorStrategy24);
        generator8.setStrategy(generatorStrategy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean28 = generator27.getAttemptLoad();
        java.lang.ClassLoader classLoader29 = generator27.getClassLoader();
        generator8.setClassLoader(classLoader29);
        generator0.setClassLoader(classLoader29);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader33 = null;
        generator32.setClassLoader(classLoader33);
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = strComparator36.thenComparing(strComparator37);
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = strComparator39.thenComparing(strComparator40);
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = strComparator42.thenComparing(strComparator43);
        boolean boolean45 = strComparator40.equals((java.lang.Object) strComparator44);
        java.lang.Object[] objArray47 = new java.lang.Object[] { '4', strComparator37, strComparator40, 0.0d };
        generator32.setArrays(objArray47);
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader50 = null;
        generator49.setClassLoader(classLoader50);
        java.lang.ClassLoader classLoader52 = null;
        generator49.setClassLoader(classLoader52);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator49.getNamingPolicy();
        generator32.setNamingPolicy(namingPolicy54);
        generator0.setNamingPolicy(namingPolicy54);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator0.getNamingPolicy();
        boolean boolean60 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test2347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2347");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        java.lang.ClassLoader classLoader5 = generator0.getClassLoader();
        boolean boolean6 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator7.setUseCache(true);
        boolean boolean10 = generator7.getAttemptLoad();
        java.lang.ClassLoader classLoader11 = null;
        generator7.setClassLoader(classLoader11);
        generator7.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader17 = null;
        generator16.setClassLoader(classLoader17);
        java.lang.ClassLoader classLoader19 = null;
        generator16.setClassLoader(classLoader19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader24 = null;
        generator23.setClassLoader(classLoader24);
        java.lang.ClassLoader classLoader26 = null;
        generator23.setClassLoader(classLoader26);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator23.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator30.setUseCache(true);
        java.lang.ClassLoader classLoader33 = generator30.getClassLoader();
        generator15.setClassLoader(classLoader33);
        generator15.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        java.lang.ClassLoader classLoader40 = generator37.getClassLoader();
        generator15.setClassLoader(classLoader40);
        boolean boolean42 = generator15.getAttemptLoad();
        java.lang.ClassLoader classLoader43 = generator15.getClassLoader();
        generator7.setClassLoader(classLoader43);
        generator0.setClassLoader(classLoader43);
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader47 = null;
        generator46.setClassLoader(classLoader47);
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = strComparator50.thenComparing(strComparator51);
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = strComparator53.thenComparing(strComparator54);
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = strComparator56.thenComparing(strComparator57);
        boolean boolean59 = strComparator54.equals((java.lang.Object) strComparator58);
        java.lang.Object[] objArray61 = new java.lang.Object[] { '4', strComparator51, strComparator54, 0.0d };
        generator46.setArrays(objArray61);
        java.lang.ClassLoader classLoader63 = null;
        generator46.setClassLoader(classLoader63);
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader66 = null;
        generator65.setClassLoader(classLoader66);
        java.lang.ClassLoader classLoader68 = null;
        generator65.setClassLoader(classLoader68);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator65.getNamingPolicy();
        generator46.setNamingPolicy(namingPolicy70);
        boolean boolean72 = generator46.getUseCache();
        java.lang.ClassLoader classLoader73 = generator46.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator46.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy74);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter80 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(namingPolicy74);
    }

    @Test
    public void test2348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2348");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        boolean boolean10 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader14 = null;
        generator13.setClassLoader(classLoader14);
        boolean boolean16 = generator13.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator17.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator20.setStrategy(generatorStrategy26);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator28.setUseCache(true);
        boolean boolean31 = generator28.getAttemptLoad();
        boolean boolean32 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator28.getStrategy();
        generator20.setStrategy(generatorStrategy33);
        generator17.setStrategy(generatorStrategy33);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator17.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator17.getNamingPolicy();
        java.lang.ClassLoader classLoader38 = generator17.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator17.getStrategy();
        java.lang.ClassLoader classLoader40 = generator17.getClassLoader();
        generator13.setClassLoader(classLoader40);
        generator0.setClassLoader(classLoader40);
        java.lang.Class<?> wildcardClass43 = classLoader40.getClass();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test2349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2349");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator14.setUseCache(true);
        boolean boolean17 = generator14.getAttemptLoad();
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        generator14.setUseCache(true);
        generator14.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator14.getStrategy();
        generator0.setStrategy(generatorStrategy25);
        java.lang.ClassLoader classLoader27 = null;
        generator0.setClassLoader(classLoader27);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(namingPolicy29);
    }

    @Test
    public void test2350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2350");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        boolean boolean23 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator19.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator25.setUseCache(true);
        boolean boolean28 = generator25.getAttemptLoad();
        boolean boolean29 = generator25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator25.getStrategy();
        generator19.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = generator19.getClassLoader();
        generator19.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        boolean boolean39 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator35.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        generator35.setStrategy(generatorStrategy46);
        java.lang.ClassLoader classLoader48 = generator35.getClassLoader();
        generator19.setClassLoader(classLoader48);
        boolean boolean50 = generator19.getAttemptLoad();
        generator19.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator19.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator54.setUseCache(true);
        boolean boolean57 = generator54.getAttemptLoad();
        boolean boolean58 = generator54.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator54.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator60.setUseCache(true);
        boolean boolean63 = generator60.getAttemptLoad();
        boolean boolean64 = generator60.getUseCache();
        generator60.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator67.getStrategy();
        generator60.setStrategy(generatorStrategy68);
        org.mockito.cglib.util.ParallelSorter.Generator generator70 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator70.setUseCache(true);
        java.lang.ClassLoader classLoader73 = generator70.getClassLoader();
        generator60.setClassLoader(classLoader73);
        generator54.setClassLoader(classLoader73);
        org.mockito.cglib.util.ParallelSorter.Generator generator76 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator77 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader78 = null;
        generator77.setClassLoader(classLoader78);
        java.lang.ClassLoader classLoader80 = null;
        generator77.setClassLoader(classLoader80);
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator77.getNamingPolicy();
        generator76.setNamingPolicy(namingPolicy82);
        boolean boolean84 = generator76.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator76.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator86 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator86.setUseCache(true);
        boolean boolean89 = generator86.getAttemptLoad();
        boolean boolean90 = generator86.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy91 = generator86.getStrategy();
        generator76.setStrategy(generatorStrategy91);
        generator54.setStrategy(generatorStrategy91);
        generator19.setStrategy(generatorStrategy91);
        generator0.setStrategy(generatorStrategy91);
        generator0.setUseCache(false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(namingPolicy85);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(generatorStrategy91);
    }

    @Test
    public void test2351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2351");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader11 = null;
        generator10.setClassLoader(classLoader11);
        java.lang.ClassLoader classLoader13 = null;
        generator10.setClassLoader(classLoader13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator10.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator9.getNamingPolicy();
        generator9.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        boolean boolean24 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator20.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.lang.ClassLoader classLoader30 = null;
        generator27.setClassLoader(classLoader30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy32);
        boolean boolean34 = generator26.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader36 = null;
        generator35.setClassLoader(classLoader36);
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = strComparator39.thenComparing(strComparator40);
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = strComparator42.thenComparing(strComparator43);
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = strComparator45.thenComparing(strComparator46);
        boolean boolean48 = strComparator43.equals((java.lang.Object) strComparator47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { '4', strComparator40, strComparator43, 0.0d };
        generator35.setArrays(objArray50);
        generator26.setArrays(objArray50);
        generator20.setArrays(objArray50);
        generator9.setArrays(objArray50);
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator55.setUseCache(true);
        java.lang.ClassLoader classLoader58 = generator55.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader60 = null;
        generator59.setClassLoader(classLoader60);
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = strComparator63.thenComparing(strComparator64);
        java.util.Comparator<java.lang.String> strComparator66 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator67 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator68 = strComparator66.thenComparing(strComparator67);
        java.util.Comparator<java.lang.String> strComparator69 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator70 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator71 = strComparator69.thenComparing(strComparator70);
        boolean boolean72 = strComparator67.equals((java.lang.Object) strComparator71);
        java.lang.Object[] objArray74 = new java.lang.Object[] { '4', strComparator64, strComparator67, 0.0d };
        generator59.setArrays(objArray74);
        org.mockito.cglib.util.ParallelSorter.Generator generator76 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader77 = null;
        generator76.setClassLoader(classLoader77);
        java.lang.ClassLoader classLoader79 = null;
        generator76.setClassLoader(classLoader79);
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator76.getNamingPolicy();
        generator59.setNamingPolicy(namingPolicy81);
        generator55.setNamingPolicy(namingPolicy81);
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator55.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy84);
        generator0.setNamingPolicy(namingPolicy84);
        java.lang.ClassLoader classLoader87 = generator0.getClassLoader();
        boolean boolean88 = generator0.getAttemptLoad();
        boolean boolean89 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test2352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2352");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator9.setUseCache(true);
        boolean boolean12 = generator9.getAttemptLoad();
        java.lang.ClassLoader classLoader13 = null;
        generator9.setClassLoader(classLoader13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader17 = null;
        generator16.setClassLoader(classLoader17);
        java.lang.ClassLoader classLoader19 = null;
        generator16.setClassLoader(classLoader19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader24 = null;
        generator23.setClassLoader(classLoader24);
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = strComparator27.thenComparing(strComparator28);
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = strComparator30.thenComparing(strComparator31);
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = strComparator33.thenComparing(strComparator34);
        boolean boolean36 = strComparator31.equals((java.lang.Object) strComparator35);
        java.lang.Object[] objArray38 = new java.lang.Object[] { '4', strComparator28, strComparator31, 0.0d };
        generator23.setArrays(objArray38);
        java.lang.ClassLoader classLoader40 = null;
        generator23.setClassLoader(classLoader40);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        generator23.setNamingPolicy(namingPolicy47);
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator50.setUseCache(true);
        boolean boolean53 = generator50.getAttemptLoad();
        boolean boolean54 = generator50.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator50.getStrategy();
        generator49.setStrategy(generatorStrategy55);
        generator23.setStrategy(generatorStrategy55);
        generator15.setStrategy(generatorStrategy55);
        generator9.setStrategy(generatorStrategy55);
        generator0.setStrategy(generatorStrategy55);
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean64 = generator63.getAttemptLoad();
        java.lang.ClassLoader classLoader65 = generator63.getClassLoader();
        java.lang.ClassLoader classLoader66 = generator63.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator68 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator68.setUseCache(true);
        boolean boolean71 = generator68.getAttemptLoad();
        boolean boolean72 = generator68.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator68.getStrategy();
        generator67.setStrategy(generatorStrategy73);
        org.mockito.cglib.util.ParallelSorter.Generator generator75 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator75.setUseCache(true);
        boolean boolean78 = generator75.getAttemptLoad();
        boolean boolean79 = generator75.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator75.getStrategy();
        generator67.setStrategy(generatorStrategy80);
        generator63.setStrategy(generatorStrategy80);
        org.mockito.cglib.util.ParallelSorter.Generator generator83 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator83.getStrategy();
        generator63.setStrategy(generatorStrategy84);
        generator0.setStrategy(generatorStrategy84);
        generator0.setUseCache(false);
        boolean boolean89 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor90 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test2353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2353");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator0.getStrategy();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy19);
    }

    @Test
    public void test2354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2354");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader7 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader17 = null;
        generator16.setClassLoader(classLoader17);
        java.lang.ClassLoader classLoader19 = null;
        generator16.setClassLoader(classLoader19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy21);
        boolean boolean23 = generator15.getUseCache();
        boolean boolean24 = generator15.getUseCache();
        generator15.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator27.setUseCache(true);
        java.lang.ClassLoader classLoader30 = generator27.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = strComparator35.thenComparing(strComparator36);
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = strComparator38.thenComparing(strComparator39);
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = strComparator41.thenComparing(strComparator42);
        boolean boolean44 = strComparator39.equals((java.lang.Object) strComparator43);
        java.lang.Object[] objArray46 = new java.lang.Object[] { '4', strComparator36, strComparator39, 0.0d };
        generator31.setArrays(objArray46);
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader49 = null;
        generator48.setClassLoader(classLoader49);
        java.lang.ClassLoader classLoader51 = null;
        generator48.setClassLoader(classLoader51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator48.getNamingPolicy();
        generator31.setNamingPolicy(namingPolicy53);
        generator27.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator27.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator27.getStrategy();
        generator15.setStrategy(generatorStrategy57);
        generator8.setStrategy(generatorStrategy57);
        generator0.setStrategy(generatorStrategy57);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter61 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(generatorStrategy57);
    }

    @Test
    public void test2355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2355");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        java.lang.ClassLoader classLoader13 = generator10.getClassLoader();
        generator0.setClassLoader(classLoader13);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = strComparator27.thenComparing(strComparator28);
        boolean boolean30 = strComparator25.equals((java.lang.Object) strComparator29);
        java.lang.Object[] objArray32 = new java.lang.Object[] { '4', strComparator22, strComparator25, 0.0d };
        generator17.setArrays(objArray32);
        java.lang.ClassLoader classLoader34 = null;
        generator17.setClassLoader(classLoader34);
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader37 = null;
        generator36.setClassLoader(classLoader37);
        java.lang.ClassLoader classLoader39 = null;
        generator36.setClassLoader(classLoader39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator36.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator44.setUseCache(true);
        boolean boolean47 = generator44.getAttemptLoad();
        boolean boolean48 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator44.getStrategy();
        generator43.setStrategy(generatorStrategy49);
        generator17.setStrategy(generatorStrategy49);
        generator0.setStrategy(generatorStrategy49);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(generatorStrategy53);
    }

    @Test
    public void test2356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2356");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader8 = null;
        generator7.setClassLoader(classLoader8);
        java.lang.ClassLoader classLoader10 = null;
        generator7.setClassLoader(classLoader10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        boolean boolean27 = strComparator22.equals((java.lang.Object) strComparator26);
        java.lang.Object[] objArray29 = new java.lang.Object[] { '4', strComparator19, strComparator22, 0.0d };
        generator14.setArrays(objArray29);
        java.lang.ClassLoader classLoader31 = null;
        generator14.setClassLoader(classLoader31);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        generator40.setStrategy(generatorStrategy46);
        generator14.setStrategy(generatorStrategy46);
        generator6.setStrategy(generatorStrategy46);
        generator0.setStrategy(generatorStrategy46);
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator51.setUseCache(true);
        boolean boolean54 = generator51.getAttemptLoad();
        boolean boolean55 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator51.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator57.setUseCache(true);
        boolean boolean60 = generator57.getAttemptLoad();
        boolean boolean61 = generator57.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator57.getStrategy();
        generator51.setStrategy(generatorStrategy62);
        generator0.setStrategy(generatorStrategy62);
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator65.setUseCache(true);
        boolean boolean68 = generator65.getAttemptLoad();
        java.lang.ClassLoader classLoader69 = null;
        generator65.setClassLoader(classLoader69);
        generator65.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator73 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator73.setUseCache(true);
        boolean boolean76 = generator73.getAttemptLoad();
        boolean boolean77 = generator73.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator73.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator73.getStrategy();
        generator65.setStrategy(generatorStrategy79);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator65.getStrategy();
        generator0.setStrategy(generatorStrategy81);
        boolean boolean83 = generator0.getUseCache();
        java.lang.ClassLoader classLoader84 = generator0.getClassLoader();
        java.lang.Class<?> wildcardClass85 = classLoader84.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(classLoader84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2357");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator8.getStrategy();
        java.lang.ClassLoader classLoader10 = generator8.getClassLoader();
        generator8.setUseCache(false);
        boolean boolean13 = generator8.getUseCache();
        java.lang.ClassLoader classLoader14 = generator8.getClassLoader();
        generator0.setClassLoader(classLoader14);
        boolean boolean16 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        java.lang.ClassLoader classLoader25 = null;
        generator21.setClassLoader(classLoader25);
        boolean boolean27 = generator21.getUseCache();
        boolean boolean28 = generator21.getAttemptLoad();
        boolean boolean29 = generator21.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator21.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy30);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter32 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy30);
    }

    @Test
    public void test2358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2358");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator4.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator3.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader21 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        generator22.setUseCache(true);
        generator22.setAttemptLoad(true);
        generator22.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator22.getStrategy();
        generator0.setStrategy(generatorStrategy35);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator0.getStrategy();
        boolean boolean40 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test2359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2359");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator14.setUseCache(true);
        boolean boolean17 = generator14.getAttemptLoad();
        java.lang.ClassLoader classLoader18 = null;
        generator14.setClassLoader(classLoader18);
        generator14.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator22.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator22.getStrategy();
        generator14.setStrategy(generatorStrategy28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator14.getStrategy();
        generator0.setStrategy(generatorStrategy30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor33 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(namingPolicy32);
    }

    @Test
    public void test2360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2360");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator0.setNamingPolicy(namingPolicy29);
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator34.setUseCache(true);
        boolean boolean37 = generator34.getAttemptLoad();
        boolean boolean38 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator34.getStrategy();
        generator33.setStrategy(generatorStrategy39);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        generator33.setStrategy(generatorStrategy46);
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator48.setUseCache(true);
        boolean boolean51 = generator48.getAttemptLoad();
        boolean boolean52 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator48.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator54.setUseCache(true);
        boolean boolean57 = generator54.getAttemptLoad();
        boolean boolean58 = generator54.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator54.getStrategy();
        generator48.setStrategy(generatorStrategy59);
        generator33.setStrategy(generatorStrategy59);
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator63.setUseCache(true);
        boolean boolean66 = generator63.getAttemptLoad();
        boolean boolean67 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator63.getStrategy();
        generator62.setStrategy(generatorStrategy68);
        org.mockito.cglib.util.ParallelSorter.Generator generator70 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator70.setUseCache(true);
        boolean boolean73 = generator70.getAttemptLoad();
        boolean boolean74 = generator70.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator70.getStrategy();
        generator62.setStrategy(generatorStrategy75);
        org.mockito.cglib.util.ParallelSorter.Generator generator77 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader78 = null;
        generator77.setClassLoader(classLoader78);
        java.util.Comparator<java.lang.String> strComparator81 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator82 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator83 = strComparator81.thenComparing(strComparator82);
        java.util.Comparator<java.lang.String> strComparator84 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator85 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator86 = strComparator84.thenComparing(strComparator85);
        java.util.Comparator<java.lang.String> strComparator87 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator88 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator89 = strComparator87.thenComparing(strComparator88);
        boolean boolean90 = strComparator85.equals((java.lang.Object) strComparator89);
        java.lang.Object[] objArray92 = new java.lang.Object[] { '4', strComparator82, strComparator85, 0.0d };
        generator77.setArrays(objArray92);
        generator62.setArrays(objArray92);
        generator33.setArrays(objArray92);
        org.mockito.cglib.core.NamingPolicy namingPolicy96 = generator33.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy96);
        java.lang.Class<?> wildcardClass98 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertNotNull(strComparator84);
        org.junit.Assert.assertNotNull(strComparator85);
        org.junit.Assert.assertNotNull(strComparator86);
        org.junit.Assert.assertNotNull(strComparator87);
        org.junit.Assert.assertNotNull(strComparator88);
        org.junit.Assert.assertNotNull(strComparator89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy96);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2361");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator0.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator0.getStrategy();
        boolean boolean24 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test2362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2362");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator8.getStrategy();
        java.lang.ClassLoader classLoader10 = generator8.getClassLoader();
        generator8.setUseCache(false);
        generator8.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(generatorStrategy15);
    }

    @Test
    public void test2363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2363");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy22);
        java.lang.ClassLoader classLoader24 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator26.getStrategy();
        java.lang.ClassLoader classLoader28 = generator26.getClassLoader();
        generator26.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        boolean boolean34 = generator31.getAttemptLoad();
        boolean boolean35 = generator31.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator36.setUseCache(true);
        boolean boolean39 = generator36.getAttemptLoad();
        boolean boolean40 = generator36.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator36.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator36.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator36.getStrategy();
        generator31.setStrategy(generatorStrategy43);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator45.setUseCache(true);
        boolean boolean48 = generator45.getAttemptLoad();
        boolean boolean49 = generator45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator45.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator51.setUseCache(true);
        boolean boolean54 = generator51.getAttemptLoad();
        boolean boolean55 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator51.getStrategy();
        generator45.setStrategy(generatorStrategy56);
        java.lang.ClassLoader classLoader58 = generator45.getClassLoader();
        generator45.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator61.setUseCache(true);
        boolean boolean64 = generator61.getAttemptLoad();
        boolean boolean65 = generator61.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator61.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator67.setUseCache(true);
        boolean boolean70 = generator67.getAttemptLoad();
        boolean boolean71 = generator67.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator67.getStrategy();
        generator61.setStrategy(generatorStrategy72);
        java.lang.ClassLoader classLoader74 = generator61.getClassLoader();
        generator45.setClassLoader(classLoader74);
        generator31.setClassLoader(classLoader74);
        generator26.setClassLoader(classLoader74);
        generator0.setClassLoader(classLoader74);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        java.lang.Class<?> wildcardClass84 = generator0.getClass();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test2364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2364");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean4 = generator3.getAttemptLoad();
        java.lang.ClassLoader classLoader5 = generator3.getClassLoader();
        java.lang.ClassLoader classLoader6 = generator3.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator7.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        generator7.setStrategy(generatorStrategy20);
        generator7.setAttemptLoad(false);
        boolean boolean24 = generator7.getUseCache();
        java.lang.ClassLoader classLoader25 = generator7.getClassLoader();
        boolean boolean26 = generator7.getUseCache();
        boolean boolean27 = generator7.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator7.getStrategy();
        java.lang.ClassLoader classLoader29 = generator7.getClassLoader();
        generator3.setClassLoader(classLoader29);
        boolean boolean31 = generator3.getAttemptLoad();
        boolean boolean32 = generator3.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator3.getStrategy();
        generator0.setStrategy(generatorStrategy33);
        boolean boolean35 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader36 = generator0.getClassLoader();
        java.lang.Class<?> wildcardClass37 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test2365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2365");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        java.lang.ClassLoader classLoader18 = generator15.getClassLoader();
        generator0.setClassLoader(classLoader18);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator26.setUseCache(true);
        boolean boolean29 = generator26.getAttemptLoad();
        boolean boolean30 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator26.getStrategy();
        generator25.setStrategy(generatorStrategy31);
        boolean boolean33 = generator25.getAttemptLoad();
        generator25.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        java.lang.ClassLoader classLoader40 = null;
        generator37.setClassLoader(classLoader40);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator37.getNamingPolicy();
        generator36.setNamingPolicy(namingPolicy42);
        boolean boolean44 = generator36.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader46 = null;
        generator45.setClassLoader(classLoader46);
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = strComparator49.thenComparing(strComparator50);
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = strComparator52.thenComparing(strComparator53);
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = strComparator55.thenComparing(strComparator56);
        boolean boolean58 = strComparator53.equals((java.lang.Object) strComparator57);
        java.lang.Object[] objArray60 = new java.lang.Object[] { '4', strComparator50, strComparator53, 0.0d };
        generator45.setArrays(objArray60);
        generator36.setArrays(objArray60);
        boolean boolean63 = generator36.getAttemptLoad();
        java.lang.Object[] objArray64 = new java.lang.Object[] { generator36 };
        generator25.setArrays(objArray64);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator25.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator67.setUseCache(true);
        boolean boolean70 = generator67.getAttemptLoad();
        boolean boolean71 = generator67.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator67.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator67.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy73);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator25.getStrategy();
        generator0.setStrategy(generatorStrategy75);
        java.lang.Class<?> wildcardClass77 = generatorStrategy75.getClass();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test2366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2366");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator9.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator9.getStrategy();
        boolean boolean13 = generator9.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator14.setUseCache(true);
        boolean boolean17 = generator14.getAttemptLoad();
        boolean boolean18 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator14.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        boolean boolean24 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator20.getStrategy();
        generator14.setStrategy(generatorStrategy25);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        java.lang.ClassLoader classLoader31 = null;
        generator28.setClassLoader(classLoader31);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator28.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator27.getNamingPolicy();
        generator27.setUseCache(false);
        boolean boolean38 = generator27.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator27.getNamingPolicy();
        generator27.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator27.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy42);
        generator9.setNamingPolicy(namingPolicy42);
        boolean boolean45 = generator9.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader47 = null;
        generator46.setClassLoader(classLoader47);
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader50 = null;
        generator49.setClassLoader(classLoader50);
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = strComparator53.thenComparing(strComparator54);
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = strComparator56.thenComparing(strComparator57);
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = strComparator59.thenComparing(strComparator60);
        boolean boolean62 = strComparator57.equals((java.lang.Object) strComparator61);
        java.lang.Object[] objArray64 = new java.lang.Object[] { '4', strComparator54, strComparator57, 0.0d };
        generator49.setArrays(objArray64);
        generator46.setArrays(objArray64);
        generator9.setArrays(objArray64);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator9.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator9.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy69);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter71 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertNotNull(namingPolicy69);
    }

    @Test
    public void test2367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2367");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator3.setUseCache(true);
        boolean boolean6 = generator3.getAttemptLoad();
        boolean boolean7 = generator3.getUseCache();
        generator3.setAttemptLoad(true);
        generator3.setUseCache(true);
        boolean boolean12 = strComparator0.equals((java.lang.Object) generator3);
        generator3.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator15.getStrategy();
        generator15.setUseCache(true);
        generator15.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator15.getNamingPolicy();
        generator3.setNamingPolicy(namingPolicy21);
        generator3.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator25.setUseCache(true);
        boolean boolean28 = generator25.getAttemptLoad();
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        generator25.setUseCache(true);
        generator25.setUseCache(false);
        boolean boolean36 = generator25.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean38 = generator37.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader42 = null;
        generator41.setClassLoader(classLoader42);
        java.lang.ClassLoader classLoader44 = null;
        generator41.setClassLoader(classLoader44);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator41.getNamingPolicy();
        generator40.setNamingPolicy(namingPolicy46);
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader49 = null;
        generator48.setClassLoader(classLoader49);
        java.lang.ClassLoader classLoader51 = null;
        generator48.setClassLoader(classLoader51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator48.getNamingPolicy();
        generator40.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator55.setUseCache(true);
        java.lang.ClassLoader classLoader58 = generator55.getClassLoader();
        generator40.setClassLoader(classLoader58);
        generator37.setClassLoader(classLoader58);
        generator25.setClassLoader(classLoader58);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator25.getStrategy();
        generator3.setStrategy(generatorStrategy62);
        boolean boolean64 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator3.getStrategy();
        boolean boolean66 = generator3.getUseCache();
        boolean boolean67 = generator3.getUseCache();
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test2368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2368");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader7 = null;
        generator6.setClassLoader(classLoader7);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = strComparator13.thenComparing(strComparator14);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        boolean boolean19 = strComparator14.equals((java.lang.Object) strComparator18);
        java.lang.Object[] objArray21 = new java.lang.Object[] { '4', strComparator11, strComparator14, 0.0d };
        generator6.setArrays(objArray21);
        java.lang.ClassLoader classLoader23 = null;
        generator6.setClassLoader(classLoader23);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader26 = null;
        generator25.setClassLoader(classLoader26);
        java.lang.ClassLoader classLoader28 = null;
        generator25.setClassLoader(classLoader28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator25.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator33.setUseCache(true);
        boolean boolean36 = generator33.getAttemptLoad();
        boolean boolean37 = generator33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator33.getStrategy();
        generator32.setStrategy(generatorStrategy38);
        generator6.setStrategy(generatorStrategy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        generator41.setNamingPolicy(namingPolicy47);
        generator6.setNamingPolicy(namingPolicy47);
        generator0.setNamingPolicy(namingPolicy47);
        boolean boolean51 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator53.setUseCache(true);
        boolean boolean56 = generator53.getAttemptLoad();
        boolean boolean57 = generator53.getUseCache();
        generator53.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator53.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(namingPolicy60);
    }

    @Test
    public void test2369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2369");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        boolean boolean19 = generator0.getAttemptLoad();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = strComparator20.thenComparing(strComparator21);
        java.util.Comparator<java.lang.String> strComparator23 = strComparator20.reversed();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator23.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader27 = null;
        generator26.setClassLoader(classLoader27);
        java.lang.ClassLoader classLoader29 = null;
        generator26.setClassLoader(classLoader29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator26.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy31);
        boolean boolean33 = strComparator23.equals((java.lang.Object) generator25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator25.getStrategy();
        generator0.setStrategy(generatorStrategy34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass38 = generatorStrategy37.getClass();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test2370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2370");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator12.getStrategy();
        generator6.setStrategy(generatorStrategy17);
        java.lang.ClassLoader classLoader19 = generator6.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator6.getNamingPolicy();
        generator6.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator6.getNamingPolicy();
        boolean boolean24 = generator6.getAttemptLoad();
        java.lang.ClassLoader classLoader25 = generator6.getClassLoader();
        generator0.setClassLoader(classLoader25);
        java.lang.ClassLoader classLoader27 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader28 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        java.lang.ClassLoader classLoader33 = null;
        generator29.setClassLoader(classLoader33);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator29.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader37 = null;
        generator36.setClassLoader(classLoader37);
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = strComparator40.thenComparing(strComparator41);
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = strComparator43.thenComparing(strComparator44);
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = strComparator46.thenComparing(strComparator47);
        boolean boolean49 = strComparator44.equals((java.lang.Object) strComparator48);
        java.lang.Object[] objArray51 = new java.lang.Object[] { '4', strComparator41, strComparator44, 0.0d };
        generator36.setArrays(objArray51);
        generator29.setArrays(objArray51);
        generator29.setUseCache(false);
        java.lang.ClassLoader classLoader56 = generator29.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator57.setUseCache(true);
        boolean boolean60 = generator57.getAttemptLoad();
        boolean boolean61 = generator57.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator57.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator63.setUseCache(true);
        boolean boolean66 = generator63.getAttemptLoad();
        boolean boolean67 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator63.getStrategy();
        generator57.setStrategy(generatorStrategy68);
        org.mockito.cglib.util.ParallelSorter.Generator generator70 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator71 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader72 = null;
        generator71.setClassLoader(classLoader72);
        java.lang.ClassLoader classLoader74 = null;
        generator71.setClassLoader(classLoader74);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator71.getNamingPolicy();
        generator70.setNamingPolicy(namingPolicy76);
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator70.getNamingPolicy();
        generator70.setUseCache(false);
        boolean boolean81 = generator70.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator70.getNamingPolicy();
        generator70.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator70.getNamingPolicy();
        generator57.setNamingPolicy(namingPolicy85);
        generator29.setNamingPolicy(namingPolicy85);
        generator0.setNamingPolicy(namingPolicy85);
        java.lang.Class<?> wildcardClass89 = namingPolicy85.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertNotNull(namingPolicy85);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2371");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        java.lang.ClassLoader classLoader13 = generator10.getClassLoader();
        generator0.setClassLoader(classLoader13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        boolean boolean28 = strComparator23.equals((java.lang.Object) strComparator27);
        java.lang.Object[] objArray30 = new java.lang.Object[] { '4', strComparator20, strComparator23, 0.0d };
        generator15.setArrays(objArray30);
        generator0.setArrays(objArray30);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter33 = org.mockito.cglib.util.ParallelSorter.create(objArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test2372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2372");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader9 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader10 = generator0.getClassLoader();
        boolean boolean11 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        generator12.setUseCache(true);
        generator12.setAttemptLoad(true);
        generator12.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator12.getStrategy();
        java.lang.ClassLoader classLoader26 = generator12.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator12.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator12.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator12.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        boolean boolean34 = generator31.getAttemptLoad();
        boolean boolean35 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator31.getStrategy();
        generator30.setStrategy(generatorStrategy36);
        boolean boolean38 = generator30.getAttemptLoad();
        generator30.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        generator41.setNamingPolicy(namingPolicy47);
        boolean boolean49 = generator41.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader51 = null;
        generator50.setClassLoader(classLoader51);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = strComparator57.thenComparing(strComparator58);
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = strComparator60.thenComparing(strComparator61);
        boolean boolean63 = strComparator58.equals((java.lang.Object) strComparator62);
        java.lang.Object[] objArray65 = new java.lang.Object[] { '4', strComparator55, strComparator58, 0.0d };
        generator50.setArrays(objArray65);
        generator41.setArrays(objArray65);
        boolean boolean68 = generator41.getAttemptLoad();
        java.lang.Object[] objArray69 = new java.lang.Object[] { generator41 };
        generator30.setArrays(objArray69);
        generator12.setArrays(objArray69);
        generator0.setArrays(objArray69);
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objArray69);
    }

    @Test
    public void test2373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2373");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        boolean boolean13 = generator10.getAttemptLoad();
        boolean boolean14 = generator10.getUseCache();
        generator10.setAttemptLoad(true);
        generator10.setUseCache(true);
        generator10.setAttemptLoad(true);
        boolean boolean21 = generator10.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator10.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator24.setUseCache(true);
        boolean boolean27 = generator24.getAttemptLoad();
        boolean boolean28 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator24.getStrategy();
        generator23.setStrategy(generatorStrategy29);
        boolean boolean31 = generator23.getAttemptLoad();
        generator23.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader36 = null;
        generator35.setClassLoader(classLoader36);
        java.lang.ClassLoader classLoader38 = null;
        generator35.setClassLoader(classLoader38);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator35.getNamingPolicy();
        generator34.setNamingPolicy(namingPolicy40);
        boolean boolean42 = generator34.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader44 = null;
        generator43.setClassLoader(classLoader44);
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = strComparator47.thenComparing(strComparator48);
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = strComparator50.thenComparing(strComparator51);
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = strComparator53.thenComparing(strComparator54);
        boolean boolean56 = strComparator51.equals((java.lang.Object) strComparator55);
        java.lang.Object[] objArray58 = new java.lang.Object[] { '4', strComparator48, strComparator51, 0.0d };
        generator43.setArrays(objArray58);
        generator34.setArrays(objArray58);
        boolean boolean61 = generator34.getAttemptLoad();
        java.lang.Object[] objArray62 = new java.lang.Object[] { generator34 };
        generator23.setArrays(objArray62);
        generator10.setArrays(objArray62);
        generator0.setArrays(objArray62);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter66 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.util.ParallelSorter$Generator is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objArray62);
    }

    @Test
    public void test2374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2374");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator30.setUseCache(true);
        boolean boolean33 = generator30.getAttemptLoad();
        boolean boolean34 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator30.getStrategy();
        generator29.setStrategy(generatorStrategy35);
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator37.setUseCache(true);
        boolean boolean40 = generator37.getAttemptLoad();
        boolean boolean41 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator37.getStrategy();
        generator29.setStrategy(generatorStrategy42);
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader45 = null;
        generator44.setClassLoader(classLoader45);
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = strComparator48.thenComparing(strComparator49);
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = strComparator51.thenComparing(strComparator52);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        boolean boolean57 = strComparator52.equals((java.lang.Object) strComparator56);
        java.lang.Object[] objArray59 = new java.lang.Object[] { '4', strComparator49, strComparator52, 0.0d };
        generator44.setArrays(objArray59);
        generator29.setArrays(objArray59);
        generator0.setArrays(objArray59);
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = strComparator63.thenComparing(strComparator64);
        org.mockito.cglib.util.ParallelSorter.Generator generator66 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator66.setUseCache(true);
        boolean boolean69 = generator66.getAttemptLoad();
        boolean boolean70 = generator66.getUseCache();
        generator66.setAttemptLoad(true);
        generator66.setUseCache(true);
        boolean boolean75 = strComparator63.equals((java.lang.Object) generator66);
        org.mockito.cglib.util.ParallelSorter.Generator generator76 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator76.setUseCache(true);
        java.lang.ClassLoader classLoader79 = generator76.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator80 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator80.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator80.getStrategy();
        generator76.setStrategy(generatorStrategy83);
        generator66.setStrategy(generatorStrategy83);
        generator0.setStrategy(generatorStrategy83);
        boolean boolean87 = generator0.getUseCache();
        java.lang.Object[] objArray88 = null;
        generator0.setArrays(objArray88);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(generatorStrategy90);
    }

    @Test
    public void test2375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2375");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator27.setUseCache(true);
        boolean boolean30 = generator27.getAttemptLoad();
        boolean boolean31 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator27.getStrategy();
        generator26.setStrategy(generatorStrategy32);
        generator0.setStrategy(generatorStrategy32);
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader37 = null;
        generator36.setClassLoader(classLoader37);
        java.lang.ClassLoader classLoader39 = null;
        generator36.setClassLoader(classLoader39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator36.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy41);
        generator0.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator0.getStrategy();
        boolean boolean45 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor49 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(namingPolicy48);
    }

    @Test
    public void test2376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2376");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        boolean boolean13 = generator10.getAttemptLoad();
        java.lang.ClassLoader classLoader14 = null;
        generator10.setClassLoader(classLoader14);
        generator10.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator18.setUseCache(true);
        boolean boolean21 = generator18.getAttemptLoad();
        boolean boolean22 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator18.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator18.getStrategy();
        generator10.setStrategy(generatorStrategy24);
        generator0.setStrategy(generatorStrategy24);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(generatorStrategy24);
    }

    @Test
    public void test2377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2377");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator3.setUseCache(true);
        boolean boolean6 = generator3.getAttemptLoad();
        boolean boolean7 = generator3.getUseCache();
        generator3.setAttemptLoad(true);
        generator3.setUseCache(true);
        boolean boolean12 = strComparator0.equals((java.lang.Object) generator3);
        generator3.setAttemptLoad(false);
        boolean boolean15 = generator3.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator3.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator3.getNamingPolicy();
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(namingPolicy17);
    }

    @Test
    public void test2378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2378");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader10 = null;
        generator9.setClassLoader(classLoader10);
        java.lang.ClassLoader classLoader12 = null;
        generator9.setClassLoader(classLoader12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator9.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy14);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader17 = null;
        generator16.setClassLoader(classLoader17);
        java.lang.ClassLoader classLoader19 = null;
        generator16.setClassLoader(classLoader19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy21);
        generator8.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator8.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.lang.ClassLoader classLoader30 = null;
        generator27.setClassLoader(classLoader30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator26.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy34);
        generator0.setNamingPolicy(namingPolicy34);
        boolean boolean37 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor38 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test2379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2379");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy14);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader17 = null;
        generator16.setClassLoader(classLoader17);
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = strComparator20.thenComparing(strComparator21);
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = strComparator23.thenComparing(strComparator24);
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = strComparator26.thenComparing(strComparator27);
        boolean boolean29 = strComparator24.equals((java.lang.Object) strComparator28);
        java.lang.Object[] objArray31 = new java.lang.Object[] { '4', strComparator21, strComparator24, 0.0d };
        generator16.setArrays(objArray31);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy38);
        java.lang.ClassLoader classLoader40 = generator16.getClassLoader();
        generator0.setClassLoader(classLoader40);
        java.lang.ClassLoader classLoader42 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader43 = generator0.getClassLoader();
        boolean boolean44 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test2380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2380");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getUseCache();
        java.lang.ClassLoader classLoader6 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator0.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator12.getStrategy();
        generator11.setStrategy(generatorStrategy17);
        boolean boolean19 = generator11.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader22 = null;
        generator21.setClassLoader(classLoader22);
        java.lang.ClassLoader classLoader24 = null;
        generator21.setClassLoader(classLoader24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator21.getNamingPolicy();
        generator20.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        java.lang.ClassLoader classLoader31 = null;
        generator28.setClassLoader(classLoader31);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator28.getNamingPolicy();
        generator20.setNamingPolicy(namingPolicy33);
        generator11.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader39 = null;
        generator38.setClassLoader(classLoader39);
        java.lang.ClassLoader classLoader41 = null;
        generator38.setClassLoader(classLoader41);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator38.getNamingPolicy();
        generator37.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator45.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator49.setUseCache(true);
        boolean boolean52 = generator49.getAttemptLoad();
        boolean boolean53 = generator49.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator49.getStrategy();
        generator48.setStrategy(generatorStrategy54);
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator56.setUseCache(true);
        boolean boolean59 = generator56.getAttemptLoad();
        boolean boolean60 = generator56.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator56.getStrategy();
        generator48.setStrategy(generatorStrategy61);
        generator45.setStrategy(generatorStrategy61);
        generator37.setStrategy(generatorStrategy61);
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader66 = null;
        generator65.setClassLoader(classLoader66);
        org.mockito.cglib.util.ParallelSorter.Generator generator68 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader69 = null;
        generator68.setClassLoader(classLoader69);
        java.util.Comparator<java.lang.String> strComparator72 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator73 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator74 = strComparator72.thenComparing(strComparator73);
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = strComparator75.thenComparing(strComparator76);
        java.util.Comparator<java.lang.String> strComparator78 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = strComparator78.thenComparing(strComparator79);
        boolean boolean81 = strComparator76.equals((java.lang.Object) strComparator80);
        java.lang.Object[] objArray83 = new java.lang.Object[] { '4', strComparator73, strComparator76, 0.0d };
        generator68.setArrays(objArray83);
        generator65.setArrays(objArray83);
        generator37.setArrays(objArray83);
        generator36.setArrays(objArray83);
        generator11.setArrays(objArray83);
        generator0.setArrays(objArray83);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter90 = org.mockito.cglib.util.ParallelSorter.create(objArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test2381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2381");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = strComparator0.reversed();
        java.util.Comparator<java.lang.String> strComparator4 = strComparator3.reversed();
        java.util.Comparator<java.lang.String> strComparator5 = strComparator4.reversed();
        java.util.Comparator<java.lang.String> strComparator6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Comparator<java.lang.String> strComparator7 = strComparator4.thenComparing(strComparator6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
    }

    @Test
    public void test2382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2382");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        java.lang.ClassLoader classLoader15 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        boolean boolean19 = generator16.getAttemptLoad();
        boolean boolean20 = generator16.getUseCache();
        generator16.setAttemptLoad(true);
        generator16.setUseCache(true);
        generator16.setUseCache(false);
        boolean boolean27 = generator16.getUseCache();
        java.lang.ClassLoader classLoader28 = generator16.getClassLoader();
        generator0.setClassLoader(classLoader28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        boolean boolean34 = generator31.getAttemptLoad();
        boolean boolean35 = generator31.getUseCache();
        generator31.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator31.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator31.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader41 = null;
        generator40.setClassLoader(classLoader41);
        boolean boolean43 = generator40.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator40.getStrategy();
        java.lang.ClassLoader classLoader45 = generator40.getClassLoader();
        generator40.setUseCache(false);
        boolean boolean48 = generator40.getUseCache();
        generator40.setUseCache(false);
        boolean boolean51 = generator40.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator52.setUseCache(true);
        boolean boolean55 = generator52.getAttemptLoad();
        java.lang.ClassLoader classLoader56 = null;
        generator52.setClassLoader(classLoader56);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator52.getNamingPolicy();
        boolean boolean59 = generator52.getUseCache();
        java.lang.Object[] objArray60 = new java.lang.Object[] {};
        generator52.setArrays(objArray60);
        generator40.setArrays(objArray60);
        generator31.setArrays(objArray60);
        generator0.setArrays(objArray60);
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean66 = generator65.getAttemptLoad();
        java.lang.ClassLoader classLoader67 = generator65.getClassLoader();
        java.lang.ClassLoader classLoader68 = generator65.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator69 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator70 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator70.setUseCache(true);
        boolean boolean73 = generator70.getAttemptLoad();
        boolean boolean74 = generator70.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator70.getStrategy();
        generator69.setStrategy(generatorStrategy75);
        org.mockito.cglib.util.ParallelSorter.Generator generator77 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator77.setUseCache(true);
        boolean boolean80 = generator77.getAttemptLoad();
        boolean boolean81 = generator77.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator77.getStrategy();
        generator69.setStrategy(generatorStrategy82);
        generator65.setStrategy(generatorStrategy82);
        org.mockito.cglib.util.ParallelSorter.Generator generator85 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = generator85.getStrategy();
        generator65.setStrategy(generatorStrategy86);
        generator0.setStrategy(generatorStrategy86);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(generatorStrategy86);
    }

    @Test
    public void test2383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2383");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader13 = null;
        generator12.setClassLoader(classLoader13);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        boolean boolean25 = strComparator20.equals((java.lang.Object) strComparator24);
        java.lang.Object[] objArray27 = new java.lang.Object[] { '4', strComparator17, strComparator20, 0.0d };
        generator12.setArrays(objArray27);
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader30 = null;
        generator29.setClassLoader(classLoader30);
        java.lang.ClassLoader classLoader32 = null;
        generator29.setClassLoader(classLoader32);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator36.setUseCache(true);
        boolean boolean39 = generator36.getAttemptLoad();
        boolean boolean40 = generator36.getUseCache();
        generator36.setAttemptLoad(true);
        generator36.setUseCache(true);
        generator36.setAttemptLoad(true);
        generator36.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator36.getStrategy();
        java.lang.ClassLoader classLoader50 = generator36.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator36.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator36.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy52);
        java.lang.ClassLoader classLoader54 = generator12.getClassLoader();
        generator0.setClassLoader(classLoader54);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator0.getNamingPolicy();
        boolean boolean57 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor58 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test2384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2384");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        generator6.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator13.getStrategy();
        generator6.setStrategy(generatorStrategy14);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        java.lang.ClassLoader classLoader19 = generator16.getClassLoader();
        generator6.setClassLoader(classLoader19);
        generator0.setClassLoader(classLoader19);
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader24 = null;
        generator23.setClassLoader(classLoader24);
        java.lang.ClassLoader classLoader26 = null;
        generator23.setClassLoader(classLoader26);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator23.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy28);
        boolean boolean30 = generator22.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator22.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator32.setUseCache(true);
        boolean boolean35 = generator32.getAttemptLoad();
        boolean boolean36 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator32.getStrategy();
        generator22.setStrategy(generatorStrategy37);
        generator0.setStrategy(generatorStrategy37);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = strComparator46.thenComparing(strComparator47);
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = strComparator49.thenComparing(strComparator50);
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = strComparator52.thenComparing(strComparator53);
        boolean boolean55 = strComparator50.equals((java.lang.Object) strComparator54);
        java.lang.Object[] objArray57 = new java.lang.Object[] { '4', strComparator47, strComparator50, 0.0d };
        generator42.setArrays(objArray57);
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator59.setUseCache(true);
        boolean boolean62 = generator59.getAttemptLoad();
        boolean boolean63 = generator59.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator59.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator59.getNamingPolicy();
        java.lang.ClassLoader classLoader66 = generator59.getClassLoader();
        generator42.setClassLoader(classLoader66);
        java.lang.ClassLoader classLoader68 = generator42.getClassLoader();
        generator0.setClassLoader(classLoader68);
        org.mockito.asm.ClassVisitor classVisitor70 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(classLoader68);
    }

    @Test
    public void test2385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2385");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader10 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader11 = generator0.getClassLoader();
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator14.setUseCache(true);
        boolean boolean17 = generator14.getAttemptLoad();
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        generator14.setUseCache(true);
        generator14.setAttemptLoad(true);
        boolean boolean25 = generator14.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator14.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator28.setUseCache(true);
        boolean boolean31 = generator28.getAttemptLoad();
        boolean boolean32 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator28.getStrategy();
        generator27.setStrategy(generatorStrategy33);
        boolean boolean35 = generator27.getAttemptLoad();
        generator27.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader40 = null;
        generator39.setClassLoader(classLoader40);
        java.lang.ClassLoader classLoader42 = null;
        generator39.setClassLoader(classLoader42);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        generator38.setNamingPolicy(namingPolicy44);
        boolean boolean46 = generator38.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader48 = null;
        generator47.setClassLoader(classLoader48);
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = strComparator51.thenComparing(strComparator52);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = strComparator57.thenComparing(strComparator58);
        boolean boolean60 = strComparator55.equals((java.lang.Object) strComparator59);
        java.lang.Object[] objArray62 = new java.lang.Object[] { '4', strComparator52, strComparator55, 0.0d };
        generator47.setArrays(objArray62);
        generator38.setArrays(objArray62);
        boolean boolean65 = generator38.getAttemptLoad();
        java.lang.Object[] objArray66 = new java.lang.Object[] { generator38 };
        generator27.setArrays(objArray66);
        generator14.setArrays(objArray66);
        generator0.setArrays(objArray66);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter70 = org.mockito.cglib.util.ParallelSorter.create(objArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.util.ParallelSorter$Generator is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objArray66);
    }

    @Test
    public void test2386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2386");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator4.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator3.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader21 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        generator22.setUseCache(true);
        generator22.setAttemptLoad(true);
        generator22.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator22.getStrategy();
        generator0.setStrategy(generatorStrategy35);
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator37.setUseCache(true);
        boolean boolean40 = generator37.getAttemptLoad();
        boolean boolean41 = generator37.getUseCache();
        generator37.setAttemptLoad(true);
        generator37.setUseCache(true);
        generator37.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator49.setUseCache(true);
        boolean boolean52 = generator49.getAttemptLoad();
        boolean boolean53 = generator49.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator49.getStrategy();
        generator48.setStrategy(generatorStrategy54);
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator56.setUseCache(true);
        boolean boolean59 = generator56.getAttemptLoad();
        boolean boolean60 = generator56.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator56.getStrategy();
        generator48.setStrategy(generatorStrategy61);
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator63.setUseCache(true);
        boolean boolean66 = generator63.getAttemptLoad();
        boolean boolean67 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator63.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator69 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator69.setUseCache(true);
        boolean boolean72 = generator69.getAttemptLoad();
        boolean boolean73 = generator69.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator69.getStrategy();
        generator63.setStrategy(generatorStrategy74);
        generator48.setStrategy(generatorStrategy74);
        generator37.setStrategy(generatorStrategy74);
        generator0.setStrategy(generatorStrategy74);
        java.lang.ClassLoader classLoader79 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertNotNull(classLoader79);
    }

    @Test
    public void test2387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2387");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        java.lang.ClassLoader classLoader13 = generator10.getClassLoader();
        generator0.setClassLoader(classLoader13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader25 = null;
        generator24.setClassLoader(classLoader25);
        java.lang.ClassLoader classLoader27 = null;
        generator24.setClassLoader(classLoader27);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator24.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        java.lang.ClassLoader classLoader34 = generator31.getClassLoader();
        generator16.setClassLoader(classLoader34);
        generator16.setAttemptLoad(false);
        generator16.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator16.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy40);
        boolean boolean42 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader45 = null;
        generator44.setClassLoader(classLoader45);
        java.lang.ClassLoader classLoader47 = null;
        generator44.setClassLoader(classLoader47);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator44.getNamingPolicy();
        generator43.setNamingPolicy(namingPolicy49);
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader52 = null;
        generator51.setClassLoader(classLoader52);
        java.lang.ClassLoader classLoader54 = null;
        generator51.setClassLoader(classLoader54);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator51.getNamingPolicy();
        generator43.setNamingPolicy(namingPolicy56);
        generator43.setAttemptLoad(false);
        generator43.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator62.setUseCache(true);
        boolean boolean65 = generator62.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator62.getStrategy();
        generator43.setStrategy(generatorStrategy66);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator43.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator69 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator70 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator70.setUseCache(true);
        boolean boolean73 = generator70.getAttemptLoad();
        boolean boolean74 = generator70.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator70.getStrategy();
        generator69.setStrategy(generatorStrategy75);
        org.mockito.cglib.util.ParallelSorter.Generator generator77 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator77.setUseCache(true);
        boolean boolean80 = generator77.getAttemptLoad();
        boolean boolean81 = generator77.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator77.getStrategy();
        generator69.setStrategy(generatorStrategy82);
        generator69.setAttemptLoad(false);
        boolean boolean86 = generator69.getUseCache();
        java.lang.ClassLoader classLoader87 = generator69.getClassLoader();
        boolean boolean88 = generator69.getUseCache();
        boolean boolean89 = generator69.getAttemptLoad();
        java.lang.ClassLoader classLoader90 = generator69.getClassLoader();
        generator43.setClassLoader(classLoader90);
        generator0.setClassLoader(classLoader90);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(classLoader90);
    }

    @Test
    public void test2388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2388");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator7.setUseCache(true);
        boolean boolean10 = generator7.getAttemptLoad();
        boolean boolean11 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator7.getStrategy();
        generator6.setStrategy(generatorStrategy12);
        generator0.setStrategy(generatorStrategy12);
        generator0.setAttemptLoad(true);
        boolean boolean17 = generator0.getAttemptLoad();
        boolean boolean18 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        java.lang.ClassLoader classLoader23 = null;
        generator19.setClassLoader(classLoader23);
        generator19.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator19.getNamingPolicy();
        generator19.setUseCache(false);
        boolean boolean30 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator19.getStrategy();
        generator0.setStrategy(generatorStrategy31);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter33 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(generatorStrategy31);
    }

    @Test
    public void test2389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2389");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        boolean boolean28 = strComparator23.equals((java.lang.Object) strComparator27);
        java.lang.Object[] objArray30 = new java.lang.Object[] { '4', strComparator20, strComparator23, 0.0d };
        generator15.setArrays(objArray30);
        generator0.setArrays(objArray30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator0.getStrategy();
        boolean boolean34 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter39 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
    }

    @Test
    public void test2390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2390");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
    }

    @Test
    public void test2391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2391");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        java.lang.ClassLoader classLoader13 = generator10.getClassLoader();
        generator0.setClassLoader(classLoader13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader30 = null;
        generator29.setClassLoader(classLoader30);
        java.lang.ClassLoader classLoader32 = null;
        generator29.setClassLoader(classLoader32);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        generator28.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator28.getNamingPolicy();
        generator28.setUseCache(false);
        boolean boolean39 = generator28.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator28.getNamingPolicy();
        generator28.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator28.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy43);
        generator15.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator47.setUseCache(true);
        boolean boolean50 = generator47.getAttemptLoad();
        boolean boolean51 = generator47.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator47.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator53.setUseCache(true);
        boolean boolean56 = generator53.getAttemptLoad();
        boolean boolean57 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator53.getStrategy();
        generator47.setStrategy(generatorStrategy58);
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader62 = null;
        generator61.setClassLoader(classLoader62);
        java.lang.ClassLoader classLoader64 = null;
        generator61.setClassLoader(classLoader64);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator61.getNamingPolicy();
        generator60.setNamingPolicy(namingPolicy66);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator60.getNamingPolicy();
        generator60.setUseCache(false);
        boolean boolean71 = generator60.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator60.getNamingPolicy();
        generator60.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator60.getNamingPolicy();
        generator47.setNamingPolicy(namingPolicy75);
        generator15.setNamingPolicy(namingPolicy75);
        generator0.setNamingPolicy(namingPolicy75);
        boolean boolean79 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter80 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test2392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2392");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        boolean boolean5 = generator0.getAttemptLoad();
        boolean boolean6 = generator0.getUseCache();
        java.lang.ClassLoader classLoader7 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        boolean boolean10 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor11 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2393");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator9.setUseCache(true);
        boolean boolean12 = generator9.getAttemptLoad();
        java.lang.ClassLoader classLoader13 = null;
        generator9.setClassLoader(classLoader13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader17 = null;
        generator16.setClassLoader(classLoader17);
        java.lang.ClassLoader classLoader19 = null;
        generator16.setClassLoader(classLoader19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader24 = null;
        generator23.setClassLoader(classLoader24);
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = strComparator27.thenComparing(strComparator28);
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = strComparator30.thenComparing(strComparator31);
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = strComparator33.thenComparing(strComparator34);
        boolean boolean36 = strComparator31.equals((java.lang.Object) strComparator35);
        java.lang.Object[] objArray38 = new java.lang.Object[] { '4', strComparator28, strComparator31, 0.0d };
        generator23.setArrays(objArray38);
        java.lang.ClassLoader classLoader40 = null;
        generator23.setClassLoader(classLoader40);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        generator23.setNamingPolicy(namingPolicy47);
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator50.setUseCache(true);
        boolean boolean53 = generator50.getAttemptLoad();
        boolean boolean54 = generator50.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator50.getStrategy();
        generator49.setStrategy(generatorStrategy55);
        generator23.setStrategy(generatorStrategy55);
        generator15.setStrategy(generatorStrategy55);
        generator9.setStrategy(generatorStrategy55);
        generator0.setStrategy(generatorStrategy55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        java.lang.Class<?> wildcardClass64 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test2394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2394");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        java.lang.ClassLoader classLoader13 = generator10.getClassLoader();
        generator0.setClassLoader(classLoader13);
        boolean boolean15 = generator0.getAttemptLoad();
        boolean boolean16 = generator0.getUseCache();
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader21 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader22 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor23 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader22);
    }

    @Test
    public void test2395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2395");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy24);
        boolean boolean26 = generator0.getUseCache();
        java.lang.ClassLoader classLoader27 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        boolean boolean39 = generator35.getUseCache();
        generator35.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator42.getStrategy();
        generator35.setStrategy(generatorStrategy43);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator45.setUseCache(true);
        java.lang.ClassLoader classLoader48 = generator45.getClassLoader();
        generator35.setClassLoader(classLoader48);
        generator29.setClassLoader(classLoader48);
        java.lang.ClassLoader classLoader51 = generator29.getClassLoader();
        generator0.setClassLoader(classLoader51);
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader54 = null;
        generator53.setClassLoader(classLoader54);
        boolean boolean56 = generator53.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator53.getStrategy();
        generator53.setUseCache(false);
        java.lang.ClassLoader classLoader60 = generator53.getClassLoader();
        generator0.setClassLoader(classLoader60);
        boolean boolean62 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader65 = generator0.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter66 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(classLoader65);
    }

    @Test
    public void test2396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2396");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator12.getStrategy();
        generator11.setStrategy(generatorStrategy17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        boolean boolean23 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator19.getStrategy();
        generator11.setStrategy(generatorStrategy24);
        generator8.setStrategy(generatorStrategy24);
        generator0.setStrategy(generatorStrategy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = strComparator35.thenComparing(strComparator36);
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = strComparator38.thenComparing(strComparator39);
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = strComparator41.thenComparing(strComparator42);
        boolean boolean44 = strComparator39.equals((java.lang.Object) strComparator43);
        java.lang.Object[] objArray46 = new java.lang.Object[] { '4', strComparator36, strComparator39, 0.0d };
        generator31.setArrays(objArray46);
        generator28.setArrays(objArray46);
        generator0.setArrays(objArray46);
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader51 = null;
        generator50.setClassLoader(classLoader51);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = strComparator57.thenComparing(strComparator58);
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = strComparator60.thenComparing(strComparator61);
        boolean boolean63 = strComparator58.equals((java.lang.Object) strComparator62);
        java.lang.Object[] objArray65 = new java.lang.Object[] { '4', strComparator55, strComparator58, 0.0d };
        generator50.setArrays(objArray65);
        java.lang.ClassLoader classLoader67 = null;
        generator50.setClassLoader(classLoader67);
        org.mockito.cglib.util.ParallelSorter.Generator generator69 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader70 = null;
        generator69.setClassLoader(classLoader70);
        java.lang.ClassLoader classLoader72 = null;
        generator69.setClassLoader(classLoader72);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator69.getNamingPolicy();
        generator50.setNamingPolicy(namingPolicy74);
        org.mockito.cglib.util.ParallelSorter.Generator generator76 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator77 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator77.setUseCache(true);
        boolean boolean80 = generator77.getAttemptLoad();
        boolean boolean81 = generator77.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator77.getStrategy();
        generator76.setStrategy(generatorStrategy82);
        generator50.setStrategy(generatorStrategy82);
        generator0.setStrategy(generatorStrategy82);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(generatorStrategy82);
    }

    @Test
    public void test2397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2397");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = strComparator0.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator2 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator2.getStrategy();
        java.lang.ClassLoader classLoader4 = generator2.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = null;
        generator2.setStrategy(generatorStrategy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator2.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator9.setUseCache(true);
        boolean boolean12 = generator9.getAttemptLoad();
        boolean boolean13 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy14);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        boolean boolean19 = generator16.getAttemptLoad();
        boolean boolean20 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator16.getStrategy();
        generator8.setStrategy(generatorStrategy21);
        generator8.setAttemptLoad(false);
        boolean boolean25 = generator8.getUseCache();
        java.lang.ClassLoader classLoader26 = generator8.getClassLoader();
        generator2.setClassLoader(classLoader26);
        boolean boolean28 = strComparator1.equals((java.lang.Object) classLoader26);
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2398");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator5.setUseCache(true);
        boolean boolean8 = generator5.getAttemptLoad();
        boolean boolean9 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator5.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator5.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator5.getStrategy();
        generator0.setStrategy(generatorStrategy12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator0.getStrategy();
        boolean boolean15 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        boolean boolean19 = generator16.getAttemptLoad();
        boolean boolean20 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator16.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator22.getStrategy();
        generator16.setStrategy(generatorStrategy27);
        java.lang.ClassLoader classLoader29 = generator16.getClassLoader();
        generator16.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator32.setUseCache(true);
        boolean boolean35 = generator32.getAttemptLoad();
        boolean boolean36 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator32.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator38.setUseCache(true);
        boolean boolean41 = generator38.getAttemptLoad();
        boolean boolean42 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator38.getStrategy();
        generator32.setStrategy(generatorStrategy43);
        java.lang.ClassLoader classLoader45 = generator32.getClassLoader();
        generator16.setClassLoader(classLoader45);
        generator0.setClassLoader(classLoader45);
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader50 = null;
        generator49.setClassLoader(classLoader50);
        java.lang.ClassLoader classLoader52 = null;
        generator49.setClassLoader(classLoader52);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator49.getNamingPolicy();
        generator48.setNamingPolicy(namingPolicy54);
        boolean boolean56 = generator48.getUseCache();
        boolean boolean57 = generator48.getUseCache();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = strComparator58.thenComparing(strComparator59);
        java.util.Comparator<java.lang.String> strComparator61 = strComparator58.reversed();
        java.util.Comparator<java.lang.String> strComparator62 = strComparator61.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator64 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader65 = null;
        generator64.setClassLoader(classLoader65);
        java.lang.ClassLoader classLoader67 = null;
        generator64.setClassLoader(classLoader67);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator64.getNamingPolicy();
        generator63.setNamingPolicy(namingPolicy69);
        boolean boolean71 = strComparator61.equals((java.lang.Object) generator63);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator63.getStrategy();
        generator48.setStrategy(generatorStrategy72);
        boolean boolean74 = generator48.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator48.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator48.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator77 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader78 = null;
        generator77.setClassLoader(classLoader78);
        java.util.Comparator<java.lang.String> strComparator81 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator82 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator83 = strComparator81.thenComparing(strComparator82);
        java.util.Comparator<java.lang.String> strComparator84 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator85 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator86 = strComparator84.thenComparing(strComparator85);
        java.util.Comparator<java.lang.String> strComparator87 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator88 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator89 = strComparator87.thenComparing(strComparator88);
        boolean boolean90 = strComparator85.equals((java.lang.Object) strComparator89);
        java.lang.Object[] objArray92 = new java.lang.Object[] { '4', strComparator82, strComparator85, 0.0d };
        generator77.setArrays(objArray92);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy94 = generator77.getStrategy();
        generator48.setStrategy(generatorStrategy94);
        java.lang.ClassLoader classLoader96 = generator48.getClassLoader();
        generator0.setClassLoader(classLoader96);
        java.lang.ClassLoader classLoader98 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy99 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertNotNull(strComparator84);
        org.junit.Assert.assertNotNull(strComparator85);
        org.junit.Assert.assertNotNull(strComparator86);
        org.junit.Assert.assertNotNull(strComparator87);
        org.junit.Assert.assertNotNull(strComparator88);
        org.junit.Assert.assertNotNull(strComparator89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy94);
        org.junit.Assert.assertNotNull(classLoader96);
        org.junit.Assert.assertNotNull(classLoader98);
        org.junit.Assert.assertNotNull(generatorStrategy99);
    }

    @Test
    public void test2399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2399");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator12.getStrategy();
        generator11.setStrategy(generatorStrategy17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        boolean boolean23 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator19.getStrategy();
        generator11.setStrategy(generatorStrategy24);
        generator8.setStrategy(generatorStrategy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean28 = generator27.getAttemptLoad();
        java.lang.ClassLoader classLoader29 = generator27.getClassLoader();
        generator8.setClassLoader(classLoader29);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        boolean boolean34 = generator31.getAttemptLoad();
        boolean boolean35 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator31.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator31.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator39.setUseCache(true);
        boolean boolean42 = generator39.getAttemptLoad();
        boolean boolean43 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator39.getStrategy();
        generator38.setStrategy(generatorStrategy44);
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator46.setUseCache(true);
        boolean boolean49 = generator46.getAttemptLoad();
        boolean boolean50 = generator46.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator46.getStrategy();
        generator38.setStrategy(generatorStrategy51);
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader54 = null;
        generator53.setClassLoader(classLoader54);
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = strComparator57.thenComparing(strComparator58);
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = strComparator60.thenComparing(strComparator61);
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = strComparator63.thenComparing(strComparator64);
        boolean boolean66 = strComparator61.equals((java.lang.Object) strComparator65);
        java.lang.Object[] objArray68 = new java.lang.Object[] { '4', strComparator58, strComparator61, 0.0d };
        generator53.setArrays(objArray68);
        generator38.setArrays(objArray68);
        generator31.setArrays(objArray68);
        generator8.setArrays(objArray68);
        generator0.setArrays(objArray68);
        java.lang.ClassLoader classLoader74 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader75 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator0.getStrategy();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(generatorStrategy76);
    }

    @Test
    public void test2400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2400");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        java.lang.ClassLoader classLoader5 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean8 = generator0.getUseCache();
        generator0.setUseCache(false);
        boolean boolean11 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = null;
        generator12.setClassLoader(classLoader16);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator12.getNamingPolicy();
        boolean boolean19 = generator12.getUseCache();
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        generator12.setArrays(objArray20);
        generator0.setArrays(objArray20);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter24 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No arrays specified to sort");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(namingPolicy23);
    }

    @Test
    public void test2401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2401");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        boolean boolean4 = generator0.getUseCache();
        boolean boolean5 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test2402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2402");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        boolean boolean19 = generator0.getAttemptLoad();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = strComparator20.thenComparing(strComparator21);
        java.util.Comparator<java.lang.String> strComparator23 = strComparator20.reversed();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator23.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader27 = null;
        generator26.setClassLoader(classLoader27);
        java.lang.ClassLoader classLoader29 = null;
        generator26.setClassLoader(classLoader29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator26.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy31);
        boolean boolean33 = strComparator23.equals((java.lang.Object) generator25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator25.getStrategy();
        generator0.setStrategy(generatorStrategy34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader40 = null;
        generator39.setClassLoader(classLoader40);
        java.lang.ClassLoader classLoader42 = null;
        generator39.setClassLoader(classLoader42);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        generator38.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator38.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator47.setUseCache(true);
        boolean boolean50 = generator47.getAttemptLoad();
        boolean boolean51 = generator47.getUseCache();
        generator47.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator54.getStrategy();
        generator47.setStrategy(generatorStrategy55);
        generator38.setStrategy(generatorStrategy55);
        java.lang.ClassLoader classLoader58 = generator38.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader61 = null;
        generator60.setClassLoader(classLoader61);
        java.lang.ClassLoader classLoader63 = null;
        generator60.setClassLoader(classLoader63);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator60.getNamingPolicy();
        generator59.setNamingPolicy(namingPolicy65);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator59.getNamingPolicy();
        generator59.setUseCache(false);
        boolean boolean70 = generator59.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator59.getNamingPolicy();
        generator59.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator59.getNamingPolicy();
        generator38.setNamingPolicy(namingPolicy74);
        generator0.setNamingPolicy(namingPolicy74);
        java.lang.Class<?> wildcardClass77 = generator0.getClass();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test2403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2403");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        boolean boolean4 = generator0.getUseCache();
        boolean boolean5 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor8 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2404");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        boolean boolean15 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator18.setUseCache(true);
        boolean boolean21 = generator18.getAttemptLoad();
        java.lang.ClassLoader classLoader22 = null;
        generator18.setClassLoader(classLoader22);
        boolean boolean24 = generator18.getUseCache();
        boolean boolean25 = generator18.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator26.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator30.setUseCache(true);
        boolean boolean33 = generator30.getAttemptLoad();
        boolean boolean34 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator30.getStrategy();
        generator29.setStrategy(generatorStrategy35);
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator37.setUseCache(true);
        boolean boolean40 = generator37.getAttemptLoad();
        boolean boolean41 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator37.getStrategy();
        generator29.setStrategy(generatorStrategy42);
        generator26.setStrategy(generatorStrategy42);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean46 = generator45.getAttemptLoad();
        java.lang.ClassLoader classLoader47 = generator45.getClassLoader();
        generator26.setClassLoader(classLoader47);
        generator18.setClassLoader(classLoader47);
        java.lang.ClassLoader classLoader50 = generator18.getClassLoader();
        generator0.setClassLoader(classLoader50);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader50);
    }

    @Test
    public void test2405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2405");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader9 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator10.setStrategy(generatorStrategy16);
        boolean boolean18 = generator10.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader21 = null;
        generator20.setClassLoader(classLoader21);
        java.lang.ClassLoader classLoader23 = null;
        generator20.setClassLoader(classLoader23);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator20.getNamingPolicy();
        generator19.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.lang.ClassLoader classLoader30 = null;
        generator27.setClassLoader(classLoader30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator19.setNamingPolicy(namingPolicy32);
        generator10.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        java.lang.ClassLoader classLoader40 = null;
        generator37.setClassLoader(classLoader40);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator37.getNamingPolicy();
        generator36.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator44.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator48.setUseCache(true);
        boolean boolean51 = generator48.getAttemptLoad();
        boolean boolean52 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator48.getStrategy();
        generator47.setStrategy(generatorStrategy53);
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator55.setUseCache(true);
        boolean boolean58 = generator55.getAttemptLoad();
        boolean boolean59 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator55.getStrategy();
        generator47.setStrategy(generatorStrategy60);
        generator44.setStrategy(generatorStrategy60);
        generator36.setStrategy(generatorStrategy60);
        org.mockito.cglib.util.ParallelSorter.Generator generator64 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader65 = null;
        generator64.setClassLoader(classLoader65);
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader68 = null;
        generator67.setClassLoader(classLoader68);
        java.util.Comparator<java.lang.String> strComparator71 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator72 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator73 = strComparator71.thenComparing(strComparator72);
        java.util.Comparator<java.lang.String> strComparator74 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = strComparator74.thenComparing(strComparator75);
        java.util.Comparator<java.lang.String> strComparator77 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator78 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator79 = strComparator77.thenComparing(strComparator78);
        boolean boolean80 = strComparator75.equals((java.lang.Object) strComparator79);
        java.lang.Object[] objArray82 = new java.lang.Object[] { '4', strComparator72, strComparator75, 0.0d };
        generator67.setArrays(objArray82);
        generator64.setArrays(objArray82);
        generator36.setArrays(objArray82);
        generator35.setArrays(objArray82);
        generator10.setArrays(objArray82);
        generator0.setArrays(objArray82);
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy90 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader91 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy89);
        org.junit.Assert.assertNotNull(namingPolicy90);
        org.junit.Assert.assertNotNull(classLoader91);
    }

    @Test
    public void test2406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2406");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        boolean boolean6 = generator0.getUseCache();
        boolean boolean7 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader12 = null;
        generator11.setClassLoader(classLoader12);
        java.lang.ClassLoader classLoader14 = null;
        generator11.setClassLoader(classLoader14);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator11.getNamingPolicy();
        generator10.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator10.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        boolean boolean23 = generator19.getUseCache();
        generator19.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator26.getStrategy();
        generator19.setStrategy(generatorStrategy27);
        generator10.setStrategy(generatorStrategy27);
        java.lang.ClassLoader classLoader30 = generator10.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader33 = null;
        generator32.setClassLoader(classLoader33);
        java.lang.ClassLoader classLoader35 = null;
        generator32.setClassLoader(classLoader35);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator32.getNamingPolicy();
        generator31.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator31.getNamingPolicy();
        generator31.setUseCache(false);
        boolean boolean42 = generator31.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator31.getNamingPolicy();
        generator31.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator31.getNamingPolicy();
        generator10.setNamingPolicy(namingPolicy46);
        generator0.setNamingPolicy(namingPolicy46);
        java.lang.ClassLoader classLoader49 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor50 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(classLoader49);
    }

    @Test
    public void test2407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2407");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        boolean boolean6 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = null;
        generator0.setNamingPolicy(namingPolicy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator11.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator11.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy22);
        generator11.setNamingPolicy(namingPolicy22);
        generator0.setNamingPolicy(namingPolicy22);
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy22);
    }

    @Test
    public void test2408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2408");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        java.lang.ClassLoader classLoader13 = generator10.getClassLoader();
        generator0.setClassLoader(classLoader13);
        generator0.setUseCache(false);
        java.lang.Object[] objArray17 = null;
        generator0.setArrays(objArray17);
        boolean boolean19 = generator0.getAttemptLoad();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.reverseOrder();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = strComparator20.equals((java.lang.Object) generator21);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator26.setUseCache(true);
        boolean boolean29 = generator26.getAttemptLoad();
        boolean boolean30 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator26.getStrategy();
        generator25.setStrategy(generatorStrategy31);
        boolean boolean33 = generator25.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader36 = null;
        generator35.setClassLoader(classLoader36);
        java.lang.ClassLoader classLoader38 = null;
        generator35.setClassLoader(classLoader38);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator35.getNamingPolicy();
        generator34.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        generator34.setNamingPolicy(namingPolicy47);
        generator25.setNamingPolicy(namingPolicy47);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator25.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator25.getNamingPolicy();
        generator21.setNamingPolicy(namingPolicy51);
        generator0.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator54.setUseCache(true);
        boolean boolean57 = generator54.getAttemptLoad();
        boolean boolean58 = generator54.getUseCache();
        generator54.setAttemptLoad(true);
        generator54.setUseCache(true);
        generator54.setUseCache(false);
        boolean boolean65 = generator54.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator54.getNamingPolicy();
        boolean boolean67 = generator54.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator68 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean69 = generator68.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator68.getStrategy();
        java.lang.ClassLoader classLoader71 = generator68.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator68.getStrategy();
        generator54.setStrategy(generatorStrategy72);
        org.mockito.cglib.util.ParallelSorter.Generator generator74 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader75 = null;
        generator74.setClassLoader(classLoader75);
        java.lang.ClassLoader classLoader77 = null;
        generator74.setClassLoader(classLoader77);
        generator74.setAttemptLoad(true);
        boolean boolean81 = generator74.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator74.getNamingPolicy();
        java.lang.ClassLoader classLoader83 = generator74.getClassLoader();
        generator54.setClassLoader(classLoader83);
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator54.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = generator54.getStrategy();
        generator0.setStrategy(generatorStrategy86);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertNotNull(namingPolicy85);
        org.junit.Assert.assertNotNull(generatorStrategy86);
    }

    @Test
    public void test2409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2409");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator5.setUseCache(true);
        boolean boolean8 = generator5.getAttemptLoad();
        boolean boolean9 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator5.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader13 = null;
        generator12.setClassLoader(classLoader13);
        java.lang.ClassLoader classLoader15 = null;
        generator12.setClassLoader(classLoader15);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy17);
        boolean boolean19 = generator11.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader21 = null;
        generator20.setClassLoader(classLoader21);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = strComparator27.thenComparing(strComparator28);
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = strComparator30.thenComparing(strComparator31);
        boolean boolean33 = strComparator28.equals((java.lang.Object) strComparator32);
        java.lang.Object[] objArray35 = new java.lang.Object[] { '4', strComparator25, strComparator28, 0.0d };
        generator20.setArrays(objArray35);
        generator11.setArrays(objArray35);
        generator5.setArrays(objArray35);
        generator0.setArrays(objArray35);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy42);
    }

    @Test
    public void test2410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2410");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = strComparator0.reversed();
        java.util.Comparator<java.lang.String> strComparator4 = strComparator3.reversed();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator7 = strComparator5.thenComparing(strComparator6);
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator10 = strComparator8.thenComparing(strComparator9);
        java.util.Comparator<java.lang.String> strComparator11 = strComparator7.thenComparing(strComparator8);
        boolean boolean13 = strComparator8.equals((java.lang.Object) "");
        java.util.Comparator<java.lang.String> strComparator14 = strComparator8.reversed();
        java.util.Comparator<java.lang.String> strComparator15 = strComparator3.thenComparing(strComparator14);
        java.lang.Object obj16 = null;
        boolean boolean17 = strComparator14.equals(obj16);
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2411");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator5.setUseCache(true);
        boolean boolean8 = generator5.getAttemptLoad();
        boolean boolean9 = generator5.getUseCache();
        generator5.setAttemptLoad(true);
        generator5.setUseCache(true);
        generator5.setUseCache(false);
        generator5.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean19 = generator18.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator18.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader23 = null;
        generator22.setClassLoader(classLoader23);
        java.lang.ClassLoader classLoader25 = null;
        generator22.setClassLoader(classLoader25);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator22.getNamingPolicy();
        generator21.setNamingPolicy(namingPolicy27);
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader30 = null;
        generator29.setClassLoader(classLoader30);
        java.lang.ClassLoader classLoader32 = null;
        generator29.setClassLoader(classLoader32);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        generator21.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator36.setUseCache(true);
        java.lang.ClassLoader classLoader39 = generator36.getClassLoader();
        generator21.setClassLoader(classLoader39);
        generator18.setClassLoader(classLoader39);
        generator18.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator45.setUseCache(true);
        boolean boolean48 = generator45.getAttemptLoad();
        boolean boolean49 = generator45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator45.getStrategy();
        generator44.setStrategy(generatorStrategy50);
        boolean boolean52 = generator44.getAttemptLoad();
        generator44.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader57 = null;
        generator56.setClassLoader(classLoader57);
        java.lang.ClassLoader classLoader59 = null;
        generator56.setClassLoader(classLoader59);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator56.getNamingPolicy();
        generator55.setNamingPolicy(namingPolicy61);
        boolean boolean63 = generator55.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator64 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader65 = null;
        generator64.setClassLoader(classLoader65);
        java.util.Comparator<java.lang.String> strComparator68 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator69 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator70 = strComparator68.thenComparing(strComparator69);
        java.util.Comparator<java.lang.String> strComparator71 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator72 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator73 = strComparator71.thenComparing(strComparator72);
        java.util.Comparator<java.lang.String> strComparator74 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = strComparator74.thenComparing(strComparator75);
        boolean boolean77 = strComparator72.equals((java.lang.Object) strComparator76);
        java.lang.Object[] objArray79 = new java.lang.Object[] { '4', strComparator69, strComparator72, 0.0d };
        generator64.setArrays(objArray79);
        generator55.setArrays(objArray79);
        boolean boolean82 = generator55.getAttemptLoad();
        java.lang.Object[] objArray83 = new java.lang.Object[] { generator55 };
        generator44.setArrays(objArray83);
        generator18.setArrays(objArray83);
        generator5.setArrays(objArray83);
        generator0.setArrays(objArray83);
        java.lang.ClassLoader classLoader88 = generator0.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter89 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.util.ParallelSorter$Generator is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertNotNull(classLoader88);
    }

    @Test
    public void test2412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2412");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        boolean boolean28 = strComparator23.equals((java.lang.Object) strComparator27);
        java.lang.Object[] objArray30 = new java.lang.Object[] { '4', strComparator20, strComparator23, 0.0d };
        generator15.setArrays(objArray30);
        generator0.setArrays(objArray30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator0.getStrategy();
        boolean boolean34 = generator0.getUseCache();
        boolean boolean35 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter36 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test2413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2413");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = strComparator0.reversed();
        java.util.Comparator<java.lang.String> strComparator4 = strComparator3.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader7 = null;
        generator6.setClassLoader(classLoader7);
        java.lang.ClassLoader classLoader9 = null;
        generator6.setClassLoader(classLoader9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator6.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy11);
        boolean boolean13 = strComparator3.equals((java.lang.Object) generator5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator5.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator5.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator24.setUseCache(true);
        boolean boolean27 = generator24.getAttemptLoad();
        boolean boolean28 = generator24.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator24.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator30.setUseCache(true);
        boolean boolean33 = generator30.getAttemptLoad();
        boolean boolean34 = generator30.getUseCache();
        generator30.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator37.getStrategy();
        generator30.setStrategy(generatorStrategy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator40.setUseCache(true);
        java.lang.ClassLoader classLoader43 = generator40.getClassLoader();
        generator30.setClassLoader(classLoader43);
        generator24.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader46 = generator24.getClassLoader();
        generator16.setClassLoader(classLoader46);
        boolean boolean48 = generator16.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator16.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy49);
        generator5.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(namingPolicy49);
    }

    @Test
    public void test2414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2414");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy14);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader17 = null;
        generator16.setClassLoader(classLoader17);
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = strComparator20.thenComparing(strComparator21);
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = strComparator23.thenComparing(strComparator24);
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = strComparator26.thenComparing(strComparator27);
        boolean boolean29 = strComparator24.equals((java.lang.Object) strComparator28);
        java.lang.Object[] objArray31 = new java.lang.Object[] { '4', strComparator21, strComparator24, 0.0d };
        generator16.setArrays(objArray31);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy38);
        java.lang.ClassLoader classLoader40 = generator16.getClassLoader();
        generator0.setClassLoader(classLoader40);
        java.lang.ClassLoader classLoader42 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor44 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
    }

    @Test
    public void test2415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2415");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader6 = null;
        generator5.setClassLoader(classLoader6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.util.Comparator<java.lang.String> strComparator12 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = strComparator12.thenComparing(strComparator13);
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = strComparator15.thenComparing(strComparator16);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        boolean boolean21 = strComparator16.equals((java.lang.Object) strComparator20);
        java.lang.Object[] objArray23 = new java.lang.Object[] { '4', strComparator13, strComparator16, 0.0d };
        generator8.setArrays(objArray23);
        generator5.setArrays(objArray23);
        generator0.setArrays(objArray23);
        org.mockito.asm.ClassVisitor classVisitor27 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test2416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2416");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getUseCache();
        boolean boolean6 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = null;
        generator0.setStrategy(generatorStrategy8);
        boolean boolean10 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader13 = null;
        generator12.setClassLoader(classLoader13);
        java.lang.ClassLoader classLoader15 = null;
        generator12.setClassLoader(classLoader15);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator26.setUseCache(true);
        java.lang.ClassLoader classLoader29 = generator26.getClassLoader();
        generator11.setClassLoader(classLoader29);
        generator11.setAttemptLoad(false);
        generator11.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator11.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator11.getStrategy();
        java.lang.ClassLoader classLoader37 = generator11.getClassLoader();
        generator0.setClassLoader(classLoader37);
        java.lang.ClassLoader classLoader39 = generator0.getClassLoader();
        java.lang.Class<?> wildcardClass40 = classLoader39.getClass();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test2417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2417");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator0.getNamingPolicy();
        boolean boolean19 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader22 = null;
        generator21.setClassLoader(classLoader22);
        java.lang.ClassLoader classLoader24 = null;
        generator21.setClassLoader(classLoader24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator21.getNamingPolicy();
        generator20.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        java.lang.ClassLoader classLoader31 = null;
        generator28.setClassLoader(classLoader31);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator28.getNamingPolicy();
        generator20.setNamingPolicy(namingPolicy33);
        java.lang.ClassLoader classLoader35 = generator20.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator20.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator20.getStrategy();
        boolean boolean38 = generator20.getUseCache();
        generator20.setUseCache(false);
        boolean boolean41 = generator20.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator42.setUseCache(true);
        boolean boolean45 = generator42.getAttemptLoad();
        boolean boolean46 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator42.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator48.setUseCache(true);
        boolean boolean51 = generator48.getAttemptLoad();
        boolean boolean52 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator48.getStrategy();
        generator42.setStrategy(generatorStrategy53);
        java.lang.ClassLoader classLoader55 = generator42.getClassLoader();
        generator42.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator58.setUseCache(true);
        boolean boolean61 = generator58.getAttemptLoad();
        boolean boolean62 = generator58.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator58.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator64 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator64.setUseCache(true);
        boolean boolean67 = generator64.getAttemptLoad();
        boolean boolean68 = generator64.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator64.getStrategy();
        generator58.setStrategy(generatorStrategy69);
        java.lang.ClassLoader classLoader71 = generator58.getClassLoader();
        generator42.setClassLoader(classLoader71);
        org.mockito.cglib.util.ParallelSorter.Generator generator73 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator73.setUseCache(true);
        boolean boolean76 = generator73.getAttemptLoad();
        boolean boolean77 = generator73.getUseCache();
        generator73.setAttemptLoad(true);
        boolean boolean80 = generator73.getUseCache();
        generator73.setAttemptLoad(true);
        generator73.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator85 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator85.setUseCache(true);
        boolean boolean88 = generator85.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = generator85.getStrategy();
        generator73.setStrategy(generatorStrategy89);
        generator42.setStrategy(generatorStrategy89);
        generator20.setStrategy(generatorStrategy89);
        generator0.setStrategy(generatorStrategy89);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy98 = generator0.getNamingPolicy();
        boolean boolean99 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(generatorStrategy89);
        org.junit.Assert.assertNotNull(namingPolicy98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test2418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2418");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        boolean boolean9 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator0.setStrategy(generatorStrategy10);
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator13.setUseCache(true);
        boolean boolean16 = generator13.getAttemptLoad();
        boolean boolean17 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator13.getStrategy();
        generator12.setStrategy(generatorStrategy18);
        boolean boolean20 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator12.getNamingPolicy();
        java.lang.ClassLoader classLoader22 = generator12.getClassLoader();
        generator0.setClassLoader(classLoader22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(namingPolicy25);
    }

    @Test
    public void test2419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2419");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.ClassLoader classLoader11 = generator9.getClassLoader();
        generator9.setUseCache(false);
        generator9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator9.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator17.getStrategy();
        java.lang.ClassLoader classLoader19 = generator17.getClassLoader();
        generator17.setUseCache(false);
        boolean boolean22 = generator17.getUseCache();
        java.lang.ClassLoader classLoader23 = generator17.getClassLoader();
        generator9.setClassLoader(classLoader23);
        generator0.setClassLoader(classLoader23);
        boolean boolean26 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean28 = generator27.getAttemptLoad();
        java.lang.ClassLoader classLoader29 = generator27.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator30.setUseCache(true);
        java.lang.ClassLoader classLoader33 = generator30.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator34.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator34.getStrategy();
        generator30.setStrategy(generatorStrategy37);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator30.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator30.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator27.getStrategy();
        generator0.setStrategy(generatorStrategy42);
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(generatorStrategy42);
    }

    @Test
    public void test2420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2420");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator30.setUseCache(true);
        boolean boolean33 = generator30.getAttemptLoad();
        boolean boolean34 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator30.getStrategy();
        generator29.setStrategy(generatorStrategy35);
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator37.setUseCache(true);
        boolean boolean40 = generator37.getAttemptLoad();
        boolean boolean41 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator37.getStrategy();
        generator29.setStrategy(generatorStrategy42);
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader45 = null;
        generator44.setClassLoader(classLoader45);
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = strComparator48.thenComparing(strComparator49);
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = strComparator51.thenComparing(strComparator52);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        boolean boolean57 = strComparator52.equals((java.lang.Object) strComparator56);
        java.lang.Object[] objArray59 = new java.lang.Object[] { '4', strComparator49, strComparator52, 0.0d };
        generator44.setArrays(objArray59);
        generator29.setArrays(objArray59);
        generator0.setArrays(objArray59);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = null;
        generator0.setNamingPolicy(namingPolicy63);
        java.lang.ClassLoader classLoader65 = null;
        generator0.setClassLoader(classLoader65);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter67 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test2421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2421");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        boolean boolean11 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator14.setUseCache(true);
        boolean boolean17 = generator14.getAttemptLoad();
        boolean boolean18 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator14.getStrategy();
        generator13.setStrategy(generatorStrategy19);
        boolean boolean21 = generator13.getAttemptLoad();
        generator13.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader26 = null;
        generator25.setClassLoader(classLoader26);
        java.lang.ClassLoader classLoader28 = null;
        generator25.setClassLoader(classLoader28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator25.getNamingPolicy();
        generator24.setNamingPolicy(namingPolicy30);
        boolean boolean32 = generator24.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = strComparator37.thenComparing(strComparator38);
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = strComparator40.thenComparing(strComparator41);
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = strComparator43.thenComparing(strComparator44);
        boolean boolean46 = strComparator41.equals((java.lang.Object) strComparator45);
        java.lang.Object[] objArray48 = new java.lang.Object[] { '4', strComparator38, strComparator41, 0.0d };
        generator33.setArrays(objArray48);
        generator24.setArrays(objArray48);
        boolean boolean51 = generator24.getAttemptLoad();
        java.lang.Object[] objArray52 = new java.lang.Object[] { generator24 };
        generator13.setArrays(objArray52);
        generator0.setArrays(objArray52);
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator55.setUseCache(true);
        boolean boolean58 = generator55.getAttemptLoad();
        boolean boolean59 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator55.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader63 = null;
        generator62.setClassLoader(classLoader63);
        java.lang.ClassLoader classLoader65 = null;
        generator62.setClassLoader(classLoader65);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator62.getNamingPolicy();
        generator61.setNamingPolicy(namingPolicy67);
        boolean boolean69 = generator61.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator70 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader71 = null;
        generator70.setClassLoader(classLoader71);
        java.util.Comparator<java.lang.String> strComparator74 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = strComparator74.thenComparing(strComparator75);
        java.util.Comparator<java.lang.String> strComparator77 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator78 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator79 = strComparator77.thenComparing(strComparator78);
        java.util.Comparator<java.lang.String> strComparator80 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator81 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator82 = strComparator80.thenComparing(strComparator81);
        boolean boolean83 = strComparator78.equals((java.lang.Object) strComparator82);
        java.lang.Object[] objArray85 = new java.lang.Object[] { '4', strComparator75, strComparator78, 0.0d };
        generator70.setArrays(objArray85);
        generator61.setArrays(objArray85);
        generator55.setArrays(objArray85);
        org.mockito.cglib.util.ParallelSorter.Generator generator89 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader90 = null;
        generator89.setClassLoader(classLoader90);
        java.lang.ClassLoader classLoader92 = generator89.getClassLoader();
        generator55.setClassLoader(classLoader92);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy94 = generator55.getStrategy();
        generator0.setStrategy(generatorStrategy94);
        boolean boolean96 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader92);
        org.junit.Assert.assertNotNull(generatorStrategy94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test2422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2422");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        boolean boolean11 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator13.setUseCache(true);
        boolean boolean16 = generator13.getAttemptLoad();
        boolean boolean17 = generator13.getUseCache();
        generator13.setAttemptLoad(true);
        generator13.setUseCache(true);
        generator13.setUseCache(false);
        boolean boolean24 = generator13.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator13.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy25);
        java.lang.ClassLoader classLoader27 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator28.setUseCache(true);
        boolean boolean31 = generator28.getAttemptLoad();
        boolean boolean32 = generator28.getUseCache();
        generator28.setAttemptLoad(true);
        generator28.setUseCache(true);
        generator28.setAttemptLoad(true);
        generator28.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator41.getStrategy();
        java.lang.ClassLoader classLoader43 = generator41.getClassLoader();
        generator41.setUseCache(false);
        boolean boolean46 = generator41.getAttemptLoad();
        boolean boolean47 = generator41.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator49.setUseCache(true);
        boolean boolean52 = generator49.getAttemptLoad();
        boolean boolean53 = generator49.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator49.getStrategy();
        generator48.setStrategy(generatorStrategy54);
        boolean boolean56 = generator48.getAttemptLoad();
        generator48.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader61 = null;
        generator60.setClassLoader(classLoader61);
        java.lang.ClassLoader classLoader63 = null;
        generator60.setClassLoader(classLoader63);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator60.getNamingPolicy();
        generator59.setNamingPolicy(namingPolicy65);
        boolean boolean67 = generator59.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator68 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader69 = null;
        generator68.setClassLoader(classLoader69);
        java.util.Comparator<java.lang.String> strComparator72 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator73 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator74 = strComparator72.thenComparing(strComparator73);
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = strComparator75.thenComparing(strComparator76);
        java.util.Comparator<java.lang.String> strComparator78 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = strComparator78.thenComparing(strComparator79);
        boolean boolean81 = strComparator76.equals((java.lang.Object) strComparator80);
        java.lang.Object[] objArray83 = new java.lang.Object[] { '4', strComparator73, strComparator76, 0.0d };
        generator68.setArrays(objArray83);
        generator59.setArrays(objArray83);
        boolean boolean86 = generator59.getAttemptLoad();
        java.lang.Object[] objArray87 = new java.lang.Object[] { generator59 };
        generator48.setArrays(objArray87);
        generator41.setArrays(objArray87);
        generator28.setArrays(objArray87);
        generator0.setArrays(objArray87);
        org.mockito.asm.ClassVisitor classVisitor92 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.util.ParallelSorter$Generator is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(objArray87);
    }

    @Test
    public void test2423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2423");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.util.Comparator<java.lang.String> strComparator12 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = strComparator12.thenComparing(strComparator13);
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = strComparator15.thenComparing(strComparator16);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        boolean boolean21 = strComparator16.equals((java.lang.Object) strComparator20);
        java.lang.Object[] objArray23 = new java.lang.Object[] { '4', strComparator13, strComparator16, 0.0d };
        generator8.setArrays(objArray23);
        java.lang.ClassLoader classLoader25 = null;
        generator8.setClassLoader(classLoader25);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.lang.ClassLoader classLoader30 = null;
        generator27.setClassLoader(classLoader30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        boolean boolean39 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator35.getStrategy();
        generator34.setStrategy(generatorStrategy40);
        generator8.setStrategy(generatorStrategy40);
        generator0.setStrategy(generatorStrategy40);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = null;
        generator0.setStrategy(generatorStrategy44);
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter48 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
    }

    @Test
    public void test2424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2424");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getUseCache();
        java.lang.ClassLoader classLoader6 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator7.getStrategy();
        generator7.setUseCache(true);
        boolean boolean11 = generator7.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        generator12.setUseCache(true);
        generator12.setAttemptLoad(true);
        generator12.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader26 = null;
        generator25.setClassLoader(classLoader26);
        java.lang.ClassLoader classLoader28 = null;
        generator25.setClassLoader(classLoader28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator25.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator25.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy31);
        generator7.setNamingPolicy(namingPolicy31);
        generator0.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader36 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(generatorStrategy37);
    }

    @Test
    public void test2425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2425");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator9.setUseCache(true);
        boolean boolean12 = generator9.getAttemptLoad();
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        generator9.setAttemptLoad(true);
        boolean boolean18 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator9.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator20.getStrategy();
        java.lang.ClassLoader classLoader22 = generator20.getClassLoader();
        generator20.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator20.getStrategy();
        generator9.setStrategy(generatorStrategy25);
        generator0.setStrategy(generatorStrategy25);
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter30 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy25);
    }

    @Test
    public void test2426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2426");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        java.lang.ClassLoader classLoader15 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        boolean boolean19 = generator16.getAttemptLoad();
        boolean boolean20 = generator16.getUseCache();
        generator16.setAttemptLoad(true);
        generator16.setUseCache(true);
        generator16.setUseCache(false);
        boolean boolean27 = generator16.getUseCache();
        java.lang.ClassLoader classLoader28 = generator16.getClassLoader();
        generator0.setClassLoader(classLoader28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator0.getStrategy();
        boolean boolean32 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator0.getStrategy();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(generatorStrategy33);
    }

    @Test
    public void test2427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2427");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = strComparator3.thenComparing(strComparator4);
        java.util.Comparator<java.lang.String> strComparator6 = strComparator2.thenComparing(strComparator3);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.reverseOrder();
        java.util.Comparator<java.lang.String> strComparator8 = strComparator3.thenComparing(strComparator7);
        java.util.Comparator<java.lang.String> strComparator9 = strComparator3.reversed();
        java.util.Comparator<java.lang.String> strComparator10 = strComparator3.reversed();
        java.util.Comparator<java.lang.String> strComparator11 = strComparator3.reversed();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator11.reversed();
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
    }

    @Test
    public void test2428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2428");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        boolean boolean28 = strComparator23.equals((java.lang.Object) strComparator27);
        java.lang.Object[] objArray30 = new java.lang.Object[] { '4', strComparator20, strComparator23, 0.0d };
        generator15.setArrays(objArray30);
        generator0.setArrays(objArray30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator0.getStrategy();
        boolean boolean34 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator0.getNamingPolicy();
        boolean boolean36 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
    }

    @Test
    public void test2429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2429");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.asm.ClassVisitor classVisitor15 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(classLoader12);
    }

    @Test
    public void test2430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2430");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator4.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator3.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        boolean boolean19 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator20.setStrategy(generatorStrategy26);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator28.setUseCache(true);
        boolean boolean31 = generator28.getAttemptLoad();
        boolean boolean32 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator28.getStrategy();
        generator20.setStrategy(generatorStrategy33);
        generator20.setAttemptLoad(false);
        boolean boolean37 = generator20.getUseCache();
        java.lang.ClassLoader classLoader38 = generator20.getClassLoader();
        generator0.setClassLoader(classLoader38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator40.getStrategy();
        java.lang.ClassLoader classLoader42 = generator40.getClassLoader();
        generator0.setClassLoader(classLoader42);
        boolean boolean44 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(namingPolicy48);
    }

    @Test
    public void test2431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2431");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        java.lang.ClassLoader classLoader21 = null;
        generator18.setClassLoader(classLoader21);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator18.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy23);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader26 = null;
        generator25.setClassLoader(classLoader26);
        java.lang.ClassLoader classLoader28 = null;
        generator25.setClassLoader(classLoader28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator25.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy30);
        generator17.setAttemptLoad(false);
        generator17.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator39.setUseCache(true);
        boolean boolean42 = generator39.getAttemptLoad();
        java.lang.ClassLoader classLoader43 = null;
        generator39.setClassLoader(classLoader43);
        generator39.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator39.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator48.setUseCache(true);
        boolean boolean51 = generator48.getAttemptLoad();
        boolean boolean52 = generator48.getUseCache();
        generator48.setAttemptLoad(true);
        generator48.setAttemptLoad(true);
        boolean boolean57 = generator48.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator48.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator59.getStrategy();
        java.lang.ClassLoader classLoader61 = generator59.getClassLoader();
        generator59.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator59.getStrategy();
        generator48.setStrategy(generatorStrategy64);
        generator39.setStrategy(generatorStrategy64);
        generator0.setStrategy(generatorStrategy64);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader70 = generator0.getClassLoader();
        boolean boolean71 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test2432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2432");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.ClassLoader classLoader11 = generator9.getClassLoader();
        generator9.setUseCache(false);
        generator9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator9.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator17.getStrategy();
        java.lang.ClassLoader classLoader19 = generator17.getClassLoader();
        generator17.setUseCache(false);
        boolean boolean22 = generator17.getUseCache();
        java.lang.ClassLoader classLoader23 = generator17.getClassLoader();
        generator9.setClassLoader(classLoader23);
        generator0.setClassLoader(classLoader23);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.lang.ClassLoader classLoader30 = null;
        generator27.setClassLoader(classLoader30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader35 = null;
        generator34.setClassLoader(classLoader35);
        java.lang.ClassLoader classLoader37 = null;
        generator34.setClassLoader(classLoader37);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator34.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy39);
        java.lang.ClassLoader classLoader41 = generator26.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator26.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator26.getStrategy();
        generator0.setStrategy(generatorStrategy43);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader46 = null;
        generator45.setClassLoader(classLoader46);
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = strComparator49.thenComparing(strComparator50);
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = strComparator52.thenComparing(strComparator53);
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = strComparator55.thenComparing(strComparator56);
        boolean boolean58 = strComparator53.equals((java.lang.Object) strComparator57);
        java.lang.Object[] objArray60 = new java.lang.Object[] { '4', strComparator50, strComparator53, 0.0d };
        generator45.setArrays(objArray60);
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator62.setUseCache(true);
        boolean boolean65 = generator62.getAttemptLoad();
        boolean boolean66 = generator62.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator62.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator62.getNamingPolicy();
        java.lang.ClassLoader classLoader69 = generator62.getClassLoader();
        generator45.setClassLoader(classLoader69);
        java.lang.ClassLoader classLoader71 = generator45.getClassLoader();
        generator0.setClassLoader(classLoader71);
        generator0.setUseCache(true);
        boolean boolean75 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test2433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2433");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        java.lang.ClassLoader classLoader13 = generator10.getClassLoader();
        generator0.setClassLoader(classLoader13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader25 = null;
        generator24.setClassLoader(classLoader25);
        java.lang.ClassLoader classLoader27 = null;
        generator24.setClassLoader(classLoader27);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator24.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        java.lang.ClassLoader classLoader34 = generator31.getClassLoader();
        generator16.setClassLoader(classLoader34);
        generator16.setAttemptLoad(false);
        generator16.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator16.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor43 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(namingPolicy42);
    }

    @Test
    public void test2434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2434");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        boolean boolean13 = generator10.getAttemptLoad();
        boolean boolean14 = generator10.getUseCache();
        generator10.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator10.getNamingPolicy();
        boolean boolean18 = generator10.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = strComparator23.thenComparing(strComparator24);
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = strComparator26.thenComparing(strComparator27);
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = strComparator29.thenComparing(strComparator30);
        boolean boolean32 = strComparator27.equals((java.lang.Object) strComparator31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { '4', strComparator24, strComparator27, 0.0d };
        generator19.setArrays(objArray34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator19.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator19.getNamingPolicy();
        generator10.setNamingPolicy(namingPolicy37);
        generator0.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator40.setUseCache(true);
        boolean boolean43 = generator40.getAttemptLoad();
        generator40.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator40.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator40.getNamingPolicy();
        java.lang.ClassLoader classLoader48 = generator40.getClassLoader();
        generator0.setClassLoader(classLoader48);
        boolean boolean50 = generator0.getAttemptLoad();
        boolean boolean51 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test2435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2435");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        boolean boolean8 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        boolean boolean13 = generator10.getAttemptLoad();
        boolean boolean14 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator10.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        boolean boolean19 = generator16.getAttemptLoad();
        boolean boolean20 = generator16.getUseCache();
        generator16.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator23.getStrategy();
        generator16.setStrategy(generatorStrategy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator26.setUseCache(true);
        java.lang.ClassLoader classLoader29 = generator26.getClassLoader();
        generator16.setClassLoader(classLoader29);
        generator10.setClassLoader(classLoader29);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator32.setNamingPolicy(namingPolicy38);
        boolean boolean40 = generator32.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator32.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator42.setUseCache(true);
        boolean boolean45 = generator42.getAttemptLoad();
        boolean boolean46 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator42.getStrategy();
        generator32.setStrategy(generatorStrategy47);
        generator10.setStrategy(generatorStrategy47);
        java.lang.ClassLoader classLoader50 = generator10.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator52.setUseCache(true);
        boolean boolean55 = generator52.getAttemptLoad();
        boolean boolean56 = generator52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator52.getStrategy();
        generator51.setStrategy(generatorStrategy57);
        boolean boolean59 = generator51.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator51.getStrategy();
        java.lang.ClassLoader classLoader61 = generator51.getClassLoader();
        java.lang.ClassLoader classLoader62 = generator51.getClassLoader();
        generator10.setClassLoader(classLoader62);
        generator0.setClassLoader(classLoader62);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(classLoader62);
    }

    @Test
    public void test2436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2436");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator21.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy26);
        generator0.setUseCache(false);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(namingPolicy26);
    }

    @Test
    public void test2437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2437");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        java.lang.ClassLoader classLoader5 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean8 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        java.lang.ClassLoader classLoader15 = null;
        generator11.setClassLoader(classLoader15);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator11.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = strComparator28.thenComparing(strComparator29);
        boolean boolean31 = strComparator26.equals((java.lang.Object) strComparator30);
        java.lang.Object[] objArray33 = new java.lang.Object[] { '4', strComparator23, strComparator26, 0.0d };
        generator18.setArrays(objArray33);
        generator11.setArrays(objArray33);
        generator0.setArrays(objArray33);
        java.lang.Class<?> wildcardClass37 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test2438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2438");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy24);
        boolean boolean26 = generator0.getUseCache();
        java.lang.ClassLoader classLoader27 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        boolean boolean39 = generator35.getUseCache();
        generator35.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator42.getStrategy();
        generator35.setStrategy(generatorStrategy43);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator45.setUseCache(true);
        java.lang.ClassLoader classLoader48 = generator45.getClassLoader();
        generator35.setClassLoader(classLoader48);
        generator29.setClassLoader(classLoader48);
        java.lang.ClassLoader classLoader51 = generator29.getClassLoader();
        generator0.setClassLoader(classLoader51);
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader54 = null;
        generator53.setClassLoader(classLoader54);
        boolean boolean56 = generator53.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator53.getStrategy();
        generator53.setUseCache(false);
        java.lang.ClassLoader classLoader60 = generator53.getClassLoader();
        generator0.setClassLoader(classLoader60);
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader64 = null;
        generator63.setClassLoader(classLoader64);
        java.lang.ClassLoader classLoader66 = null;
        generator63.setClassLoader(classLoader66);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator63.getNamingPolicy();
        generator62.setNamingPolicy(namingPolicy68);
        boolean boolean70 = generator62.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator71 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader72 = null;
        generator71.setClassLoader(classLoader72);
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = strComparator75.thenComparing(strComparator76);
        java.util.Comparator<java.lang.String> strComparator78 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = strComparator78.thenComparing(strComparator79);
        java.util.Comparator<java.lang.String> strComparator81 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator82 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator83 = strComparator81.thenComparing(strComparator82);
        boolean boolean84 = strComparator79.equals((java.lang.Object) strComparator83);
        java.lang.Object[] objArray86 = new java.lang.Object[] { '4', strComparator76, strComparator79, 0.0d };
        generator71.setArrays(objArray86);
        generator62.setArrays(objArray86);
        generator0.setArrays(objArray86);
        java.lang.Class<?> wildcardClass90 = generator0.getClass();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test2439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2439");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader12 = null;
        generator11.setClassLoader(classLoader12);
        java.lang.ClassLoader classLoader14 = null;
        generator11.setClassLoader(classLoader14);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator11.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        boolean boolean23 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test2440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2440");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader11 = null;
        generator10.setClassLoader(classLoader11);
        java.lang.ClassLoader classLoader13 = null;
        generator10.setClassLoader(classLoader13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator10.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy15);
        generator4.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator18.getStrategy();
        java.lang.ClassLoader classLoader20 = generator18.getClassLoader();
        generator18.setUseCache(false);
        boolean boolean23 = generator18.getUseCache();
        java.lang.ClassLoader classLoader24 = generator18.getClassLoader();
        java.lang.ClassLoader classLoader25 = generator18.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator18.getNamingPolicy();
        boolean boolean27 = generator18.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator28.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator32.setUseCache(true);
        boolean boolean35 = generator32.getAttemptLoad();
        boolean boolean36 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator32.getStrategy();
        generator31.setStrategy(generatorStrategy37);
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator39.setUseCache(true);
        boolean boolean42 = generator39.getAttemptLoad();
        boolean boolean43 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator39.getStrategy();
        generator31.setStrategy(generatorStrategy44);
        generator28.setStrategy(generatorStrategy44);
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean48 = generator47.getAttemptLoad();
        java.lang.ClassLoader classLoader49 = generator47.getClassLoader();
        generator28.setClassLoader(classLoader49);
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator51.setUseCache(true);
        boolean boolean54 = generator51.getAttemptLoad();
        boolean boolean55 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator51.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator51.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator59.setUseCache(true);
        boolean boolean62 = generator59.getAttemptLoad();
        boolean boolean63 = generator59.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator59.getStrategy();
        generator58.setStrategy(generatorStrategy64);
        org.mockito.cglib.util.ParallelSorter.Generator generator66 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator66.setUseCache(true);
        boolean boolean69 = generator66.getAttemptLoad();
        boolean boolean70 = generator66.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator66.getStrategy();
        generator58.setStrategy(generatorStrategy71);
        org.mockito.cglib.util.ParallelSorter.Generator generator73 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader74 = null;
        generator73.setClassLoader(classLoader74);
        java.util.Comparator<java.lang.String> strComparator77 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator78 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator79 = strComparator77.thenComparing(strComparator78);
        java.util.Comparator<java.lang.String> strComparator80 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator81 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator82 = strComparator80.thenComparing(strComparator81);
        java.util.Comparator<java.lang.String> strComparator83 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator84 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator85 = strComparator83.thenComparing(strComparator84);
        boolean boolean86 = strComparator81.equals((java.lang.Object) strComparator85);
        java.lang.Object[] objArray88 = new java.lang.Object[] { '4', strComparator78, strComparator81, 0.0d };
        generator73.setArrays(objArray88);
        generator58.setArrays(objArray88);
        generator51.setArrays(objArray88);
        generator28.setArrays(objArray88);
        generator18.setArrays(objArray88);
        generator4.setArrays(objArray88);
        generator0.setArrays(objArray88);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy98 = generator0.getStrategy();
        boolean boolean99 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertNotNull(strComparator84);
        org.junit.Assert.assertNotNull(strComparator85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test2441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2441");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
    }

    @Test
    public void test2442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2442");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator7.setUseCache(true);
        boolean boolean10 = generator7.getAttemptLoad();
        boolean boolean11 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator7.getStrategy();
        generator6.setStrategy(generatorStrategy12);
        generator0.setStrategy(generatorStrategy12);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader23 = null;
        generator22.setClassLoader(classLoader23);
        java.lang.ClassLoader classLoader25 = null;
        generator22.setClassLoader(classLoader25);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator22.getNamingPolicy();
        generator21.setNamingPolicy(namingPolicy27);
        boolean boolean29 = generator21.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader31 = null;
        generator30.setClassLoader(classLoader31);
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = strComparator34.thenComparing(strComparator35);
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = strComparator37.thenComparing(strComparator38);
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = strComparator40.thenComparing(strComparator41);
        boolean boolean43 = strComparator38.equals((java.lang.Object) strComparator42);
        java.lang.Object[] objArray45 = new java.lang.Object[] { '4', strComparator35, strComparator38, 0.0d };
        generator30.setArrays(objArray45);
        generator21.setArrays(objArray45);
        generator15.setArrays(objArray45);
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader50 = null;
        generator49.setClassLoader(classLoader50);
        java.lang.ClassLoader classLoader52 = generator49.getClassLoader();
        generator15.setClassLoader(classLoader52);
        generator0.setClassLoader(classLoader52);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator57.setUseCache(true);
        boolean boolean60 = generator57.getAttemptLoad();
        boolean boolean61 = generator57.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator57.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator63.setUseCache(true);
        boolean boolean66 = generator63.getAttemptLoad();
        boolean boolean67 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator63.getStrategy();
        generator57.setStrategy(generatorStrategy68);
        java.lang.ClassLoader classLoader70 = generator57.getClassLoader();
        generator57.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator73 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator73.setUseCache(true);
        boolean boolean76 = generator73.getAttemptLoad();
        boolean boolean77 = generator73.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator73.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator79 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator79.setUseCache(true);
        boolean boolean82 = generator79.getAttemptLoad();
        boolean boolean83 = generator79.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator79.getStrategy();
        generator73.setStrategy(generatorStrategy84);
        java.lang.ClassLoader classLoader86 = generator73.getClassLoader();
        generator57.setClassLoader(classLoader86);
        boolean boolean88 = generator57.getAttemptLoad();
        boolean boolean89 = generator57.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy90 = generator57.getNamingPolicy();
        generator57.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy93 = generator57.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy93);
        java.lang.Class<?> wildcardClass95 = namingPolicy93.getClass();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertNotNull(classLoader86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(namingPolicy90);
        org.junit.Assert.assertNotNull(namingPolicy93);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2443");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getAttemptLoad();
        boolean boolean6 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator7.setStrategy(generatorStrategy13);
        boolean boolean15 = generator7.getAttemptLoad();
        generator7.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy24);
        boolean boolean26 = generator18.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = strComparator31.thenComparing(strComparator32);
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = strComparator34.thenComparing(strComparator35);
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = strComparator37.thenComparing(strComparator38);
        boolean boolean40 = strComparator35.equals((java.lang.Object) strComparator39);
        java.lang.Object[] objArray42 = new java.lang.Object[] { '4', strComparator32, strComparator35, 0.0d };
        generator27.setArrays(objArray42);
        generator18.setArrays(objArray42);
        boolean boolean45 = generator18.getAttemptLoad();
        java.lang.Object[] objArray46 = new java.lang.Object[] { generator18 };
        generator7.setArrays(objArray46);
        generator0.setArrays(objArray46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator0.getStrategy();
        java.lang.ClassLoader classLoader50 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(classLoader50);
    }

    @Test
    public void test2444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2444");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        java.lang.ClassLoader classLoader13 = generator10.getClassLoader();
        generator0.setClassLoader(classLoader13);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator17.setUseCache(true);
        boolean boolean20 = generator17.getAttemptLoad();
        java.lang.ClassLoader classLoader21 = null;
        generator17.setClassLoader(classLoader21);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader25 = null;
        generator24.setClassLoader(classLoader25);
        java.lang.ClassLoader classLoader27 = null;
        generator24.setClassLoader(classLoader27);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator24.getNamingPolicy();
        generator23.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = strComparator35.thenComparing(strComparator36);
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = strComparator38.thenComparing(strComparator39);
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = strComparator41.thenComparing(strComparator42);
        boolean boolean44 = strComparator39.equals((java.lang.Object) strComparator43);
        java.lang.Object[] objArray46 = new java.lang.Object[] { '4', strComparator36, strComparator39, 0.0d };
        generator31.setArrays(objArray46);
        java.lang.ClassLoader classLoader48 = null;
        generator31.setClassLoader(classLoader48);
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader51 = null;
        generator50.setClassLoader(classLoader51);
        java.lang.ClassLoader classLoader53 = null;
        generator50.setClassLoader(classLoader53);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator50.getNamingPolicy();
        generator31.setNamingPolicy(namingPolicy55);
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator58.setUseCache(true);
        boolean boolean61 = generator58.getAttemptLoad();
        boolean boolean62 = generator58.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator58.getStrategy();
        generator57.setStrategy(generatorStrategy63);
        generator31.setStrategy(generatorStrategy63);
        generator23.setStrategy(generatorStrategy63);
        generator17.setStrategy(generatorStrategy63);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy68);
        org.mockito.cglib.util.ParallelSorter.Generator generator70 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator71 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader72 = null;
        generator71.setClassLoader(classLoader72);
        java.lang.ClassLoader classLoader74 = null;
        generator71.setClassLoader(classLoader74);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator71.getNamingPolicy();
        generator70.setNamingPolicy(namingPolicy76);
        org.mockito.cglib.util.ParallelSorter.Generator generator78 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader79 = null;
        generator78.setClassLoader(classLoader79);
        java.lang.ClassLoader classLoader81 = null;
        generator78.setClassLoader(classLoader81);
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = generator78.getNamingPolicy();
        generator70.setNamingPolicy(namingPolicy83);
        java.lang.ClassLoader classLoader85 = generator70.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy86 = generator70.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator70.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator88 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator88.setUseCache(true);
        boolean boolean91 = generator88.getAttemptLoad();
        boolean boolean92 = generator88.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = generator88.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy94 = generator88.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy95 = generator88.getStrategy();
        generator70.setStrategy(generatorStrategy95);
        org.mockito.cglib.core.NamingPolicy namingPolicy97 = generator70.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy97);
        java.lang.ClassLoader classLoader99 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertNotNull(namingPolicy83);
        org.junit.Assert.assertNotNull(classLoader85);
        org.junit.Assert.assertNotNull(namingPolicy86);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(generatorStrategy93);
        org.junit.Assert.assertNotNull(generatorStrategy94);
        org.junit.Assert.assertNotNull(generatorStrategy95);
        org.junit.Assert.assertNotNull(namingPolicy97);
        org.junit.Assert.assertNotNull(classLoader99);
    }

    @Test
    public void test2445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2445");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader7 = null;
        generator6.setClassLoader(classLoader7);
        generator6.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        generator11.setAttemptLoad(true);
        generator11.setUseCache(true);
        generator11.setUseCache(false);
        generator11.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator24.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        java.lang.ClassLoader classLoader31 = null;
        generator28.setClassLoader(classLoader31);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator28.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader36 = null;
        generator35.setClassLoader(classLoader36);
        java.lang.ClassLoader classLoader38 = null;
        generator35.setClassLoader(classLoader38);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator35.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator42.setUseCache(true);
        java.lang.ClassLoader classLoader45 = generator42.getClassLoader();
        generator27.setClassLoader(classLoader45);
        generator24.setClassLoader(classLoader45);
        generator24.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator51.setUseCache(true);
        boolean boolean54 = generator51.getAttemptLoad();
        boolean boolean55 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator51.getStrategy();
        generator50.setStrategy(generatorStrategy56);
        boolean boolean58 = generator50.getAttemptLoad();
        generator50.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader63 = null;
        generator62.setClassLoader(classLoader63);
        java.lang.ClassLoader classLoader65 = null;
        generator62.setClassLoader(classLoader65);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator62.getNamingPolicy();
        generator61.setNamingPolicy(namingPolicy67);
        boolean boolean69 = generator61.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator70 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader71 = null;
        generator70.setClassLoader(classLoader71);
        java.util.Comparator<java.lang.String> strComparator74 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = strComparator74.thenComparing(strComparator75);
        java.util.Comparator<java.lang.String> strComparator77 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator78 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator79 = strComparator77.thenComparing(strComparator78);
        java.util.Comparator<java.lang.String> strComparator80 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator81 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator82 = strComparator80.thenComparing(strComparator81);
        boolean boolean83 = strComparator78.equals((java.lang.Object) strComparator82);
        java.lang.Object[] objArray85 = new java.lang.Object[] { '4', strComparator75, strComparator78, 0.0d };
        generator70.setArrays(objArray85);
        generator61.setArrays(objArray85);
        boolean boolean88 = generator61.getAttemptLoad();
        java.lang.Object[] objArray89 = new java.lang.Object[] { generator61 };
        generator50.setArrays(objArray89);
        generator24.setArrays(objArray89);
        generator11.setArrays(objArray89);
        generator6.setArrays(objArray89);
        generator0.setArrays(objArray89);
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter97 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.util.ParallelSorter$Generator is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(objArray89);
    }

    @Test
    public void test2446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2446");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        java.lang.ClassLoader classLoader13 = generator10.getClassLoader();
        generator0.setClassLoader(classLoader13);
        boolean boolean15 = generator0.getAttemptLoad();
        boolean boolean16 = generator0.getUseCache();
        java.lang.ClassLoader classLoader17 = generator0.getClassLoader();
        boolean boolean18 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test2447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2447");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getUseCache();
        java.lang.ClassLoader classLoader6 = generator0.getClassLoader();
        boolean boolean7 = generator0.getUseCache();
        boolean boolean8 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2448");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader11 = null;
        generator10.setClassLoader(classLoader11);
        java.lang.ClassLoader classLoader13 = null;
        generator10.setClassLoader(classLoader13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator10.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy22);
        generator0.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator26.getStrategy();
        java.lang.ClassLoader classLoader28 = generator26.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator26.setStrategy(generatorStrategy29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator26.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator33.setUseCache(true);
        boolean boolean36 = generator33.getAttemptLoad();
        boolean boolean37 = generator33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator33.getStrategy();
        generator32.setStrategy(generatorStrategy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator40.setUseCache(true);
        boolean boolean43 = generator40.getAttemptLoad();
        boolean boolean44 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator40.getStrategy();
        generator32.setStrategy(generatorStrategy45);
        generator32.setAttemptLoad(false);
        boolean boolean49 = generator32.getUseCache();
        java.lang.ClassLoader classLoader50 = generator32.getClassLoader();
        generator26.setClassLoader(classLoader50);
        generator0.setClassLoader(classLoader50);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator54.setUseCache(true);
        boolean boolean57 = generator54.getAttemptLoad();
        boolean boolean58 = generator54.getUseCache();
        generator54.setAttemptLoad(true);
        generator54.setUseCache(true);
        generator54.setAttemptLoad(true);
        generator54.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator54.getStrategy();
        java.lang.ClassLoader classLoader68 = generator54.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator69 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader70 = null;
        generator69.setClassLoader(classLoader70);
        java.util.Comparator<java.lang.String> strComparator73 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator74 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator75 = strComparator73.thenComparing(strComparator74);
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator78 = strComparator76.thenComparing(strComparator77);
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator81 = strComparator79.thenComparing(strComparator80);
        boolean boolean82 = strComparator77.equals((java.lang.Object) strComparator81);
        java.lang.Object[] objArray84 = new java.lang.Object[] { '4', strComparator74, strComparator77, 0.0d };
        generator69.setArrays(objArray84);
        generator54.setArrays(objArray84);
        generator0.setArrays(objArray84);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter88 = org.mockito.cglib.util.ParallelSorter.create(objArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test2449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2449");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        generator0.setStrategy(generatorStrategy18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        java.lang.ClassLoader classLoader21 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader22 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator23.setUseCache(true);
        boolean boolean26 = generator23.getAttemptLoad();
        boolean boolean27 = generator23.getUseCache();
        generator23.setAttemptLoad(true);
        generator23.setUseCache(true);
        generator23.setUseCache(false);
        boolean boolean34 = generator23.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator23.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator36.setUseCache(true);
        boolean boolean39 = generator36.getAttemptLoad();
        boolean boolean40 = generator36.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator36.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator42.setUseCache(true);
        boolean boolean45 = generator42.getAttemptLoad();
        boolean boolean46 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator42.getStrategy();
        generator36.setStrategy(generatorStrategy47);
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator49.setUseCache(true);
        java.lang.ClassLoader classLoader52 = generator49.getClassLoader();
        generator36.setClassLoader(classLoader52);
        generator23.setClassLoader(classLoader52);
        generator0.setClassLoader(classLoader52);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(namingPolicy56);
    }

    @Test
    public void test2450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2450");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.reverseOrder();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator6.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator6.getStrategy();
        generator1.setStrategy(generatorStrategy13);
        boolean boolean15 = strComparator0.equals((java.lang.Object) generator1);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator1.getNamingPolicy();
        generator1.setAttemptLoad(false);
        generator1.setUseCache(false);
        generator1.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator23.getStrategy();
        java.lang.ClassLoader classLoader26 = generator23.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator23.getStrategy();
        generator1.setStrategy(generatorStrategy27);
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator29.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        boolean boolean39 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator35.getStrategy();
        generator29.setStrategy(generatorStrategy40);
        java.lang.ClassLoader classLoader42 = generator29.getClassLoader();
        generator29.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator45.setUseCache(true);
        boolean boolean48 = generator45.getAttemptLoad();
        boolean boolean49 = generator45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator45.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator51.setUseCache(true);
        boolean boolean54 = generator51.getAttemptLoad();
        boolean boolean55 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator51.getStrategy();
        generator45.setStrategy(generatorStrategy56);
        java.lang.ClassLoader classLoader58 = generator45.getClassLoader();
        generator29.setClassLoader(classLoader58);
        boolean boolean60 = generator29.getAttemptLoad();
        boolean boolean61 = generator29.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator29.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator29.getNamingPolicy();
        generator29.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator29.getStrategy();
        generator1.setStrategy(generatorStrategy66);
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(generatorStrategy66);
    }

    @Test
    public void test2451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2451");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        boolean boolean19 = generator0.getAttemptLoad();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = strComparator20.thenComparing(strComparator21);
        java.util.Comparator<java.lang.String> strComparator23 = strComparator20.reversed();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator23.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader27 = null;
        generator26.setClassLoader(classLoader27);
        java.lang.ClassLoader classLoader29 = null;
        generator26.setClassLoader(classLoader29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator26.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy31);
        boolean boolean33 = strComparator23.equals((java.lang.Object) generator25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator25.getStrategy();
        generator0.setStrategy(generatorStrategy34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator37.setUseCache(true);
        boolean boolean40 = generator37.getAttemptLoad();
        boolean boolean41 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator37.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader45 = null;
        generator44.setClassLoader(classLoader45);
        java.lang.ClassLoader classLoader47 = null;
        generator44.setClassLoader(classLoader47);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator44.getNamingPolicy();
        generator43.setNamingPolicy(namingPolicy49);
        boolean boolean51 = generator43.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader53 = null;
        generator52.setClassLoader(classLoader53);
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = strComparator56.thenComparing(strComparator57);
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = strComparator59.thenComparing(strComparator60);
        java.util.Comparator<java.lang.String> strComparator62 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = strComparator62.thenComparing(strComparator63);
        boolean boolean65 = strComparator60.equals((java.lang.Object) strComparator64);
        java.lang.Object[] objArray67 = new java.lang.Object[] { '4', strComparator57, strComparator60, 0.0d };
        generator52.setArrays(objArray67);
        generator43.setArrays(objArray67);
        generator37.setArrays(objArray67);
        generator0.setArrays(objArray67);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator0.getStrategy();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(generatorStrategy73);
    }

    @Test
    public void test2452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2452");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.ClassLoader classLoader11 = generator9.getClassLoader();
        generator9.setUseCache(false);
        generator9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator9.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator17.getStrategy();
        java.lang.ClassLoader classLoader19 = generator17.getClassLoader();
        generator17.setUseCache(false);
        boolean boolean22 = generator17.getUseCache();
        java.lang.ClassLoader classLoader23 = generator17.getClassLoader();
        generator9.setClassLoader(classLoader23);
        generator0.setClassLoader(classLoader23);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader27 = null;
        generator26.setClassLoader(classLoader27);
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader30 = null;
        generator29.setClassLoader(classLoader30);
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = strComparator33.thenComparing(strComparator34);
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = strComparator36.thenComparing(strComparator37);
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = strComparator39.thenComparing(strComparator40);
        boolean boolean42 = strComparator37.equals((java.lang.Object) strComparator41);
        java.lang.Object[] objArray44 = new java.lang.Object[] { '4', strComparator34, strComparator37, 0.0d };
        generator29.setArrays(objArray44);
        generator26.setArrays(objArray44);
        boolean boolean47 = generator26.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator26.getStrategy();
        java.lang.ClassLoader classLoader49 = generator26.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator26.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator51.setUseCache(true);
        boolean boolean54 = generator51.getAttemptLoad();
        boolean boolean55 = generator51.getUseCache();
        generator51.setAttemptLoad(true);
        generator51.setUseCache(true);
        generator51.setAttemptLoad(true);
        generator51.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator51.getStrategy();
        java.lang.ClassLoader classLoader65 = generator51.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator66 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader67 = null;
        generator66.setClassLoader(classLoader67);
        java.util.Comparator<java.lang.String> strComparator70 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator71 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator72 = strComparator70.thenComparing(strComparator71);
        java.util.Comparator<java.lang.String> strComparator73 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator74 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator75 = strComparator73.thenComparing(strComparator74);
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator78 = strComparator76.thenComparing(strComparator77);
        boolean boolean79 = strComparator74.equals((java.lang.Object) strComparator78);
        java.lang.Object[] objArray81 = new java.lang.Object[] { '4', strComparator71, strComparator74, 0.0d };
        generator66.setArrays(objArray81);
        generator51.setArrays(objArray81);
        generator26.setArrays(objArray81);
        generator0.setArrays(objArray81);
        java.lang.ClassLoader classLoader86 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader86);
    }

    @Test
    public void test2453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2453");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator5.setUseCache(true);
        boolean boolean8 = generator5.getAttemptLoad();
        boolean boolean9 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator5.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator5.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader13 = null;
        generator12.setClassLoader(classLoader13);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        boolean boolean25 = strComparator20.equals((java.lang.Object) strComparator24);
        java.lang.Object[] objArray27 = new java.lang.Object[] { '4', strComparator17, strComparator20, 0.0d };
        generator12.setArrays(objArray27);
        java.lang.ClassLoader classLoader29 = null;
        generator12.setClassLoader(classLoader29);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        java.lang.ClassLoader classLoader34 = null;
        generator31.setClassLoader(classLoader34);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator31.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy36);
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator39.setUseCache(true);
        boolean boolean42 = generator39.getAttemptLoad();
        boolean boolean43 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator39.getStrategy();
        generator38.setStrategy(generatorStrategy44);
        generator12.setStrategy(generatorStrategy44);
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader49 = null;
        generator48.setClassLoader(classLoader49);
        java.lang.ClassLoader classLoader51 = null;
        generator48.setClassLoader(classLoader51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator48.getNamingPolicy();
        generator47.setNamingPolicy(namingPolicy53);
        generator12.setNamingPolicy(namingPolicy53);
        generator5.setNamingPolicy(namingPolicy53);
        generator0.setNamingPolicy(namingPolicy53);
        boolean boolean58 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator59.setUseCache(true);
        boolean boolean62 = generator59.getAttemptLoad();
        java.lang.ClassLoader classLoader63 = null;
        generator59.setClassLoader(classLoader63);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator59.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator66 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader67 = null;
        generator66.setClassLoader(classLoader67);
        java.util.Comparator<java.lang.String> strComparator70 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator71 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator72 = strComparator70.thenComparing(strComparator71);
        java.util.Comparator<java.lang.String> strComparator73 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator74 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator75 = strComparator73.thenComparing(strComparator74);
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator78 = strComparator76.thenComparing(strComparator77);
        boolean boolean79 = strComparator74.equals((java.lang.Object) strComparator78);
        java.lang.Object[] objArray81 = new java.lang.Object[] { '4', strComparator71, strComparator74, 0.0d };
        generator66.setArrays(objArray81);
        generator59.setArrays(objArray81);
        generator0.setArrays(objArray81);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter91 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test2454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2454");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        boolean boolean10 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        java.lang.ClassLoader classLoader18 = null;
        generator15.setClassLoader(classLoader18);
        generator15.setAttemptLoad(true);
        boolean boolean22 = generator15.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator15.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator15.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator26.setUseCache(true);
        boolean boolean29 = generator26.getAttemptLoad();
        boolean boolean30 = generator26.getUseCache();
        generator26.setAttemptLoad(true);
        generator26.setUseCache(true);
        generator26.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        java.lang.ClassLoader classLoader40 = null;
        generator37.setClassLoader(classLoader40);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator37.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy42);
        generator0.setNamingPolicy(namingPolicy42);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(namingPolicy42);
    }

    @Test
    public void test2455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2455");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader5 = null;
        generator4.setClassLoader(classLoader5);
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator10 = strComparator8.thenComparing(strComparator9);
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator13 = strComparator11.thenComparing(strComparator12);
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = strComparator14.thenComparing(strComparator15);
        boolean boolean17 = strComparator12.equals((java.lang.Object) strComparator16);
        java.lang.Object[] objArray19 = new java.lang.Object[] { '4', strComparator9, strComparator12, 0.0d };
        generator4.setArrays(objArray19);
        java.lang.ClassLoader classLoader21 = null;
        generator4.setClassLoader(classLoader21);
        boolean boolean23 = generator4.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator24.setUseCache(true);
        boolean boolean27 = generator24.getAttemptLoad();
        boolean boolean28 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator24.getStrategy();
        generator4.setStrategy(generatorStrategy29);
        generator0.setStrategy(generatorStrategy29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator0.getStrategy();
        boolean boolean33 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(namingPolicy36);
    }

    @Test
    public void test2456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2456");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator3.setUseCache(true);
        boolean boolean6 = generator3.getAttemptLoad();
        boolean boolean7 = generator3.getUseCache();
        generator3.setAttemptLoad(true);
        generator3.setUseCache(true);
        boolean boolean12 = strComparator0.equals((java.lang.Object) generator3);
        generator3.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator15.getStrategy();
        generator15.setUseCache(true);
        generator15.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator15.getNamingPolicy();
        generator3.setNamingPolicy(namingPolicy21);
        generator3.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator3.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader27 = null;
        generator26.setClassLoader(classLoader27);
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = strComparator30.thenComparing(strComparator31);
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = strComparator33.thenComparing(strComparator34);
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = strComparator36.thenComparing(strComparator37);
        boolean boolean39 = strComparator34.equals((java.lang.Object) strComparator38);
        java.lang.Object[] objArray41 = new java.lang.Object[] { '4', strComparator31, strComparator34, 0.0d };
        generator26.setArrays(objArray41);
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader44 = null;
        generator43.setClassLoader(classLoader44);
        java.lang.ClassLoader classLoader46 = null;
        generator43.setClassLoader(classLoader46);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator43.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy48);
        java.lang.ClassLoader classLoader50 = generator26.getClassLoader();
        generator26.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator26.getStrategy();
        generator3.setStrategy(generatorStrategy53);
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(generatorStrategy53);
    }

    @Test
    public void test2457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2457");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        boolean boolean8 = generator0.getUseCache();
        boolean boolean9 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator14.setUseCache(true);
        boolean boolean17 = generator14.getAttemptLoad();
        boolean boolean18 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator14.getStrategy();
        generator13.setStrategy(generatorStrategy19);
        boolean boolean21 = generator13.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator13.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator23.setUseCache(true);
        boolean boolean26 = generator23.getAttemptLoad();
        boolean boolean27 = generator23.getUseCache();
        generator23.setAttemptLoad(true);
        generator23.setUseCache(true);
        generator23.setAttemptLoad(true);
        generator23.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator36.getStrategy();
        java.lang.ClassLoader classLoader38 = generator36.getClassLoader();
        generator36.setUseCache(false);
        boolean boolean41 = generator36.getAttemptLoad();
        boolean boolean42 = generator36.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator44.setUseCache(true);
        boolean boolean47 = generator44.getAttemptLoad();
        boolean boolean48 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator44.getStrategy();
        generator43.setStrategy(generatorStrategy49);
        boolean boolean51 = generator43.getAttemptLoad();
        generator43.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader56 = null;
        generator55.setClassLoader(classLoader56);
        java.lang.ClassLoader classLoader58 = null;
        generator55.setClassLoader(classLoader58);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator55.getNamingPolicy();
        generator54.setNamingPolicy(namingPolicy60);
        boolean boolean62 = generator54.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader64 = null;
        generator63.setClassLoader(classLoader64);
        java.util.Comparator<java.lang.String> strComparator67 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator68 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator69 = strComparator67.thenComparing(strComparator68);
        java.util.Comparator<java.lang.String> strComparator70 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator71 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator72 = strComparator70.thenComparing(strComparator71);
        java.util.Comparator<java.lang.String> strComparator73 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator74 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator75 = strComparator73.thenComparing(strComparator74);
        boolean boolean76 = strComparator71.equals((java.lang.Object) strComparator75);
        java.lang.Object[] objArray78 = new java.lang.Object[] { '4', strComparator68, strComparator71, 0.0d };
        generator63.setArrays(objArray78);
        generator54.setArrays(objArray78);
        boolean boolean81 = generator54.getAttemptLoad();
        java.lang.Object[] objArray82 = new java.lang.Object[] { generator54 };
        generator43.setArrays(objArray82);
        generator36.setArrays(objArray82);
        generator23.setArrays(objArray82);
        generator13.setArrays(objArray82);
        generator0.setArrays(objArray82);
        java.lang.Class<?> wildcardClass88 = objArray82.getClass();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2458");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        boolean boolean19 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        boolean boolean24 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator20.getStrategy();
        generator0.setStrategy(generatorStrategy25);
        boolean boolean27 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader30 = null;
        generator29.setClassLoader(classLoader30);
        java.lang.ClassLoader classLoader32 = null;
        generator29.setClassLoader(classLoader32);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        generator28.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader37 = null;
        generator36.setClassLoader(classLoader37);
        java.lang.ClassLoader classLoader39 = null;
        generator36.setClassLoader(classLoader39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator36.getNamingPolicy();
        generator28.setNamingPolicy(namingPolicy41);
        java.lang.ClassLoader classLoader43 = generator28.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator28.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator28.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator46.setUseCache(true);
        boolean boolean49 = generator46.getAttemptLoad();
        boolean boolean50 = generator46.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator46.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator46.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator46.getStrategy();
        generator28.setStrategy(generatorStrategy53);
        generator0.setStrategy(generatorStrategy53);
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader57 = null;
        generator56.setClassLoader(classLoader57);
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = strComparator60.thenComparing(strComparator61);
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = strComparator63.thenComparing(strComparator64);
        java.util.Comparator<java.lang.String> strComparator66 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator67 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator68 = strComparator66.thenComparing(strComparator67);
        boolean boolean69 = strComparator64.equals((java.lang.Object) strComparator68);
        java.lang.Object[] objArray71 = new java.lang.Object[] { '4', strComparator61, strComparator64, 0.0d };
        generator56.setArrays(objArray71);
        java.lang.ClassLoader classLoader73 = null;
        generator56.setClassLoader(classLoader73);
        org.mockito.cglib.util.ParallelSorter.Generator generator75 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader76 = null;
        generator75.setClassLoader(classLoader76);
        java.lang.ClassLoader classLoader78 = null;
        generator75.setClassLoader(classLoader78);
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator75.getNamingPolicy();
        generator56.setNamingPolicy(namingPolicy80);
        boolean boolean82 = generator56.getUseCache();
        java.lang.ClassLoader classLoader83 = generator56.getClassLoader();
        java.lang.ClassLoader classLoader84 = generator56.getClassLoader();
        generator0.setClassLoader(classLoader84);
        org.mockito.cglib.core.NamingPolicy namingPolicy86 = null;
        generator0.setNamingPolicy(namingPolicy86);
        java.lang.ClassLoader classLoader88 = generator0.getClassLoader();
        boolean boolean89 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertNotNull(classLoader84);
        org.junit.Assert.assertNotNull(classLoader88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test2459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2459");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator18.setUseCache(true);
        boolean boolean21 = generator18.getAttemptLoad();
        java.lang.ClassLoader classLoader22 = null;
        generator18.setClassLoader(classLoader22);
        generator18.setUseCache(false);
        boolean boolean26 = generator18.getAttemptLoad();
        generator18.setAttemptLoad(true);
        generator18.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        generator18.setStrategy(generatorStrategy31);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator33.setUseCache(true);
        java.lang.ClassLoader classLoader36 = generator33.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader41 = null;
        generator40.setClassLoader(classLoader41);
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = strComparator44.thenComparing(strComparator45);
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = strComparator47.thenComparing(strComparator48);
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = strComparator50.thenComparing(strComparator51);
        boolean boolean53 = strComparator48.equals((java.lang.Object) strComparator52);
        java.lang.Object[] objArray55 = new java.lang.Object[] { '4', strComparator45, strComparator48, 0.0d };
        generator40.setArrays(objArray55);
        generator37.setArrays(objArray55);
        generator33.setArrays(objArray55);
        java.lang.ClassLoader classLoader59 = generator33.getClassLoader();
        boolean boolean60 = generator33.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator61.setUseCache(true);
        boolean boolean64 = generator61.getAttemptLoad();
        boolean boolean65 = generator61.getUseCache();
        generator61.setAttemptLoad(true);
        generator61.setUseCache(true);
        generator61.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator72 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader73 = null;
        generator72.setClassLoader(classLoader73);
        java.lang.ClassLoader classLoader75 = null;
        generator72.setClassLoader(classLoader75);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator72.getNamingPolicy();
        generator61.setNamingPolicy(namingPolicy77);
        java.lang.ClassLoader classLoader79 = generator61.getClassLoader();
        generator33.setClassLoader(classLoader79);
        generator18.setClassLoader(classLoader79);
        generator0.setClassLoader(classLoader79);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator0.getStrategy();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(generatorStrategy83);
    }

    @Test
    public void test2460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2460");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator3.setUseCache(true);
        boolean boolean6 = generator3.getAttemptLoad();
        boolean boolean7 = generator3.getUseCache();
        generator3.setAttemptLoad(true);
        generator3.setUseCache(true);
        boolean boolean12 = strComparator0.equals((java.lang.Object) generator3);
        generator3.setAttemptLoad(false);
        boolean boolean15 = generator3.getUseCache();
        generator3.setUseCache(false);
        boolean boolean18 = generator3.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        boolean boolean23 = generator19.getUseCache();
        generator19.setAttemptLoad(true);
        generator19.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator19.getStrategy();
        generator3.setStrategy(generatorStrategy28);
        org.mockito.asm.ClassVisitor classVisitor30 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator3.generateClass(classVisitor30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy28);
    }

    @Test
    public void test2461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2461");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader5 = null;
        generator4.setClassLoader(classLoader5);
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator10 = strComparator8.thenComparing(strComparator9);
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator13 = strComparator11.thenComparing(strComparator12);
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = strComparator14.thenComparing(strComparator15);
        boolean boolean17 = strComparator12.equals((java.lang.Object) strComparator16);
        java.lang.Object[] objArray19 = new java.lang.Object[] { '4', strComparator9, strComparator12, 0.0d };
        generator4.setArrays(objArray19);
        java.lang.ClassLoader classLoader21 = null;
        generator4.setClassLoader(classLoader21);
        boolean boolean23 = generator4.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator24.setUseCache(true);
        boolean boolean27 = generator24.getAttemptLoad();
        boolean boolean28 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator24.getStrategy();
        generator4.setStrategy(generatorStrategy29);
        generator0.setStrategy(generatorStrategy29);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator32.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator40.setUseCache(true);
        boolean boolean43 = generator40.getAttemptLoad();
        boolean boolean44 = generator40.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator40.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator46.setUseCache(true);
        boolean boolean49 = generator46.getAttemptLoad();
        boolean boolean50 = generator46.getUseCache();
        generator46.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator53.getStrategy();
        generator46.setStrategy(generatorStrategy54);
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator56.setUseCache(true);
        java.lang.ClassLoader classLoader59 = generator56.getClassLoader();
        generator46.setClassLoader(classLoader59);
        generator40.setClassLoader(classLoader59);
        java.lang.ClassLoader classLoader62 = generator40.getClassLoader();
        generator32.setClassLoader(classLoader62);
        org.mockito.cglib.util.ParallelSorter.Generator generator64 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader66 = null;
        generator65.setClassLoader(classLoader66);
        java.lang.ClassLoader classLoader68 = null;
        generator65.setClassLoader(classLoader68);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator65.getNamingPolicy();
        generator64.setNamingPolicy(namingPolicy70);
        org.mockito.cglib.util.ParallelSorter.Generator generator72 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator72.setUseCache(true);
        boolean boolean75 = generator72.getAttemptLoad();
        boolean boolean76 = generator72.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator72.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator78 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator78.setUseCache(true);
        boolean boolean81 = generator78.getAttemptLoad();
        boolean boolean82 = generator78.getUseCache();
        generator78.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator85 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = generator85.getStrategy();
        generator78.setStrategy(generatorStrategy86);
        org.mockito.cglib.util.ParallelSorter.Generator generator88 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator88.setUseCache(true);
        java.lang.ClassLoader classLoader91 = generator88.getClassLoader();
        generator78.setClassLoader(classLoader91);
        generator72.setClassLoader(classLoader91);
        java.lang.ClassLoader classLoader94 = generator72.getClassLoader();
        generator64.setClassLoader(classLoader94);
        generator32.setClassLoader(classLoader94);
        generator0.setClassLoader(classLoader94);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter98 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(generatorStrategy86);
        org.junit.Assert.assertNotNull(classLoader91);
        org.junit.Assert.assertNotNull(classLoader94);
    }

    @Test
    public void test2462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2462");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        generator0.setAttemptLoad(false);
        boolean boolean17 = generator0.getUseCache();
        java.lang.ClassLoader classLoader18 = generator0.getClassLoader();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        java.lang.ClassLoader classLoader31 = null;
        generator28.setClassLoader(classLoader31);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator28.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy33);
        boolean boolean35 = generator27.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader37 = null;
        generator36.setClassLoader(classLoader37);
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = strComparator40.thenComparing(strComparator41);
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = strComparator43.thenComparing(strComparator44);
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = strComparator46.thenComparing(strComparator47);
        boolean boolean49 = strComparator44.equals((java.lang.Object) strComparator48);
        java.lang.Object[] objArray51 = new java.lang.Object[] { '4', strComparator41, strComparator44, 0.0d };
        generator36.setArrays(objArray51);
        generator27.setArrays(objArray51);
        generator21.setArrays(objArray51);
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader56 = null;
        generator55.setClassLoader(classLoader56);
        java.lang.ClassLoader classLoader58 = generator55.getClassLoader();
        generator21.setClassLoader(classLoader58);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator21.getStrategy();
        generator0.setStrategy(generatorStrategy60);
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator63.setUseCache(true);
        boolean boolean66 = generator63.getAttemptLoad();
        boolean boolean67 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator63.getStrategy();
        generator62.setStrategy(generatorStrategy68);
        org.mockito.cglib.util.ParallelSorter.Generator generator70 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator70.setUseCache(true);
        boolean boolean73 = generator70.getAttemptLoad();
        boolean boolean74 = generator70.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator70.getStrategy();
        generator62.setStrategy(generatorStrategy75);
        org.mockito.cglib.util.ParallelSorter.Generator generator77 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader78 = null;
        generator77.setClassLoader(classLoader78);
        java.util.Comparator<java.lang.String> strComparator81 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator82 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator83 = strComparator81.thenComparing(strComparator82);
        java.util.Comparator<java.lang.String> strComparator84 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator85 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator86 = strComparator84.thenComparing(strComparator85);
        java.util.Comparator<java.lang.String> strComparator87 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator88 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator89 = strComparator87.thenComparing(strComparator88);
        boolean boolean90 = strComparator85.equals((java.lang.Object) strComparator89);
        java.lang.Object[] objArray92 = new java.lang.Object[] { '4', strComparator82, strComparator85, 0.0d };
        generator77.setArrays(objArray92);
        generator62.setArrays(objArray92);
        generator0.setArrays(objArray92);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy98 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass99 = namingPolicy98.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertNotNull(strComparator84);
        org.junit.Assert.assertNotNull(strComparator85);
        org.junit.Assert.assertNotNull(strComparator86);
        org.junit.Assert.assertNotNull(strComparator87);
        org.junit.Assert.assertNotNull(strComparator88);
        org.junit.Assert.assertNotNull(strComparator89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2463");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean6 = generator5.getAttemptLoad();
        java.lang.ClassLoader classLoader7 = generator5.getClassLoader();
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        boolean boolean10 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test2464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2464");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader8 = null;
        generator7.setClassLoader(classLoader8);
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator13 = strComparator11.thenComparing(strComparator12);
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = strComparator14.thenComparing(strComparator15);
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = strComparator17.thenComparing(strComparator18);
        boolean boolean20 = strComparator15.equals((java.lang.Object) strComparator19);
        java.lang.Object[] objArray22 = new java.lang.Object[] { '4', strComparator12, strComparator15, 0.0d };
        generator7.setArrays(objArray22);
        generator0.setArrays(objArray22);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader26 = null;
        generator25.setClassLoader(classLoader26);
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = strComparator29.thenComparing(strComparator30);
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = strComparator32.thenComparing(strComparator33);
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = strComparator35.thenComparing(strComparator36);
        boolean boolean38 = strComparator33.equals((java.lang.Object) strComparator37);
        java.lang.Object[] objArray40 = new java.lang.Object[] { '4', strComparator30, strComparator33, 0.0d };
        generator25.setArrays(objArray40);
        generator25.setUseCache(true);
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = strComparator44.thenComparing(strComparator45);
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator47.setUseCache(true);
        boolean boolean50 = generator47.getAttemptLoad();
        boolean boolean51 = generator47.getUseCache();
        generator47.setAttemptLoad(true);
        generator47.setUseCache(true);
        boolean boolean56 = strComparator44.equals((java.lang.Object) generator47);
        generator47.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator59.getStrategy();
        generator59.setUseCache(true);
        generator59.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator59.getNamingPolicy();
        generator47.setNamingPolicy(namingPolicy65);
        generator25.setNamingPolicy(namingPolicy65);
        generator0.setNamingPolicy(namingPolicy65);
        boolean boolean69 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test2465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2465");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader7 = null;
        generator6.setClassLoader(classLoader7);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = strComparator13.thenComparing(strComparator14);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        boolean boolean19 = strComparator14.equals((java.lang.Object) strComparator18);
        java.lang.Object[] objArray21 = new java.lang.Object[] { '4', strComparator11, strComparator14, 0.0d };
        generator6.setArrays(objArray21);
        java.lang.ClassLoader classLoader23 = null;
        generator6.setClassLoader(classLoader23);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader26 = null;
        generator25.setClassLoader(classLoader26);
        java.lang.ClassLoader classLoader28 = null;
        generator25.setClassLoader(classLoader28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator25.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator33.setUseCache(true);
        boolean boolean36 = generator33.getAttemptLoad();
        boolean boolean37 = generator33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator33.getStrategy();
        generator32.setStrategy(generatorStrategy38);
        generator6.setStrategy(generatorStrategy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        generator41.setNamingPolicy(namingPolicy47);
        generator6.setNamingPolicy(namingPolicy47);
        generator0.setNamingPolicy(namingPolicy47);
        boolean boolean51 = generator0.getUseCache();
        java.lang.ClassLoader classLoader52 = generator0.getClassLoader();
        boolean boolean53 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(namingPolicy54);
    }

    @Test
    public void test2466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2466");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.reverseOrder();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = strComparator0.equals((java.lang.Object) generator1);
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator5.setUseCache(true);
        boolean boolean8 = generator5.getAttemptLoad();
        boolean boolean9 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator5.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator5.setStrategy(generatorStrategy16);
        java.lang.ClassLoader classLoader18 = generator5.getClassLoader();
        generator5.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator27.setUseCache(true);
        boolean boolean30 = generator27.getAttemptLoad();
        boolean boolean31 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator27.getStrategy();
        generator21.setStrategy(generatorStrategy32);
        java.lang.ClassLoader classLoader34 = generator21.getClassLoader();
        generator5.setClassLoader(classLoader34);
        boolean boolean36 = generator5.getAttemptLoad();
        boolean boolean37 = generator5.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator5.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy38);
        java.lang.Class<?> wildcardClass40 = generator1.getClass();
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test2467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2467");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy24);
        boolean boolean26 = generator0.getUseCache();
        java.lang.ClassLoader classLoader27 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        boolean boolean39 = generator35.getUseCache();
        generator35.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator42.getStrategy();
        generator35.setStrategy(generatorStrategy43);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator45.setUseCache(true);
        java.lang.ClassLoader classLoader48 = generator45.getClassLoader();
        generator35.setClassLoader(classLoader48);
        generator29.setClassLoader(classLoader48);
        java.lang.ClassLoader classLoader51 = generator29.getClassLoader();
        generator0.setClassLoader(classLoader51);
        boolean boolean53 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test2468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2468");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader22 = null;
        generator21.setClassLoader(classLoader22);
        java.lang.ClassLoader classLoader24 = null;
        generator21.setClassLoader(classLoader24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator21.getNamingPolicy();
        generator20.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = strComparator32.thenComparing(strComparator33);
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = strComparator35.thenComparing(strComparator36);
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = strComparator38.thenComparing(strComparator39);
        boolean boolean41 = strComparator36.equals((java.lang.Object) strComparator40);
        java.lang.Object[] objArray43 = new java.lang.Object[] { '4', strComparator33, strComparator36, 0.0d };
        generator28.setArrays(objArray43);
        java.lang.ClassLoader classLoader45 = null;
        generator28.setClassLoader(classLoader45);
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader48 = null;
        generator47.setClassLoader(classLoader48);
        java.lang.ClassLoader classLoader50 = null;
        generator47.setClassLoader(classLoader50);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator47.getNamingPolicy();
        generator28.setNamingPolicy(namingPolicy52);
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator55.setUseCache(true);
        boolean boolean58 = generator55.getAttemptLoad();
        boolean boolean59 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator55.getStrategy();
        generator54.setStrategy(generatorStrategy60);
        generator28.setStrategy(generatorStrategy60);
        generator20.setStrategy(generatorStrategy60);
        java.lang.ClassLoader classLoader64 = generator20.getClassLoader();
        boolean boolean65 = generator20.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator20.getStrategy();
        generator0.setStrategy(generatorStrategy66);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter68 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(generatorStrategy66);
    }

    @Test
    public void test2469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2469");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        boolean boolean13 = generator10.getAttemptLoad();
        boolean boolean14 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator10.getStrategy();
        generator9.setStrategy(generatorStrategy15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator17.setUseCache(true);
        boolean boolean20 = generator17.getAttemptLoad();
        boolean boolean21 = generator17.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator17.getStrategy();
        generator9.setStrategy(generatorStrategy22);
        generator6.setStrategy(generatorStrategy22);
        boolean boolean25 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator6.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy28);
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = strComparator30.thenComparing(strComparator31);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator33.setUseCache(true);
        boolean boolean36 = generator33.getAttemptLoad();
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        generator33.setUseCache(true);
        boolean boolean42 = strComparator30.equals((java.lang.Object) generator33);
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator43.setUseCache(true);
        java.lang.ClassLoader classLoader46 = generator43.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator47.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator47.getStrategy();
        generator43.setStrategy(generatorStrategy50);
        generator33.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader53 = generator33.getClassLoader();
        generator33.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator33.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy56);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(namingPolicy56);
    }

    @Test
    public void test2470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2470");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader12 = null;
        generator11.setClassLoader(classLoader12);
        java.lang.ClassLoader classLoader14 = null;
        generator11.setClassLoader(classLoader14);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator11.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        boolean boolean22 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor25 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2471");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator0.setNamingPolicy(namingPolicy29);
        java.lang.ClassLoader classLoader31 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator34.getStrategy();
        java.lang.ClassLoader classLoader36 = generator34.getClassLoader();
        generator34.setUseCache(false);
        boolean boolean39 = generator34.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator34.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        generator41.setAttemptLoad(true);
        generator41.setUseCache(true);
        generator41.setUseCache(false);
        boolean boolean52 = generator41.getUseCache();
        java.lang.ClassLoader classLoader53 = generator41.getClassLoader();
        boolean boolean54 = generator41.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader56 = null;
        generator55.setClassLoader(classLoader56);
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader59 = null;
        generator58.setClassLoader(classLoader59);
        java.util.Comparator<java.lang.String> strComparator62 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = strComparator62.thenComparing(strComparator63);
        java.util.Comparator<java.lang.String> strComparator65 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator66 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator67 = strComparator65.thenComparing(strComparator66);
        java.util.Comparator<java.lang.String> strComparator68 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator69 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator70 = strComparator68.thenComparing(strComparator69);
        boolean boolean71 = strComparator66.equals((java.lang.Object) strComparator70);
        java.lang.Object[] objArray73 = new java.lang.Object[] { '4', strComparator63, strComparator66, 0.0d };
        generator58.setArrays(objArray73);
        generator55.setArrays(objArray73);
        generator41.setArrays(objArray73);
        generator34.setArrays(objArray73);
        generator0.setArrays(objArray73);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy79);
    }

    @Test
    public void test2472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2472");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        generator0.setUseCache(false);
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator10 = strComparator8.thenComparing(strComparator9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        generator11.setAttemptLoad(true);
        generator11.setUseCache(true);
        boolean boolean20 = strComparator8.equals((java.lang.Object) generator11);
        generator11.setAttemptLoad(false);
        boolean boolean23 = generator11.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator11.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator26.setUseCache(true);
        boolean boolean29 = generator26.getAttemptLoad();
        boolean boolean30 = generator26.getUseCache();
        generator26.setAttemptLoad(true);
        generator26.setUseCache(true);
        generator26.setUseCache(false);
        generator26.setUseCache(false);
        boolean boolean39 = generator26.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator40.setUseCache(true);
        boolean boolean43 = generator40.getAttemptLoad();
        boolean boolean44 = generator40.getUseCache();
        generator40.setAttemptLoad(true);
        generator40.setUseCache(true);
        generator40.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator40.getStrategy();
        generator26.setStrategy(generatorStrategy51);
        generator0.setStrategy(generatorStrategy51);
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
    }

    @Test
    public void test2473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2473");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        boolean boolean8 = generator0.getUseCache();
        boolean boolean9 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
    }

    @Test
    public void test2474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2474");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader7 = null;
        generator6.setClassLoader(classLoader7);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = strComparator13.thenComparing(strComparator14);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        boolean boolean19 = strComparator14.equals((java.lang.Object) strComparator18);
        java.lang.Object[] objArray21 = new java.lang.Object[] { '4', strComparator11, strComparator14, 0.0d };
        generator6.setArrays(objArray21);
        java.lang.ClassLoader classLoader23 = null;
        generator6.setClassLoader(classLoader23);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader26 = null;
        generator25.setClassLoader(classLoader26);
        java.lang.ClassLoader classLoader28 = null;
        generator25.setClassLoader(classLoader28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator25.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator33.setUseCache(true);
        boolean boolean36 = generator33.getAttemptLoad();
        boolean boolean37 = generator33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator33.getStrategy();
        generator32.setStrategy(generatorStrategy38);
        generator6.setStrategy(generatorStrategy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        generator41.setNamingPolicy(namingPolicy47);
        generator6.setNamingPolicy(namingPolicy47);
        generator0.setNamingPolicy(namingPolicy47);
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader53 = null;
        generator52.setClassLoader(classLoader53);
        java.lang.ClassLoader classLoader55 = null;
        generator52.setClassLoader(classLoader55);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator52.getNamingPolicy();
        generator51.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader60 = null;
        generator59.setClassLoader(classLoader60);
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = strComparator63.thenComparing(strComparator64);
        java.util.Comparator<java.lang.String> strComparator66 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator67 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator68 = strComparator66.thenComparing(strComparator67);
        java.util.Comparator<java.lang.String> strComparator69 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator70 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator71 = strComparator69.thenComparing(strComparator70);
        boolean boolean72 = strComparator67.equals((java.lang.Object) strComparator71);
        java.lang.Object[] objArray74 = new java.lang.Object[] { '4', strComparator64, strComparator67, 0.0d };
        generator59.setArrays(objArray74);
        java.lang.ClassLoader classLoader76 = null;
        generator59.setClassLoader(classLoader76);
        org.mockito.cglib.util.ParallelSorter.Generator generator78 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader79 = null;
        generator78.setClassLoader(classLoader79);
        java.lang.ClassLoader classLoader81 = null;
        generator78.setClassLoader(classLoader81);
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = generator78.getNamingPolicy();
        generator59.setNamingPolicy(namingPolicy83);
        org.mockito.cglib.util.ParallelSorter.Generator generator85 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator86 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator86.setUseCache(true);
        boolean boolean89 = generator86.getAttemptLoad();
        boolean boolean90 = generator86.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy91 = generator86.getStrategy();
        generator85.setStrategy(generatorStrategy91);
        generator59.setStrategy(generatorStrategy91);
        generator51.setStrategy(generatorStrategy91);
        java.lang.ClassLoader classLoader95 = generator51.getClassLoader();
        generator0.setClassLoader(classLoader95);
        boolean boolean97 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy98 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass99 = namingPolicy98.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy83);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(generatorStrategy91);
        org.junit.Assert.assertNotNull(classLoader95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNotNull(namingPolicy98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2475");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator2 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean3 = generator2.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator2.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader7 = null;
        generator6.setClassLoader(classLoader7);
        java.lang.ClassLoader classLoader9 = null;
        generator6.setClassLoader(classLoader9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator6.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader14 = null;
        generator13.setClassLoader(classLoader14);
        java.lang.ClassLoader classLoader16 = null;
        generator13.setClassLoader(classLoader16);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator13.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        java.lang.ClassLoader classLoader23 = generator20.getClassLoader();
        generator5.setClassLoader(classLoader23);
        generator2.setClassLoader(classLoader23);
        generator2.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator29.getStrategy();
        generator28.setStrategy(generatorStrategy34);
        boolean boolean36 = generator28.getAttemptLoad();
        generator28.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader41 = null;
        generator40.setClassLoader(classLoader41);
        java.lang.ClassLoader classLoader43 = null;
        generator40.setClassLoader(classLoader43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator40.getNamingPolicy();
        generator39.setNamingPolicy(namingPolicy45);
        boolean boolean47 = generator39.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader49 = null;
        generator48.setClassLoader(classLoader49);
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = strComparator52.thenComparing(strComparator53);
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = strComparator55.thenComparing(strComparator56);
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = strComparator58.thenComparing(strComparator59);
        boolean boolean61 = strComparator56.equals((java.lang.Object) strComparator60);
        java.lang.Object[] objArray63 = new java.lang.Object[] { '4', strComparator53, strComparator56, 0.0d };
        generator48.setArrays(objArray63);
        generator39.setArrays(objArray63);
        boolean boolean66 = generator39.getAttemptLoad();
        java.lang.Object[] objArray67 = new java.lang.Object[] { generator39 };
        generator28.setArrays(objArray67);
        generator2.setArrays(objArray67);
        generator0.setArrays(objArray67);
        java.lang.ClassLoader classLoader71 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator0.getStrategy();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(generatorStrategy73);
    }

    @Test
    public void test2476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2476");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader5 = null;
        generator4.setClassLoader(classLoader5);
        java.lang.ClassLoader classLoader7 = null;
        generator4.setClassLoader(classLoader7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator4.getNamingPolicy();
        generator3.setNamingPolicy(namingPolicy9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator3.getNamingPolicy();
        boolean boolean12 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator3.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator3.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator3.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        java.lang.ClassLoader classLoader21 = null;
        generator18.setClassLoader(classLoader21);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator18.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy23);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader26 = null;
        generator25.setClassLoader(classLoader26);
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = strComparator29.thenComparing(strComparator30);
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = strComparator32.thenComparing(strComparator33);
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = strComparator35.thenComparing(strComparator36);
        boolean boolean38 = strComparator33.equals((java.lang.Object) strComparator37);
        java.lang.Object[] objArray40 = new java.lang.Object[] { '4', strComparator30, strComparator33, 0.0d };
        generator25.setArrays(objArray40);
        generator17.setArrays(objArray40);
        generator3.setArrays(objArray40);
        generator0.setArrays(objArray40);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader47 = null;
        generator46.setClassLoader(classLoader47);
        java.lang.ClassLoader classLoader49 = null;
        generator46.setClassLoader(classLoader49);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator46.getNamingPolicy();
        generator45.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader54 = null;
        generator53.setClassLoader(classLoader54);
        java.lang.ClassLoader classLoader56 = null;
        generator53.setClassLoader(classLoader56);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator53.getNamingPolicy();
        generator45.setNamingPolicy(namingPolicy58);
        generator45.setAttemptLoad(false);
        generator45.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator45.getNamingPolicy();
        boolean boolean65 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator45.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy66);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(namingPolicy66);
    }

    @Test
    public void test2477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2477");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        boolean boolean8 = generator0.getUseCache();
        boolean boolean9 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean12 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test2478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2478");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        java.lang.ClassLoader classLoader5 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator7.setUseCache(true);
        boolean boolean10 = generator7.getAttemptLoad();
        boolean boolean11 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator7.getStrategy();
        generator6.setStrategy(generatorStrategy12);
        boolean boolean14 = generator6.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader17 = null;
        generator16.setClassLoader(classLoader17);
        java.lang.ClassLoader classLoader19 = null;
        generator16.setClassLoader(classLoader19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader24 = null;
        generator23.setClassLoader(classLoader24);
        java.lang.ClassLoader classLoader26 = null;
        generator23.setClassLoader(classLoader26);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator23.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy28);
        generator6.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator6.getNamingPolicy();
        boolean boolean32 = generator6.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator6.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        boolean boolean39 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator35.getStrategy();
        generator34.setStrategy(generatorStrategy40);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator42.setUseCache(true);
        boolean boolean45 = generator42.getAttemptLoad();
        boolean boolean46 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator42.getStrategy();
        generator34.setStrategy(generatorStrategy47);
        generator34.setAttemptLoad(false);
        boolean boolean51 = generator34.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator52.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator56.setUseCache(true);
        boolean boolean59 = generator56.getAttemptLoad();
        boolean boolean60 = generator56.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator56.getStrategy();
        generator55.setStrategy(generatorStrategy61);
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator63.setUseCache(true);
        boolean boolean66 = generator63.getAttemptLoad();
        boolean boolean67 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator63.getStrategy();
        generator55.setStrategy(generatorStrategy68);
        generator52.setStrategy(generatorStrategy68);
        boolean boolean71 = generator52.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator72 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader73 = null;
        generator72.setClassLoader(classLoader73);
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator78 = strComparator76.thenComparing(strComparator77);
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator81 = strComparator79.thenComparing(strComparator80);
        java.util.Comparator<java.lang.String> strComparator82 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator83 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator84 = strComparator82.thenComparing(strComparator83);
        boolean boolean85 = strComparator80.equals((java.lang.Object) strComparator84);
        java.lang.Object[] objArray87 = new java.lang.Object[] { '4', strComparator77, strComparator80, 0.0d };
        generator72.setArrays(objArray87);
        generator52.setArrays(objArray87);
        generator34.setArrays(objArray87);
        generator6.setArrays(objArray87);
        generator0.setArrays(objArray87);
        java.lang.ClassLoader classLoader93 = generator0.getClassLoader();
        boolean boolean94 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertNotNull(strComparator84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test2479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2479");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        generator4.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator11.getStrategy();
        generator4.setStrategy(generatorStrategy12);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator14.setUseCache(true);
        java.lang.ClassLoader classLoader17 = generator14.getClassLoader();
        generator4.setClassLoader(classLoader17);
        generator4.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(classLoader23);
    }

    @Test
    public void test2480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2480");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        java.lang.ClassLoader classLoader18 = generator15.getClassLoader();
        generator0.setClassLoader(classLoader18);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass25 = namingPolicy24.getClass();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test2481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2481");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy16);
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(generatorStrategy16);
    }

    @Test
    public void test2482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2482");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        boolean boolean8 = generator0.getUseCache();
        boolean boolean9 = generator0.getUseCache();
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        java.util.Comparator<java.lang.String> strComparator13 = strComparator10.reversed();
        java.util.Comparator<java.lang.String> strComparator14 = strComparator13.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader17 = null;
        generator16.setClassLoader(classLoader17);
        java.lang.ClassLoader classLoader19 = null;
        generator16.setClassLoader(classLoader19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy21);
        boolean boolean23 = strComparator13.equals((java.lang.Object) generator15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator15.getStrategy();
        generator0.setStrategy(generatorStrategy24);
        boolean boolean26 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader30 = null;
        generator29.setClassLoader(classLoader30);
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = strComparator33.thenComparing(strComparator34);
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = strComparator36.thenComparing(strComparator37);
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = strComparator39.thenComparing(strComparator40);
        boolean boolean42 = strComparator37.equals((java.lang.Object) strComparator41);
        java.lang.Object[] objArray44 = new java.lang.Object[] { '4', strComparator34, strComparator37, 0.0d };
        generator29.setArrays(objArray44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator29.getStrategy();
        generator0.setStrategy(generatorStrategy46);
        java.lang.ClassLoader classLoader48 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor49 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(classLoader48);
    }

    @Test
    public void test2483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2483");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator12.getStrategy();
        generator11.setStrategy(generatorStrategy17);
        boolean boolean19 = generator11.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader22 = null;
        generator21.setClassLoader(classLoader22);
        java.lang.ClassLoader classLoader24 = null;
        generator21.setClassLoader(classLoader24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator21.getNamingPolicy();
        generator20.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        java.lang.ClassLoader classLoader31 = null;
        generator28.setClassLoader(classLoader31);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator28.getNamingPolicy();
        generator20.setNamingPolicy(namingPolicy33);
        generator11.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator11.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator11.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator0.getStrategy();
        java.lang.ClassLoader classLoader40 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(namingPolicy41);
    }

    @Test
    public void test2484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2484");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.lang.ClassLoader classLoader17 = null;
        generator14.setClassLoader(classLoader17);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator14.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator13.getNamingPolicy();
        generator13.setUseCache(false);
        boolean boolean24 = generator13.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator13.getNamingPolicy();
        generator13.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator13.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        boolean boolean34 = generator31.getAttemptLoad();
        boolean boolean35 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator31.getStrategy();
        generator30.setStrategy(generatorStrategy36);
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator38.setUseCache(true);
        boolean boolean41 = generator38.getAttemptLoad();
        boolean boolean42 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator38.getStrategy();
        generator30.setStrategy(generatorStrategy43);
        generator30.setAttemptLoad(false);
        boolean boolean47 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator30.getStrategy();
        generator0.setStrategy(generatorStrategy48);
        boolean boolean50 = generator0.getUseCache();
        java.lang.Class<?> wildcardClass51 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test2485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2485");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator7.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        generator7.setStrategy(generatorStrategy20);
        generator4.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator4.getNamingPolicy();
        java.lang.ClassLoader classLoader25 = generator4.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator4.getStrategy();
        java.lang.ClassLoader classLoader27 = generator4.getClassLoader();
        generator0.setClassLoader(classLoader27);
        org.mockito.asm.ClassVisitor classVisitor29 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(classLoader27);
    }

    @Test
    public void test2486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2486");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        boolean boolean9 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        java.lang.ClassLoader classLoader13 = generator10.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        boolean boolean27 = strComparator22.equals((java.lang.Object) strComparator26);
        java.lang.Object[] objArray29 = new java.lang.Object[] { '4', strComparator19, strComparator22, 0.0d };
        generator14.setArrays(objArray29);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        java.lang.ClassLoader classLoader34 = null;
        generator31.setClassLoader(classLoader34);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator31.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy36);
        generator10.setNamingPolicy(namingPolicy36);
        generator0.setNamingPolicy(namingPolicy36);
        java.lang.ClassLoader classLoader40 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(namingPolicy41);
    }

    @Test
    public void test2487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2487");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator4.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator3.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        boolean boolean19 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        boolean boolean24 = generator20.getUseCache();
        generator20.setAttemptLoad(true);
        generator20.setUseCache(true);
        generator20.setAttemptLoad(true);
        generator20.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator20.getStrategy();
        java.lang.ClassLoader classLoader34 = generator20.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator20.getStrategy();
        generator0.setStrategy(generatorStrategy35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        java.lang.ClassLoader classLoader38 = generator0.getClassLoader();
        java.lang.Class<?> wildcardClass39 = classLoader38.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test2488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2488");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator5.setUseCache(true);
        boolean boolean8 = generator5.getAttemptLoad();
        boolean boolean9 = generator5.getUseCache();
        generator5.setAttemptLoad(true);
        generator5.setUseCache(true);
        generator5.setUseCache(false);
        generator5.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean19 = generator18.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator18.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader23 = null;
        generator22.setClassLoader(classLoader23);
        java.lang.ClassLoader classLoader25 = null;
        generator22.setClassLoader(classLoader25);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator22.getNamingPolicy();
        generator21.setNamingPolicy(namingPolicy27);
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader30 = null;
        generator29.setClassLoader(classLoader30);
        java.lang.ClassLoader classLoader32 = null;
        generator29.setClassLoader(classLoader32);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        generator21.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator36.setUseCache(true);
        java.lang.ClassLoader classLoader39 = generator36.getClassLoader();
        generator21.setClassLoader(classLoader39);
        generator18.setClassLoader(classLoader39);
        generator18.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator45.setUseCache(true);
        boolean boolean48 = generator45.getAttemptLoad();
        boolean boolean49 = generator45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator45.getStrategy();
        generator44.setStrategy(generatorStrategy50);
        boolean boolean52 = generator44.getAttemptLoad();
        generator44.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader57 = null;
        generator56.setClassLoader(classLoader57);
        java.lang.ClassLoader classLoader59 = null;
        generator56.setClassLoader(classLoader59);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator56.getNamingPolicy();
        generator55.setNamingPolicy(namingPolicy61);
        boolean boolean63 = generator55.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator64 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader65 = null;
        generator64.setClassLoader(classLoader65);
        java.util.Comparator<java.lang.String> strComparator68 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator69 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator70 = strComparator68.thenComparing(strComparator69);
        java.util.Comparator<java.lang.String> strComparator71 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator72 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator73 = strComparator71.thenComparing(strComparator72);
        java.util.Comparator<java.lang.String> strComparator74 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = strComparator74.thenComparing(strComparator75);
        boolean boolean77 = strComparator72.equals((java.lang.Object) strComparator76);
        java.lang.Object[] objArray79 = new java.lang.Object[] { '4', strComparator69, strComparator72, 0.0d };
        generator64.setArrays(objArray79);
        generator55.setArrays(objArray79);
        boolean boolean82 = generator55.getAttemptLoad();
        java.lang.Object[] objArray83 = new java.lang.Object[] { generator55 };
        generator44.setArrays(objArray83);
        generator18.setArrays(objArray83);
        generator5.setArrays(objArray83);
        generator0.setArrays(objArray83);
        java.lang.ClassLoader classLoader88 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor89 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.util.ParallelSorter$Generator is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertNotNull(classLoader88);
    }

    @Test
    public void test2489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2489");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        java.lang.ClassLoader classLoader15 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator18.setUseCache(true);
        boolean boolean21 = generator18.getAttemptLoad();
        boolean boolean22 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator18.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator18.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator18.getStrategy();
        generator0.setStrategy(generatorStrategy25);
        generator0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter29 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
    }

    @Test
    public void test2490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2490");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        boolean boolean9 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator0.setStrategy(generatorStrategy10);
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator13.setUseCache(true);
        boolean boolean16 = generator13.getAttemptLoad();
        boolean boolean17 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator13.getStrategy();
        generator12.setStrategy(generatorStrategy18);
        boolean boolean20 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator12.getNamingPolicy();
        java.lang.ClassLoader classLoader22 = generator12.getClassLoader();
        generator0.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        boolean boolean30 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test2491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2491");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader8 = null;
        generator7.setClassLoader(classLoader8);
        java.lang.ClassLoader classLoader10 = null;
        generator7.setClassLoader(classLoader10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        boolean boolean27 = strComparator22.equals((java.lang.Object) strComparator26);
        java.lang.Object[] objArray29 = new java.lang.Object[] { '4', strComparator19, strComparator22, 0.0d };
        generator14.setArrays(objArray29);
        java.lang.ClassLoader classLoader31 = null;
        generator14.setClassLoader(classLoader31);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        generator40.setStrategy(generatorStrategy46);
        generator14.setStrategy(generatorStrategy46);
        generator6.setStrategy(generatorStrategy46);
        generator0.setStrategy(generatorStrategy46);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader53 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator54.setUseCache(true);
        boolean boolean57 = generator54.getAttemptLoad();
        java.lang.ClassLoader classLoader58 = null;
        generator54.setClassLoader(classLoader58);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator54.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy60);
        boolean boolean62 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator63.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator66 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator67.setUseCache(true);
        boolean boolean70 = generator67.getAttemptLoad();
        boolean boolean71 = generator67.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator67.getStrategy();
        generator66.setStrategy(generatorStrategy72);
        org.mockito.cglib.util.ParallelSorter.Generator generator74 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator74.setUseCache(true);
        boolean boolean77 = generator74.getAttemptLoad();
        boolean boolean78 = generator74.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator74.getStrategy();
        generator66.setStrategy(generatorStrategy79);
        generator63.setStrategy(generatorStrategy79);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator63.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = generator63.getNamingPolicy();
        java.lang.ClassLoader classLoader84 = generator63.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator63.getStrategy();
        generator0.setStrategy(generatorStrategy85);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(namingPolicy83);
        org.junit.Assert.assertNotNull(classLoader84);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertNotNull(namingPolicy88);
    }

    @Test
    public void test2492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2492");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader8 = null;
        generator7.setClassLoader(classLoader8);
        java.lang.ClassLoader classLoader10 = null;
        generator7.setClassLoader(classLoader10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy12);
        boolean boolean14 = generator6.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        boolean boolean28 = strComparator23.equals((java.lang.Object) strComparator27);
        java.lang.Object[] objArray30 = new java.lang.Object[] { '4', strComparator20, strComparator23, 0.0d };
        generator15.setArrays(objArray30);
        generator6.setArrays(objArray30);
        generator0.setArrays(objArray30);
        boolean boolean34 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        java.lang.ClassLoader classLoader39 = null;
        generator35.setClassLoader(classLoader39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator35.getNamingPolicy();
        boolean boolean42 = generator35.getUseCache();
        java.lang.Object[] objArray43 = new java.lang.Object[] {};
        generator35.setArrays(objArray43);
        generator0.setArrays(objArray43);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter46 = org.mockito.cglib.util.ParallelSorter.create(objArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No arrays specified to sort");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
    }

    @Test
    public void test2493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2493");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        boolean boolean7 = generator0.getUseCache();
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        generator0.setArrays(objArray8);
        java.lang.Class<?> wildcardClass10 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2494");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(classLoader15);
    }

    @Test
    public void test2495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2495");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        java.lang.ClassLoader classLoader18 = generator15.getClassLoader();
        generator0.setClassLoader(classLoader18);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator0.getStrategy();
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter27 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(classLoader26);
    }

    @Test
    public void test2496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2496");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader19 = generator0.getClassLoader();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader19);
    }

    @Test
    public void test2497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2497");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        generator0.setUseCache(false);
        boolean boolean8 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator0.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader13 = null;
        generator12.setClassLoader(classLoader13);
        java.lang.ClassLoader classLoader15 = null;
        generator12.setClassLoader(classLoader15);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = strComparator23.thenComparing(strComparator24);
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = strComparator26.thenComparing(strComparator27);
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = strComparator29.thenComparing(strComparator30);
        boolean boolean32 = strComparator27.equals((java.lang.Object) strComparator31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { '4', strComparator24, strComparator27, 0.0d };
        generator19.setArrays(objArray34);
        java.lang.ClassLoader classLoader36 = null;
        generator19.setClassLoader(classLoader36);
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader39 = null;
        generator38.setClassLoader(classLoader39);
        java.lang.ClassLoader classLoader41 = null;
        generator38.setClassLoader(classLoader41);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator38.getNamingPolicy();
        generator19.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator46.setUseCache(true);
        boolean boolean49 = generator46.getAttemptLoad();
        boolean boolean50 = generator46.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator46.getStrategy();
        generator45.setStrategy(generatorStrategy51);
        generator19.setStrategy(generatorStrategy51);
        generator11.setStrategy(generatorStrategy51);
        java.lang.ClassLoader classLoader55 = generator11.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator11.getStrategy();
        generator0.setStrategy(generatorStrategy56);
        java.lang.ClassLoader classLoader58 = generator0.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter59 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(classLoader58);
    }

    @Test
    public void test2498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2498");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        boolean boolean27 = strComparator22.equals((java.lang.Object) strComparator26);
        java.lang.Object[] objArray29 = new java.lang.Object[] { '4', strComparator19, strComparator22, 0.0d };
        generator14.setArrays(objArray29);
        java.lang.ClassLoader classLoader31 = null;
        generator14.setClassLoader(classLoader31);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator14.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator47.setUseCache(true);
        boolean boolean50 = generator47.getAttemptLoad();
        boolean boolean51 = generator47.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator47.getStrategy();
        generator41.setStrategy(generatorStrategy52);
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader56 = null;
        generator55.setClassLoader(classLoader56);
        java.lang.ClassLoader classLoader58 = null;
        generator55.setClassLoader(classLoader58);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator55.getNamingPolicy();
        generator54.setNamingPolicy(namingPolicy60);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator54.getNamingPolicy();
        generator54.setUseCache(false);
        boolean boolean65 = generator54.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator54.getNamingPolicy();
        generator54.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator54.getNamingPolicy();
        generator41.setNamingPolicy(namingPolicy69);
        generator41.setUseCache(false);
        boolean boolean73 = generator41.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator74 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator74.setUseCache(true);
        boolean boolean77 = generator74.getAttemptLoad();
        boolean boolean78 = generator74.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator74.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator80 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator80.setUseCache(true);
        boolean boolean83 = generator80.getAttemptLoad();
        boolean boolean84 = generator80.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator80.getStrategy();
        generator74.setStrategy(generatorStrategy85);
        java.lang.ClassLoader classLoader87 = generator74.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = generator74.getNamingPolicy();
        generator74.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy91 = generator74.getStrategy();
        generator41.setStrategy(generatorStrategy91);
        generator14.setStrategy(generatorStrategy91);
        generator0.setStrategy(generatorStrategy91);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertNotNull(namingPolicy88);
        org.junit.Assert.assertNotNull(generatorStrategy91);
    }

    @Test
    public void test2499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2499");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader11 = null;
        generator10.setClassLoader(classLoader11);
        java.lang.ClassLoader classLoader13 = null;
        generator10.setClassLoader(classLoader13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator10.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy22);
        generator0.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator26.setUseCache(true);
        boolean boolean29 = generator26.getAttemptLoad();
        boolean boolean30 = generator26.getUseCache();
        generator26.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator26.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader36 = null;
        generator35.setClassLoader(classLoader36);
        java.lang.ClassLoader classLoader38 = null;
        generator35.setClassLoader(classLoader38);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator35.getNamingPolicy();
        generator34.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        generator34.setNamingPolicy(namingPolicy47);
        generator34.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator34.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader54 = null;
        generator53.setClassLoader(classLoader54);
        java.lang.ClassLoader classLoader56 = null;
        generator53.setClassLoader(classLoader56);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator53.getNamingPolicy();
        generator52.setNamingPolicy(namingPolicy58);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator52.getNamingPolicy();
        generator34.setNamingPolicy(namingPolicy60);
        generator26.setNamingPolicy(namingPolicy60);
        generator0.setNamingPolicy(namingPolicy60);
        java.lang.ClassLoader classLoader64 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader65 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader66 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(classLoader66);
    }

    @Test
    public void test2500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2500");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        boolean boolean13 = generator10.getAttemptLoad();
        boolean boolean14 = generator10.getUseCache();
        generator10.setAttemptLoad(true);
        generator10.setUseCache(true);
        generator10.setUseCache(false);
        generator10.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator23.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.lang.ClassLoader classLoader30 = null;
        generator27.setClassLoader(classLoader30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader35 = null;
        generator34.setClassLoader(classLoader35);
        java.lang.ClassLoader classLoader37 = null;
        generator34.setClassLoader(classLoader37);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator34.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        java.lang.ClassLoader classLoader44 = generator41.getClassLoader();
        generator26.setClassLoader(classLoader44);
        generator23.setClassLoader(classLoader44);
        generator23.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator50.setUseCache(true);
        boolean boolean53 = generator50.getAttemptLoad();
        boolean boolean54 = generator50.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator50.getStrategy();
        generator49.setStrategy(generatorStrategy55);
        boolean boolean57 = generator49.getAttemptLoad();
        generator49.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader62 = null;
        generator61.setClassLoader(classLoader62);
        java.lang.ClassLoader classLoader64 = null;
        generator61.setClassLoader(classLoader64);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator61.getNamingPolicy();
        generator60.setNamingPolicy(namingPolicy66);
        boolean boolean68 = generator60.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator69 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader70 = null;
        generator69.setClassLoader(classLoader70);
        java.util.Comparator<java.lang.String> strComparator73 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator74 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator75 = strComparator73.thenComparing(strComparator74);
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator78 = strComparator76.thenComparing(strComparator77);
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator81 = strComparator79.thenComparing(strComparator80);
        boolean boolean82 = strComparator77.equals((java.lang.Object) strComparator81);
        java.lang.Object[] objArray84 = new java.lang.Object[] { '4', strComparator74, strComparator77, 0.0d };
        generator69.setArrays(objArray84);
        generator60.setArrays(objArray84);
        boolean boolean87 = generator60.getAttemptLoad();
        java.lang.Object[] objArray88 = new java.lang.Object[] { generator60 };
        generator49.setArrays(objArray88);
        generator23.setArrays(objArray88);
        generator10.setArrays(objArray88);
        generator0.setArrays(objArray88);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(objArray88);
    }
}


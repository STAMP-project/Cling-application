import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest11 {

    public static boolean debug = false;

    @Test
    public void test05501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05501");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance9.increment((-1.0d));
        variance9.setBiasCorrected(false);
        boolean boolean14 = variance9.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean16 = variance9.equals((java.lang.Object) secondMoment15);
        double double17 = secondMoment15.getResult();
        secondMoment15.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        double double23 = secondMoment21.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment21);
        secondMoment21.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance27.increment((-1.0d));
        variance27.setBiasCorrected(false);
        boolean boolean32 = variance27.isBiasCorrected();
        double[] doubleArray33 = new double[] {};
        double double34 = variance27.evaluate(doubleArray33);
        secondMoment21.incrementAll(doubleArray33);
        double double36 = variance19.evaluate(doubleArray33);
        double double37 = secondMoment0.evaluate(doubleArray33);
        long long38 = secondMoment0.getN();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
    }

    @Test
    public void test05502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05502");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        long long5 = secondMoment3.getN();
        secondMoment3.clear();
        secondMoment3.clear();
        secondMoment3.increment((double) (byte) 100);
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment3);
        double double17 = variance16.getResult();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test05503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05503");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        long long4 = secondMoment1.getN();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance6.clear();
        double double8 = variance6.getResult();
        variance6.clear();
        variance6.setBiasCorrected(false);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test05504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05504");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        double double5 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        double[] doubleArray13 = new double[] { 0L, (byte) 10 };
        double double14 = variance9.evaluate(doubleArray13);
        secondMoment3.incrementAll(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        long long17 = secondMoment3.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        double double19 = secondMoment3.getResult();
        long long20 = secondMoment3.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment3);
        variance21.increment(60.666666666666664d);
        variance21.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean28 = variance26.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray37 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double38 = variance30.evaluate(doubleArray37);
        double double39 = variance26.evaluate(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance41.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double47 = variance46.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double50 = variance49.getResult();
        double[] doubleArray53 = new double[] { 0L, (byte) 10 };
        double double54 = variance49.evaluate(doubleArray53);
        double double56 = variance46.evaluate(doubleArray53, (double) 10L);
        double double57 = variance44.evaluate(doubleArray53);
        double double58 = variance41.evaluate(doubleArray53);
        double double59 = variance26.evaluate(doubleArray53);
        // The following exception was thrown during execution in test generation
        try {
            double double62 = variance21.evaluate(doubleArray53, (int) (short) 100, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2L + "'", long20 == 2L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2136.8055555555557d + "'", double38 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2564.166666666667d + "'", double39 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
    }

    @Test
    public void test05505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05505");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double4 = variance3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        double[] doubleArray10 = new double[] { 0L, (byte) 10 };
        double double11 = variance6.evaluate(doubleArray10);
        double double13 = variance3.evaluate(doubleArray10, (double) 10L);
        long long14 = variance3.getN();
        boolean boolean15 = secondMoment1.equals((java.lang.Object) long14);
        secondMoment1.increment(50.0d);
        double double18 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance22.increment((-1.0d));
        variance22.setBiasCorrected(false);
        boolean boolean27 = variance22.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        double double31 = secondMoment29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment29);
        secondMoment29.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        double[] doubleArray39 = new double[] { 0L, (byte) 10 };
        double double40 = variance35.evaluate(doubleArray39);
        secondMoment29.incrementAll(doubleArray39);
        boolean boolean42 = variance22.equals((java.lang.Object) secondMoment29);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.increment((-1.0d));
        variance44.setBiasCorrected(false);
        boolean boolean49 = variance44.isBiasCorrected();
        double double50 = variance44.getResult();
        variance44.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance54.increment((-1.0d));
        variance54.setBiasCorrected(false);
        boolean boolean59 = variance54.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment61);
        double double63 = secondMoment61.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment61);
        secondMoment61.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double68 = variance67.getResult();
        double[] doubleArray71 = new double[] { 0L, (byte) 10 };
        double double72 = variance67.evaluate(doubleArray71);
        secondMoment61.incrementAll(doubleArray71);
        boolean boolean74 = variance54.equals((java.lang.Object) secondMoment61);
        variance54.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment77 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment77);
        double double79 = secondMoment77.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment77);
        secondMoment77.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double84 = variance83.getResult();
        double[] doubleArray87 = new double[] { 0L, (byte) 10 };
        double double88 = variance83.evaluate(doubleArray87);
        secondMoment77.incrementAll(doubleArray87);
        double double90 = variance54.evaluate(doubleArray87);
        variance44.incrementAll(doubleArray87);
        double double92 = variance22.evaluate(doubleArray87);
        double double93 = variance20.evaluate(doubleArray87);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 25.0d + "'", double90 == 25.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 25.0d + "'", double92 == 25.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 25.0d + "'", double93 == 25.0d);
    }

    @Test
    public void test05506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05506");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        long long2 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance4.increment((-1.0d));
        variance4.setBiasCorrected(false);
        boolean boolean9 = variance4.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean11 = variance4.equals((java.lang.Object) secondMoment10);
        secondMoment10.increment((double) (short) 0);
        secondMoment10.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray24 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double25 = variance17.evaluate(doubleArray24);
        double double26 = secondMoment10.evaluate(doubleArray24);
        long long27 = secondMoment10.getN();
        long long28 = secondMoment10.getN();
        secondMoment10.clear();
        double double30 = secondMoment10.getResult();
        secondMoment10.clear();
        boolean boolean32 = secondMoment0.equals((java.lang.Object) secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.setBiasCorrected(false);
        boolean boolean39 = variance34.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        double[] doubleArray48 = new double[] { 0L, (byte) 10 };
        double double49 = variance44.evaluate(doubleArray48);
        double double51 = variance41.evaluate(doubleArray48, (double) 10L);
        double double52 = variance34.evaluate(doubleArray48);
        variance34.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray63 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double64 = variance56.evaluate(doubleArray63);
        double double65 = variance34.evaluate(doubleArray63);
        java.lang.Class<?> wildcardClass66 = doubleArray63.getClass();
        boolean boolean67 = secondMoment10.equals((java.lang.Object) wildcardClass66);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        secondMoment10.clear();
        secondMoment10.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2136.8055555555557d + "'", double25 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 12820.833333333334d + "'", double26 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 6L + "'", long27 == 6L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 6L + "'", long28 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 25.0d + "'", double52 == 25.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2136.8055555555557d + "'", double64 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2136.8055555555557d + "'", double65 == 2136.8055555555557d);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test05507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05507");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        variance9.increment((double) (short) -1);
        long long13 = variance9.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        double[] doubleArray24 = new double[] { 0L, (byte) 10 };
        double double25 = variance20.evaluate(doubleArray24);
        double double27 = variance17.evaluate(doubleArray24, (double) 10L);
        double double28 = variance15.evaluate(doubleArray24);
        variance15.increment((double) 0.0f);
        boolean boolean31 = variance15.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        long long34 = secondMoment32.getN();
        secondMoment32.clear();
        secondMoment32.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        variance38.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean44 = variance42.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray53 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double54 = variance46.evaluate(doubleArray53);
        double double55 = variance42.evaluate(doubleArray53);
        double double57 = variance38.evaluate(doubleArray53, (double) 1.0f);
        double double60 = variance15.evaluate(doubleArray53, (int) (byte) 0, 1);
        double double61 = variance9.evaluate(doubleArray53);
        boolean boolean62 = variance1.equals((java.lang.Object) doubleArray53);
        java.lang.Object obj63 = null;
        boolean boolean64 = variance1.equals(obj63);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment66 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment66);
        double double68 = secondMoment66.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment66);
        secondMoment66.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double73 = secondMoment72.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment74 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment74);
        long long76 = secondMoment74.getN();
        secondMoment74.clear();
        secondMoment74.clear();
        secondMoment74.increment((double) (byte) 100);
        long long81 = secondMoment74.getN();
        double[] doubleArray83 = new double[] { 2024039.1203703713d };
        double double84 = secondMoment74.evaluate(doubleArray83);
        secondMoment72.incrementAll(doubleArray83);
        double double86 = secondMoment66.evaluate(doubleArray83);
        secondMoment66.increment((double) (short) -1);
        secondMoment66.increment(25.00000011920929d);
        boolean boolean91 = variance1.equals((java.lang.Object) secondMoment66);
        org.apache.commons.math.stat.descriptive.moment.Variance variance92 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment66);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2136.8055555555557d + "'", double54 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2564.166666666667d + "'", double55 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2136.805555555555d + "'", double57 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2564.166666666667d + "'", double61 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1L + "'", long81 == 1L);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test05508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05508");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        boolean boolean9 = variance1.isBiasCorrected();
        long long10 = variance1.getN();
        variance1.increment(18.666666666666668d);
        variance1.increment(9.536988751020409E7d);
        variance1.setBiasCorrected(false);
        double double17 = variance1.getResult();
        variance1.increment((double) (byte) 10);
        variance1.increment(2268035.8522376535d);
        variance1.clear();
        double double23 = variance1.getResult();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 2.0212030575202972E15d + "'", double17 == 2.0212030575202972E15d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
    }

    @Test
    public void test05509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05509");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double[] doubleArray5 = new double[] { 0L, (byte) 10 };
        double double6 = variance1.evaluate(doubleArray5);
        variance1.clear();
        boolean boolean8 = variance1.isBiasCorrected();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance11.increment((-1.0d));
        variance11.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double22 = variance21.getResult();
        double[] doubleArray25 = new double[] { 0L, (byte) 10 };
        double double26 = variance21.evaluate(doubleArray25);
        double double28 = variance18.evaluate(doubleArray25, (double) 10L);
        double double29 = variance16.evaluate(doubleArray25);
        double double30 = variance11.evaluate(doubleArray25);
        boolean boolean31 = variance11.isBiasCorrected();
        variance11.increment((double) (short) 10);
        long long34 = variance11.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment35);
        long long37 = secondMoment35.getN();
        secondMoment35.clear();
        double double39 = secondMoment35.getResult();
        secondMoment35.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment35);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double50 = variance49.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double53 = variance52.getResult();
        double[] doubleArray56 = new double[] { 0L, (byte) 10 };
        double double57 = variance52.evaluate(doubleArray56);
        double double59 = variance49.evaluate(doubleArray56, (double) 10L);
        double double60 = variance47.evaluate(doubleArray56);
        double double61 = variance44.evaluate(doubleArray56);
        variance42.incrementAll(doubleArray56);
        variance42.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double66 = variance65.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double69 = variance68.getResult();
        double[] doubleArray72 = new double[] { 0L, (byte) 10 };
        double double73 = variance68.evaluate(doubleArray72);
        double double75 = variance65.evaluate(doubleArray72, (double) 10L);
        variance42.incrementAll(doubleArray72);
        double double77 = variance11.evaluate(doubleArray72);
        double double79 = variance1.evaluate(doubleArray72, 1349359.413580247d);
        variance1.increment(1011170.1111111114d);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.0d + "'", double6 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
    }

    @Test
    public void test05510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05510");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        long long7 = secondMoment5.getN();
        secondMoment5.clear();
        secondMoment5.clear();
        secondMoment5.increment((double) (byte) 100);
        secondMoment5.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        double[] doubleArray24 = new double[] { 0L, (byte) 10 };
        double double25 = variance20.evaluate(doubleArray24);
        double double27 = variance17.evaluate(doubleArray24, (double) 10L);
        long long28 = variance17.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance30.increment((-1.0d));
        variance30.setBiasCorrected(false);
        boolean boolean35 = variance30.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        double[] doubleArray44 = new double[] { 0L, (byte) 10 };
        double double45 = variance40.evaluate(doubleArray44);
        double double47 = variance37.evaluate(doubleArray44, (double) 10L);
        double double48 = variance30.evaluate(doubleArray44);
        variance17.incrementAll(doubleArray44, (int) (short) 0, (int) (byte) 1);
        secondMoment5.incrementAll(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment5);
        double double54 = secondMoment5.getResult();
        secondMoment5.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment5);
        secondMoment5.increment(5.7261176190072966E17d);
        secondMoment5.increment(1.41665254437524E11d);
        secondMoment5.increment(3223683.680555555d);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 25.0d + "'", double48 == 25.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
    }

    @Test
    public void test05511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05511");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.clear();
        boolean boolean5 = variance1.isBiasCorrected();
        variance1.increment(2136.8055555555557d);
        variance1.increment(0.0d);
        variance1.clear();
        variance1.increment((double) 10);
        double double13 = variance1.getResult();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test05512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05512");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        double double13 = variance12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        boolean boolean18 = variance15.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        double double22 = secondMoment20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment20);
        secondMoment20.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance26.increment((-1.0d));
        variance26.setBiasCorrected(false);
        boolean boolean31 = variance26.isBiasCorrected();
        double[] doubleArray32 = new double[] {};
        double double33 = variance26.evaluate(doubleArray32);
        secondMoment20.incrementAll(doubleArray32);
        double double35 = variance15.evaluate(doubleArray32);
        // The following exception was thrown during execution in test generation
        try {
            double double39 = variance12.evaluate(doubleArray32, 3799924.1673280406d, 10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
    }

    @Test
    public void test05513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05513");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment((double) 2L);
        double double8 = secondMoment1.getResult();
        secondMoment1.increment(50.0d);
        long long11 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment(4232.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2L + "'", long11 == 2L);
    }

    @Test
    public void test05514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05514");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance5.increment((-1.0d));
        variance5.setBiasCorrected(false);
        boolean boolean10 = variance5.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean12 = variance5.equals((java.lang.Object) secondMoment11);
        double double13 = secondMoment11.getResult();
        secondMoment11.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        secondMoment11.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance19.increment((-1.0d));
        variance19.setBiasCorrected(false);
        boolean boolean24 = variance19.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean26 = variance19.equals((java.lang.Object) secondMoment25);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        double[] doubleArray35 = new double[] { 0L, (byte) 10 };
        double double36 = variance31.evaluate(doubleArray35);
        double double38 = variance28.evaluate(doubleArray35, (double) 10L);
        double double42 = variance19.evaluate(doubleArray35, (double) (short) 0, 0, (int) (short) 0);
        double double45 = secondMoment11.evaluate(doubleArray35, 0, 0);
        variance3.incrementAll(doubleArray35);
        variance1.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment48);
        long long50 = secondMoment48.getN();
        secondMoment48.clear();
        double double52 = secondMoment48.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance54.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double60 = variance59.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double63 = variance62.getResult();
        double[] doubleArray66 = new double[] { 0L, (byte) 10 };
        double double67 = variance62.evaluate(doubleArray66);
        double double69 = variance59.evaluate(doubleArray66, (double) 10L);
        double double70 = variance57.evaluate(doubleArray66);
        double double71 = variance54.evaluate(doubleArray66);
        secondMoment48.incrementAll(doubleArray66, 1, (int) (byte) 0);
        double double75 = variance1.evaluate(doubleArray66);
        double double76 = variance1.getResult();
        variance1.increment(2024039.1204833984d);
        java.lang.Class<?> wildcardClass79 = variance1.getClass();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test05515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05515");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        secondMoment7.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.setBiasCorrected(false);
        boolean boolean20 = variance15.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean22 = variance15.equals((java.lang.Object) secondMoment21);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        double[] doubleArray31 = new double[] { 0L, (byte) 10 };
        double double32 = variance27.evaluate(doubleArray31);
        double double34 = variance24.evaluate(doubleArray31, (double) 10L);
        double double38 = variance15.evaluate(doubleArray31, (double) (short) 0, 0, (int) (short) 0);
        double double41 = secondMoment7.evaluate(doubleArray31, 0, 0);
        long long42 = secondMoment7.getN();
        long long43 = secondMoment7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance46.increment((-1.0d));
        variance46.setBiasCorrected(false);
        boolean boolean51 = variance46.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment53);
        double double55 = secondMoment53.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment53);
        secondMoment53.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double60 = variance59.getResult();
        double[] doubleArray63 = new double[] { 0L, (byte) 10 };
        double double64 = variance59.evaluate(doubleArray63);
        secondMoment53.incrementAll(doubleArray63);
        boolean boolean66 = variance46.equals((java.lang.Object) secondMoment53);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance68.increment((-1.0d));
        variance68.setBiasCorrected(false);
        boolean boolean73 = variance68.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment74 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean75 = variance68.equals((java.lang.Object) secondMoment74);
        boolean boolean76 = secondMoment53.equals((java.lang.Object) boolean75);
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment53);
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double80 = variance79.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance82 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double83 = variance82.getResult();
        double[] doubleArray86 = new double[] { 0L, (byte) 10 };
        double double87 = variance82.evaluate(doubleArray86);
        double double89 = variance79.evaluate(doubleArray86, (double) 10L);
        double double90 = secondMoment53.evaluate(doubleArray86);
        long long91 = secondMoment53.getN();
        double double92 = secondMoment53.getResult();
        secondMoment53.clear();
        boolean boolean94 = secondMoment7.equals((java.lang.Object) secondMoment53);
        secondMoment7.clear();
        secondMoment7.clear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 2L + "'", long91 == 2L);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test05516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05516");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = secondMoment8.evaluate(doubleArray22);
        long long25 = secondMoment8.getN();
        long long26 = secondMoment8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        secondMoment8.clear();
        secondMoment8.increment(0.0d);
        secondMoment8.increment((double) 'a');
        secondMoment8.clear();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        long long39 = secondMoment37.getN();
        secondMoment37.clear();
        secondMoment37.increment(10.0d);
        double double43 = secondMoment37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment37);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment37);
        boolean boolean46 = secondMoment8.equals((java.lang.Object) secondMoment37);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        double double49 = secondMoment47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance52.increment((-1.0d));
        variance52.setBiasCorrected(false);
        boolean boolean57 = variance52.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean59 = variance52.equals((java.lang.Object) secondMoment58);
        variance52.increment((double) 100L);
        variance52.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double68 = variance67.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double71 = variance70.getResult();
        double[] doubleArray74 = new double[] { 0L, (byte) 10 };
        double double75 = variance70.evaluate(doubleArray74);
        double double77 = variance67.evaluate(doubleArray74, (double) 10L);
        double double78 = variance65.evaluate(doubleArray74);
        double[] doubleArray82 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double83 = variance65.evaluate(doubleArray82);
        variance52.incrementAll(doubleArray82);
        variance50.incrementAll(doubleArray82);
        // The following exception was thrown during execution in test generation
        try {
            double double88 = secondMoment8.evaluate(doubleArray82, (int) '#', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 12820.833333333334d + "'", double24 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2024039.120370371d + "'", double83 == 2024039.120370371d);
    }

    @Test
    public void test05517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05517");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        double double10 = secondMoment8.getResult();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        double double13 = secondMoment8.getResult();
        double double14 = secondMoment8.getResult();
        double double15 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double17 = variance16.getResult();
        variance16.increment(2136.805555555504d);
        variance16.clear();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test05518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05518");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        double[] doubleArray11 = new double[] { 0L, (byte) 10 };
        double double12 = variance7.evaluate(doubleArray11);
        secondMoment1.incrementAll(doubleArray11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment(Double.NaN);
        secondMoment1.increment(0.0d);
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.clear();
        long long23 = secondMoment1.getN();
        secondMoment1.increment(8147511.273823785d);
        secondMoment1.clear();
        secondMoment1.increment(58606.246913580246d);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test05519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05519");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.increment((double) (byte) 100);
        secondMoment1.clear();
        double double9 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance10.clear();
        variance10.increment(2024039.1208496094d);
        long long14 = variance10.getN();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test05520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05520");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance8.increment((-1.0d));
        variance8.setBiasCorrected(false);
        boolean boolean13 = variance8.isBiasCorrected();
        double[] doubleArray14 = new double[] {};
        double double15 = variance8.evaluate(doubleArray14);
        secondMoment2.incrementAll(doubleArray14);
        secondMoment2.clear();
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        secondMoment2.clear();
        secondMoment2.increment(13689.428571428572d);
        long long23 = secondMoment2.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
    }

    @Test
    public void test05521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05521");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1);
        secondMoment7.increment(4671050.520833335d);
        double double15 = secondMoment7.getResult();
        long long16 = secondMoment7.getN();
        double double17 = secondMoment7.getResult();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.4545805531418566E13d + "'", double15 == 1.4545805531418566E13d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 3L + "'", long16 == 3L);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.4545805531418566E13d + "'", double17 == 1.4545805531418566E13d);
    }

    @Test
    public void test05522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05522");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.increment((double) (byte) 100);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment(2136.805555555555d);
        secondMoment1.increment((double) 7L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        boolean boolean15 = variance14.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance21.increment((-1.0d));
        variance21.setBiasCorrected(false);
        boolean boolean26 = variance21.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean28 = variance21.equals((java.lang.Object) secondMoment27);
        double double29 = secondMoment27.getResult();
        secondMoment27.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment27);
        secondMoment27.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance35.increment((-1.0d));
        variance35.setBiasCorrected(false);
        boolean boolean40 = variance35.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean42 = variance35.equals((java.lang.Object) secondMoment41);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        double[] doubleArray51 = new double[] { 0L, (byte) 10 };
        double double52 = variance47.evaluate(doubleArray51);
        double double54 = variance44.evaluate(doubleArray51, (double) 10L);
        double double58 = variance35.evaluate(doubleArray51, (double) (short) 0, 0, (int) (short) 0);
        double double61 = secondMoment27.evaluate(doubleArray51, 0, 0);
        variance19.incrementAll(doubleArray51);
        variance17.incrementAll(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment64 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment64);
        long long66 = secondMoment64.getN();
        secondMoment64.clear();
        double double68 = secondMoment64.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance70.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double79 = variance78.getResult();
        double[] doubleArray82 = new double[] { 0L, (byte) 10 };
        double double83 = variance78.evaluate(doubleArray82);
        double double85 = variance75.evaluate(doubleArray82, (double) 10L);
        double double86 = variance73.evaluate(doubleArray82);
        double double87 = variance70.evaluate(doubleArray82);
        secondMoment64.incrementAll(doubleArray82, 1, (int) (byte) 0);
        double double91 = variance17.evaluate(doubleArray82);
        variance14.incrementAll(doubleArray82);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
    }

    @Test
    public void test05523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05523");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        secondMoment7.clear();
        double double18 = secondMoment7.getResult();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test05524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05524");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        double[] doubleArray8 = new double[] { 0L, (byte) 10 };
        double double9 = variance4.evaluate(doubleArray8);
        double double11 = variance1.evaluate(doubleArray8, (double) 10L);
        long long12 = variance1.getN();
        variance1.increment((double) 0L);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        double double18 = secondMoment16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance21.increment((-1.0d));
        variance21.setBiasCorrected(false);
        boolean boolean26 = variance21.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean28 = variance21.equals((java.lang.Object) secondMoment27);
        variance21.increment((double) 100L);
        variance21.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        double[] doubleArray43 = new double[] { 0L, (byte) 10 };
        double double44 = variance39.evaluate(doubleArray43);
        double double46 = variance36.evaluate(doubleArray43, (double) 10L);
        double double47 = variance34.evaluate(doubleArray43);
        double[] doubleArray51 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double52 = variance34.evaluate(doubleArray51);
        variance21.incrementAll(doubleArray51);
        variance19.incrementAll(doubleArray51);
        double double55 = variance1.evaluate(doubleArray51);
        double double56 = variance1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.0d + "'", double9 == 50.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2024039.120370371d + "'", double52 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2024039.120370371d + "'", double55 == 2024039.120370371d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
    }

    @Test
    public void test05525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05525");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment4 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment4);
        double double6 = secondMoment4.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment4);
        secondMoment4.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        double[] doubleArray14 = new double[] { 0L, (byte) 10 };
        double double15 = variance10.evaluate(doubleArray14);
        secondMoment4.incrementAll(doubleArray14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment4);
        secondMoment4.clear();
        secondMoment4.increment(Double.NaN);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment4);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment4);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment4);
        secondMoment4.increment(2136.805555555555d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment26);
        long long28 = secondMoment26.getN();
        secondMoment26.clear();
        double double30 = secondMoment26.getResult();
        secondMoment26.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment26);
        secondMoment26.increment((double) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double37 = secondMoment36.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance39.increment((-1.0d));
        variance39.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double47 = variance46.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double50 = variance49.getResult();
        double[] doubleArray53 = new double[] { 0L, (byte) 10 };
        double double54 = variance49.evaluate(doubleArray53);
        double double56 = variance46.evaluate(doubleArray53, (double) 10L);
        double double57 = variance44.evaluate(doubleArray53);
        double double58 = variance39.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double61 = variance60.getResult();
        double[] doubleArray64 = new double[] { 0L, (byte) 10 };
        double double65 = variance60.evaluate(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray74 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double75 = variance67.evaluate(doubleArray74);
        double double76 = variance60.evaluate(doubleArray74);
        double double77 = variance39.evaluate(doubleArray74);
        double double78 = secondMoment36.evaluate(doubleArray74);
        double double79 = secondMoment26.evaluate(doubleArray74);
        secondMoment4.incrementAll(doubleArray74);
        double double81 = secondMoment4.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 50.0d + "'", double15 == 50.0d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 2136.8055555555557d + "'", double75 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2564.166666666667d + "'", double76 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2564.166666666667d + "'", double77 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 12820.833333333334d + "'", double78 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 12820.833333333334d + "'", double79 == 12820.833333333334d);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
    }

    @Test
    public void test05526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05526");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        double[] doubleArray12 = new double[] { 0L, (byte) 10 };
        double double13 = variance8.evaluate(doubleArray12);
        secondMoment2.incrementAll(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.clear();
        secondMoment2.increment(Double.NaN);
        secondMoment2.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.setBiasCorrected(false);
        boolean boolean28 = variance23.isBiasCorrected();
        double[] doubleArray29 = new double[] {};
        double double30 = variance23.evaluate(doubleArray29);
        variance23.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean41 = variance39.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        double[] doubleArray52 = new double[] { 0L, (byte) 10 };
        double double53 = variance48.evaluate(doubleArray52);
        double double55 = variance45.evaluate(doubleArray52, (double) 10L);
        double double56 = variance43.evaluate(doubleArray52);
        double[] doubleArray60 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double61 = variance43.evaluate(doubleArray60);
        double double63 = variance39.evaluate(doubleArray60, (double) (byte) 1);
        double double65 = variance34.evaluate(doubleArray60, 4048078.240740742d);
        double double66 = variance23.evaluate(doubleArray60);
        boolean boolean67 = secondMoment2.equals((java.lang.Object) variance23);
        variance23.increment((double) 1);
        variance23.clear();
        long long71 = variance23.getN();
        variance23.increment((double) 7L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2024039.120370371d + "'", double61 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2024039.120370371d + "'", double63 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2024039.12109375d + "'", double65 == 2024039.12109375d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1349359.4135802474d + "'", double66 == 1349359.4135802474d);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
    }

    @Test
    public void test05527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05527");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray12 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double13 = variance5.evaluate(doubleArray12);
        double double14 = variance1.evaluate(doubleArray12);
        variance1.setBiasCorrected(false);
        variance1.increment((double) (byte) -1);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance21.increment((-1.0d));
        variance21.setBiasCorrected(false);
        variance21.increment((double) 100L);
        boolean boolean28 = variance21.isBiasCorrected();
        variance21.clear();
        long long30 = variance21.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double32 = secondMoment31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        double[] doubleArray48 = new double[] { 0L, (byte) 10 };
        double double49 = variance44.evaluate(doubleArray48);
        double double51 = variance41.evaluate(doubleArray48, (double) 10L);
        double double52 = variance39.evaluate(doubleArray48);
        double double53 = variance34.evaluate(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double56 = variance55.getResult();
        double[] doubleArray59 = new double[] { 0L, (byte) 10 };
        double double60 = variance55.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray69 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double70 = variance62.evaluate(doubleArray69);
        double double71 = variance55.evaluate(doubleArray69);
        double double72 = variance34.evaluate(doubleArray69);
        double double73 = secondMoment31.evaluate(doubleArray69);
        double double74 = variance21.evaluate(doubleArray69);
        // The following exception was thrown during execution in test generation
        try {
            double double77 = variance1.evaluate(doubleArray69, (int) (byte) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 2136.8055555555557d + "'", double13 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2564.166666666667d + "'", double14 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2136.8055555555557d + "'", double70 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2564.166666666667d + "'", double71 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2564.166666666667d + "'", double72 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 12820.833333333334d + "'", double73 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 2136.8055555555557d + "'", double74 == 2136.8055555555557d);
    }

    @Test
    public void test05528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05528");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        double[] doubleArray12 = new double[] { 0L, (byte) 10 };
        double double13 = variance8.evaluate(doubleArray12);
        secondMoment2.incrementAll(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.clear();
        secondMoment2.increment(Double.NaN);
        secondMoment2.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        long long23 = secondMoment2.getN();
        secondMoment2.clear();
        java.lang.Class<?> wildcardClass25 = secondMoment2.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2L + "'", long23 == 2L);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test05529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05529");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.clear();
        variance1.increment((double) (short) -1);
        boolean boolean5 = variance1.isBiasCorrected();
        variance1.increment((double) 6L);
        double double8 = variance1.getResult();
        variance1.increment(1652.4444444444443d);
        double double11 = variance1.getResult();
        variance1.setBiasCorrected(false);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        double double18 = secondMoment16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment16);
        secondMoment16.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance22.increment((-1.0d));
        variance22.setBiasCorrected(false);
        boolean boolean27 = variance22.isBiasCorrected();
        double[] doubleArray28 = new double[] {};
        double double29 = variance22.evaluate(doubleArray28);
        secondMoment16.incrementAll(doubleArray28);
        double double31 = secondMoment16.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double33 = secondMoment32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        secondMoment32.increment(2024039.120370371d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        variance38.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance43.increment((-1.0d));
        variance43.setBiasCorrected(false);
        boolean boolean48 = variance43.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean50 = variance43.equals((java.lang.Object) secondMoment49);
        double double51 = secondMoment49.getResult();
        secondMoment49.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment49);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment55);
        double double57 = secondMoment55.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment55);
        secondMoment55.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance61.increment((-1.0d));
        variance61.setBiasCorrected(false);
        boolean boolean66 = variance61.isBiasCorrected();
        double[] doubleArray67 = new double[] {};
        double double68 = variance61.evaluate(doubleArray67);
        secondMoment55.incrementAll(doubleArray67);
        double double70 = variance53.evaluate(doubleArray67);
        double double71 = variance38.evaluate(doubleArray67);
        secondMoment32.incrementAll(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance74.increment((-1.0d));
        variance74.setBiasCorrected(false);
        boolean boolean79 = variance74.isBiasCorrected();
        double[] doubleArray80 = new double[] {};
        double double81 = variance74.evaluate(doubleArray80);
        variance74.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Variance variance85 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray92 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double93 = variance85.evaluate(doubleArray92);
        double double94 = variance74.evaluate(doubleArray92);
        secondMoment32.incrementAll(doubleArray92);
        secondMoment16.incrementAll(doubleArray92);
        // The following exception was thrown during execution in test generation
        try {
            double double99 = variance1.evaluate(doubleArray92, 100, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 24.5d + "'", double8 == 24.5d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 907451.1399176953d + "'", double11 == 907451.1399176953d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 2136.8055555555557d + "'", double93 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 2136.8055555555557d + "'", double94 == 2136.8055555555557d);
    }

    @Test
    public void test05530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05530");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        double double4 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance7.increment((-1.0d));
        variance7.setBiasCorrected(false);
        variance7.increment((double) 100L);
        boolean boolean14 = variance7.isBiasCorrected();
        variance7.clear();
        long long16 = variance7.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double18 = secondMoment17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        double[] doubleArray34 = new double[] { 0L, (byte) 10 };
        double double35 = variance30.evaluate(doubleArray34);
        double double37 = variance27.evaluate(doubleArray34, (double) 10L);
        double double38 = variance25.evaluate(doubleArray34);
        double double39 = variance20.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        double[] doubleArray45 = new double[] { 0L, (byte) 10 };
        double double46 = variance41.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray55 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double56 = variance48.evaluate(doubleArray55);
        double double57 = variance41.evaluate(doubleArray55);
        double double58 = variance20.evaluate(doubleArray55);
        double double59 = secondMoment17.evaluate(doubleArray55);
        double double60 = variance7.evaluate(doubleArray55);
        double double61 = variance1.evaluate(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance63.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance67.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double73 = variance72.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        double[] doubleArray79 = new double[] { 0L, (byte) 10 };
        double double80 = variance75.evaluate(doubleArray79);
        double double82 = variance72.evaluate(doubleArray79, (double) 10L);
        double double83 = variance70.evaluate(doubleArray79);
        double double84 = variance67.evaluate(doubleArray79);
        double double85 = variance63.evaluate(doubleArray79);
        double double86 = variance1.evaluate(doubleArray79);
        double double87 = variance1.getResult();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2136.8055555555557d + "'", double56 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2564.166666666667d + "'", double57 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2564.166666666667d + "'", double58 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 12820.833333333334d + "'", double59 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2136.8055555555557d + "'", double60 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2564.166666666667d + "'", double61 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
    }

    @Test
    public void test05531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05531");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        double[] doubleArray12 = new double[] { 0L, (byte) 10 };
        double double13 = variance8.evaluate(doubleArray12);
        secondMoment2.incrementAll(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.clear();
        long long17 = secondMoment2.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        long long19 = secondMoment2.getN();
        secondMoment2.clear();
        secondMoment2.increment((double) (byte) 100);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean26 = variance24.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        double[] doubleArray37 = new double[] { 0L, (byte) 10 };
        double double38 = variance33.evaluate(doubleArray37);
        double double40 = variance30.evaluate(doubleArray37, (double) 10L);
        double double41 = variance28.evaluate(doubleArray37);
        double[] doubleArray45 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double46 = variance28.evaluate(doubleArray45);
        double double48 = variance24.evaluate(doubleArray45, (double) (byte) 1);
        variance24.increment(10.0d);
        variance24.setBiasCorrected(true);
        variance24.clear();
        variance24.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance57.increment((-1.0d));
        variance57.setBiasCorrected(false);
        variance57.increment((double) 100L);
        boolean boolean64 = variance57.isBiasCorrected();
        variance57.clear();
        variance57.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean70 = variance68.equals((java.lang.Object) (short) 10);
        double double71 = variance68.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double74 = variance73.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double77 = variance76.getResult();
        double[] doubleArray80 = new double[] { 0L, (byte) 10 };
        double double81 = variance76.evaluate(doubleArray80);
        double double83 = variance73.evaluate(doubleArray80, (double) 10L);
        double double84 = variance68.evaluate(doubleArray80);
        double double85 = variance57.evaluate(doubleArray80);
        double double86 = variance24.evaluate(doubleArray80);
        double double87 = secondMoment2.evaluate(doubleArray80);
        long long88 = secondMoment2.getN();
        secondMoment2.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2024039.120370371d + "'", double46 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2024039.120370371d + "'", double48 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 25.0d + "'", double85 == 25.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 25.0d + "'", double86 == 25.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 2L + "'", long88 == 2L);
    }

    @Test
    public void test05532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05532");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double[] doubleArray7 = new double[] {};
        double double8 = variance1.evaluate(doubleArray7);
        variance1.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        double[] doubleArray21 = new double[] { 0L, (byte) 10 };
        double double22 = variance17.evaluate(doubleArray21);
        double double24 = variance14.evaluate(doubleArray21, (double) 10L);
        double double25 = variance12.evaluate(doubleArray21);
        variance1.incrementAll(doubleArray21);
        variance1.increment(4048078.240740742d);
        variance1.increment(0.5d);
        long long31 = variance1.getN();
        variance1.clear();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        double[] doubleArray42 = new double[] { 0L, (byte) 10 };
        double double43 = variance38.evaluate(doubleArray42);
        double double45 = variance35.evaluate(doubleArray42, (double) 10L);
        double double46 = variance1.evaluate(doubleArray42);
        double double47 = variance1.getResult();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 6L + "'", long31 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 25.0d + "'", double46 == 25.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
    }

    @Test
    public void test05533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05533");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        double double4 = variance1.getResult();
        variance1.clear();
        double double6 = variance1.getResult();
        double double7 = variance1.getResult();
        variance1.clear();
        double double9 = variance1.getResult();
        boolean boolean10 = variance1.isBiasCorrected();
        variance1.increment(536137.7d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test05534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05534");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        double double8 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment6);
        secondMoment6.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        double[] doubleArray16 = new double[] { 0L, (byte) 10 };
        double double17 = variance12.evaluate(doubleArray16);
        secondMoment6.incrementAll(doubleArray16);
        double double19 = variance4.evaluate(doubleArray16);
        double double20 = variance4.getResult();
        variance4.increment(2564.1666666030883d);
        double double23 = variance4.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 25.0d + "'", double19 == 25.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
    }

    @Test
    public void test05535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05535");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double[] doubleArray5 = new double[] { 0L, (byte) 10 };
        double double6 = variance1.evaluate(doubleArray5);
        variance1.clear();
        variance1.clear();
        variance1.clear();
        long long10 = variance1.getN();
        variance1.increment(1349359.4135802472d);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.0d + "'", double6 == 50.0d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test05536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05536");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        double[] doubleArray11 = new double[] { 0L, (byte) 10 };
        double double12 = variance7.evaluate(doubleArray11);
        secondMoment1.incrementAll(doubleArray11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment(Double.NaN);
        secondMoment1.increment(0.0d);
        secondMoment1.clear();
        long long21 = secondMoment1.getN();
        long long22 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double24 = secondMoment1.getResult();
        secondMoment1.increment(5.415271412037037E7d);
        long long27 = secondMoment1.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
    }

    @Test
    public void test05537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05537");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        double double10 = secondMoment8.getResult();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        double double13 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        boolean boolean15 = variance14.isBiasCorrected();
        boolean boolean16 = variance14.isBiasCorrected();
        long long17 = variance14.getN();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test05538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05538");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.clear();
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double8 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance10.increment((-1.0d));
        variance10.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        double[] doubleArray24 = new double[] { 0L, (byte) 10 };
        double double25 = variance20.evaluate(doubleArray24);
        double double27 = variance17.evaluate(doubleArray24, (double) 10L);
        double double28 = variance15.evaluate(doubleArray24);
        double double29 = variance10.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        double[] doubleArray35 = new double[] { 0L, (byte) 10 };
        double double36 = variance31.evaluate(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double46 = variance38.evaluate(doubleArray45);
        double double47 = variance31.evaluate(doubleArray45);
        double double48 = variance10.evaluate(doubleArray45);
        double double49 = secondMoment7.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance51.increment((-1.0d));
        variance51.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double59 = variance58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        double[] doubleArray65 = new double[] { 0L, (byte) 10 };
        double double66 = variance61.evaluate(doubleArray65);
        double double68 = variance58.evaluate(doubleArray65, (double) 10L);
        double double69 = variance56.evaluate(doubleArray65);
        double double70 = variance51.evaluate(doubleArray65);
        double double71 = secondMoment7.evaluate(doubleArray65);
        long long72 = secondMoment7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        long long74 = secondMoment7.getN();
        secondMoment7.clear();
        secondMoment7.clear();
        boolean boolean77 = variance1.equals((java.lang.Object) secondMoment7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2136.8055555555557d + "'", double46 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2564.166666666667d + "'", double47 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2564.166666666667d + "'", double48 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 12820.833333333334d + "'", double49 == 12820.833333333334d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 2L + "'", long72 == 2L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 2L + "'", long74 == 2L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test05539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05539");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        double[] doubleArray11 = new double[] { 0L, (byte) 10 };
        double double12 = variance7.evaluate(doubleArray11);
        secondMoment1.incrementAll(doubleArray11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean18 = variance16.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.setBiasCorrected(false);
        boolean boolean25 = variance20.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean27 = variance20.equals((java.lang.Object) secondMoment26);
        double double28 = secondMoment26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        double[] doubleArray37 = new double[] { 0L, (byte) 10 };
        double double38 = variance33.evaluate(doubleArray37);
        double double40 = variance30.evaluate(doubleArray37, (double) 10L);
        double double43 = secondMoment26.evaluate(doubleArray37, (int) (short) 0, 1);
        double double44 = variance16.evaluate(doubleArray37);
        secondMoment1.incrementAll(doubleArray37);
        secondMoment1.clear();
        secondMoment1.increment((double) 'a');
        long long49 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance51.increment((-1.0d));
        variance51.setBiasCorrected(false);
        boolean boolean56 = variance51.isBiasCorrected();
        double[] doubleArray57 = new double[] {};
        double double58 = variance51.evaluate(doubleArray57);
        long long59 = variance51.getN();
        variance51.increment(2024039.120370371d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance63.increment((-1.0d));
        variance63.setBiasCorrected(false);
        boolean boolean68 = variance63.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean70 = variance63.equals((java.lang.Object) secondMoment69);
        double double71 = secondMoment69.getResult();
        secondMoment69.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment69);
        secondMoment69.increment((double) 10.0f);
        secondMoment69.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment69);
        java.lang.Object obj78 = null;
        boolean boolean79 = variance77.equals(obj78);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment80 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double81 = secondMoment80.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment82 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment82);
        long long84 = secondMoment82.getN();
        secondMoment82.clear();
        secondMoment82.clear();
        secondMoment82.increment((double) (byte) 100);
        long long89 = secondMoment82.getN();
        double[] doubleArray91 = new double[] { 2024039.1203703713d };
        double double92 = secondMoment82.evaluate(doubleArray91);
        secondMoment80.incrementAll(doubleArray91);
        variance77.incrementAll(doubleArray91);
        variance51.incrementAll(doubleArray91);
        secondMoment1.incrementAll(doubleArray91);
        double double97 = secondMoment1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 1L + "'", long89 == 1L);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 2.0481708533046572E12d + "'", double97 == 2.0481708533046572E12d);
    }

    @Test
    public void test05540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05540");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment4 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment4);
        double double6 = secondMoment4.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment4);
        secondMoment4.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        double[] doubleArray14 = new double[] { 0L, (byte) 10 };
        double double15 = variance10.evaluate(doubleArray14);
        secondMoment4.incrementAll(doubleArray14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment4);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean21 = variance19.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.setBiasCorrected(false);
        boolean boolean28 = variance23.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean30 = variance23.equals((java.lang.Object) secondMoment29);
        double double31 = secondMoment29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        double[] doubleArray40 = new double[] { 0L, (byte) 10 };
        double double41 = variance36.evaluate(doubleArray40);
        double double43 = variance33.evaluate(doubleArray40, (double) 10L);
        double double46 = secondMoment29.evaluate(doubleArray40, (int) (short) 0, 1);
        double double47 = variance19.evaluate(doubleArray40);
        secondMoment4.incrementAll(doubleArray40);
        variance1.incrementAll(doubleArray40);
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance53.increment((-1.0d));
        variance53.setBiasCorrected(false);
        boolean boolean58 = variance53.isBiasCorrected();
        double[] doubleArray59 = new double[] {};
        double double60 = variance53.evaluate(doubleArray59);
        variance53.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray71 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double72 = variance64.evaluate(doubleArray71);
        double double73 = variance53.evaluate(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            double double77 = variance1.evaluate(doubleArray71, 13349.428571428572d, (int) (short) 100, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 50.0d + "'", double15 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2136.8055555555557d + "'", double72 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 2136.8055555555557d + "'", double73 == 2136.8055555555557d);
    }

    @Test
    public void test05541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05541");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long6 = variance5.getN();
        variance5.increment(10.0d);
        variance5.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance11.increment((-1.0d));
        variance11.setBiasCorrected(false);
        boolean boolean16 = variance11.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean18 = variance11.equals((java.lang.Object) secondMoment17);
        secondMoment17.increment((double) (short) 0);
        secondMoment17.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray31 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double32 = variance24.evaluate(doubleArray31);
        double double33 = secondMoment17.evaluate(doubleArray31);
        secondMoment17.increment((double) 8L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment17);
        secondMoment17.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance41.increment((-1.0d));
        variance41.setBiasCorrected(false);
        boolean boolean46 = variance41.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean48 = variance41.equals((java.lang.Object) secondMoment47);
        double double49 = secondMoment47.getResult();
        secondMoment47.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment47);
        double double52 = secondMoment47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance55.increment((-1.0d));
        boolean boolean58 = variance55.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance60.increment((-1.0d));
        variance60.setBiasCorrected(false);
        variance60.increment((double) 100L);
        boolean boolean67 = variance60.isBiasCorrected();
        boolean boolean68 = variance60.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray77 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double78 = variance70.evaluate(doubleArray77);
        double double80 = variance60.evaluate(doubleArray77, (double) (byte) 10);
        double double81 = variance55.evaluate(doubleArray77);
        double double83 = variance53.evaluate(doubleArray77, (double) 100.0f);
        double double86 = variance38.evaluate(doubleArray77, 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double89 = variance5.evaluate(doubleArray77, (int) (short) 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2136.8055555555557d + "'", double32 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 12820.833333333334d + "'", double33 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2136.8055555555557d + "'", double78 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 2136.8055555555557d + "'", double80 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 2564.166666666667d + "'", double81 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2564.1666666666665d + "'", double83 == 2564.1666666666665d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
    }

    @Test
    public void test05542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05542");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance7.increment((-1.0d));
        variance7.setBiasCorrected(false);
        boolean boolean12 = variance7.isBiasCorrected();
        double[] doubleArray13 = new double[] {};
        double double14 = variance7.evaluate(doubleArray13);
        secondMoment1.incrementAll(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        variance16.setBiasCorrected(false);
        variance16.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test05543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05543");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance4.increment((-1.0d));
        variance4.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double22 = variance9.evaluate(doubleArray18);
        double double23 = variance4.evaluate(doubleArray18);
        variance2.incrementAll(doubleArray18);
        variance0.incrementAll(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        double[] doubleArray31 = new double[] { 0L, (byte) 10 };
        double double32 = variance27.evaluate(doubleArray31);
        boolean boolean33 = variance0.equals((java.lang.Object) double32);
        variance0.clear();
        variance0.increment(2024039.1204833984d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance38.increment((-1.0d));
        variance38.setBiasCorrected(false);
        variance38.increment((double) 100L);
        boolean boolean45 = variance38.isBiasCorrected();
        variance38.clear();
        double double47 = variance38.getResult();
        boolean boolean48 = variance38.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray57 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double58 = variance50.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray67 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double68 = variance60.evaluate(doubleArray67);
        double double70 = variance50.evaluate(doubleArray67, (double) '#');
        variance38.incrementAll(doubleArray67);
        double double72 = variance0.evaluate(doubleArray67);
        variance0.clear();
        long long74 = variance0.getN();
        double double75 = variance0.getResult();
        double[] doubleArray76 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double77 = variance0.evaluate(doubleArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2136.8055555555557d + "'", double58 == 2136.8055555555557d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 2136.8055555555557d + "'", double68 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2136.8055555555557d + "'", double70 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2564.166666666667d + "'", double72 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
    }

    @Test
    public void test05544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05544");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        double[] doubleArray8 = new double[] { 0L, (byte) 10 };
        double double9 = variance4.evaluate(doubleArray8);
        double double11 = variance1.evaluate(doubleArray8, (double) 10L);
        long long12 = variance1.getN();
        double double13 = variance1.getResult();
        double double14 = variance1.getResult();
        variance1.increment(512.0d);
        double double17 = variance1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.0d + "'", double9 == 50.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test05545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05545");
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.setBiasCorrected(false);
        boolean boolean8 = variance3.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean10 = variance3.equals((java.lang.Object) secondMoment9);
        secondMoment9.increment((double) (short) 0);
        secondMoment9.increment((double) 1.0f);
        double double15 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        secondMoment9.increment(Double.NaN);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.increment((double) (byte) 0);
        double double22 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        secondMoment9.increment(200.33333333333331d);
        java.lang.Class<?> wildcardClass27 = secondMoment9.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.5d + "'", double15 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test05546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05546");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double[] doubleArray7 = new double[] {};
        double double8 = variance1.evaluate(doubleArray7);
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance12.increment((-1.0d));
        variance12.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean19 = variance17.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double24 = variance23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        double[] doubleArray30 = new double[] { 0L, (byte) 10 };
        double double31 = variance26.evaluate(doubleArray30);
        double double33 = variance23.evaluate(doubleArray30, (double) 10L);
        double double34 = variance21.evaluate(doubleArray30);
        double[] doubleArray38 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double39 = variance21.evaluate(doubleArray38);
        double double41 = variance17.evaluate(doubleArray38, (double) (byte) 1);
        double double43 = variance12.evaluate(doubleArray38, 4048078.240740742d);
        double double44 = variance1.evaluate(doubleArray38);
        double double45 = variance1.getResult();
        variance1.increment(58606.246913580246d);
        variance1.increment(25.0d);
        double double50 = variance1.getResult();
        variance1.clear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2024039.120370371d + "'", double39 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2024039.120370371d + "'", double41 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2024039.12109375d + "'", double43 == 2024039.12109375d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1349359.4135802474d + "'", double44 == 1349359.4135802474d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 8.579406224874637E8d + "'", double50 == 8.579406224874637E8d);
    }

    @Test
    public void test05547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05547");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        double[] doubleArray10 = new double[] { 0L, (byte) 10 };
        double double11 = variance6.evaluate(doubleArray10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double21 = variance13.evaluate(doubleArray20);
        double double22 = variance6.evaluate(doubleArray20);
        double double23 = secondMoment1.evaluate(doubleArray20);
        double double24 = secondMoment1.getResult();
        secondMoment1.clear();
        long long26 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.increment(2136.805555555504d);
        secondMoment1.increment((double) 8L);
        secondMoment1.clear();
        long long33 = secondMoment1.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2136.8055555555557d + "'", double21 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2564.166666666667d + "'", double22 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 12820.833333333334d + "'", double23 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 12820.833333333334d + "'", double24 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
    }

    @Test
    public void test05548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05548");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.increment((double) (byte) 100);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        double double22 = variance12.evaluate(doubleArray19, (double) 10L);
        double double23 = variance10.evaluate(doubleArray19);
        double double24 = variance10.getResult();
        variance10.setBiasCorrected(false);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
    }

    @Test
    public void test05549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05549");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        double[] doubleArray8 = new double[] { 0L, (byte) 10 };
        double double9 = variance4.evaluate(doubleArray8);
        double double11 = variance1.evaluate(doubleArray8, (double) 10L);
        variance1.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean23 = variance21.equals((java.lang.Object) (short) 10);
        boolean boolean24 = variance15.equals((java.lang.Object) variance21);
        long long25 = variance21.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean29 = variance27.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double39 = variance31.evaluate(doubleArray38);
        double double40 = variance27.evaluate(doubleArray38);
        double double41 = variance21.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance45.increment((-1.0d));
        variance45.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double53 = variance52.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double56 = variance55.getResult();
        double[] doubleArray59 = new double[] { 0L, (byte) 10 };
        double double60 = variance55.evaluate(doubleArray59);
        double double62 = variance52.evaluate(doubleArray59, (double) 10L);
        double double63 = variance50.evaluate(doubleArray59);
        double double64 = variance45.evaluate(doubleArray59);
        variance43.incrementAll(doubleArray59);
        double double66 = variance21.evaluate(doubleArray59);
        double double67 = variance1.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance72.increment((-1.0d));
        variance72.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double80 = variance79.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance82 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double83 = variance82.getResult();
        double[] doubleArray86 = new double[] { 0L, (byte) 10 };
        double double87 = variance82.evaluate(doubleArray86);
        double double89 = variance79.evaluate(doubleArray86, (double) 10L);
        double double90 = variance77.evaluate(doubleArray86);
        double double91 = variance72.evaluate(doubleArray86);
        variance70.incrementAll(doubleArray86);
        variance68.incrementAll(doubleArray86);
        double double94 = variance1.evaluate(doubleArray86);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.0d + "'", double9 == 50.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2136.8055555555557d + "'", double39 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2564.166666666667d + "'", double40 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2564.166666666667d + "'", double41 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 50.0d + "'", double94 == 50.0d);
    }

    @Test
    public void test05550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05550");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double11 = secondMoment10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance13.increment((-1.0d));
        variance13.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double24 = variance23.getResult();
        double[] doubleArray27 = new double[] { 0L, (byte) 10 };
        double double28 = variance23.evaluate(doubleArray27);
        double double30 = variance20.evaluate(doubleArray27, (double) 10L);
        double double31 = variance18.evaluate(doubleArray27);
        double double32 = variance13.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        double[] doubleArray38 = new double[] { 0L, (byte) 10 };
        double double39 = variance34.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray48 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double49 = variance41.evaluate(doubleArray48);
        double double50 = variance34.evaluate(doubleArray48);
        double double51 = variance13.evaluate(doubleArray48);
        double double52 = secondMoment10.evaluate(doubleArray48);
        double double53 = secondMoment0.evaluate(doubleArray48);
        long long54 = secondMoment0.getN();
        secondMoment0.increment((double) 100);
        java.lang.Object obj57 = null;
        boolean boolean58 = secondMoment0.equals(obj57);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double60 = secondMoment0.getResult();
        double double61 = secondMoment0.getResult();
        double double62 = secondMoment0.getResult();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 2136.8055555555557d + "'", double49 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2564.166666666667d + "'", double50 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2564.166666666667d + "'", double51 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 12820.833333333334d + "'", double52 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 12820.833333333334d + "'", double53 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 6L + "'", long54 == 6L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 16460.85714285714d + "'", double60 == 16460.85714285714d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 16460.85714285714d + "'", double61 == 16460.85714285714d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 16460.85714285714d + "'", double62 == 16460.85714285714d);
    }

    @Test
    public void test05551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05551");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        double double4 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        double[] doubleArray13 = new double[] { 0L, (byte) 10 };
        double double14 = variance9.evaluate(doubleArray13);
        double double16 = variance6.evaluate(doubleArray13, (double) 10L);
        double double17 = variance1.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean21 = variance19.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.setBiasCorrected(false);
        boolean boolean28 = variance23.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean30 = variance23.equals((java.lang.Object) secondMoment29);
        double double31 = secondMoment29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        double[] doubleArray40 = new double[] { 0L, (byte) 10 };
        double double41 = variance36.evaluate(doubleArray40);
        double double43 = variance33.evaluate(doubleArray40, (double) 10L);
        double double46 = secondMoment29.evaluate(doubleArray40, (int) (short) 0, 1);
        double double47 = variance19.evaluate(doubleArray40);
        double double50 = variance1.evaluate(doubleArray40, 0, 0);
        variance1.increment(4048078.240740742d);
        variance1.clear();
        variance1.clear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
    }

    @Test
    public void test05552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05552");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = secondMoment8.evaluate(doubleArray22);
        long long25 = secondMoment8.getN();
        long long26 = secondMoment8.getN();
        long long27 = secondMoment8.getN();
        long long28 = secondMoment8.getN();
        long long29 = secondMoment8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        long long34 = secondMoment32.getN();
        secondMoment32.clear();
        double double36 = secondMoment32.getResult();
        secondMoment32.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance41.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double47 = variance46.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double50 = variance49.getResult();
        double[] doubleArray53 = new double[] { 0L, (byte) 10 };
        double double54 = variance49.evaluate(doubleArray53);
        double double56 = variance46.evaluate(doubleArray53, (double) 10L);
        double double57 = variance44.evaluate(doubleArray53);
        double double58 = variance41.evaluate(doubleArray53);
        variance39.incrementAll(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance61.increment((-1.0d));
        variance61.setBiasCorrected(false);
        boolean boolean66 = variance61.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment68 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment68);
        double double70 = secondMoment68.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment68);
        secondMoment68.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double75 = variance74.getResult();
        double[] doubleArray78 = new double[] { 0L, (byte) 10 };
        double double79 = variance74.evaluate(doubleArray78);
        secondMoment68.incrementAll(doubleArray78);
        boolean boolean81 = variance61.equals((java.lang.Object) secondMoment68);
        boolean boolean82 = variance39.equals((java.lang.Object) variance61);
        long long83 = variance61.getN();
        double double84 = variance61.getResult();
        variance61.setBiasCorrected(true);
        double double87 = variance61.getResult();
        double double88 = variance61.getResult();
        boolean boolean89 = secondMoment8.equals((java.lang.Object) double88);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 12820.833333333334d + "'", double24 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 6L + "'", long27 == 6L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 6L + "'", long28 == 6L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 6L + "'", long29 == 6L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1L + "'", long83 == 1L);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test05553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05553");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        long long17 = secondMoment15.getN();
        secondMoment15.clear();
        double double19 = secondMoment15.getResult();
        secondMoment15.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        double[] doubleArray36 = new double[] { 0L, (byte) 10 };
        double double37 = variance32.evaluate(doubleArray36);
        double double39 = variance29.evaluate(doubleArray36, (double) 10L);
        double double40 = variance27.evaluate(doubleArray36);
        double double41 = variance24.evaluate(doubleArray36);
        variance22.incrementAll(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.increment((-1.0d));
        variance44.setBiasCorrected(false);
        variance44.increment(2136.8055555555557d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance52.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double61 = variance60.getResult();
        double[] doubleArray64 = new double[] { 0L, (byte) 10 };
        double double65 = variance60.evaluate(doubleArray64);
        double double67 = variance57.evaluate(doubleArray64, (double) 10L);
        double double68 = variance55.evaluate(doubleArray64);
        double double69 = variance52.evaluate(doubleArray64);
        variance44.incrementAll(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double75 = variance74.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double78 = variance77.getResult();
        double[] doubleArray81 = new double[] { 0L, (byte) 10 };
        double double82 = variance77.evaluate(doubleArray81);
        double double84 = variance74.evaluate(doubleArray81, (double) 10L);
        double double85 = variance72.evaluate(doubleArray81);
        double double87 = variance44.evaluate(doubleArray81, Double.NaN);
        double double88 = variance22.evaluate(doubleArray81);
        double double89 = secondMoment7.evaluate(doubleArray81);
        secondMoment7.increment(13860.857142857143d);
        long long92 = secondMoment7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance93 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 3L + "'", long92 == 3L);
    }

    @Test
    public void test05554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05554");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        long long7 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double12 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        long long14 = variance13.getN();
        boolean boolean15 = variance13.isBiasCorrected();
        variance13.clear();
        double double17 = variance13.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        long long20 = secondMoment18.getN();
        secondMoment18.clear();
        secondMoment18.increment(10.0d);
        double double24 = secondMoment18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        double[] doubleArray35 = new double[] { 0L, (byte) 10 };
        double double36 = variance31.evaluate(doubleArray35);
        double double38 = variance28.evaluate(doubleArray35, (double) 10L);
        double double39 = variance26.evaluate(doubleArray35);
        double[] doubleArray43 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double44 = variance26.evaluate(doubleArray43);
        double double45 = secondMoment18.evaluate(doubleArray43);
        secondMoment18.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance49.increment((-1.0d));
        variance49.setBiasCorrected(false);
        boolean boolean54 = variance49.isBiasCorrected();
        double[] doubleArray55 = new double[] {};
        double double56 = variance49.evaluate(doubleArray55);
        variance49.setBiasCorrected(false);
        variance49.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment61);
        double double63 = secondMoment61.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment61);
        secondMoment61.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double68 = variance67.getResult();
        double[] doubleArray71 = new double[] { 0L, (byte) 10 };
        double double72 = variance67.evaluate(doubleArray71);
        secondMoment61.incrementAll(doubleArray71);
        variance49.incrementAll(doubleArray71);
        double[] doubleArray75 = new double[] {};
        double double76 = variance49.evaluate(doubleArray75);
        secondMoment18.incrementAll(doubleArray75);
        double double78 = variance13.evaluate(doubleArray75);
        variance1.incrementAll(doubleArray75);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2024039.120370371d + "'", double44 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 4048078.240740742d + "'", double45 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
    }

    @Test
    public void test05555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05555");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        long long14 = secondMoment12.getN();
        secondMoment12.clear();
        double double16 = secondMoment12.getResult();
        secondMoment12.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        double[] doubleArray20 = new double[] {};
        double double21 = secondMoment12.evaluate(doubleArray20);
        double double22 = secondMoment8.evaluate(doubleArray20);
        double double23 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        double double25 = secondMoment8.getResult();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    }

    @Test
    public void test05556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05556");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = secondMoment8.evaluate(doubleArray22);
        long long25 = secondMoment8.getN();
        long long26 = secondMoment8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        double double28 = variance27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance30.increment((-1.0d));
        variance30.setBiasCorrected(false);
        boolean boolean35 = variance30.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean37 = variance30.equals((java.lang.Object) secondMoment36);
        double double38 = secondMoment36.getResult();
        secondMoment36.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment36);
        long long41 = secondMoment36.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double44 = variance43.getResult();
        long long45 = variance43.getN();
        variance43.clear();
        boolean boolean47 = variance43.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment48);
        long long50 = secondMoment48.getN();
        secondMoment48.clear();
        secondMoment48.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment48);
        variance54.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance57.increment((-1.0d));
        variance57.setBiasCorrected(false);
        boolean boolean62 = variance57.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment63 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean64 = variance57.equals((java.lang.Object) secondMoment63);
        secondMoment63.increment((double) (short) 0);
        secondMoment63.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray77 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double78 = variance70.evaluate(doubleArray77);
        double double79 = secondMoment63.evaluate(doubleArray77);
        variance54.incrementAll(doubleArray77);
        double double81 = variance43.evaluate(doubleArray77);
        secondMoment36.incrementAll(doubleArray77);
        double double84 = variance27.evaluate(doubleArray77, 22.88888888888889d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 12820.833333333334d + "'", double24 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 2564.166666666667d + "'", double28 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2136.8055555555557d + "'", double78 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 12820.833333333334d + "'", double79 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 2564.166666666667d + "'", double81 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2564.166666666667d + "'", double84 == 2564.166666666667d);
    }

    @Test
    public void test05557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05557");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        secondMoment2.increment(4048078.240740742d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        double double8 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        variance9.increment(60.666666666666664d);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test05558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05558");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double9 = variance8.getResult();
        variance8.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double13 = secondMoment12.getResult();
        double double14 = secondMoment12.getResult();
        secondMoment12.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment12);
        variance16.clear();
        variance16.clear();
        long long19 = variance16.getN();
        long long20 = variance16.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance22.increment((-1.0d));
        long long25 = variance22.getN();
        variance22.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        double[] doubleArray35 = new double[] { 0L, (byte) 10 };
        double double36 = variance31.evaluate(doubleArray35);
        double double38 = variance28.evaluate(doubleArray35, (double) 10L);
        long long39 = variance28.getN();
        variance28.increment((double) 0L);
        double[] doubleArray43 = new double[] { 10.0d };
        variance28.incrementAll(doubleArray43);
        variance22.incrementAll(doubleArray43);
        double double46 = variance16.evaluate(doubleArray43);
        // The following exception was thrown during execution in test generation
        try {
            double double50 = variance8.evaluate(doubleArray43, 2.6219067524591934E12d, (-1), 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
    }

    @Test
    public void test05559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05559");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance8.increment((-1.0d));
        variance8.setBiasCorrected(false);
        boolean boolean13 = variance8.isBiasCorrected();
        double[] doubleArray14 = new double[] {};
        double double15 = variance8.evaluate(doubleArray14);
        secondMoment2.incrementAll(doubleArray14);
        secondMoment2.increment(1349359.4135802984d);
        double double19 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        double double21 = secondMoment2.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test05560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05560");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance6.clear();
        variance6.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        long long11 = secondMoment9.getN();
        secondMoment9.clear();
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        variance17.setBiasCorrected(false);
        boolean boolean22 = variance17.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean24 = variance17.equals((java.lang.Object) secondMoment23);
        double double25 = secondMoment23.getResult();
        secondMoment23.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance29.increment((-1.0d));
        variance29.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        double[] doubleArray43 = new double[] { 0L, (byte) 10 };
        double double44 = variance39.evaluate(doubleArray43);
        double double46 = variance36.evaluate(doubleArray43, (double) 10L);
        double double47 = variance34.evaluate(doubleArray43);
        double double48 = variance29.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        double[] doubleArray54 = new double[] { 0L, (byte) 10 };
        double double55 = variance50.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray64 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double65 = variance57.evaluate(doubleArray64);
        double double66 = variance50.evaluate(doubleArray64);
        double double67 = variance29.evaluate(doubleArray64);
        double double68 = variance27.evaluate(doubleArray64);
        variance14.incrementAll(doubleArray64);
        double double70 = variance6.evaluate(doubleArray64);
        double double71 = variance6.getResult();
        variance6.clear();
        variance6.clear();
        long long74 = variance6.getN();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2136.8055555555557d + "'", double65 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 2564.166666666667d + "'", double66 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2564.166666666667d + "'", double67 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 2136.8055555555557d + "'", double68 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2564.166666666667d + "'", double70 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1L + "'", long74 == 1L);
    }

    @Test
    public void test05561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05561");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        long long6 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double22 = variance9.evaluate(doubleArray18);
        variance9.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean28 = variance26.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        double[] doubleArray39 = new double[] { 0L, (byte) 10 };
        double double40 = variance35.evaluate(doubleArray39);
        double double42 = variance32.evaluate(doubleArray39, (double) 10L);
        double double43 = variance30.evaluate(doubleArray39);
        double[] doubleArray47 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double48 = variance30.evaluate(doubleArray47);
        double double50 = variance26.evaluate(doubleArray47, (double) (byte) 1);
        double double51 = variance9.evaluate(doubleArray47);
        double double53 = variance7.evaluate(doubleArray47, 0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double56 = variance55.getResult();
        double[] doubleArray59 = new double[] { 0L, (byte) 10 };
        double double60 = variance55.evaluate(doubleArray59);
        double double61 = variance55.getResult();
        double double62 = variance55.getResult();
        variance55.setBiasCorrected(false);
        double double65 = variance55.getResult();
        variance55.clear();
        variance55.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment69);
        double double71 = secondMoment69.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment69);
        secondMoment69.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        double[] doubleArray79 = new double[] { 0L, (byte) 10 };
        double double80 = variance75.evaluate(doubleArray79);
        secondMoment69.incrementAll(doubleArray79);
        variance55.incrementAll(doubleArray79);
        // The following exception was thrown during execution in test generation
        try {
            double double86 = variance7.evaluate(doubleArray79, 2136.8055555559695d, (int) '#', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2024039.120370371d + "'", double48 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2024039.120370371d + "'", double50 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2024039.120370371d + "'", double51 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1349359.4135802472d + "'", double53 == 1349359.4135802472d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
    }

    @Test
    public void test05562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05562");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        double double5 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        double[] doubleArray13 = new double[] { 0L, (byte) 10 };
        double double14 = variance9.evaluate(doubleArray13);
        secondMoment3.incrementAll(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        long long17 = secondMoment3.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        double double19 = secondMoment3.getResult();
        long long20 = secondMoment3.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        double double25 = secondMoment23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        double double30 = secondMoment28.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment28);
        secondMoment28.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        double[] doubleArray38 = new double[] { 0L, (byte) 10 };
        double double39 = variance34.evaluate(doubleArray38);
        secondMoment28.incrementAll(doubleArray38);
        double double41 = variance26.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.increment((-1.0d));
        variance44.setBiasCorrected(false);
        boolean boolean49 = variance44.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean51 = variance44.equals((java.lang.Object) secondMoment50);
        secondMoment50.increment((double) (short) 0);
        secondMoment50.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray64 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double65 = variance57.evaluate(doubleArray64);
        double double66 = secondMoment50.evaluate(doubleArray64);
        secondMoment42.incrementAll(doubleArray64);
        variance26.incrementAll(doubleArray64);
        variance26.increment(0.5d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double73 = variance72.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        double[] doubleArray79 = new double[] { 0L, (byte) 10 };
        double double80 = variance75.evaluate(doubleArray79);
        double double82 = variance72.evaluate(doubleArray79, (double) 10L);
        long long83 = variance72.getN();
        variance72.increment((double) 0L);
        double[] doubleArray87 = new double[] { 10.0d };
        variance72.incrementAll(doubleArray87);
        double double90 = variance26.evaluate(doubleArray87, (double) (-1.0f));
        secondMoment3.incrementAll(doubleArray87);
        long long92 = secondMoment3.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2L + "'", long20 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 25.0d + "'", double41 == 25.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2136.8055555555557d + "'", double65 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 12820.833333333334d + "'", double66 == 12820.833333333334d);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[10.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 3L + "'", long92 == 3L);
    }

    @Test
    public void test05563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05563");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        long long4 = secondMoment2.getN();
        secondMoment2.clear();
        secondMoment2.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance9.increment((-1.0d));
        variance9.setBiasCorrected(false);
        variance9.increment((double) 100L);
        boolean boolean16 = variance9.isBiasCorrected();
        boolean boolean17 = variance9.isBiasCorrected();
        boolean boolean18 = secondMoment2.equals((java.lang.Object) boolean17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        long long21 = variance20.getN();
        variance20.increment(50.0009765625d);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
    }

    @Test
    public void test05564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05564");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.clear();
        secondMoment0.increment(2024039.12109375d);
        double double12 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double22 = variance14.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray31 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double32 = variance24.evaluate(doubleArray31);
        double double34 = variance14.evaluate(doubleArray31, (double) '#');
        double double35 = variance14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance37.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        double[] doubleArray49 = new double[] { 0L, (byte) 10 };
        double double50 = variance45.evaluate(doubleArray49);
        double double52 = variance42.evaluate(doubleArray49, (double) 10L);
        double double53 = variance40.evaluate(doubleArray49);
        double double54 = variance37.evaluate(doubleArray49);
        variance14.incrementAll(doubleArray49);
        double double56 = secondMoment0.evaluate(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double58 = variance57.getResult();
        boolean boolean59 = variance57.isBiasCorrected();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2136.8055555555557d + "'", double22 == 2136.8055555555557d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2136.8055555555557d + "'", double32 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2136.8055555555557d + "'", double34 == 2136.8055555555557d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test05565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05565");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double11 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        secondMoment9.incrementAll(doubleArray19);
        boolean boolean22 = variance2.equals((java.lang.Object) secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean31 = variance24.equals((java.lang.Object) secondMoment30);
        boolean boolean32 = secondMoment9.equals((java.lang.Object) boolean31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        double double34 = secondMoment9.getResult();
        secondMoment9.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean40 = variance38.equals((java.lang.Object) (short) 10);
        double double41 = variance38.getResult();
        variance38.clear();
        double double43 = variance38.getResult();
        double double44 = variance38.getResult();
        variance38.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance50.increment((-1.0d));
        variance50.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double61 = variance60.getResult();
        double[] doubleArray64 = new double[] { 0L, (byte) 10 };
        double double65 = variance60.evaluate(doubleArray64);
        double double67 = variance57.evaluate(doubleArray64, (double) 10L);
        double double68 = variance55.evaluate(doubleArray64);
        double double69 = variance50.evaluate(doubleArray64);
        variance48.incrementAll(doubleArray64);
        variance46.incrementAll(doubleArray64);
        double double72 = variance38.evaluate(doubleArray64);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment9.incrementAll(doubleArray64, (int) (short) -1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
    }

    @Test
    public void test05566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05566");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        long long9 = secondMoment7.getN();
        secondMoment7.clear();
        secondMoment7.clear();
        secondMoment7.increment((double) (byte) 100);
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double22 = variance21.getResult();
        double[] doubleArray25 = new double[] { 0L, (byte) 10 };
        double double26 = variance21.evaluate(doubleArray25);
        double double28 = variance18.evaluate(doubleArray25, (double) 10L);
        double double29 = variance16.evaluate(doubleArray25);
        double[] doubleArray33 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double34 = variance16.evaluate(doubleArray33);
        double double35 = secondMoment7.evaluate(doubleArray33);
        double double38 = secondMoment1.evaluate(doubleArray33, 0, (int) (short) 1);
        long long39 = secondMoment1.getN();
        secondMoment1.increment(2564.166666666667d);
        secondMoment1.clear();
        double double43 = secondMoment1.getResult();
        secondMoment1.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2024039.120370371d + "'", double34 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 4048078.240740742d + "'", double35 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
    }

    @Test
    public void test05567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05567");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        double[] doubleArray14 = new double[] { 0L, (byte) 10 };
        double double15 = variance10.evaluate(doubleArray14);
        double double17 = variance7.evaluate(doubleArray14, (double) 10L);
        double double18 = variance5.evaluate(doubleArray14);
        double[] doubleArray22 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double23 = variance5.evaluate(doubleArray22);
        double double25 = variance1.evaluate(doubleArray22, (double) (byte) 1);
        variance1.increment(10.0d);
        variance1.setBiasCorrected(true);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.setBiasCorrected(false);
        boolean boolean39 = variance34.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean41 = variance34.equals((java.lang.Object) secondMoment40);
        double double42 = secondMoment40.getResult();
        secondMoment40.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment40);
        secondMoment40.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance48.increment((-1.0d));
        variance48.setBiasCorrected(false);
        boolean boolean53 = variance48.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean55 = variance48.equals((java.lang.Object) secondMoment54);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double61 = variance60.getResult();
        double[] doubleArray64 = new double[] { 0L, (byte) 10 };
        double double65 = variance60.evaluate(doubleArray64);
        double double67 = variance57.evaluate(doubleArray64, (double) 10L);
        double double71 = variance48.evaluate(doubleArray64, (double) (short) 0, 0, (int) (short) 0);
        double double74 = secondMoment40.evaluate(doubleArray64, 0, 0);
        variance32.incrementAll(doubleArray64);
        double double76 = variance1.evaluate(doubleArray64);
        double double77 = variance1.getResult();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 50.0d + "'", double15 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2024039.120370371d + "'", double23 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2024039.120370371d + "'", double25 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
    }

    @Test
    public void test05568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05568");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        double double4 = variance1.getResult();
        variance1.clear();
        variance1.clear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test05569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05569");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance5.clear();
        variance5.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        long long12 = secondMoment10.getN();
        secondMoment10.clear();
        secondMoment10.clear();
        secondMoment10.increment((double) (byte) 100);
        secondMoment10.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        secondMoment10.clear();
        secondMoment10.increment(2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        long long26 = secondMoment24.getN();
        secondMoment24.clear();
        secondMoment24.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        variance30.clear();
        variance30.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        long long36 = variance34.getN();
        long long37 = variance34.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        double[] doubleArray43 = new double[] { 0L, (byte) 10 };
        double double44 = variance39.evaluate(doubleArray43);
        double double46 = variance34.evaluate(doubleArray43, (double) (short) -1);
        variance30.incrementAll(doubleArray43);
        variance23.incrementAll(doubleArray43);
        // The following exception was thrown during execution in test generation
        try {
            double double52 = variance5.evaluate(doubleArray43, 2224.904761904762d, (int) (byte) 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
    }

    @Test
    public void test05570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05570");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        double double5 = secondMoment0.getResult();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double11 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance18.increment((-1.0d));
        variance18.setBiasCorrected(false);
        boolean boolean23 = variance18.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean25 = variance18.equals((java.lang.Object) secondMoment24);
        secondMoment24.increment((double) (short) 0);
        secondMoment24.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double39 = variance31.evaluate(doubleArray38);
        double double40 = secondMoment24.evaluate(doubleArray38);
        long long41 = secondMoment24.getN();
        long long42 = secondMoment24.getN();
        secondMoment24.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment24);
        double double46 = variance45.getResult();
        variance45.increment((double) 1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance50.increment((-1.0d));
        variance50.setBiasCorrected(false);
        boolean boolean55 = variance50.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean57 = variance50.equals((java.lang.Object) secondMoment56);
        long long58 = secondMoment56.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance60.increment((-1.0d));
        variance60.setBiasCorrected(false);
        variance60.increment((double) 100L);
        boolean boolean67 = variance60.isBiasCorrected();
        boolean boolean68 = variance60.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray77 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double78 = variance70.evaluate(doubleArray77);
        double double80 = variance60.evaluate(doubleArray77, (double) (byte) 10);
        secondMoment56.incrementAll(doubleArray77);
        double double82 = variance45.evaluate(doubleArray77);
        secondMoment9.incrementAll(doubleArray77);
        double double84 = secondMoment0.evaluate(doubleArray77);
        secondMoment0.increment(4.6116859540028824E16d);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2136.8055555555557d + "'", double39 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 12820.833333333334d + "'", double40 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 6L + "'", long41 == 6L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 6L + "'", long42 == 6L);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1980.1224489795918d + "'", double46 == 1980.1224489795918d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2136.8055555555557d + "'", double78 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 2136.8055555555557d + "'", double80 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 2136.8055555555557d + "'", double82 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 12820.833333333334d + "'", double84 == 12820.833333333334d);
    }

    @Test
    public void test05571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05571");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        secondMoment8.incrementAll(doubleArray18);
        boolean boolean21 = variance1.equals((java.lang.Object) secondMoment8);
        variance1.clear();
        variance1.increment(1142553.1483410494d);
        long long25 = variance1.getN();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
    }

    @Test
    public void test05572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05572");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        secondMoment7.clear();
        secondMoment7.increment((double) 10.0f);
        double double14 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance16.increment((-1.0d));
        variance16.setBiasCorrected(false);
        boolean boolean21 = variance16.isBiasCorrected();
        double[] doubleArray22 = new double[] {};
        double double23 = variance16.evaluate(doubleArray22);
        variance16.setBiasCorrected(false);
        variance16.clear();
        variance16.increment(227.3d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance30.increment((-1.0d));
        variance30.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean38 = variance36.equals((java.lang.Object) (short) 10);
        boolean boolean39 = variance30.equals((java.lang.Object) variance36);
        long long40 = variance36.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean44 = variance42.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray53 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double54 = variance46.evaluate(doubleArray53);
        double double55 = variance42.evaluate(doubleArray53);
        double double56 = variance36.evaluate(doubleArray53);
        double double57 = variance16.evaluate(doubleArray53);
        secondMoment7.incrementAll(doubleArray53);
        secondMoment7.increment((double) (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2136.8055555555557d + "'", double54 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2564.166666666667d + "'", double55 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2564.166666666667d + "'", double56 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2136.8055555555557d + "'", double57 == 2136.8055555555557d);
    }

    @Test
    public void test05573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05573");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance7.increment((-1.0d));
        variance7.setBiasCorrected(false);
        boolean boolean12 = variance7.isBiasCorrected();
        double[] doubleArray13 = new double[] {};
        double double14 = variance7.evaluate(doubleArray13);
        secondMoment1.incrementAll(doubleArray13);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double18 = secondMoment17.getResult();
        double double19 = secondMoment17.getResult();
        secondMoment17.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        double[] doubleArray38 = new double[] { 0L, (byte) 10 };
        double double39 = variance34.evaluate(doubleArray38);
        double double41 = variance31.evaluate(doubleArray38, (double) 10L);
        double double42 = variance29.evaluate(doubleArray38);
        double double43 = variance24.evaluate(doubleArray38);
        variance22.incrementAll(doubleArray38);
        variance22.increment((double) 100.0f);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        long long49 = secondMoment47.getN();
        secondMoment47.clear();
        secondMoment47.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance54.increment((-1.0d));
        variance54.setBiasCorrected(false);
        boolean boolean59 = variance54.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment60 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean61 = variance54.equals((java.lang.Object) secondMoment60);
        variance54.increment((double) 100L);
        variance54.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double70 = variance69.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double73 = variance72.getResult();
        double[] doubleArray76 = new double[] { 0L, (byte) 10 };
        double double77 = variance72.evaluate(doubleArray76);
        double double79 = variance69.evaluate(doubleArray76, (double) 10L);
        double double80 = variance67.evaluate(doubleArray76);
        double[] doubleArray84 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double85 = variance67.evaluate(doubleArray84);
        variance54.incrementAll(doubleArray84);
        double double87 = variance52.evaluate(doubleArray84);
        double double89 = variance22.evaluate(doubleArray84, (double) 3L);
        double double90 = secondMoment17.evaluate(doubleArray84);
        double double91 = secondMoment1.evaluate(doubleArray84);
        org.apache.commons.math.stat.descriptive.moment.Variance variance92 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long93 = secondMoment1.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2024039.120370371d + "'", double85 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 2024039.120370371d + "'", double87 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 2024039.1203703708d + "'", double89 == 2024039.1203703708d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 4048078.240740742d + "'", double90 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 4048078.240740742d + "'", double91 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 3L + "'", long93 == 3L);
    }

    @Test
    public void test05574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05574");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance6.clear();
        variance6.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        long long11 = secondMoment9.getN();
        secondMoment9.clear();
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        variance17.setBiasCorrected(false);
        boolean boolean22 = variance17.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean24 = variance17.equals((java.lang.Object) secondMoment23);
        double double25 = secondMoment23.getResult();
        secondMoment23.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance29.increment((-1.0d));
        variance29.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        double[] doubleArray43 = new double[] { 0L, (byte) 10 };
        double double44 = variance39.evaluate(doubleArray43);
        double double46 = variance36.evaluate(doubleArray43, (double) 10L);
        double double47 = variance34.evaluate(doubleArray43);
        double double48 = variance29.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        double[] doubleArray54 = new double[] { 0L, (byte) 10 };
        double double55 = variance50.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray64 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double65 = variance57.evaluate(doubleArray64);
        double double66 = variance50.evaluate(doubleArray64);
        double double67 = variance29.evaluate(doubleArray64);
        double double68 = variance27.evaluate(doubleArray64);
        variance14.incrementAll(doubleArray64);
        double double70 = variance6.evaluate(doubleArray64);
        double double71 = variance6.getResult();
        variance6.clear();
        variance6.clear();
        double[] doubleArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double77 = variance6.evaluate(doubleArray74, (-1), (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2136.8055555555557d + "'", double65 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 2564.166666666667d + "'", double66 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2564.166666666667d + "'", double67 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 2136.8055555555557d + "'", double68 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2564.166666666667d + "'", double70 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
    }

    @Test
    public void test05575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05575");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double[] doubleArray7 = new double[] {};
        double double8 = variance1.evaluate(doubleArray7);
        variance1.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        double[] doubleArray21 = new double[] { 0L, (byte) 10 };
        double double22 = variance17.evaluate(doubleArray21);
        double double24 = variance14.evaluate(doubleArray21, (double) 10L);
        double double25 = variance12.evaluate(doubleArray21);
        variance1.incrementAll(doubleArray21);
        variance1.increment(4048078.240740742d);
        variance1.increment(0.5d);
        variance1.clear();
        long long32 = variance1.getN();
        variance1.clear();
        long long34 = variance1.getN();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance37.increment((-1.0d));
        variance37.setBiasCorrected(false);
        boolean boolean42 = variance37.isBiasCorrected();
        double[] doubleArray43 = new double[] {};
        double double44 = variance37.evaluate(doubleArray43);
        variance37.increment((double) (-1.0f));
        variance37.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance50.increment((-1.0d));
        variance50.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean57 = variance55.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double65 = variance64.getResult();
        double[] doubleArray68 = new double[] { 0L, (byte) 10 };
        double double69 = variance64.evaluate(doubleArray68);
        double double71 = variance61.evaluate(doubleArray68, (double) 10L);
        double double72 = variance59.evaluate(doubleArray68);
        double[] doubleArray76 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double77 = variance59.evaluate(doubleArray76);
        double double79 = variance55.evaluate(doubleArray76, (double) (byte) 1);
        double double81 = variance50.evaluate(doubleArray76, 4048078.240740742d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double84 = variance83.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance86 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double87 = variance86.getResult();
        double[] doubleArray90 = new double[] { 0L, (byte) 10 };
        double double91 = variance86.evaluate(doubleArray90);
        double double93 = variance83.evaluate(doubleArray90, (double) 10L);
        variance50.incrementAll(doubleArray90);
        double double95 = variance37.evaluate(doubleArray90);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray90, 100, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2024039.120370371d + "'", double77 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 2024039.120370371d + "'", double79 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 2024039.12109375d + "'", double81 == 2024039.12109375d);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 50.0d + "'", double93 == 50.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 25.0d + "'", double95 == 25.0d);
    }

    @Test
    public void test05576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05576");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean9 = variance7.equals((java.lang.Object) (short) 10);
        boolean boolean10 = variance1.equals((java.lang.Object) variance7);
        long long11 = variance7.getN();
        variance7.setBiasCorrected(false);
        variance7.clear();
        variance7.increment(2136.805555555504d);
        long long17 = variance7.getN();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
    }

    @Test
    public void test05577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05577");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray12 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double13 = variance5.evaluate(doubleArray12);
        double double14 = variance1.evaluate(doubleArray12);
        variance1.setBiasCorrected(false);
        double double17 = variance1.getResult();
        variance1.clear();
        double double19 = variance1.getResult();
        variance1.increment(1.4631541463478633E13d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 2136.8055555555557d + "'", double13 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2564.166666666667d + "'", double14 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test05578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05578");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        long long9 = secondMoment7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance11.increment((-1.0d));
        variance11.setBiasCorrected(false);
        variance11.increment((double) 100L);
        boolean boolean18 = variance11.isBiasCorrected();
        boolean boolean19 = variance11.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray28 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double29 = variance21.evaluate(doubleArray28);
        double double31 = variance11.evaluate(doubleArray28, (double) (byte) 10);
        secondMoment7.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        variance33.clear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2136.8055555555557d + "'", double29 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2136.8055555555557d + "'", double31 == 2136.8055555555557d);
    }

    @Test
    public void test05579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05579");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.increment((double) 10L);
        variance1.increment((double) (short) 0);
        variance1.increment((double) 8L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance9.increment((-1.0d));
        variance9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean16 = variance14.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double24 = variance23.getResult();
        double[] doubleArray27 = new double[] { 0L, (byte) 10 };
        double double28 = variance23.evaluate(doubleArray27);
        double double30 = variance20.evaluate(doubleArray27, (double) 10L);
        double double31 = variance18.evaluate(doubleArray27);
        double[] doubleArray35 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double36 = variance18.evaluate(doubleArray35);
        double double38 = variance14.evaluate(doubleArray35, (double) (byte) 1);
        double double40 = variance9.evaluate(doubleArray35, 4048078.240740742d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        double[] doubleArray49 = new double[] { 0L, (byte) 10 };
        double double50 = variance45.evaluate(doubleArray49);
        double double52 = variance42.evaluate(doubleArray49, (double) 10L);
        variance9.incrementAll(doubleArray49);
        double double55 = variance1.evaluate(doubleArray49, 2024039.1204833984d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 2024039.120370371d + "'", double36 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2024039.120370371d + "'", double38 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2024039.12109375d + "'", double40 == 2024039.12109375d);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 24.99951171875d + "'", double55 == 24.99951171875d);
    }

    @Test
    public void test05580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05580");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance2.increment(2564.166666666667d);
        boolean boolean5 = variance2.isBiasCorrected();
        variance2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance9.increment((-1.0d));
        variance9.setBiasCorrected(false);
        boolean boolean14 = variance9.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean16 = variance9.equals((java.lang.Object) secondMoment15);
        secondMoment15.increment((double) (short) 0);
        secondMoment15.increment((double) 1.0f);
        double double21 = secondMoment15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment15);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        variance24.increment((double) (short) -1);
        long long28 = variance24.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        double[] doubleArray39 = new double[] { 0L, (byte) 10 };
        double double40 = variance35.evaluate(doubleArray39);
        double double42 = variance32.evaluate(doubleArray39, (double) 10L);
        double double43 = variance30.evaluate(doubleArray39);
        variance30.increment((double) 0.0f);
        boolean boolean46 = variance30.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        long long49 = secondMoment47.getN();
        secondMoment47.clear();
        secondMoment47.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        variance53.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean59 = variance57.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray68 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double69 = variance61.evaluate(doubleArray68);
        double double70 = variance57.evaluate(doubleArray68);
        double double72 = variance53.evaluate(doubleArray68, (double) 1.0f);
        double double75 = variance30.evaluate(doubleArray68, (int) (byte) 0, 1);
        double double76 = variance24.evaluate(doubleArray68);
        double double77 = variance22.evaluate(doubleArray68);
        double double78 = variance2.evaluate(doubleArray68);
        double double79 = variance2.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.5d + "'", double21 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2136.8055555555557d + "'", double69 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2564.166666666667d + "'", double70 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2136.805555555555d + "'", double72 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2564.166666666667d + "'", double76 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2564.166666666667d + "'", double77 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2564.166666666667d + "'", double78 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
    }

    @Test
    public void test05581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05581");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        double double6 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        double double20 = variance10.evaluate(doubleArray17, (double) 10L);
        double double21 = variance8.evaluate(doubleArray17);
        double[] doubleArray25 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double26 = variance8.evaluate(doubleArray25);
        double double27 = secondMoment0.evaluate(doubleArray25);
        long long28 = secondMoment0.getN();
        long long29 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.clear();
        double double32 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.setBiasCorrected(false);
        boolean boolean39 = variance34.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        double[] doubleArray48 = new double[] { 0L, (byte) 10 };
        double double49 = variance44.evaluate(doubleArray48);
        double double51 = variance41.evaluate(doubleArray48, (double) 10L);
        double double52 = variance34.evaluate(doubleArray48);
        variance34.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray63 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double64 = variance56.evaluate(doubleArray63);
        double double65 = variance34.evaluate(doubleArray63);
        double double66 = secondMoment0.evaluate(doubleArray63);
        secondMoment0.increment(2.6219067524591934E12d);
        secondMoment0.increment(2136.805555555562d);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2024039.120370371d + "'", double26 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 4048078.240740742d + "'", double27 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 3L + "'", long28 == 3L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 3L + "'", long29 == 3L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 25.0d + "'", double52 == 25.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2136.8055555555557d + "'", double64 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2136.8055555555557d + "'", double65 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 12820.833333333334d + "'", double66 == 12820.833333333334d);
    }

    @Test
    public void test05582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05582");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double24 = secondMoment7.evaluate(doubleArray18, (int) (short) 0, 1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        double double26 = secondMoment7.getResult();
        secondMoment7.clear();
        long long28 = secondMoment7.getN();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test05583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05583");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.clear();
        double double3 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        long long7 = secondMoment5.getN();
        secondMoment5.clear();
        double double9 = secondMoment5.getResult();
        secondMoment5.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        secondMoment5.increment((double) (byte) 0);
        long long15 = secondMoment5.getN();
        boolean boolean16 = variance1.equals((java.lang.Object) long15);
        variance1.setBiasCorrected(true);
        long long19 = variance1.getN();
        long long20 = variance1.getN();
        variance1.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test05584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05584");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance4.increment((-1.0d));
        variance4.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double22 = variance9.evaluate(doubleArray18);
        double double23 = variance4.evaluate(doubleArray18);
        variance2.incrementAll(doubleArray18);
        variance0.incrementAll(doubleArray18);
        variance0.clear();
        long long27 = variance0.getN();
        long long28 = variance0.getN();
        variance0.increment(2564.1666666666665d);
        variance0.setBiasCorrected(true);
        boolean boolean33 = variance0.isBiasCorrected();
        variance0.clear();
        variance0.clear();
        double[] doubleArray36 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double37 = variance0.evaluate(doubleArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test05585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05585");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance6.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double22 = variance9.evaluate(doubleArray18);
        double double23 = variance6.evaluate(doubleArray18);
        secondMoment0.incrementAll(doubleArray18, 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance27.clear();
        variance27.clear();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
    }

    @Test
    public void test05586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05586");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double11 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        secondMoment9.incrementAll(doubleArray19);
        boolean boolean22 = variance2.equals((java.lang.Object) secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean31 = variance24.equals((java.lang.Object) secondMoment30);
        boolean boolean32 = secondMoment9.equals((java.lang.Object) boolean31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        double double34 = variance33.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment35);
        long long37 = secondMoment35.getN();
        secondMoment35.clear();
        double double39 = secondMoment35.getResult();
        secondMoment35.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment35);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double50 = variance49.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double53 = variance52.getResult();
        double[] doubleArray56 = new double[] { 0L, (byte) 10 };
        double double57 = variance52.evaluate(doubleArray56);
        double double59 = variance49.evaluate(doubleArray56, (double) 10L);
        double double60 = variance47.evaluate(doubleArray56);
        double double61 = variance44.evaluate(doubleArray56);
        variance42.incrementAll(doubleArray56);
        double double63 = variance33.evaluate(doubleArray56);
        variance33.clear();
        double double65 = variance33.getResult();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
    }

    @Test
    public void test05587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05587");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double3 = variance2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double6 = variance5.getResult();
        double[] doubleArray9 = new double[] { 0L, (byte) 10 };
        double double10 = variance5.evaluate(doubleArray9);
        double double12 = variance2.evaluate(doubleArray9, (double) 10L);
        long long13 = variance2.getN();
        boolean boolean14 = secondMoment0.equals((java.lang.Object) long13);
        secondMoment0.increment(50.0d);
        secondMoment0.clear();
        long long18 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance19.clear();
        double double21 = variance19.getResult();
        java.lang.Class<?> wildcardClass22 = variance19.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 50.0d + "'", double10 == 50.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test05588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05588");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        double double8 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment6);
        secondMoment6.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        double[] doubleArray16 = new double[] { 0L, (byte) 10 };
        double double17 = variance12.evaluate(doubleArray16);
        secondMoment6.incrementAll(doubleArray16);
        double double19 = variance4.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance22.increment((-1.0d));
        variance22.setBiasCorrected(false);
        boolean boolean27 = variance22.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean29 = variance22.equals((java.lang.Object) secondMoment28);
        secondMoment28.increment((double) (short) 0);
        secondMoment28.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray42 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double43 = variance35.evaluate(doubleArray42);
        double double44 = secondMoment28.evaluate(doubleArray42);
        secondMoment20.incrementAll(doubleArray42);
        variance4.incrementAll(doubleArray42);
        variance4.increment(50.0009765625d);
        variance4.setBiasCorrected(true);
        boolean boolean51 = variance4.isBiasCorrected();
        double double52 = variance4.getResult();
        variance4.increment(13860.857142857143d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean58 = variance56.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double63 = variance62.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double66 = variance65.getResult();
        double[] doubleArray69 = new double[] { 0L, (byte) 10 };
        double double70 = variance65.evaluate(doubleArray69);
        double double72 = variance62.evaluate(doubleArray69, (double) 10L);
        double double73 = variance60.evaluate(doubleArray69);
        double[] doubleArray77 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double78 = variance60.evaluate(doubleArray77);
        double double80 = variance56.evaluate(doubleArray77, (double) (byte) 1);
        double double84 = variance4.evaluate(doubleArray77, 1557016.8402777782d, (int) (short) 1, 1);
        variance4.increment(2.0483469400536294E12d);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 25.0d + "'", double19 == 25.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2136.8055555555557d + "'", double43 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 12820.833333333334d + "'", double44 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2024039.120370371d + "'", double78 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 2024039.120370371d + "'", double80 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
    }

    @Test
    public void test05589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05589");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        double double4 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        double[] doubleArray13 = new double[] { 0L, (byte) 10 };
        double double14 = variance9.evaluate(doubleArray13);
        double double16 = variance6.evaluate(doubleArray13, (double) 10L);
        double double17 = variance1.evaluate(doubleArray13);
        double double18 = variance1.getResult();
        double double19 = variance1.getResult();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test05590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05590");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        variance1.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean14 = variance12.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double24 = variance16.evaluate(doubleArray23);
        double double25 = variance12.evaluate(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance27.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        double[] doubleArray39 = new double[] { 0L, (byte) 10 };
        double double40 = variance35.evaluate(doubleArray39);
        double double42 = variance32.evaluate(doubleArray39, (double) 10L);
        double double43 = variance30.evaluate(doubleArray39);
        double double44 = variance27.evaluate(doubleArray39);
        double double45 = variance12.evaluate(doubleArray39);
        double double47 = variance1.evaluate(doubleArray39, (double) 0L);
        variance1.clear();
        variance1.increment(2136.8055555555557d);
        double double51 = variance1.getResult();
        variance1.setBiasCorrected(true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2136.8055555555557d + "'", double24 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2564.166666666667d + "'", double25 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 25.0d + "'", double47 == 25.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
    }

    @Test
    public void test05591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05591");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        secondMoment8.incrementAll(doubleArray18);
        boolean boolean21 = variance1.equals((java.lang.Object) secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.setBiasCorrected(false);
        boolean boolean28 = variance23.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean30 = variance23.equals((java.lang.Object) secondMoment29);
        boolean boolean31 = secondMoment8.equals((java.lang.Object) boolean30);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance33.increment((-1.0d));
        variance33.setBiasCorrected(false);
        boolean boolean38 = variance33.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean40 = variance33.equals((java.lang.Object) secondMoment39);
        secondMoment39.increment((double) (short) 0);
        secondMoment39.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray53 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double54 = variance46.evaluate(doubleArray53);
        double double55 = secondMoment39.evaluate(doubleArray53);
        double double56 = secondMoment8.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance58.increment((-1.0d));
        variance58.setBiasCorrected(false);
        variance58.increment((double) 100L);
        boolean boolean65 = variance58.isBiasCorrected();
        variance58.clear();
        double double67 = variance58.getResult();
        boolean boolean68 = secondMoment8.equals((java.lang.Object) double67);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        variance69.clear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2136.8055555555557d + "'", double54 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 12820.833333333334d + "'", double55 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 12820.833333333334d + "'", double56 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test05592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05592");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        double double5 = secondMoment1.getResult();
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long9 = variance8.getN();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test05593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05593");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        boolean boolean8 = variance1.isBiasCorrected();
        variance1.clear();
        double double10 = variance1.getResult();
        variance1.clear();
        variance1.clear();
        long long13 = variance1.getN();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test05594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05594");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        boolean boolean8 = variance1.isBiasCorrected();
        variance1.clear();
        long long10 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        double double14 = secondMoment12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment12);
        secondMoment12.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        double[] doubleArray22 = new double[] { 0L, (byte) 10 };
        double double23 = variance18.evaluate(doubleArray22);
        secondMoment12.incrementAll(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean29 = variance27.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance31.increment((-1.0d));
        variance31.setBiasCorrected(false);
        boolean boolean36 = variance31.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean38 = variance31.equals((java.lang.Object) secondMoment37);
        double double39 = secondMoment37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        double[] doubleArray48 = new double[] { 0L, (byte) 10 };
        double double49 = variance44.evaluate(doubleArray48);
        double double51 = variance41.evaluate(doubleArray48, (double) 10L);
        double double54 = secondMoment37.evaluate(doubleArray48, (int) (short) 0, 1);
        double double55 = variance27.evaluate(doubleArray48);
        secondMoment12.incrementAll(doubleArray48);
        double double57 = variance1.evaluate(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance59.increment((-1.0d));
        variance59.setBiasCorrected(false);
        boolean boolean64 = variance59.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment65 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean66 = variance59.equals((java.lang.Object) secondMoment65);
        secondMoment65.increment((double) (short) 0);
        secondMoment65.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray79 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double80 = variance72.evaluate(doubleArray79);
        double double81 = secondMoment65.evaluate(doubleArray79);
        double double82 = variance1.evaluate(doubleArray79);
        variance1.clear();
        variance1.increment(2550.25d);
        boolean boolean86 = variance1.isBiasCorrected();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 25.0d + "'", double57 == 25.0d);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 2136.8055555555557d + "'", double80 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 12820.833333333334d + "'", double81 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 2136.8055555555557d + "'", double82 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test05595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05595");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double3 = variance2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double6 = variance5.getResult();
        double[] doubleArray9 = new double[] { 0L, (byte) 10 };
        double double10 = variance5.evaluate(doubleArray9);
        double double12 = variance2.evaluate(doubleArray9, (double) 10L);
        long long13 = variance2.getN();
        boolean boolean14 = secondMoment0.equals((java.lang.Object) long13);
        secondMoment0.increment(50.0d);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double20 = secondMoment19.getResult();
        double double21 = secondMoment19.getResult();
        secondMoment19.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment19);
        variance23.clear();
        variance23.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance27.increment((-1.0d));
        variance27.setBiasCorrected(false);
        boolean boolean32 = variance27.isBiasCorrected();
        double[] doubleArray33 = new double[] {};
        double double34 = variance27.evaluate(doubleArray33);
        variance27.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance39.increment((-1.0d));
        variance39.setBiasCorrected(false);
        boolean boolean44 = variance39.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean46 = variance39.equals((java.lang.Object) secondMoment45);
        double double47 = secondMoment45.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double50 = variance49.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double53 = variance52.getResult();
        double[] doubleArray56 = new double[] { 0L, (byte) 10 };
        double double57 = variance52.evaluate(doubleArray56);
        double double59 = variance49.evaluate(doubleArray56, (double) 10L);
        double double62 = secondMoment45.evaluate(doubleArray56, (int) (short) 0, 1);
        long long63 = secondMoment45.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment45);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double67 = variance66.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double70 = variance69.getResult();
        double[] doubleArray73 = new double[] { 0L, (byte) 10 };
        double double74 = variance69.evaluate(doubleArray73);
        double double76 = variance66.evaluate(doubleArray73, (double) 10L);
        long long77 = variance66.getN();
        variance66.increment((double) 0L);
        double[] doubleArray81 = new double[] { 10.0d };
        variance66.incrementAll(doubleArray81);
        double double83 = variance64.evaluate(doubleArray81);
        double double87 = variance27.evaluate(doubleArray81, (double) 1L, 0, (int) (byte) 1);
        double double88 = variance23.evaluate(doubleArray81);
        double double89 = secondMoment0.evaluate(doubleArray81);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 50.0d + "'", double10 == 50.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[10.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
    }

    @Test
    public void test05596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05596");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double2 = secondMoment0.getResult();
        secondMoment0.increment((double) 7L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double6 = secondMoment5.getResult();
        double double7 = secondMoment5.getResult();
        secondMoment5.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance12.increment((-1.0d));
        variance12.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double20 = variance19.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        double[] doubleArray26 = new double[] { 0L, (byte) 10 };
        double double27 = variance22.evaluate(doubleArray26);
        double double29 = variance19.evaluate(doubleArray26, (double) 10L);
        double double30 = variance17.evaluate(doubleArray26);
        double double31 = variance12.evaluate(doubleArray26);
        variance10.incrementAll(doubleArray26);
        variance10.increment((double) 100.0f);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment35);
        long long37 = secondMoment35.getN();
        secondMoment35.clear();
        secondMoment35.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment35);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance42.increment((-1.0d));
        variance42.setBiasCorrected(false);
        boolean boolean47 = variance42.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean49 = variance42.equals((java.lang.Object) secondMoment48);
        variance42.increment((double) 100L);
        variance42.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double61 = variance60.getResult();
        double[] doubleArray64 = new double[] { 0L, (byte) 10 };
        double double65 = variance60.evaluate(doubleArray64);
        double double67 = variance57.evaluate(doubleArray64, (double) 10L);
        double double68 = variance55.evaluate(doubleArray64);
        double[] doubleArray72 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double73 = variance55.evaluate(doubleArray72);
        variance42.incrementAll(doubleArray72);
        double double75 = variance40.evaluate(doubleArray72);
        double double77 = variance10.evaluate(doubleArray72, (double) 3L);
        double double78 = secondMoment5.evaluate(doubleArray72);
        double double79 = secondMoment0.evaluate(doubleArray72);
        double double80 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance81.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 2024039.120370371d + "'", double73 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 2024039.120370371d + "'", double75 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2024039.1203703708d + "'", double77 == 2024039.1203703708d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 4048078.240740742d + "'", double78 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 4048078.240740742d + "'", double79 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 4048078.240740742d + "'", double80 == 4048078.240740742d);
    }

    @Test
    public void test05597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05597");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        long long8 = secondMoment6.getN();
        secondMoment6.clear();
        double double10 = secondMoment6.getResult();
        secondMoment6.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        double[] doubleArray14 = new double[] {};
        double double15 = secondMoment6.evaluate(doubleArray14);
        secondMoment0.incrementAll(doubleArray14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double18 = variance17.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double22 = variance21.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        double[] doubleArray28 = new double[] { 0L, (byte) 10 };
        double double29 = variance24.evaluate(doubleArray28);
        double double31 = variance21.evaluate(doubleArray28, (double) 10L);
        long long32 = variance21.getN();
        boolean boolean33 = secondMoment19.equals((java.lang.Object) long32);
        secondMoment19.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance37.increment((-1.0d));
        variance37.setBiasCorrected(false);
        variance37.increment(2136.8055555555557d);
        variance37.setBiasCorrected(false);
        java.lang.Class<?> wildcardClass46 = variance37.getClass();
        boolean boolean47 = secondMoment19.equals((java.lang.Object) variance37);
        double double48 = secondMoment19.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        double[] doubleArray58 = new double[] { 0L, (byte) 10 };
        double double59 = variance54.evaluate(doubleArray58);
        double double61 = variance51.evaluate(doubleArray58, (double) 10L);
        long long62 = variance51.getN();
        variance51.increment((double) 0L);
        double[] doubleArray66 = new double[] { 10.0d };
        variance51.incrementAll(doubleArray66);
        variance51.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment70 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment70);
        long long72 = secondMoment70.getN();
        secondMoment70.clear();
        secondMoment70.clear();
        secondMoment70.increment((double) (byte) 100);
        secondMoment70.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment70);
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment70);
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double82 = variance81.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance84 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double85 = variance84.getResult();
        double[] doubleArray88 = new double[] { 0L, (byte) 10 };
        double double89 = variance84.evaluate(doubleArray88);
        double double91 = variance81.evaluate(doubleArray88, (double) 10L);
        double double92 = variance79.evaluate(doubleArray88);
        double double93 = variance51.evaluate(doubleArray88);
        double double94 = secondMoment19.evaluate(doubleArray88);
        // The following exception was thrown during execution in test generation
        try {
            double double97 = variance17.evaluate(doubleArray88, (int) '#', (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0]");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 50.0d + "'", double93 == 50.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 50.0d + "'", double94 == 50.0d);
    }

    @Test
    public void test05598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05598");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment(50.0009765625d);
        long long11 = secondMoment7.getN();
        long long12 = secondMoment7.getN();
        secondMoment7.clear();
        secondMoment7.increment(100.0d);
        secondMoment7.increment(2136.8055555559695d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance19.increment((-1.0d));
        variance19.setBiasCorrected(false);
        boolean boolean24 = variance19.isBiasCorrected();
        double[] doubleArray25 = new double[] {};
        double double26 = variance19.evaluate(doubleArray25);
        long long27 = variance19.getN();
        long long28 = variance19.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance30.increment((-1.0d));
        long long33 = variance30.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance38.increment((-1.0d));
        variance38.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        double[] doubleArray52 = new double[] { 0L, (byte) 10 };
        double double53 = variance48.evaluate(doubleArray52);
        double double55 = variance45.evaluate(doubleArray52, (double) 10L);
        double double56 = variance43.evaluate(doubleArray52);
        double double57 = variance38.evaluate(doubleArray52);
        variance36.incrementAll(doubleArray52);
        variance34.incrementAll(doubleArray52);
        double double60 = variance30.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment62);
        double double64 = secondMoment62.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment62);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment67 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment67);
        double double69 = secondMoment67.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment67);
        secondMoment67.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double74 = variance73.getResult();
        double[] doubleArray77 = new double[] { 0L, (byte) 10 };
        double double78 = variance73.evaluate(doubleArray77);
        secondMoment67.incrementAll(doubleArray77);
        double double80 = variance65.evaluate(doubleArray77);
        double double81 = variance30.evaluate(doubleArray77);
        variance19.incrementAll(doubleArray77);
        double double83 = secondMoment7.evaluate(doubleArray77);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 25.0d + "'", double80 == 25.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
    }

    @Test
    public void test05599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05599");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double22 = variance9.evaluate(doubleArray18);
        double[] doubleArray26 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double27 = variance9.evaluate(doubleArray26);
        double double28 = secondMoment0.evaluate(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double30 = secondMoment29.getResult();
        long long31 = secondMoment29.getN();
        secondMoment29.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment34);
        long long36 = secondMoment34.getN();
        secondMoment34.clear();
        secondMoment34.clear();
        secondMoment34.increment((double) (byte) 100);
        secondMoment34.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment34);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment34);
        variance43.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance48.increment((-1.0d));
        variance48.setBiasCorrected(false);
        boolean boolean53 = variance48.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean55 = variance48.equals((java.lang.Object) secondMoment54);
        double double56 = secondMoment54.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double59 = variance58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        double[] doubleArray65 = new double[] { 0L, (byte) 10 };
        double double66 = variance61.evaluate(doubleArray65);
        double double68 = variance58.evaluate(doubleArray65, (double) 10L);
        double double71 = secondMoment54.evaluate(doubleArray65, (int) (short) 0, 1);
        long long72 = secondMoment54.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment54);
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double79 = variance78.getResult();
        double[] doubleArray82 = new double[] { 0L, (byte) 10 };
        double double83 = variance78.evaluate(doubleArray82);
        double double85 = variance75.evaluate(doubleArray82, (double) 10L);
        long long86 = variance75.getN();
        variance75.increment((double) 0L);
        double[] doubleArray90 = new double[] { 10.0d };
        variance75.incrementAll(doubleArray90);
        double double92 = variance73.evaluate(doubleArray90);
        variance43.incrementAll(doubleArray90);
        secondMoment29.incrementAll(doubleArray90);
        secondMoment0.incrementAll(doubleArray90);
        org.apache.commons.math.stat.descriptive.moment.Variance variance96 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double97 = variance96.getResult();
        long long98 = variance96.getN();
        variance96.clear();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 2024039.120370371d + "'", double27 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 4048078.240740742d + "'", double28 == 4048078.240740742d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[10.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 1557016.8402777782d + "'", double97 == 1557016.8402777782d);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 4L + "'", long98 == 4L);
    }

    @Test
    public void test05600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05600");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double2 = secondMoment1.getResult();
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        double double5 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance6.increment(2024039.12109375d);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test05601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05601");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        double[] doubleArray11 = new double[] { 0L, (byte) 10 };
        double double12 = variance7.evaluate(doubleArray11);
        secondMoment1.incrementAll(doubleArray11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment(Double.NaN);
        secondMoment1.increment(0.0d);
        secondMoment1.clear();
        long long21 = secondMoment1.getN();
        long long22 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        double double25 = secondMoment1.getResult();
        secondMoment1.increment((-1.073741824E8d));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test05602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05602");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        double double5 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        double[] doubleArray13 = new double[] { 0L, (byte) 10 };
        double double14 = variance9.evaluate(doubleArray13);
        secondMoment3.incrementAll(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        secondMoment3.clear();
        secondMoment3.increment(Double.NaN);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment3);
        secondMoment3.increment(1322.6666666666667d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        variance23.clear();
        variance23.increment(1643.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
    }

    @Test
    public void test05603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05603");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double11 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        secondMoment9.incrementAll(doubleArray19);
        boolean boolean22 = variance2.equals((java.lang.Object) secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean31 = variance24.equals((java.lang.Object) secondMoment30);
        boolean boolean32 = secondMoment9.equals((java.lang.Object) boolean31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        double[] doubleArray42 = new double[] { 0L, (byte) 10 };
        double double43 = variance38.evaluate(doubleArray42);
        double double45 = variance35.evaluate(doubleArray42, (double) 10L);
        double double46 = secondMoment9.evaluate(doubleArray42);
        double double47 = secondMoment9.getResult();
        long long48 = secondMoment9.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance50.increment((-1.0d));
        variance50.setBiasCorrected(false);
        boolean boolean55 = variance50.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean57 = variance50.equals((java.lang.Object) secondMoment56);
        double double58 = secondMoment56.getResult();
        secondMoment56.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance63.increment((-1.0d));
        variance63.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double71 = variance70.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double74 = variance73.getResult();
        double[] doubleArray77 = new double[] { 0L, (byte) 10 };
        double double78 = variance73.evaluate(doubleArray77);
        double double80 = variance70.evaluate(doubleArray77, (double) 10L);
        double double81 = variance68.evaluate(doubleArray77);
        double double82 = variance63.evaluate(doubleArray77);
        variance61.incrementAll(doubleArray77);
        double double84 = secondMoment56.evaluate(doubleArray77);
        double double85 = secondMoment9.evaluate(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Variance variance86 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 2L + "'", long48 == 2L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
    }

    @Test
    public void test05604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05604");
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.setBiasCorrected(false);
        boolean boolean8 = variance3.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean10 = variance3.equals((java.lang.Object) secondMoment9);
        secondMoment9.increment((double) (short) 0);
        secondMoment9.increment((double) 1.0f);
        double double15 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance19.increment((-1.0d));
        variance19.setBiasCorrected(false);
        boolean boolean24 = variance19.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean26 = variance19.equals((java.lang.Object) secondMoment25);
        long long27 = secondMoment25.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance29.increment((-1.0d));
        variance29.setBiasCorrected(false);
        variance29.increment((double) 100L);
        boolean boolean36 = variance29.isBiasCorrected();
        boolean boolean37 = variance29.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray46 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double47 = variance39.evaluate(doubleArray46);
        double double49 = variance29.evaluate(doubleArray46, (double) (byte) 10);
        secondMoment25.incrementAll(doubleArray46);
        secondMoment9.incrementAll(doubleArray46);
        secondMoment9.increment(227.3d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.5d + "'", double15 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2136.8055555555557d + "'", double47 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 2136.8055555555557d + "'", double49 == 2136.8055555555557d);
    }

    @Test
    public void test05605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05605");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double2 = secondMoment0.getResult();
        boolean boolean4 = secondMoment0.equals((java.lang.Object) 1.0d);
        secondMoment0.increment((double) (-1L));
        secondMoment0.increment((double) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        double double22 = variance12.evaluate(doubleArray19, (double) 10L);
        double double23 = variance10.evaluate(doubleArray19);
        variance10.increment(10.0d);
        double double26 = variance10.getResult();
        variance10.increment(1152.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        double double31 = secondMoment29.getResult();
        boolean boolean33 = secondMoment29.equals((java.lang.Object) 1.0d);
        double double34 = secondMoment29.getResult();
        secondMoment29.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment36);
        long long38 = secondMoment36.getN();
        secondMoment36.clear();
        secondMoment36.clear();
        secondMoment36.increment((double) (byte) 100);
        secondMoment36.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment36);
        secondMoment36.increment(2136.805555555555d);
        secondMoment36.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance49.increment((-1.0d));
        variance49.setBiasCorrected(false);
        variance49.increment((double) 100L);
        boolean boolean56 = variance49.isBiasCorrected();
        boolean boolean57 = variance49.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray66 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double67 = variance59.evaluate(doubleArray66);
        double double69 = variance49.evaluate(doubleArray66, (double) (byte) 10);
        secondMoment36.incrementAll(doubleArray66);
        double double71 = secondMoment29.evaluate(doubleArray66);
        double double74 = variance10.evaluate(doubleArray66, 1, 1);
        secondMoment0.incrementAll(doubleArray66, 1, (int) (short) 1);
        secondMoment0.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2136.8055555555557d + "'", double67 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2136.8055555555557d + "'", double69 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 12820.833333333334d + "'", double71 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
    }

    @Test
    public void test05606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05606");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        double[] doubleArray21 = new double[] { 0L, (byte) 10 };
        double double22 = variance17.evaluate(doubleArray21);
        double double24 = variance14.evaluate(doubleArray21, (double) 10L);
        double double25 = variance12.evaluate(doubleArray21);
        double double26 = variance9.evaluate(doubleArray21);
        variance7.incrementAll(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance29.increment((-1.0d));
        variance29.setBiasCorrected(false);
        variance29.increment(2136.8055555555557d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance37.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        double[] doubleArray49 = new double[] { 0L, (byte) 10 };
        double double50 = variance45.evaluate(doubleArray49);
        double double52 = variance42.evaluate(doubleArray49, (double) 10L);
        double double53 = variance40.evaluate(doubleArray49);
        double double54 = variance37.evaluate(doubleArray49);
        variance29.incrementAll(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double60 = variance59.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double63 = variance62.getResult();
        double[] doubleArray66 = new double[] { 0L, (byte) 10 };
        double double67 = variance62.evaluate(doubleArray66);
        double double69 = variance59.evaluate(doubleArray66, (double) 10L);
        double double70 = variance57.evaluate(doubleArray66);
        double double72 = variance29.evaluate(doubleArray66, Double.NaN);
        double double73 = variance7.evaluate(doubleArray66);
        variance7.clear();
        variance7.increment(4379882.240740742d);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
    }

    @Test
    public void test05607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05607");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        variance1.increment((double) (short) -1);
        long long5 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        double[] doubleArray16 = new double[] { 0L, (byte) 10 };
        double double17 = variance12.evaluate(doubleArray16);
        double double19 = variance9.evaluate(doubleArray16, (double) 10L);
        double double20 = variance7.evaluate(doubleArray16);
        variance7.increment((double) 0.0f);
        boolean boolean23 = variance7.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        long long26 = secondMoment24.getN();
        secondMoment24.clear();
        secondMoment24.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        variance30.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean36 = variance34.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double46 = variance38.evaluate(doubleArray45);
        double double47 = variance34.evaluate(doubleArray45);
        double double49 = variance30.evaluate(doubleArray45, (double) 1.0f);
        double double52 = variance7.evaluate(doubleArray45, (int) (byte) 0, 1);
        double double53 = variance1.evaluate(doubleArray45);
        double[] doubleArray58 = new double[] { (short) 1, (short) 10, 1.0d, 50.0d };
        double double59 = variance1.evaluate(doubleArray58);
        long long60 = variance1.getN();
        double double61 = variance1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2136.8055555555557d + "'", double46 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2564.166666666667d + "'", double47 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 2136.805555555555d + "'", double49 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2564.166666666667d + "'", double53 == 2564.166666666667d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0, 1.0, 50.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 547.0d + "'", double59 == 547.0d);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
    }

    @Test
    public void test05608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05608");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.increment((double) (byte) 100);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance10.increment((double) 2L);
        double double13 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        long long17 = secondMoment15.getN();
        secondMoment15.clear();
        double double19 = secondMoment15.getResult();
        secondMoment15.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        double[] doubleArray23 = new double[] {};
        double double24 = secondMoment15.evaluate(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment15);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance27.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance31.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        double[] doubleArray43 = new double[] { 0L, (byte) 10 };
        double double44 = variance39.evaluate(doubleArray43);
        double double46 = variance36.evaluate(doubleArray43, (double) 10L);
        double double47 = variance34.evaluate(doubleArray43);
        double double48 = variance31.evaluate(doubleArray43);
        double double49 = variance27.evaluate(doubleArray43);
        double double50 = variance25.evaluate(doubleArray43);
        double double51 = variance10.evaluate(doubleArray43);
        double double52 = variance10.getResult();
        long long53 = variance10.getN();
        variance10.clear();
        variance10.setBiasCorrected(false);
        java.lang.Class<?> wildcardClass57 = variance10.getClass();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test05609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05609");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double[] doubleArray5 = new double[] { 0L, (byte) 10 };
        double double6 = variance1.evaluate(doubleArray5);
        double double7 = variance1.getResult();
        variance1.increment(1349359.4135802474d);
        variance1.setBiasCorrected(true);
        variance1.clear();
        variance1.clear();
        boolean boolean14 = variance1.isBiasCorrected();
        variance1.increment(0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.0d + "'", double6 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test05610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05610");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double2 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double4 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long6 = secondMoment0.getN();
        double[] doubleArray7 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double10 = secondMoment0.evaluate(doubleArray7, (int) (short) 100, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test05611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05611");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        secondMoment7.increment((double) 10.0f);
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        long long17 = secondMoment15.getN();
        secondMoment15.clear();
        secondMoment15.clear();
        double double20 = secondMoment15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        secondMoment15.increment(25.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance25.clear();
        double double27 = variance25.getResult();
        variance25.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance30.increment((-1.0d));
        variance30.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        double[] doubleArray44 = new double[] { 0L, (byte) 10 };
        double double45 = variance40.evaluate(doubleArray44);
        double double47 = variance37.evaluate(doubleArray44, (double) 10L);
        double double48 = variance35.evaluate(doubleArray44);
        double double49 = variance30.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        double[] doubleArray55 = new double[] { 0L, (byte) 10 };
        double double56 = variance51.evaluate(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray65 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double66 = variance58.evaluate(doubleArray65);
        double double67 = variance51.evaluate(doubleArray65);
        double double68 = variance30.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double73 = variance72.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        double[] doubleArray79 = new double[] { 0L, (byte) 10 };
        double double80 = variance75.evaluate(doubleArray79);
        double double82 = variance72.evaluate(doubleArray79, (double) 10L);
        double double83 = variance70.evaluate(doubleArray79);
        variance30.incrementAll(doubleArray79, (int) (byte) 0, (int) (byte) 0);
        double double87 = variance25.evaluate(doubleArray79);
        secondMoment15.incrementAll(doubleArray79, (int) (short) 0, (int) (byte) 1);
        double double91 = secondMoment7.evaluate(doubleArray79);
        java.lang.Object obj92 = null;
        boolean boolean93 = secondMoment7.equals(obj92);
        secondMoment7.increment(5.415271412037037E7d);
        java.lang.Class<?> wildcardClass96 = secondMoment7.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 2136.8055555555557d + "'", double66 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2564.166666666667d + "'", double67 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 2564.166666666667d + "'", double68 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test05612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05612");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.clear();
        secondMoment0.increment(2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance12.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        long long17 = secondMoment15.getN();
        secondMoment15.clear();
        secondMoment15.increment((double) '4');
        long long21 = secondMoment15.getN();
        long long22 = secondMoment15.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment15);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance25.increment((-1.0d));
        variance25.setBiasCorrected(false);
        variance25.increment((double) 100L);
        boolean boolean32 = variance25.isBiasCorrected();
        boolean boolean33 = variance25.isBiasCorrected();
        long long34 = variance25.getN();
        variance25.increment(58606.246913580246d);
        variance25.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance39.increment((-1.0d));
        variance39.setBiasCorrected(false);
        boolean boolean44 = variance39.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean46 = variance39.equals((java.lang.Object) secondMoment45);
        secondMoment45.increment((double) (short) 0);
        secondMoment45.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray59 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double60 = variance52.evaluate(doubleArray59);
        double double61 = secondMoment45.evaluate(doubleArray59);
        double double63 = variance25.evaluate(doubleArray59, 2310.1428571428573d);
        variance23.incrementAll(doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            variance12.incrementAll(doubleArray59, (int) (short) 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 2L + "'", long34 == 2L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2136.8055555555557d + "'", double60 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 12820.833333333334d + "'", double61 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2136.80555555659d + "'", double63 == 2136.80555555659d);
    }

    @Test
    public void test05613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05613");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray14 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double15 = variance7.evaluate(doubleArray14);
        variance1.incrementAll(doubleArray14);
        double double17 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance19.increment((-1.0d));
        variance19.setBiasCorrected(false);
        boolean boolean24 = variance19.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment26);
        double double28 = secondMoment26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment26);
        secondMoment26.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        double[] doubleArray36 = new double[] { 0L, (byte) 10 };
        double double37 = variance32.evaluate(doubleArray36);
        secondMoment26.incrementAll(doubleArray36);
        boolean boolean39 = variance19.equals((java.lang.Object) secondMoment26);
        boolean boolean40 = variance1.equals((java.lang.Object) variance19);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 2136.8055555555557d + "'", double15 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1988.7755102040815d + "'", double17 == 1988.7755102040815d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test05614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05614");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double9 = variance1.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray18 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double19 = variance11.evaluate(doubleArray18);
        double double21 = variance1.evaluate(doubleArray18, (double) '#');
        double double22 = variance1.getResult();
        variance1.increment(2310.1428571428573d);
        variance1.setBiasCorrected(true);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2136.8055555555557d + "'", double9 == 2136.8055555555557d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2136.8055555555557d + "'", double19 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2136.8055555555557d + "'", double21 == 2136.8055555555557d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
    }

    @Test
    public void test05615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05615");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        double double5 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance9.increment((-1.0d));
        variance9.setBiasCorrected(false);
        boolean boolean14 = variance9.isBiasCorrected();
        double[] doubleArray15 = new double[] {};
        double double16 = variance9.evaluate(doubleArray15);
        secondMoment3.incrementAll(doubleArray15);
        secondMoment3.clear();
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment3);
        double double21 = secondMoment3.getResult();
        long long22 = secondMoment3.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        double double24 = secondMoment3.getResult();
        secondMoment3.increment((-1.0d));
        secondMoment3.increment(2358.3333333333335d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray37 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double38 = variance30.evaluate(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray47 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double48 = variance40.evaluate(doubleArray47);
        double double50 = variance30.evaluate(doubleArray47, (double) '#');
        double double51 = variance30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance53.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double59 = variance58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        double[] doubleArray65 = new double[] { 0L, (byte) 10 };
        double double66 = variance61.evaluate(doubleArray65);
        double double68 = variance58.evaluate(doubleArray65, (double) 10L);
        double double69 = variance56.evaluate(doubleArray65);
        double double70 = variance53.evaluate(doubleArray65);
        variance30.incrementAll(doubleArray65);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment3.incrementAll(doubleArray65, 10, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2136.8055555555557d + "'", double38 == 2136.8055555555557d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2136.8055555555557d + "'", double48 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2136.8055555555557d + "'", double50 == 2136.8055555555557d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
    }

    @Test
    public void test05616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05616");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        double double6 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        double double20 = variance10.evaluate(doubleArray17, (double) 10L);
        double double21 = variance8.evaluate(doubleArray17);
        double[] doubleArray25 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double26 = variance8.evaluate(doubleArray25);
        double double27 = secondMoment0.evaluate(doubleArray25);
        long long28 = secondMoment0.getN();
        long long29 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.clear();
        double double32 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.setBiasCorrected(false);
        boolean boolean39 = variance34.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        double[] doubleArray48 = new double[] { 0L, (byte) 10 };
        double double49 = variance44.evaluate(doubleArray48);
        double double51 = variance41.evaluate(doubleArray48, (double) 10L);
        double double52 = variance34.evaluate(doubleArray48);
        variance34.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray63 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double64 = variance56.evaluate(doubleArray63);
        double double65 = variance34.evaluate(doubleArray63);
        double double66 = secondMoment0.evaluate(doubleArray63);
        secondMoment0.increment(2.6219067524591934E12d);
        java.lang.Class<?> wildcardClass69 = secondMoment0.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2024039.120370371d + "'", double26 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 4048078.240740742d + "'", double27 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 3L + "'", long28 == 3L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 3L + "'", long29 == 3L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 25.0d + "'", double52 == 25.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2136.8055555555557d + "'", double64 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2136.8055555555557d + "'", double65 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 12820.833333333334d + "'", double66 == 12820.833333333334d);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test05617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05617");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        secondMoment7.increment((double) 10.0f);
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        long long18 = secondMoment16.getN();
        secondMoment16.clear();
        secondMoment16.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        variance22.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        long long26 = secondMoment24.getN();
        secondMoment24.clear();
        secondMoment24.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        variance30.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean36 = variance34.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double46 = variance38.evaluate(doubleArray45);
        double double47 = variance34.evaluate(doubleArray45);
        double double49 = variance30.evaluate(doubleArray45, (double) 1.0f);
        double double50 = variance22.evaluate(doubleArray45);
        double double51 = variance15.evaluate(doubleArray45);
        variance15.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance54.increment((-1.0d));
        variance54.setBiasCorrected(false);
        variance54.increment(2136.8055555555557d);
        variance54.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment63 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment63);
        long long65 = secondMoment63.getN();
        secondMoment63.clear();
        double double67 = secondMoment63.getResult();
        secondMoment63.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment63);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance72.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double78 = variance77.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double81 = variance80.getResult();
        double[] doubleArray84 = new double[] { 0L, (byte) 10 };
        double double85 = variance80.evaluate(doubleArray84);
        double double87 = variance77.evaluate(doubleArray84, (double) 10L);
        double double88 = variance75.evaluate(doubleArray84);
        double double89 = variance72.evaluate(doubleArray84);
        variance70.incrementAll(doubleArray84);
        double double92 = variance54.evaluate(doubleArray84, (double) 3L);
        double double94 = variance15.evaluate(doubleArray84, 25.0d);
        variance15.increment((double) (byte) -1);
        variance15.clear();
        long long98 = variance15.getN();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2136.8055555555557d + "'", double46 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2564.166666666667d + "'", double47 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 2136.805555555555d + "'", double49 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2564.166666666667d + "'", double50 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2564.166666666667d + "'", double51 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 25.0d + "'", double92 == 25.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 50.0d + "'", double94 == 50.0d);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 0L + "'", long98 == 0L);
    }

    @Test
    public void test05618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05618");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double4 = variance3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        double[] doubleArray10 = new double[] { 0L, (byte) 10 };
        double double11 = variance6.evaluate(doubleArray10);
        double double13 = variance3.evaluate(doubleArray10, (double) 10L);
        double double14 = variance1.evaluate(doubleArray10);
        variance1.increment(10.0d);
        double double17 = variance1.getResult();
        long long18 = variance1.getN();
        boolean boolean19 = variance1.isBiasCorrected();
        double double20 = variance1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test05619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05619");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double11 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        secondMoment9.incrementAll(doubleArray19);
        boolean boolean22 = variance2.equals((java.lang.Object) secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        double double26 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment24);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        double double31 = secondMoment29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment29);
        secondMoment29.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        double[] doubleArray39 = new double[] { 0L, (byte) 10 };
        double double40 = variance35.evaluate(doubleArray39);
        secondMoment29.incrementAll(doubleArray39);
        double double42 = variance27.evaluate(doubleArray39);
        double double43 = secondMoment9.evaluate(doubleArray39);
        double double44 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        long long46 = variance45.getN();
        variance45.clear();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 25.0d + "'", double42 == 25.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 2L + "'", long46 == 2L);
    }

    @Test
    public void test05620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05620");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance6.clear();
        double double8 = variance6.getResult();
        boolean boolean9 = variance6.isBiasCorrected();
        variance6.increment(1322.6666666666667d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double17 = variance16.getResult();
        double[] doubleArray20 = new double[] { 0L, (byte) 10 };
        double double21 = variance16.evaluate(doubleArray20);
        double double23 = variance13.evaluate(doubleArray20, (double) 10L);
        long long24 = variance13.getN();
        variance13.increment((double) 0L);
        double[] doubleArray28 = new double[] { 10.0d };
        variance13.incrementAll(doubleArray28);
        variance13.clear();
        variance13.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment33);
        long long35 = secondMoment33.getN();
        secondMoment33.clear();
        double double37 = secondMoment33.getResult();
        secondMoment33.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment33);
        double[] doubleArray41 = new double[] {};
        double double42 = secondMoment33.evaluate(doubleArray41);
        double double43 = secondMoment33.getResult();
        secondMoment33.clear();
        double double45 = secondMoment33.getResult();
        long long46 = secondMoment33.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean50 = variance48.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray59 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double60 = variance52.evaluate(doubleArray59);
        double double61 = variance48.evaluate(doubleArray59);
        variance48.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean66 = variance64.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray75 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double76 = variance68.evaluate(doubleArray75);
        double double77 = variance64.evaluate(doubleArray75);
        variance48.incrementAll(doubleArray75);
        secondMoment33.incrementAll(doubleArray75, 1, (int) (short) 1);
        double double83 = variance13.evaluate(doubleArray75, (double) (byte) 1);
        double double84 = variance6.evaluate(doubleArray75);
        variance6.increment(2320.2380952380954d);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2136.8055555555557d + "'", double60 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2564.166666666667d + "'", double61 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2136.8055555555557d + "'", double76 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2564.166666666667d + "'", double77 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2564.1666666666665d + "'", double83 == 2564.1666666666665d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2564.166666666667d + "'", double84 == 2564.166666666667d);
    }

    @Test
    public void test05621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05621");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        double double5 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        double[] doubleArray13 = new double[] { 0L, (byte) 10 };
        double double14 = variance9.evaluate(doubleArray13);
        secondMoment3.incrementAll(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        secondMoment3.clear();
        secondMoment3.increment(Double.NaN);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment3);
        secondMoment3.increment(1322.6666666666667d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        variance23.clear();
        double[] doubleArray25 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double26 = variance23.evaluate(doubleArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
    }

    @Test
    public void test05622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05622");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double2 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance4.increment((-1.0d));
        variance4.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double22 = variance9.evaluate(doubleArray18);
        double double23 = variance4.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        double[] doubleArray29 = new double[] { 0L, (byte) 10 };
        double double30 = variance25.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray39 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double40 = variance32.evaluate(doubleArray39);
        double double41 = variance25.evaluate(doubleArray39);
        double double42 = variance4.evaluate(doubleArray39);
        double double43 = secondMoment1.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long45 = secondMoment1.getN();
        double double46 = secondMoment1.getResult();
        secondMoment1.increment((double) (short) 10);
        secondMoment1.increment(1988.7755102040815d);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double double53 = secondMoment1.getResult();
        secondMoment1.increment(2024039.1206054688d);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2136.8055555555557d + "'", double40 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2564.166666666667d + "'", double41 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2564.166666666667d + "'", double42 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 12820.833333333334d + "'", double43 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 6L + "'", long45 == 6L);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 12820.833333333334d + "'", double46 == 12820.833333333334d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
    }

    @Test
    public void test05623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05623");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        double double14 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        variance15.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment17);
        double double19 = secondMoment17.getResult();
        boolean boolean21 = secondMoment17.equals((java.lang.Object) 1.0d);
        secondMoment17.increment((double) (-1L));
        secondMoment17.increment((double) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        double[] doubleArray36 = new double[] { 0L, (byte) 10 };
        double double37 = variance32.evaluate(doubleArray36);
        double double39 = variance29.evaluate(doubleArray36, (double) 10L);
        double double40 = variance27.evaluate(doubleArray36);
        variance27.increment(10.0d);
        double double43 = variance27.getResult();
        variance27.increment(1152.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment46);
        double double48 = secondMoment46.getResult();
        boolean boolean50 = secondMoment46.equals((java.lang.Object) 1.0d);
        double double51 = secondMoment46.getResult();
        secondMoment46.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment53);
        long long55 = secondMoment53.getN();
        secondMoment53.clear();
        secondMoment53.clear();
        secondMoment53.increment((double) (byte) 100);
        secondMoment53.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment53);
        secondMoment53.increment(2136.805555555555d);
        secondMoment53.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance66.increment((-1.0d));
        variance66.setBiasCorrected(false);
        variance66.increment((double) 100L);
        boolean boolean73 = variance66.isBiasCorrected();
        boolean boolean74 = variance66.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray83 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double84 = variance76.evaluate(doubleArray83);
        double double86 = variance66.evaluate(doubleArray83, (double) (byte) 10);
        secondMoment53.incrementAll(doubleArray83);
        double double88 = secondMoment46.evaluate(doubleArray83);
        double double91 = variance27.evaluate(doubleArray83, 1, 1);
        secondMoment17.incrementAll(doubleArray83, 1, (int) (short) 1);
        double double96 = variance15.evaluate(doubleArray83, 16460.85714285714d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2136.8055555555557d + "'", double84 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2136.8055555555557d + "'", double86 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 12820.833333333334d + "'", double88 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 2564.166666650772d + "'", double96 == 2564.166666650772d);
    }

    @Test
    public void test05624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05624");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.increment((double) 10L);
        variance1.increment((double) (short) 0);
        variance1.clear();
        double double7 = variance1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test05625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05625");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        secondMoment7.clear();
        long long15 = secondMoment7.getN();
        secondMoment7.clear();
        secondMoment7.increment((double) (short) 1);
        secondMoment7.increment(1557016.8402777782d);
        secondMoment7.increment((double) 13L);
        secondMoment7.increment(1.4545805531418566E13d);
        long long25 = secondMoment7.getN();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 4L + "'", long25 == 4L);
    }

    @Test
    public void test05626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05626");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        long long4 = secondMoment2.getN();
        secondMoment2.clear();
        double double6 = secondMoment2.getResult();
        secondMoment2.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double[] doubleArray10 = new double[] {};
        double double11 = secondMoment2.evaluate(doubleArray10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        double double14 = variance13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean18 = variance16.equals((java.lang.Object) (short) 10);
        double double19 = variance16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double22 = variance21.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        double[] doubleArray28 = new double[] { 0L, (byte) 10 };
        double double29 = variance24.evaluate(doubleArray28);
        double double31 = variance21.evaluate(doubleArray28, (double) 10L);
        double double32 = variance16.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.setBiasCorrected(false);
        boolean boolean39 = variance34.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean41 = variance34.equals((java.lang.Object) secondMoment40);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double44 = variance43.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double47 = variance46.getResult();
        double[] doubleArray50 = new double[] { 0L, (byte) 10 };
        double double51 = variance46.evaluate(doubleArray50);
        double double53 = variance43.evaluate(doubleArray50, (double) 10L);
        double double57 = variance34.evaluate(doubleArray50, (double) (short) 0, 0, (int) (short) 0);
        double double60 = variance16.evaluate(doubleArray50, 0, (int) (byte) 1);
        double double61 = variance13.evaluate(doubleArray50);
        variance13.clear();
        variance13.clear();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 25.0d + "'", double61 == 25.0d);
    }

    @Test
    public void test05627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05627");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double[] doubleArray8 = new double[] {};
        double double9 = secondMoment0.evaluate(doubleArray8);
        double double10 = secondMoment0.getResult();
        secondMoment0.clear();
        secondMoment0.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        double double18 = secondMoment16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment16);
        secondMoment16.clear();
        secondMoment16.increment((double) 2L);
        double double23 = secondMoment16.getResult();
        secondMoment16.increment(50.0d);
        secondMoment16.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment16);
        long long28 = variance27.getN();
        boolean boolean29 = secondMoment0.equals((java.lang.Object) long28);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test05628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05628");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray14 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double15 = variance7.evaluate(doubleArray14);
        variance1.incrementAll(doubleArray14);
        boolean boolean17 = variance1.isBiasCorrected();
        double double18 = variance1.getResult();
        variance1.increment(1142553.1483410494d);
        double[] doubleArray21 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double24 = variance1.evaluate(doubleArray21, 10, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 2136.8055555555557d + "'", double15 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1988.7755102040815d + "'", double18 == 1988.7755102040815d);
    }

    @Test
    public void test05629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05629");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        long long4 = secondMoment2.getN();
        secondMoment2.clear();
        secondMoment2.clear();
        double double7 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        secondMoment2.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        secondMoment2.increment((-1.0d));
        double double17 = secondMoment2.getResult();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 74.0d + "'", double17 == 74.0d);
    }

    @Test
    public void test05630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05630");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double22 = variance14.evaluate(doubleArray21);
        double double23 = secondMoment7.evaluate(doubleArray21);
        long long24 = secondMoment7.getN();
        secondMoment7.clear();
        secondMoment7.clear();
        secondMoment7.clear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2136.8055555555557d + "'", double22 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 12820.833333333334d + "'", double23 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 6L + "'", long24 == 6L);
    }

    @Test
    public void test05631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05631");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double double3 = variance1.getResult();
        boolean boolean4 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance7.increment((-1.0d));
        variance7.setBiasCorrected(false);
        boolean boolean12 = variance7.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean14 = variance7.equals((java.lang.Object) secondMoment13);
        double double15 = secondMoment13.getResult();
        secondMoment13.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        double double18 = secondMoment13.getResult();
        long long19 = secondMoment13.getN();
        secondMoment13.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        double[] doubleArray31 = new double[] { 0L, (byte) 10 };
        double double32 = variance27.evaluate(doubleArray31);
        double double34 = variance24.evaluate(doubleArray31, (double) 10L);
        double double35 = variance22.evaluate(doubleArray31);
        double[] doubleArray39 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double40 = variance22.evaluate(doubleArray39);
        secondMoment13.incrementAll(doubleArray39);
        secondMoment13.increment(1349359.4135802472d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        double[] doubleArray55 = new double[] { 0L, (byte) 10 };
        double double56 = variance51.evaluate(doubleArray55);
        double double58 = variance48.evaluate(doubleArray55, (double) 10L);
        double double59 = variance46.evaluate(doubleArray55);
        double double60 = secondMoment13.evaluate(doubleArray55);
        variance1.incrementAll(doubleArray55);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2024039.120370371d + "'", double40 == 2024039.120370371d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
    }

    @Test
    public void test05632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05632");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment((double) 2L);
        double double8 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance10.increment((-1.0d));
        long long13 = variance10.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance18.increment((-1.0d));
        variance18.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        double[] doubleArray32 = new double[] { 0L, (byte) 10 };
        double double33 = variance28.evaluate(doubleArray32);
        double double35 = variance25.evaluate(doubleArray32, (double) 10L);
        double double36 = variance23.evaluate(doubleArray32);
        double double37 = variance18.evaluate(doubleArray32);
        variance16.incrementAll(doubleArray32);
        variance14.incrementAll(doubleArray32);
        double double40 = variance10.evaluate(doubleArray32);
        boolean boolean41 = secondMoment1.equals((java.lang.Object) doubleArray32);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment45);
        long long47 = secondMoment45.getN();
        secondMoment45.clear();
        double double49 = secondMoment45.getResult();
        secondMoment45.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment45);
        double[] doubleArray53 = new double[] {};
        double double54 = secondMoment45.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment45);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment45);
        double double57 = secondMoment45.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment58);
        long long60 = secondMoment58.getN();
        secondMoment58.clear();
        secondMoment58.increment(10.0d);
        double double64 = secondMoment58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double69 = variance68.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double72 = variance71.getResult();
        double[] doubleArray75 = new double[] { 0L, (byte) 10 };
        double double76 = variance71.evaluate(doubleArray75);
        double double78 = variance68.evaluate(doubleArray75, (double) 10L);
        double double79 = variance66.evaluate(doubleArray75);
        double[] doubleArray83 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double84 = variance66.evaluate(doubleArray83);
        double double85 = secondMoment58.evaluate(doubleArray83);
        secondMoment45.incrementAll(doubleArray83);
        boolean boolean87 = secondMoment1.equals((java.lang.Object) secondMoment45);
        secondMoment1.increment(24.5d);
        secondMoment1.increment(2550.25d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance92 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance93 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        variance93.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2024039.120370371d + "'", double84 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 4048078.240740742d + "'", double85 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test05633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05633");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        secondMoment1.increment(4048078.240740742d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double double7 = variance6.getResult();
        variance6.increment(1013254.917777778d);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test05634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05634");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        long long8 = secondMoment6.getN();
        secondMoment6.clear();
        double double10 = secondMoment6.getResult();
        secondMoment6.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        double[] doubleArray14 = new double[] {};
        double double15 = secondMoment6.evaluate(doubleArray14);
        secondMoment0.incrementAll(doubleArray14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance17.setBiasCorrected(true);
        variance17.increment(2268035.8522376535d);
        variance17.increment(2.0212030575202972E15d);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test05635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05635");
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.setBiasCorrected(false);
        boolean boolean8 = variance3.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        double double12 = secondMoment10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment10);
        secondMoment10.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double17 = variance16.getResult();
        double[] doubleArray20 = new double[] { 0L, (byte) 10 };
        double double21 = variance16.evaluate(doubleArray20);
        secondMoment10.incrementAll(doubleArray20);
        boolean boolean23 = variance3.equals((java.lang.Object) secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance25.increment((-1.0d));
        variance25.setBiasCorrected(false);
        boolean boolean30 = variance25.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean32 = variance25.equals((java.lang.Object) secondMoment31);
        boolean boolean33 = secondMoment10.equals((java.lang.Object) boolean32);
        secondMoment10.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment10);
        double double37 = secondMoment10.getResult();
        secondMoment10.clear();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
    }

    @Test
    public void test05636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05636");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        long long9 = secondMoment7.getN();
        secondMoment7.clear();
        double double11 = secondMoment7.getResult();
        secondMoment7.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        double[] doubleArray15 = new double[] {};
        double double16 = secondMoment7.evaluate(doubleArray15);
        secondMoment1.incrementAll(doubleArray15);
        secondMoment1.increment((double) (-1L));
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        long long21 = secondMoment1.getN();
        double double22 = secondMoment1.getResult();
        secondMoment1.clear();
        secondMoment1.increment(2564.1666666679084d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        boolean boolean27 = variance26.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance29.increment((-1.0d));
        variance29.setBiasCorrected(false);
        boolean boolean34 = variance29.isBiasCorrected();
        double double35 = variance29.getResult();
        variance29.setBiasCorrected(true);
        double double38 = variance29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance41.increment((-1.0d));
        variance41.setBiasCorrected(false);
        boolean boolean46 = variance41.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean48 = variance41.equals((java.lang.Object) secondMoment47);
        double double49 = secondMoment47.getResult();
        secondMoment47.clear();
        secondMoment47.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment47);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance54.increment((-1.0d));
        variance54.setBiasCorrected(false);
        boolean boolean59 = variance54.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double65 = variance64.getResult();
        double[] doubleArray68 = new double[] { 0L, (byte) 10 };
        double double69 = variance64.evaluate(doubleArray68);
        double double71 = variance61.evaluate(doubleArray68, (double) 10L);
        double double72 = variance54.evaluate(doubleArray68);
        long long73 = variance54.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance75.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double81 = variance80.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double84 = variance83.getResult();
        double[] doubleArray87 = new double[] { 0L, (byte) 10 };
        double double88 = variance83.evaluate(doubleArray87);
        double double90 = variance80.evaluate(doubleArray87, (double) 10L);
        double double91 = variance78.evaluate(doubleArray87);
        double double92 = variance75.evaluate(doubleArray87);
        double double93 = variance54.evaluate(doubleArray87);
        double double94 = variance52.evaluate(doubleArray87);
        variance29.incrementAll(doubleArray87);
        // The following exception was thrown during execution in test generation
        try {
            double double98 = variance26.evaluate(doubleArray87, 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2L + "'", long21 == 2L);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 60.5d + "'", double22 == 60.5d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 25.0d + "'", double72 == 25.0d);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 25.0d + "'", double93 == 25.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 25.0d + "'", double94 == 25.0d);
    }

    @Test
    public void test05637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05637");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double24 = secondMoment7.evaluate(doubleArray18, (int) (short) 0, 1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance32.increment((-1.0d));
        variance32.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        double[] doubleArray46 = new double[] { 0L, (byte) 10 };
        double double47 = variance42.evaluate(doubleArray46);
        double double49 = variance39.evaluate(doubleArray46, (double) 10L);
        double double50 = variance37.evaluate(doubleArray46);
        double double51 = variance32.evaluate(doubleArray46);
        variance30.incrementAll(doubleArray46);
        double double53 = variance27.evaluate(doubleArray46);
        variance25.incrementAll(doubleArray46);
        variance25.increment((double) 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
    }

    @Test
    public void test05638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05638");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean4 = variance2.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance6.increment((-1.0d));
        variance6.setBiasCorrected(false);
        boolean boolean11 = variance6.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean13 = variance6.equals((java.lang.Object) secondMoment12);
        double double14 = secondMoment12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double17 = variance16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double20 = variance19.getResult();
        double[] doubleArray23 = new double[] { 0L, (byte) 10 };
        double double24 = variance19.evaluate(doubleArray23);
        double double26 = variance16.evaluate(doubleArray23, (double) 10L);
        double double29 = secondMoment12.evaluate(doubleArray23, (int) (short) 0, 1);
        double double30 = variance2.evaluate(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment31);
        long long33 = secondMoment31.getN();
        secondMoment31.clear();
        secondMoment31.clear();
        secondMoment31.increment((double) (byte) 100);
        secondMoment31.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment31);
        secondMoment31.clear();
        secondMoment31.increment(2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment31);
        boolean boolean44 = variance2.equals((java.lang.Object) secondMoment31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment31);
        secondMoment31.clear();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test05639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05639");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        double double14 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        secondMoment8.increment(Double.NaN);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        variance18.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.setBiasCorrected(false);
        boolean boolean28 = variance23.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean30 = variance23.equals((java.lang.Object) secondMoment29);
        double double31 = secondMoment29.getResult();
        secondMoment29.clear();
        secondMoment29.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment29);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance36.increment((-1.0d));
        variance36.setBiasCorrected(false);
        boolean boolean41 = variance36.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double44 = variance43.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double47 = variance46.getResult();
        double[] doubleArray50 = new double[] { 0L, (byte) 10 };
        double double51 = variance46.evaluate(doubleArray50);
        double double53 = variance43.evaluate(doubleArray50, (double) 10L);
        double double54 = variance36.evaluate(doubleArray50);
        long long55 = variance36.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance57.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double63 = variance62.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double66 = variance65.getResult();
        double[] doubleArray69 = new double[] { 0L, (byte) 10 };
        double double70 = variance65.evaluate(doubleArray69);
        double double72 = variance62.evaluate(doubleArray69, (double) 10L);
        double double73 = variance60.evaluate(doubleArray69);
        double double74 = variance57.evaluate(doubleArray69);
        double double75 = variance36.evaluate(doubleArray69);
        double double76 = variance34.evaluate(doubleArray69);
        double double80 = variance18.evaluate(doubleArray69, (double) (byte) 10, (int) (byte) 0, (int) (byte) 0);
        variance18.clear();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 25.0d + "'", double54 == 25.0d);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 25.0d + "'", double75 == 25.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 25.0d + "'", double76 == 25.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
    }

    @Test
    public void test05640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05640");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        double double2 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        double double7 = secondMoment5.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment5);
        secondMoment5.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance11.increment((-1.0d));
        variance11.setBiasCorrected(false);
        boolean boolean16 = variance11.isBiasCorrected();
        double[] doubleArray17 = new double[] {};
        double double18 = variance11.evaluate(doubleArray17);
        secondMoment5.incrementAll(doubleArray17);
        double double20 = secondMoment5.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        double double26 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment24);
        secondMoment24.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        double[] doubleArray34 = new double[] { 0L, (byte) 10 };
        double double35 = variance30.evaluate(doubleArray34);
        secondMoment24.incrementAll(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        secondMoment24.clear();
        secondMoment24.increment(Double.NaN);
        secondMoment24.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean47 = variance45.equals((java.lang.Object) (short) 10);
        double double48 = variance45.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double54 = variance53.getResult();
        double[] doubleArray57 = new double[] { 0L, (byte) 10 };
        double double58 = variance53.evaluate(doubleArray57);
        double double60 = variance50.evaluate(doubleArray57, (double) 10L);
        double double61 = variance45.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance63.increment((-1.0d));
        variance63.setBiasCorrected(false);
        boolean boolean68 = variance63.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean70 = variance63.equals((java.lang.Object) secondMoment69);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double73 = variance72.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        double[] doubleArray79 = new double[] { 0L, (byte) 10 };
        double double80 = variance75.evaluate(doubleArray79);
        double double82 = variance72.evaluate(doubleArray79, (double) 10L);
        double double86 = variance63.evaluate(doubleArray79, (double) (short) 0, 0, (int) (short) 0);
        double double89 = variance45.evaluate(doubleArray79, 0, (int) (byte) 1);
        secondMoment24.incrementAll(doubleArray79, (int) (short) 0, (int) (byte) 1);
        double double93 = variance21.evaluate(doubleArray79);
        double double94 = secondMoment0.evaluate(doubleArray79);
        secondMoment0.increment((double) 100);
        org.apache.commons.math.stat.descriptive.moment.Variance variance97 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.clear();
        double double99 = secondMoment0.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 25.0d + "'", double93 == 25.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 50.0d + "'", double94 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double99));
    }

    @Test
    public void test05641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05641");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        variance13.increment((double) (short) -1);
        variance13.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean22 = variance20.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean31 = variance24.equals((java.lang.Object) secondMoment30);
        double double32 = secondMoment30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        double[] doubleArray41 = new double[] { 0L, (byte) 10 };
        double double42 = variance37.evaluate(doubleArray41);
        double double44 = variance34.evaluate(doubleArray41, (double) 10L);
        double double47 = secondMoment30.evaluate(doubleArray41, (int) (short) 0, 1);
        double double48 = variance20.evaluate(doubleArray41);
        variance20.increment((double) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance52.increment((-1.0d));
        variance52.setBiasCorrected(false);
        boolean boolean57 = variance52.isBiasCorrected();
        double double58 = variance52.getResult();
        variance52.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance62.increment((-1.0d));
        variance62.setBiasCorrected(false);
        boolean boolean67 = variance62.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment68 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean69 = variance62.equals((java.lang.Object) secondMoment68);
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double72 = variance71.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double75 = variance74.getResult();
        double[] doubleArray78 = new double[] { 0L, (byte) 10 };
        double double79 = variance74.evaluate(doubleArray78);
        double double81 = variance71.evaluate(doubleArray78, (double) 10L);
        double double85 = variance62.evaluate(doubleArray78, (double) (short) 0, 0, (int) (short) 0);
        double double86 = variance52.evaluate(doubleArray78);
        double double87 = variance20.evaluate(doubleArray78);
        double double91 = variance13.evaluate(doubleArray78, 60.666666666666664d, 1, 1);
        double double92 = variance11.evaluate(doubleArray78);
        double double93 = variance11.getResult();
        variance11.increment(24.5d);
        long long96 = variance11.getN();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double93));
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 0L + "'", long96 == 0L);
    }

    @Test
    public void test05642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05642");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double22 = variance14.evaluate(doubleArray21);
        double double23 = secondMoment7.evaluate(doubleArray21);
        long long24 = secondMoment7.getN();
        long long25 = secondMoment7.getN();
        secondMoment7.clear();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment30);
        double double32 = secondMoment30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment30);
        secondMoment30.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        double[] doubleArray40 = new double[] { 0L, (byte) 10 };
        double double41 = variance36.evaluate(doubleArray40);
        secondMoment30.incrementAll(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment30);
        secondMoment30.clear();
        secondMoment30.increment(Double.NaN);
        secondMoment30.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment30);
        long long50 = variance49.getN();
        boolean boolean51 = variance49.isBiasCorrected();
        long long52 = variance49.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance54.increment((-1.0d));
        variance54.setBiasCorrected(false);
        boolean boolean59 = variance54.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment60 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean61 = variance54.equals((java.lang.Object) secondMoment60);
        secondMoment60.increment((double) (short) 0);
        secondMoment60.increment((double) 1.0f);
        long long66 = secondMoment60.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment67 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment67);
        long long69 = secondMoment67.getN();
        secondMoment67.clear();
        double double71 = secondMoment67.getResult();
        secondMoment67.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment67);
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance76.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double82 = variance81.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance84 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double85 = variance84.getResult();
        double[] doubleArray88 = new double[] { 0L, (byte) 10 };
        double double89 = variance84.evaluate(doubleArray88);
        double double91 = variance81.evaluate(doubleArray88, (double) 10L);
        double double92 = variance79.evaluate(doubleArray88);
        double double93 = variance76.evaluate(doubleArray88);
        variance74.incrementAll(doubleArray88);
        double double95 = secondMoment60.evaluate(doubleArray88);
        variance49.incrementAll(doubleArray88);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment7.incrementAll(doubleArray88, 1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2136.8055555555557d + "'", double22 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 12820.833333333334d + "'", double23 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 6L + "'", long24 == 6L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 2L + "'", long50 == 2L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 2L + "'", long52 == 2L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 2L + "'", long66 == 2L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 50.0d + "'", double93 == 50.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 50.0d + "'", double95 == 50.0d);
    }

    @Test
    public void test05643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05643");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment((double) 2L);
        double double8 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance10.increment((-1.0d));
        long long13 = variance10.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance18.increment((-1.0d));
        variance18.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        double[] doubleArray32 = new double[] { 0L, (byte) 10 };
        double double33 = variance28.evaluate(doubleArray32);
        double double35 = variance25.evaluate(doubleArray32, (double) 10L);
        double double36 = variance23.evaluate(doubleArray32);
        double double37 = variance18.evaluate(doubleArray32);
        variance16.incrementAll(doubleArray32);
        variance14.incrementAll(doubleArray32);
        double double40 = variance10.evaluate(doubleArray32);
        boolean boolean41 = secondMoment1.equals((java.lang.Object) doubleArray32);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment45);
        long long47 = secondMoment45.getN();
        secondMoment45.clear();
        double double49 = secondMoment45.getResult();
        secondMoment45.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment45);
        double[] doubleArray53 = new double[] {};
        double double54 = secondMoment45.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment45);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment45);
        double double57 = secondMoment45.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment58);
        long long60 = secondMoment58.getN();
        secondMoment58.clear();
        secondMoment58.increment(10.0d);
        double double64 = secondMoment58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double69 = variance68.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double72 = variance71.getResult();
        double[] doubleArray75 = new double[] { 0L, (byte) 10 };
        double double76 = variance71.evaluate(doubleArray75);
        double double78 = variance68.evaluate(doubleArray75, (double) 10L);
        double double79 = variance66.evaluate(doubleArray75);
        double[] doubleArray83 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double84 = variance66.evaluate(doubleArray83);
        double double85 = secondMoment58.evaluate(doubleArray83);
        secondMoment45.incrementAll(doubleArray83);
        boolean boolean87 = secondMoment1.equals((java.lang.Object) secondMoment45);
        secondMoment1.increment(24.5d);
        secondMoment1.increment(2564.1625d);
        long long92 = secondMoment1.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2024039.120370371d + "'", double84 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 4048078.240740742d + "'", double85 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 2L + "'", long92 == 2L);
    }

    @Test
    public void test05644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05644");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.increment((double) 10L);
        variance1.increment((double) (short) 0);
        variance1.increment(1.0023741122017578E11d);
    }

    @Test
    public void test05645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05645");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.increment((double) (byte) 100);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance10.increment((double) 2L);
        double double13 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        long long17 = secondMoment15.getN();
        secondMoment15.clear();
        double double19 = secondMoment15.getResult();
        secondMoment15.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        double[] doubleArray23 = new double[] {};
        double double24 = secondMoment15.evaluate(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment15);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance27.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance31.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        double[] doubleArray43 = new double[] { 0L, (byte) 10 };
        double double44 = variance39.evaluate(doubleArray43);
        double double46 = variance36.evaluate(doubleArray43, (double) 10L);
        double double47 = variance34.evaluate(doubleArray43);
        double double48 = variance31.evaluate(doubleArray43);
        double double49 = variance27.evaluate(doubleArray43);
        double double50 = variance25.evaluate(doubleArray43);
        double double51 = variance10.evaluate(doubleArray43);
        double double52 = variance10.getResult();
        double double53 = variance10.getResult();
        variance10.setBiasCorrected(true);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
    }

    @Test
    public void test05646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05646");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double9 = variance1.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray18 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double19 = variance11.evaluate(doubleArray18);
        double double21 = variance1.evaluate(doubleArray18, (double) '#');
        double double22 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        double[] doubleArray36 = new double[] { 0L, (byte) 10 };
        double double37 = variance32.evaluate(doubleArray36);
        double double39 = variance29.evaluate(doubleArray36, (double) 10L);
        double double40 = variance27.evaluate(doubleArray36);
        double double41 = variance24.evaluate(doubleArray36);
        variance1.incrementAll(doubleArray36);
        variance1.clear();
        variance1.increment(1.4285480294097227E8d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2136.8055555555557d + "'", double9 == 2136.8055555555557d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2136.8055555555557d + "'", double19 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2136.8055555555557d + "'", double21 == 2136.8055555555557d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
    }

    @Test
    public void test05647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05647");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.increment((double) (byte) 100);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment(2024039.12109375d);
        secondMoment1.clear();
        secondMoment1.increment((double) 8L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance16.setBiasCorrected(true);
        java.lang.Class<?> wildcardClass19 = variance16.getClass();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test05648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05648");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        long long9 = secondMoment7.getN();
        secondMoment7.clear();
        double double11 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment7);
        secondMoment7.increment(1152.0d);
        boolean boolean15 = secondMoment0.equals((java.lang.Object) secondMoment7);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test05649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05649");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double10 = secondMoment0.getResult();
        long long11 = secondMoment0.getN();
        secondMoment0.increment(0.0d);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 512.0d + "'", double10 == 512.0d);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2L + "'", long11 == 2L);
    }

    @Test
    public void test05650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05650");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.clear();
        variance1.setBiasCorrected(false);
        java.lang.Object obj7 = null;
        boolean boolean8 = variance1.equals(obj7);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        long long11 = secondMoment9.getN();
        secondMoment9.clear();
        secondMoment9.clear();
        secondMoment9.increment((double) (byte) 100);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        secondMoment9.clear();
        secondMoment9.increment(2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        secondMoment9.increment((double) (short) 1);
        secondMoment9.increment((double) 8L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment27);
        long long29 = secondMoment27.getN();
        secondMoment27.clear();
        secondMoment27.clear();
        secondMoment27.increment((double) (byte) 100);
        secondMoment27.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment27);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment27);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        double[] doubleArray45 = new double[] { 0L, (byte) 10 };
        double double46 = variance41.evaluate(doubleArray45);
        double double48 = variance38.evaluate(doubleArray45, (double) 10L);
        double double49 = variance36.evaluate(doubleArray45);
        long long50 = variance36.getN();
        double[] doubleArray51 = new double[] {};
        variance36.incrementAll(doubleArray51);
        long long53 = variance36.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance55.increment((-1.0d));
        variance55.setBiasCorrected(false);
        boolean boolean60 = variance55.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean62 = variance55.equals((java.lang.Object) secondMoment61);
        long long63 = secondMoment61.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance65.increment((-1.0d));
        variance65.setBiasCorrected(false);
        variance65.increment((double) 100L);
        boolean boolean72 = variance65.isBiasCorrected();
        boolean boolean73 = variance65.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray82 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double83 = variance75.evaluate(doubleArray82);
        double double85 = variance65.evaluate(doubleArray82, (double) (byte) 10);
        secondMoment61.incrementAll(doubleArray82);
        double double88 = variance36.evaluate(doubleArray82, (double) 'a');
        double double89 = secondMoment9.evaluate(doubleArray82);
        variance1.incrementAll(doubleArray82);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2136.8055555555557d + "'", double83 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2136.8055555555557d + "'", double85 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 2564.1666666666665d + "'", double88 == 2564.1666666666665d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 12820.833333333334d + "'", double89 == 12820.833333333334d);
    }

    @Test
    public void test05651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05651");
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance4.increment((-1.0d));
        variance4.setBiasCorrected(false);
        boolean boolean9 = variance4.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean11 = variance4.equals((java.lang.Object) secondMoment10);
        secondMoment10.increment((double) (short) 0);
        secondMoment10.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray24 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double25 = variance17.evaluate(doubleArray24);
        double double26 = secondMoment10.evaluate(doubleArray24);
        long long27 = secondMoment10.getN();
        long long28 = secondMoment10.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment10);
        secondMoment10.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment10);
        double double32 = secondMoment10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        variance35.increment((double) (short) -1);
        double double39 = variance35.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        double[] doubleArray45 = new double[] { 0L, (byte) 10 };
        double double46 = variance41.evaluate(doubleArray45);
        double double47 = variance35.evaluate(doubleArray45);
        double double48 = variance35.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance50.increment((-1.0d));
        variance50.setBiasCorrected(false);
        boolean boolean55 = variance50.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean57 = variance50.equals((java.lang.Object) secondMoment56);
        double double58 = secondMoment56.getResult();
        secondMoment56.clear();
        secondMoment56.clear();
        secondMoment56.increment((double) 10.0f);
        long long63 = secondMoment56.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment64 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance66.increment((-1.0d));
        variance66.setBiasCorrected(false);
        boolean boolean71 = variance66.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean73 = variance66.equals((java.lang.Object) secondMoment72);
        secondMoment72.increment((double) (short) 0);
        secondMoment72.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray86 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double87 = variance79.evaluate(doubleArray86);
        double double88 = secondMoment72.evaluate(doubleArray86);
        secondMoment64.incrementAll(doubleArray86);
        double double90 = secondMoment56.evaluate(doubleArray86);
        double double91 = variance35.evaluate(doubleArray86);
        // The following exception was thrown during execution in test generation
        try {
            double double94 = variance33.evaluate(doubleArray86, 100, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2136.8055555555557d + "'", double25 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 12820.833333333334d + "'", double26 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 6L + "'", long27 == 6L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 6L + "'", long28 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 2136.8055555555557d + "'", double87 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 12820.833333333334d + "'", double88 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 12820.833333333334d + "'", double90 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 2564.166666666667d + "'", double91 == 2564.166666666667d);
    }

    @Test
    public void test05652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05652");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double11 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        secondMoment9.increment((double) 2L);
        double double16 = secondMoment9.getResult();
        secondMoment9.increment(50.0d);
        double double19 = secondMoment9.getResult();
        long long20 = secondMoment9.getN();
        boolean boolean21 = variance7.equals((java.lang.Object) secondMoment9);
        secondMoment9.increment(4671050.520833335d);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray33 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double34 = variance26.evaluate(doubleArray33);
        variance26.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        double[] doubleArray44 = new double[] { 0L, (byte) 10 };
        double double45 = variance40.evaluate(doubleArray44);
        double double47 = variance37.evaluate(doubleArray44, (double) 10L);
        long long48 = variance37.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance50.increment((-1.0d));
        variance50.setBiasCorrected(false);
        boolean boolean55 = variance50.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double61 = variance60.getResult();
        double[] doubleArray64 = new double[] { 0L, (byte) 10 };
        double double65 = variance60.evaluate(doubleArray64);
        double double67 = variance57.evaluate(doubleArray64, (double) 10L);
        double double68 = variance50.evaluate(doubleArray64);
        variance37.incrementAll(doubleArray64, (int) (short) 0, (int) (byte) 1);
        variance26.incrementAll(doubleArray64);
        double double73 = secondMoment9.evaluate(doubleArray64);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1152.0d + "'", double19 == 1152.0d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2L + "'", long20 == 2L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2136.8055555555557d + "'", double34 == 2136.8055555555557d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 25.0d + "'", double68 == 25.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
    }

    @Test
    public void test05653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05653");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        double[] doubleArray12 = new double[] { 0L, (byte) 10 };
        double double13 = variance8.evaluate(doubleArray12);
        secondMoment2.incrementAll(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.clear();
        long long17 = secondMoment2.getN();
        double double18 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        double double20 = variance19.getResult();
        double double21 = variance19.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
    }

    @Test
    public void test05654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05654");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double2 = secondMoment0.getResult();
        secondMoment0.increment((double) 7L);
        secondMoment0.increment(227.30000000000018d);
        secondMoment0.increment(909.2d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        double double12 = secondMoment10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment10);
        secondMoment10.clear();
        secondMoment10.increment((double) 2L);
        double double17 = secondMoment10.getResult();
        secondMoment10.increment(50.0d);
        double double20 = secondMoment10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        double[] doubleArray32 = new double[] { 0L, (byte) 10 };
        double double33 = variance28.evaluate(doubleArray32);
        double double35 = variance25.evaluate(doubleArray32, (double) 10L);
        double double36 = variance23.evaluate(doubleArray32);
        variance23.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean42 = variance40.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray51 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double52 = variance44.evaluate(doubleArray51);
        double double53 = variance40.evaluate(doubleArray51);
        variance23.incrementAll(doubleArray51);
        double double55 = variance23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance57.increment((-1.0d));
        variance57.setBiasCorrected(false);
        boolean boolean62 = variance57.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment63 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean64 = variance57.equals((java.lang.Object) secondMoment63);
        secondMoment63.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment67 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment67);
        long long69 = secondMoment67.getN();
        secondMoment67.clear();
        double double71 = secondMoment67.getResult();
        secondMoment67.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment67);
        double[] doubleArray75 = new double[] {};
        double double76 = secondMoment67.evaluate(doubleArray75);
        double double77 = secondMoment63.evaluate(doubleArray75);
        double double78 = variance23.evaluate(doubleArray75);
        double double79 = variance21.evaluate(doubleArray75);
        secondMoment0.incrementAll(doubleArray75);
        secondMoment0.increment(1.0023741122017578E11d);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1152.0d + "'", double20 == 1152.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2136.8055555555557d + "'", double52 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2564.166666666667d + "'", double53 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2310.1428571428573d + "'", double55 == 2310.1428571428573d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
    }

    @Test
    public void test05655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05655");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        long long14 = secondMoment7.getN();
        secondMoment7.clear();
        secondMoment7.increment(1283.5555555555554d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double19 = secondMoment18.getResult();
        long long20 = secondMoment18.getN();
        secondMoment18.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        long long25 = secondMoment23.getN();
        secondMoment23.clear();
        secondMoment23.clear();
        secondMoment23.increment((double) (byte) 100);
        secondMoment23.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment23);
        variance32.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance37.increment((-1.0d));
        variance37.setBiasCorrected(false);
        boolean boolean42 = variance37.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean44 = variance37.equals((java.lang.Object) secondMoment43);
        double double45 = secondMoment43.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        double[] doubleArray54 = new double[] { 0L, (byte) 10 };
        double double55 = variance50.evaluate(doubleArray54);
        double double57 = variance47.evaluate(doubleArray54, (double) 10L);
        double double60 = secondMoment43.evaluate(doubleArray54, (int) (short) 0, 1);
        long long61 = secondMoment43.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment43);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double65 = variance64.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double68 = variance67.getResult();
        double[] doubleArray71 = new double[] { 0L, (byte) 10 };
        double double72 = variance67.evaluate(doubleArray71);
        double double74 = variance64.evaluate(doubleArray71, (double) 10L);
        long long75 = variance64.getN();
        variance64.increment((double) 0L);
        double[] doubleArray79 = new double[] { 10.0d };
        variance64.incrementAll(doubleArray79);
        double double81 = variance62.evaluate(doubleArray79);
        variance32.incrementAll(doubleArray79);
        secondMoment18.incrementAll(doubleArray79);
        double double84 = secondMoment7.evaluate(doubleArray79);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2L + "'", long14 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
    }

    @Test
    public void test05656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05656");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance8.increment((-1.0d));
        variance8.setBiasCorrected(false);
        boolean boolean13 = variance8.isBiasCorrected();
        double[] doubleArray14 = new double[] {};
        double double15 = variance8.evaluate(doubleArray14);
        secondMoment2.incrementAll(doubleArray14);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double19 = secondMoment18.getResult();
        double double20 = secondMoment18.getResult();
        secondMoment18.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance25.increment((-1.0d));
        variance25.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        double[] doubleArray39 = new double[] { 0L, (byte) 10 };
        double double40 = variance35.evaluate(doubleArray39);
        double double42 = variance32.evaluate(doubleArray39, (double) 10L);
        double double43 = variance30.evaluate(doubleArray39);
        double double44 = variance25.evaluate(doubleArray39);
        variance23.incrementAll(doubleArray39);
        variance23.increment((double) 100.0f);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment48);
        long long50 = secondMoment48.getN();
        secondMoment48.clear();
        secondMoment48.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment48);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance55.increment((-1.0d));
        variance55.setBiasCorrected(false);
        boolean boolean60 = variance55.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean62 = variance55.equals((java.lang.Object) secondMoment61);
        variance55.increment((double) 100L);
        variance55.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double71 = variance70.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double74 = variance73.getResult();
        double[] doubleArray77 = new double[] { 0L, (byte) 10 };
        double double78 = variance73.evaluate(doubleArray77);
        double double80 = variance70.evaluate(doubleArray77, (double) 10L);
        double double81 = variance68.evaluate(doubleArray77);
        double[] doubleArray85 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double86 = variance68.evaluate(doubleArray85);
        variance55.incrementAll(doubleArray85);
        double double88 = variance53.evaluate(doubleArray85);
        double double90 = variance23.evaluate(doubleArray85, (double) 3L);
        double double91 = secondMoment18.evaluate(doubleArray85);
        double double92 = secondMoment2.evaluate(doubleArray85);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance94 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance95 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        secondMoment2.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2024039.120370371d + "'", double86 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 2024039.120370371d + "'", double88 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 2024039.1203703708d + "'", double90 == 2024039.1203703708d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 4048078.240740742d + "'", double91 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 4048078.240740742d + "'", double92 == 4048078.240740742d);
    }

    @Test
    public void test05657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05657");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        double[] doubleArray15 = new double[] { 0L, (byte) 10 };
        double double16 = variance11.evaluate(doubleArray15);
        double double18 = variance8.evaluate(doubleArray15, (double) 10L);
        double double19 = variance6.evaluate(doubleArray15);
        double double20 = variance1.evaluate(doubleArray15);
        long long21 = variance1.getN();
        variance1.increment(12.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test05658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05658");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        double[] doubleArray8 = new double[] { 0L, (byte) 10 };
        double double9 = variance4.evaluate(doubleArray8);
        double double11 = variance1.evaluate(doubleArray8, (double) 10L);
        long long12 = variance1.getN();
        variance1.increment((double) 0L);
        double[] doubleArray16 = new double[] { 10.0d };
        variance1.incrementAll(doubleArray16);
        long long18 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean28 = variance26.equals((java.lang.Object) (short) 10);
        boolean boolean29 = variance20.equals((java.lang.Object) variance26);
        long long30 = variance26.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean34 = variance32.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray43 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double44 = variance36.evaluate(doubleArray43);
        double double45 = variance32.evaluate(doubleArray43);
        double double46 = variance26.evaluate(doubleArray43);
        double double47 = variance1.evaluate(doubleArray43);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.0d + "'", double9 == 50.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0]");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2L + "'", long18 == 2L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2136.8055555555557d + "'", double44 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2564.166666666667d + "'", double45 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2564.166666666667d + "'", double46 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2564.166666666667d + "'", double47 == 2564.166666666667d);
    }

    @Test
    public void test05659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05659");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        double double14 = secondMoment8.getResult();
        secondMoment8.clear();
        long long16 = secondMoment8.getN();
        secondMoment8.clear();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        long long20 = variance19.getN();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test05660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05660");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        variance1.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean14 = variance12.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double24 = variance16.evaluate(doubleArray23);
        double double25 = variance12.evaluate(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance27.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        double[] doubleArray39 = new double[] { 0L, (byte) 10 };
        double double40 = variance35.evaluate(doubleArray39);
        double double42 = variance32.evaluate(doubleArray39, (double) 10L);
        double double43 = variance30.evaluate(doubleArray39);
        double double44 = variance27.evaluate(doubleArray39);
        double double45 = variance12.evaluate(doubleArray39);
        double double47 = variance1.evaluate(doubleArray39, (double) 0L);
        variance1.increment(2136.8055555423102d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2136.8055555555557d + "'", double24 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2564.166666666667d + "'", double25 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 25.0d + "'", double47 == 25.0d);
    }

    @Test
    public void test05661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05661");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        boolean boolean7 = secondMoment1.equals((java.lang.Object) (byte) 0);
        double double8 = secondMoment1.getResult();
        double double9 = secondMoment1.getResult();
        double double10 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance12.increment((-1.0d));
        variance12.setBiasCorrected(false);
        boolean boolean17 = variance12.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean19 = variance12.equals((java.lang.Object) secondMoment18);
        secondMoment18.increment((double) (short) 0);
        secondMoment18.increment((double) 1.0f);
        double double24 = secondMoment18.getResult();
        secondMoment18.clear();
        secondMoment18.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance28.increment((-1.0d));
        variance28.setBiasCorrected(false);
        boolean boolean33 = variance28.isBiasCorrected();
        double[] doubleArray34 = new double[] {};
        double double35 = variance28.evaluate(doubleArray34);
        variance28.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance39.increment((-1.0d));
        variance39.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean46 = variance44.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double54 = variance53.getResult();
        double[] doubleArray57 = new double[] { 0L, (byte) 10 };
        double double58 = variance53.evaluate(doubleArray57);
        double double60 = variance50.evaluate(doubleArray57, (double) 10L);
        double double61 = variance48.evaluate(doubleArray57);
        double[] doubleArray65 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double66 = variance48.evaluate(doubleArray65);
        double double68 = variance44.evaluate(doubleArray65, (double) (byte) 1);
        double double70 = variance39.evaluate(doubleArray65, 4048078.240740742d);
        double double71 = variance28.evaluate(doubleArray65);
        secondMoment18.incrementAll(doubleArray65);
        secondMoment1.incrementAll(doubleArray65);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.5d + "'", double24 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 2024039.120370371d + "'", double66 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 2024039.120370371d + "'", double68 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2024039.12109375d + "'", double70 == 2024039.12109375d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1349359.4135802474d + "'", double71 == 1349359.4135802474d);
    }

    @Test
    public void test05662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05662");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        double double10 = secondMoment8.getResult();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        long long13 = secondMoment8.getN();
        secondMoment8.clear();
        long long15 = secondMoment8.getN();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test05663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05663");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance8.increment((-1.0d));
        variance8.setBiasCorrected(false);
        boolean boolean13 = variance8.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean15 = variance8.equals((java.lang.Object) secondMoment14);
        double double16 = secondMoment14.getResult();
        secondMoment14.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        double[] doubleArray34 = new double[] { 0L, (byte) 10 };
        double double35 = variance30.evaluate(doubleArray34);
        double double37 = variance27.evaluate(doubleArray34, (double) 10L);
        double double38 = variance25.evaluate(doubleArray34);
        double double39 = variance20.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        double[] doubleArray45 = new double[] { 0L, (byte) 10 };
        double double46 = variance41.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray55 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double56 = variance48.evaluate(doubleArray55);
        double double57 = variance41.evaluate(doubleArray55);
        double double58 = variance20.evaluate(doubleArray55);
        double double59 = variance18.evaluate(doubleArray55);
        variance5.incrementAll(doubleArray55);
        long long61 = variance5.getN();
        variance5.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance65.increment((-1.0d));
        variance65.setBiasCorrected(false);
        boolean boolean70 = variance65.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment71 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean72 = variance65.equals((java.lang.Object) secondMoment71);
        secondMoment71.increment((double) (short) 0);
        secondMoment71.increment((double) 1.0f);
        double double77 = secondMoment71.getResult();
        secondMoment71.clear();
        long long79 = secondMoment71.getN();
        secondMoment71.increment(0.0d);
        secondMoment71.increment(2136.8055555559695d);
        boolean boolean84 = variance5.equals((java.lang.Object) secondMoment71);
        secondMoment71.clear();
        double double86 = secondMoment71.getResult();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2136.8055555555557d + "'", double56 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2564.166666666667d + "'", double57 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2564.166666666667d + "'", double58 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2136.8055555555557d + "'", double59 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.5d + "'", double77 == 0.5d);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
    }

    @Test
    public void test05664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05664");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        double double5 = secondMoment0.getResult();
        secondMoment0.increment(14205.875d);
        double double8 = secondMoment0.getResult();
        secondMoment0.clear();
        double double10 = secondMoment0.getResult();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test05665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05665");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double[] doubleArray7 = new double[] {};
        double double8 = variance1.evaluate(doubleArray7);
        variance1.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        double[] doubleArray21 = new double[] { 0L, (byte) 10 };
        double double22 = variance17.evaluate(doubleArray21);
        double double24 = variance14.evaluate(doubleArray21, (double) 10L);
        double double25 = variance12.evaluate(doubleArray21);
        variance1.incrementAll(doubleArray21);
        variance1.increment(4048078.240740742d);
        variance1.increment(0.5d);
        boolean boolean31 = variance1.isBiasCorrected();
        boolean boolean32 = variance1.isBiasCorrected();
        boolean boolean33 = variance1.isBiasCorrected();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test05666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05666");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        secondMoment2.increment((double) 2L);
        double double9 = secondMoment2.getResult();
        secondMoment2.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.increment((double) 10.0f);
        double double16 = secondMoment2.getResult();
        double double17 = secondMoment2.getResult();
        long long18 = secondMoment2.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.setBiasCorrected(false);
        boolean boolean25 = variance20.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean27 = variance20.equals((java.lang.Object) secondMoment26);
        secondMoment26.increment((double) (short) 0);
        secondMoment26.increment((double) 1.0f);
        long long32 = secondMoment26.getN();
        secondMoment26.increment(2564.1666666030883d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment35);
        long long37 = secondMoment35.getN();
        secondMoment35.clear();
        secondMoment35.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment35);
        variance41.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.increment((-1.0d));
        variance44.setBiasCorrected(false);
        boolean boolean49 = variance44.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean51 = variance44.equals((java.lang.Object) secondMoment50);
        secondMoment50.increment((double) (short) 0);
        secondMoment50.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray64 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double65 = variance57.evaluate(doubleArray64);
        double double66 = secondMoment50.evaluate(doubleArray64);
        variance41.incrementAll(doubleArray64);
        secondMoment26.incrementAll(doubleArray64);
        double double69 = secondMoment2.evaluate(doubleArray64);
        secondMoment2.increment((double) 3L);
        double double72 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1322.6666666666667d + "'", double16 == 1322.6666666666667d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1322.6666666666667d + "'", double17 == 1322.6666666666667d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 3L + "'", long18 == 3L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 2L + "'", long32 == 2L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2136.8055555555557d + "'", double65 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 12820.833333333334d + "'", double66 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 12820.833333333334d + "'", double69 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 13689.428571428572d + "'", double72 == 13689.428571428572d);
    }

    @Test
    public void test05667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05667");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance9.increment((-1.0d));
        variance9.setBiasCorrected(false);
        variance9.increment(2136.8055555555557d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        double[] doubleArray29 = new double[] { 0L, (byte) 10 };
        double double30 = variance25.evaluate(doubleArray29);
        double double32 = variance22.evaluate(doubleArray29, (double) 10L);
        double double33 = variance20.evaluate(doubleArray29);
        double double34 = variance17.evaluate(doubleArray29);
        variance9.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        double[] doubleArray46 = new double[] { 0L, (byte) 10 };
        double double47 = variance42.evaluate(doubleArray46);
        double double49 = variance39.evaluate(doubleArray46, (double) 10L);
        double double50 = variance37.evaluate(doubleArray46);
        double double52 = variance9.evaluate(doubleArray46, Double.NaN);
        double double53 = secondMoment0.evaluate(doubleArray46);
        long long54 = secondMoment0.getN();
        long long55 = secondMoment0.getN();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 2L + "'", long54 == 2L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 2L + "'", long55 == 2L);
    }

    @Test
    public void test05668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05668");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double22 = variance14.evaluate(doubleArray21);
        double double23 = secondMoment7.evaluate(doubleArray21);
        long long24 = secondMoment7.getN();
        long long25 = secondMoment7.getN();
        secondMoment7.increment((double) (short) 0);
        long long28 = secondMoment7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance30.increment((-1.0d));
        variance30.setBiasCorrected(false);
        boolean boolean35 = variance30.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        double[] doubleArray44 = new double[] { 0L, (byte) 10 };
        double double45 = variance40.evaluate(doubleArray44);
        double double47 = variance37.evaluate(doubleArray44, (double) 10L);
        double double48 = variance30.evaluate(doubleArray44);
        double double49 = secondMoment7.evaluate(doubleArray44);
        secondMoment7.clear();
        secondMoment7.increment((double) 7L);
        double double53 = secondMoment7.getResult();
        secondMoment7.clear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2136.8055555555557d + "'", double22 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 12820.833333333334d + "'", double23 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 6L + "'", long24 == 6L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 7L + "'", long28 == 7L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 25.0d + "'", double48 == 25.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
    }

    @Test
    public void test05669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05669");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        long long9 = secondMoment7.getN();
        secondMoment7.clear();
        secondMoment7.clear();
        secondMoment7.increment((double) (byte) 100);
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double22 = variance21.getResult();
        double[] doubleArray25 = new double[] { 0L, (byte) 10 };
        double double26 = variance21.evaluate(doubleArray25);
        double double28 = variance18.evaluate(doubleArray25, (double) 10L);
        double double29 = variance16.evaluate(doubleArray25);
        double[] doubleArray33 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double34 = variance16.evaluate(doubleArray33);
        double double35 = secondMoment7.evaluate(doubleArray33);
        double double38 = secondMoment1.evaluate(doubleArray33, 0, (int) (short) 1);
        long long39 = secondMoment1.getN();
        secondMoment1.increment(2564.166666666667d);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.increment((-1.0d));
        variance44.setBiasCorrected(false);
        boolean boolean49 = variance44.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean51 = variance44.equals((java.lang.Object) secondMoment50);
        double double52 = secondMoment50.getResult();
        secondMoment50.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment50);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment56);
        double double58 = secondMoment56.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment56);
        secondMoment56.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance62.increment((-1.0d));
        variance62.setBiasCorrected(false);
        boolean boolean67 = variance62.isBiasCorrected();
        double[] doubleArray68 = new double[] {};
        double double69 = variance62.evaluate(doubleArray68);
        secondMoment56.incrementAll(doubleArray68);
        double double71 = variance54.evaluate(doubleArray68);
        variance54.increment(2564.1666666666665d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        variance75.increment((double) (short) -1);
        double double79 = variance75.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double82 = variance81.getResult();
        double[] doubleArray85 = new double[] { 0L, (byte) 10 };
        double double86 = variance81.evaluate(doubleArray85);
        double double87 = variance75.evaluate(doubleArray85);
        double double88 = variance54.evaluate(doubleArray85);
        secondMoment1.incrementAll(doubleArray85);
        org.apache.commons.math.stat.descriptive.moment.Variance variance90 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long91 = secondMoment1.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2024039.120370371d + "'", double34 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 4048078.240740742d + "'", double35 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 2L + "'", long91 == 2L);
    }

    @Test
    public void test05670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05670");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.increment((double) (byte) 100);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment(2024039.12109375d);
        secondMoment1.clear();
        secondMoment1.increment((double) 8L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double double17 = secondMoment1.getResult();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test05671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05671");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        secondMoment0.clear();
        long long8 = secondMoment0.getN();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        long long22 = variance11.getN();
        double double23 = variance11.getResult();
        double double24 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double26 = secondMoment25.getResult();
        long long27 = secondMoment25.getN();
        secondMoment25.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment30);
        long long32 = secondMoment30.getN();
        secondMoment30.clear();
        secondMoment30.clear();
        secondMoment30.increment((double) (byte) 100);
        secondMoment30.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment30);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment30);
        variance39.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.increment((-1.0d));
        variance44.setBiasCorrected(false);
        boolean boolean49 = variance44.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean51 = variance44.equals((java.lang.Object) secondMoment50);
        double double52 = secondMoment50.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        double[] doubleArray61 = new double[] { 0L, (byte) 10 };
        double double62 = variance57.evaluate(doubleArray61);
        double double64 = variance54.evaluate(doubleArray61, (double) 10L);
        double double67 = secondMoment50.evaluate(doubleArray61, (int) (short) 0, 1);
        long long68 = secondMoment50.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment50);
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double72 = variance71.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double75 = variance74.getResult();
        double[] doubleArray78 = new double[] { 0L, (byte) 10 };
        double double79 = variance74.evaluate(doubleArray78);
        double double81 = variance71.evaluate(doubleArray78, (double) 10L);
        long long82 = variance71.getN();
        variance71.increment((double) 0L);
        double[] doubleArray86 = new double[] { 10.0d };
        variance71.incrementAll(doubleArray86);
        double double88 = variance69.evaluate(doubleArray86);
        variance39.incrementAll(doubleArray86);
        secondMoment25.incrementAll(doubleArray86);
        double double92 = variance11.evaluate(doubleArray86, (double) 7L);
        double double93 = secondMoment0.evaluate(doubleArray86);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
    }

    @Test
    public void test05672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05672");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        boolean boolean12 = variance11.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance16.increment((-1.0d));
        variance16.setBiasCorrected(false);
        boolean boolean21 = variance16.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean23 = variance16.equals((java.lang.Object) secondMoment22);
        double double24 = secondMoment22.getResult();
        secondMoment22.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        secondMoment22.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance30.increment((-1.0d));
        variance30.setBiasCorrected(false);
        boolean boolean35 = variance30.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean37 = variance30.equals((java.lang.Object) secondMoment36);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        double[] doubleArray46 = new double[] { 0L, (byte) 10 };
        double double47 = variance42.evaluate(doubleArray46);
        double double49 = variance39.evaluate(doubleArray46, (double) 10L);
        double double53 = variance30.evaluate(doubleArray46, (double) (short) 0, 0, (int) (short) 0);
        double double56 = secondMoment22.evaluate(doubleArray46, 0, 0);
        variance14.incrementAll(doubleArray46);
        double double58 = variance11.evaluate(doubleArray46);
        variance11.increment(2564.166666666667d);
        double double61 = variance11.getResult();
        variance11.clear();
        variance11.increment(227.2998046875d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
    }

    @Test
    public void test05673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05673");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        secondMoment8.incrementAll(doubleArray18);
        boolean boolean21 = variance1.equals((java.lang.Object) secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.setBiasCorrected(false);
        boolean boolean28 = variance23.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean30 = variance23.equals((java.lang.Object) secondMoment29);
        boolean boolean31 = secondMoment8.equals((java.lang.Object) boolean30);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        variance33.increment(25.00000011920929d);
        double double36 = variance33.getResult();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
    }

    @Test
    public void test05674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05674");
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.setBiasCorrected(false);
        boolean boolean8 = variance3.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean10 = variance3.equals((java.lang.Object) secondMoment9);
        secondMoment9.increment((double) (short) 0);
        secondMoment9.increment((double) 1.0f);
        double double15 = secondMoment9.getResult();
        secondMoment9.clear();
        long long17 = secondMoment9.getN();
        secondMoment9.clear();
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        secondMoment9.increment(1781.8024691358025d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.5d + "'", double15 == 0.5d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test05675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05675");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = secondMoment8.evaluate(doubleArray22);
        long long25 = secondMoment8.getN();
        long long26 = secondMoment8.getN();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        variance28.clear();
        long long30 = variance28.getN();
        variance28.clear();
        variance28.setBiasCorrected(false);
        long long34 = variance28.getN();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 12820.833333333334d + "'", double24 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
    }

    @Test
    public void test05676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05676");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance11.increment((-1.0d));
        variance11.setBiasCorrected(false);
        boolean boolean16 = variance11.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean18 = variance11.equals((java.lang.Object) secondMoment17);
        secondMoment17.increment((double) (short) 0);
        secondMoment17.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray31 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double32 = variance24.evaluate(doubleArray31);
        double double33 = secondMoment17.evaluate(doubleArray31);
        long long34 = secondMoment17.getN();
        long long35 = secondMoment17.getN();
        secondMoment17.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment17);
        double double39 = variance38.getResult();
        variance38.increment((double) 1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance43.increment((-1.0d));
        variance43.setBiasCorrected(false);
        boolean boolean48 = variance43.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean50 = variance43.equals((java.lang.Object) secondMoment49);
        long long51 = secondMoment49.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance53.increment((-1.0d));
        variance53.setBiasCorrected(false);
        variance53.increment((double) 100L);
        boolean boolean60 = variance53.isBiasCorrected();
        boolean boolean61 = variance53.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray70 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double71 = variance63.evaluate(doubleArray70);
        double double73 = variance53.evaluate(doubleArray70, (double) (byte) 10);
        secondMoment49.incrementAll(doubleArray70);
        double double75 = variance38.evaluate(doubleArray70);
        secondMoment2.incrementAll(doubleArray70);
        double double77 = secondMoment2.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2136.8055555555557d + "'", double32 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 12820.833333333334d + "'", double33 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 6L + "'", long34 == 6L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 6L + "'", long35 == 6L);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1980.1224489795918d + "'", double39 == 1980.1224489795918d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2136.8055555555557d + "'", double71 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 2136.8055555555557d + "'", double73 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 2136.8055555555557d + "'", double75 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 12820.833333333334d + "'", double77 == 12820.833333333334d);
    }

    @Test
    public void test05677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05677");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double[] doubleArray7 = new double[] {};
        double double8 = variance1.evaluate(doubleArray7);
        variance1.setBiasCorrected(false);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        double double15 = secondMoment13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment13);
        secondMoment13.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double20 = variance19.getResult();
        double[] doubleArray23 = new double[] { 0L, (byte) 10 };
        double double24 = variance19.evaluate(doubleArray23);
        secondMoment13.incrementAll(doubleArray23);
        variance1.incrementAll(doubleArray23);
        double[] doubleArray27 = new double[] {};
        double double28 = variance1.evaluate(doubleArray27);
        variance1.increment(1142553.1483410494d);
        long long31 = variance1.getN();
        double double32 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        double[] doubleArray41 = new double[] { 0L, (byte) 10 };
        double double42 = variance37.evaluate(doubleArray41);
        double double44 = variance34.evaluate(doubleArray41, (double) 10L);
        variance34.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance48.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double54 = variance53.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double57 = variance56.getResult();
        double[] doubleArray60 = new double[] { 0L, (byte) 10 };
        double double61 = variance56.evaluate(doubleArray60);
        double double63 = variance53.evaluate(doubleArray60, (double) 10L);
        double double64 = variance51.evaluate(doubleArray60);
        double double65 = variance48.evaluate(doubleArray60);
        double double66 = variance34.evaluate(doubleArray60);
        // The following exception was thrown during execution in test generation
        try {
            double double69 = variance1.evaluate(doubleArray60, (int) (short) 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3L + "'", long31 == 3L);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2.900925047450135E11d + "'", double32 == 2.900925047450135E11d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
    }

    @Test
    public void test05678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05678");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        boolean boolean8 = variance1.isBiasCorrected();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        long long12 = secondMoment10.getN();
        secondMoment10.clear();
        secondMoment10.clear();
        secondMoment10.increment((double) (byte) 100);
        secondMoment10.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        double double19 = variance18.getResult();
        double double20 = variance18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance22.increment((-1.0d));
        variance22.setBiasCorrected(false);
        boolean boolean27 = variance22.isBiasCorrected();
        double[] doubleArray28 = new double[] {};
        double double29 = variance22.evaluate(doubleArray28);
        variance22.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.setBiasCorrected(false);
        boolean boolean39 = variance34.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean41 = variance34.equals((java.lang.Object) secondMoment40);
        double double42 = secondMoment40.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        double[] doubleArray51 = new double[] { 0L, (byte) 10 };
        double double52 = variance47.evaluate(doubleArray51);
        double double54 = variance44.evaluate(doubleArray51, (double) 10L);
        double double57 = secondMoment40.evaluate(doubleArray51, (int) (short) 0, 1);
        long long58 = secondMoment40.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment40);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double65 = variance64.getResult();
        double[] doubleArray68 = new double[] { 0L, (byte) 10 };
        double double69 = variance64.evaluate(doubleArray68);
        double double71 = variance61.evaluate(doubleArray68, (double) 10L);
        long long72 = variance61.getN();
        variance61.increment((double) 0L);
        double[] doubleArray76 = new double[] { 10.0d };
        variance61.incrementAll(doubleArray76);
        double double78 = variance59.evaluate(doubleArray76);
        double double82 = variance22.evaluate(doubleArray76, (double) 1L, 0, (int) (byte) 1);
        double double83 = variance18.evaluate(doubleArray76);
        double double85 = variance1.evaluate(doubleArray76, 1142553.1483410494d);
        variance1.clear();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
    }

    @Test
    public void test05679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05679");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance6.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean12 = variance10.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double22 = variance14.evaluate(doubleArray21);
        double double23 = variance10.evaluate(doubleArray21);
        double double25 = variance6.evaluate(doubleArray21, (double) 1.0f);
        boolean boolean27 = variance6.equals((java.lang.Object) 10.0d);
        variance6.clear();
        double[] doubleArray35 = new double[] { 0, 6L, 2564.1666666030883d, 1152.0d, '4', 2310.1428571428573d };
        variance6.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance38.increment((-1.0d));
        variance38.setBiasCorrected(false);
        boolean boolean43 = variance38.isBiasCorrected();
        double[] doubleArray44 = new double[] {};
        double double45 = variance38.evaluate(doubleArray44);
        variance38.setBiasCorrected(false);
        variance38.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment50);
        double double52 = secondMoment50.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment50);
        secondMoment50.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double57 = variance56.getResult();
        double[] doubleArray60 = new double[] { 0L, (byte) 10 };
        double double61 = variance56.evaluate(doubleArray60);
        secondMoment50.incrementAll(doubleArray60);
        variance38.incrementAll(doubleArray60);
        double[] doubleArray64 = new double[] {};
        double double65 = variance38.evaluate(doubleArray64);
        double double66 = variance6.evaluate(doubleArray64);
        variance6.clear();
        variance6.setBiasCorrected(false);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2136.8055555555557d + "'", double22 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2564.166666666667d + "'", double23 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2136.805555555555d + "'", double25 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 6.0, 2564.1666666030883, 1152.0, 52.0, 2310.1428571428573]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
    }

    @Test
    public void test05680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05680");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double[] doubleArray5 = new double[] { 0L, (byte) 10 };
        double double6 = variance1.evaluate(doubleArray5);
        variance1.clear();
        variance1.increment(2024039.1203703713d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        long long12 = secondMoment10.getN();
        secondMoment10.clear();
        secondMoment10.increment(10.0d);
        double double16 = secondMoment10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double24 = variance23.getResult();
        double[] doubleArray27 = new double[] { 0L, (byte) 10 };
        double double28 = variance23.evaluate(doubleArray27);
        double double30 = variance20.evaluate(doubleArray27, (double) 10L);
        double double31 = variance18.evaluate(doubleArray27);
        double[] doubleArray35 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double36 = variance18.evaluate(doubleArray35);
        double double37 = secondMoment10.evaluate(doubleArray35);
        long long38 = secondMoment10.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance40.increment((-1.0d));
        long long43 = variance40.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance48.increment((-1.0d));
        variance48.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double56 = variance55.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double59 = variance58.getResult();
        double[] doubleArray62 = new double[] { 0L, (byte) 10 };
        double double63 = variance58.evaluate(doubleArray62);
        double double65 = variance55.evaluate(doubleArray62, (double) 10L);
        double double66 = variance53.evaluate(doubleArray62);
        double double67 = variance48.evaluate(doubleArray62);
        variance46.incrementAll(doubleArray62);
        variance44.incrementAll(doubleArray62);
        double double70 = variance40.evaluate(doubleArray62);
        double double73 = secondMoment10.evaluate(doubleArray62, (int) (byte) 0, 1);
        variance1.incrementAll(doubleArray62);
        variance1.clear();
        java.lang.Class<?> wildcardClass76 = variance1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.0d + "'", double6 == 50.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 2024039.120370371d + "'", double36 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 4048078.240740742d + "'", double37 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 3L + "'", long38 == 3L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test05681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05681");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        double double4 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        double[] doubleArray13 = new double[] { 0L, (byte) 10 };
        double double14 = variance9.evaluate(doubleArray13);
        double double16 = variance6.evaluate(doubleArray13, (double) 10L);
        double double17 = variance1.evaluate(doubleArray13);
        double double18 = variance1.getResult();
        variance1.clear();
        long long20 = variance1.getN();
        double double21 = variance1.getResult();
        variance1.increment(1641.0d);
        variance1.increment(4.5d);
        variance1.increment(2024039.1203703713d);
        boolean boolean28 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double30 = secondMoment29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        long long34 = secondMoment32.getN();
        secondMoment32.clear();
        double double36 = secondMoment32.getResult();
        secondMoment32.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        variance41.increment((double) (short) -1);
        double double45 = variance41.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        double[] doubleArray51 = new double[] { 0L, (byte) 10 };
        double double52 = variance47.evaluate(doubleArray51);
        double double53 = variance41.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance55.increment((-1.0d));
        variance55.setBiasCorrected(false);
        boolean boolean60 = variance55.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean62 = variance55.equals((java.lang.Object) secondMoment61);
        double double63 = secondMoment61.getResult();
        secondMoment61.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment61);
        secondMoment61.increment((double) 10.0f);
        secondMoment61.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment61);
        java.lang.Object obj70 = null;
        boolean boolean71 = variance69.equals(obj70);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double73 = secondMoment72.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment74 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment74);
        long long76 = secondMoment74.getN();
        secondMoment74.clear();
        secondMoment74.clear();
        secondMoment74.increment((double) (byte) 100);
        long long81 = secondMoment74.getN();
        double[] doubleArray83 = new double[] { 2024039.1203703713d };
        double double84 = secondMoment74.evaluate(doubleArray83);
        secondMoment72.incrementAll(doubleArray83);
        variance69.incrementAll(doubleArray83);
        variance41.incrementAll(doubleArray83);
        double double89 = variance39.evaluate(doubleArray83, (double) (-1.0f));
        variance31.incrementAll(doubleArray83);
        variance1.incrementAll(doubleArray83);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1L + "'", long81 == 1L);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
    }

    @Test
    public void test05682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05682");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance6.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double22 = variance9.evaluate(doubleArray18);
        double double23 = variance6.evaluate(doubleArray18);
        secondMoment0.incrementAll(doubleArray18, 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean31 = variance29.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray40 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double41 = variance33.evaluate(doubleArray40);
        double double42 = variance29.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double50 = variance49.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double53 = variance52.getResult();
        double[] doubleArray56 = new double[] { 0L, (byte) 10 };
        double double57 = variance52.evaluate(doubleArray56);
        double double59 = variance49.evaluate(doubleArray56, (double) 10L);
        double double60 = variance47.evaluate(doubleArray56);
        double double61 = variance44.evaluate(doubleArray56);
        double double62 = variance29.evaluate(doubleArray56);
        double double63 = secondMoment0.evaluate(doubleArray56);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2136.8055555555557d + "'", double41 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2564.166666666667d + "'", double42 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
    }

    @Test
    public void test05683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05683");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance7.increment((-1.0d));
        variance7.setBiasCorrected(false);
        boolean boolean12 = variance7.isBiasCorrected();
        double[] doubleArray13 = new double[] {};
        double double14 = variance7.evaluate(doubleArray13);
        secondMoment1.incrementAll(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        variance16.clear();
        variance16.setBiasCorrected(false);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test05684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05684");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        double double8 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment6);
        secondMoment6.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        double[] doubleArray16 = new double[] { 0L, (byte) 10 };
        double double17 = variance12.evaluate(doubleArray16);
        secondMoment6.incrementAll(doubleArray16);
        double double19 = variance4.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance22.increment((-1.0d));
        variance22.setBiasCorrected(false);
        boolean boolean27 = variance22.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean29 = variance22.equals((java.lang.Object) secondMoment28);
        secondMoment28.increment((double) (short) 0);
        secondMoment28.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray42 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double43 = variance35.evaluate(doubleArray42);
        double double44 = secondMoment28.evaluate(doubleArray42);
        secondMoment20.incrementAll(doubleArray42);
        variance4.incrementAll(doubleArray42);
        variance4.increment(0.5d);
        boolean boolean49 = variance4.isBiasCorrected();
        boolean boolean50 = variance4.isBiasCorrected();
        variance4.increment(0.0d);
        variance4.increment(4684796.354166668d);
        double double55 = variance4.getResult();
        boolean boolean56 = variance4.isBiasCorrected();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 25.0d + "'", double19 == 25.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2136.8055555555557d + "'", double43 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 12820.833333333334d + "'", double44 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test05685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05685");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        secondMoment7.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.setBiasCorrected(false);
        boolean boolean20 = variance15.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean22 = variance15.equals((java.lang.Object) secondMoment21);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        double[] doubleArray31 = new double[] { 0L, (byte) 10 };
        double double32 = variance27.evaluate(doubleArray31);
        double double34 = variance24.evaluate(doubleArray31, (double) 10L);
        double double38 = variance15.evaluate(doubleArray31, (double) (short) 0, 0, (int) (short) 0);
        double double41 = secondMoment7.evaluate(doubleArray31, 0, 0);
        long long42 = secondMoment7.getN();
        long long43 = secondMoment7.getN();
        double double44 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment46);
        long long48 = secondMoment46.getN();
        secondMoment46.clear();
        secondMoment46.clear();
        secondMoment46.increment((double) (byte) 100);
        secondMoment46.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment46);
        secondMoment46.clear();
        secondMoment46.increment(2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment46);
        secondMoment46.increment((double) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment61);
        long long63 = secondMoment61.getN();
        secondMoment61.clear();
        secondMoment61.increment((double) '4');
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance68.increment((-1.0d));
        variance68.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double79 = variance78.getResult();
        double[] doubleArray82 = new double[] { 0L, (byte) 10 };
        double double83 = variance78.evaluate(doubleArray82);
        double double85 = variance75.evaluate(doubleArray82, (double) 10L);
        double double86 = variance73.evaluate(doubleArray82);
        double double87 = variance68.evaluate(doubleArray82);
        double double88 = secondMoment61.evaluate(doubleArray82);
        double double91 = secondMoment46.evaluate(doubleArray82, (int) (byte) 0, (int) (short) 0);
        double double93 = variance45.evaluate(doubleArray82, (double) 5L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 2666070.367346939d + "'", double91 == 2666070.367346939d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 50.0d + "'", double93 == 50.0d);
    }

    @Test
    public void test05686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05686");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        double[] doubleArray14 = new double[] { 0L, (byte) 10 };
        double double15 = variance10.evaluate(doubleArray14);
        double double17 = variance7.evaluate(doubleArray14, (double) 10L);
        double double18 = variance5.evaluate(doubleArray14);
        double[] doubleArray22 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double23 = variance5.evaluate(doubleArray22);
        double double25 = variance1.evaluate(doubleArray22, (double) (byte) 1);
        variance1.increment(10.0d);
        variance1.setBiasCorrected(true);
        double double30 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        double[] doubleArray40 = new double[] { 0L, (byte) 10 };
        double double41 = variance36.evaluate(doubleArray40);
        double double43 = variance33.evaluate(doubleArray40, (double) 10L);
        long long44 = variance33.getN();
        boolean boolean45 = secondMoment31.equals((java.lang.Object) long44);
        secondMoment31.increment(50.0d);
        double double48 = secondMoment31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance50.increment((-1.0d));
        variance50.setBiasCorrected(false);
        boolean boolean55 = variance50.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean57 = variance50.equals((java.lang.Object) secondMoment56);
        double double58 = secondMoment56.getResult();
        secondMoment56.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment56);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment62);
        double double64 = secondMoment62.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment62);
        secondMoment62.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance68.increment((-1.0d));
        variance68.setBiasCorrected(false);
        boolean boolean73 = variance68.isBiasCorrected();
        double[] doubleArray74 = new double[] {};
        double double75 = variance68.evaluate(doubleArray74);
        secondMoment62.incrementAll(doubleArray74);
        double double77 = variance60.evaluate(doubleArray74);
        double double78 = secondMoment31.evaluate(doubleArray74);
        double double81 = variance1.evaluate(doubleArray74, (int) (short) 0, 0);
        long long82 = variance1.getN();
        variance1.increment(2564.1666666030883d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 50.0d + "'", double15 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2024039.120370371d + "'", double23 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2024039.120370371d + "'", double25 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1L + "'", long82 == 1L);
    }

    @Test
    public void test05687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05687");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        double double14 = secondMoment8.getResult();
        double double15 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        double double18 = secondMoment16.getResult();
        boolean boolean19 = secondMoment8.equals((java.lang.Object) double18);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        double double21 = variance20.getResult();
        boolean boolean22 = variance20.isBiasCorrected();
        variance20.increment(10.0d);
        variance20.setBiasCorrected(true);
        variance20.setBiasCorrected(false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.5d + "'", double15 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.5d + "'", double21 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test05688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05688");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean4 = variance2.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance6.increment((-1.0d));
        variance6.setBiasCorrected(false);
        boolean boolean11 = variance6.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean13 = variance6.equals((java.lang.Object) secondMoment12);
        double double14 = secondMoment12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double17 = variance16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double20 = variance19.getResult();
        double[] doubleArray23 = new double[] { 0L, (byte) 10 };
        double double24 = variance19.evaluate(doubleArray23);
        double double26 = variance16.evaluate(doubleArray23, (double) 10L);
        double double29 = secondMoment12.evaluate(doubleArray23, (int) (short) 0, 1);
        double double30 = variance2.evaluate(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment31);
        long long33 = secondMoment31.getN();
        secondMoment31.clear();
        secondMoment31.clear();
        secondMoment31.increment((double) (byte) 100);
        secondMoment31.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment31);
        secondMoment31.clear();
        secondMoment31.increment(2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment31);
        boolean boolean44 = variance2.equals((java.lang.Object) secondMoment31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment31);
        long long46 = variance45.getN();
        variance45.clear();
        variance45.clear();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
    }

    @Test
    public void test05689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05689");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.clear();
        secondMoment0.increment(2024039.12109375d);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.setBiasCorrected(false);
        boolean boolean20 = variance15.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean22 = variance15.equals((java.lang.Object) secondMoment21);
        double double23 = secondMoment21.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        double[] doubleArray32 = new double[] { 0L, (byte) 10 };
        double double33 = variance28.evaluate(doubleArray32);
        double double35 = variance25.evaluate(doubleArray32, (double) 10L);
        double double38 = secondMoment21.evaluate(doubleArray32, (int) (short) 0, 1);
        double double39 = variance13.evaluate(doubleArray32);
        double double40 = variance13.getResult();
        boolean boolean41 = variance13.isBiasCorrected();
        java.lang.Object obj42 = null;
        boolean boolean43 = variance13.equals(obj42);
        variance13.clear();
        boolean boolean45 = variance13.isBiasCorrected();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test05690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05690");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        long long4 = secondMoment2.getN();
        secondMoment2.clear();
        secondMoment2.clear();
        secondMoment2.increment((double) (byte) 100);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.clear();
        secondMoment2.increment(2024039.12109375d);
        secondMoment2.clear();
        secondMoment2.increment((double) 8L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        long long18 = secondMoment2.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        variance20.clear();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
    }

    @Test
    public void test05691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05691");
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.setBiasCorrected(false);
        boolean boolean8 = variance3.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean10 = variance3.equals((java.lang.Object) secondMoment9);
        secondMoment9.increment((double) (short) 0);
        secondMoment9.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double24 = variance16.evaluate(doubleArray23);
        double double25 = secondMoment9.evaluate(doubleArray23);
        long long26 = secondMoment9.getN();
        long long27 = secondMoment9.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        double double31 = secondMoment9.getResult();
        secondMoment9.increment(24.5d);
        secondMoment9.clear();
        double double35 = secondMoment9.getResult();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2136.8055555555557d + "'", double24 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 12820.833333333334d + "'", double25 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 6L + "'", long27 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
    }

    @Test
    public void test05692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05692");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.increment((double) (byte) 100);
        long long8 = secondMoment1.getN();
        double[] doubleArray10 = new double[] { 2024039.1203703713d };
        double double11 = secondMoment1.evaluate(doubleArray10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        long long15 = secondMoment13.getN();
        secondMoment13.clear();
        secondMoment13.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        variance19.setBiasCorrected(false);
        boolean boolean22 = secondMoment1.equals((java.lang.Object) variance19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean31 = variance24.equals((java.lang.Object) secondMoment30);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        double[] doubleArray40 = new double[] { 0L, (byte) 10 };
        double double41 = variance36.evaluate(doubleArray40);
        double double43 = variance33.evaluate(doubleArray40, (double) 10L);
        double double47 = variance24.evaluate(doubleArray40, (double) (short) 0, 0, (int) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance49.increment((-1.0d));
        variance49.setBiasCorrected(false);
        boolean boolean54 = variance49.isBiasCorrected();
        double[] doubleArray55 = new double[] {};
        double double56 = variance49.evaluate(doubleArray55);
        variance49.setBiasCorrected(false);
        variance49.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment61);
        double double63 = secondMoment61.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment61);
        secondMoment61.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double68 = variance67.getResult();
        double[] doubleArray71 = new double[] { 0L, (byte) 10 };
        double double72 = variance67.evaluate(doubleArray71);
        secondMoment61.incrementAll(doubleArray71);
        variance49.incrementAll(doubleArray71);
        double[] doubleArray75 = new double[] {};
        double double76 = variance49.evaluate(doubleArray75);
        boolean boolean77 = variance24.equals((java.lang.Object) doubleArray75);
        variance19.incrementAll(doubleArray75);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test05693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05693");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double11 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        secondMoment9.incrementAll(doubleArray19);
        boolean boolean22 = variance2.equals((java.lang.Object) secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean31 = variance24.equals((java.lang.Object) secondMoment30);
        boolean boolean32 = secondMoment9.equals((java.lang.Object) boolean31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        double[] doubleArray42 = new double[] { 0L, (byte) 10 };
        double double43 = variance38.evaluate(doubleArray42);
        double double45 = variance35.evaluate(doubleArray42, (double) 10L);
        double double46 = secondMoment9.evaluate(doubleArray42);
        double double47 = secondMoment9.getResult();
        secondMoment9.increment((double) 10L);
        secondMoment9.increment(4232.0d);
        secondMoment9.increment((double) (byte) 1);
        secondMoment9.clear();
        long long55 = secondMoment9.getN();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
    }

    @Test
    public void test05694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05694");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        double double15 = secondMoment13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment13);
        secondMoment13.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance19.increment((-1.0d));
        variance19.setBiasCorrected(false);
        boolean boolean24 = variance19.isBiasCorrected();
        double[] doubleArray25 = new double[] {};
        double double26 = variance19.evaluate(doubleArray25);
        secondMoment13.incrementAll(doubleArray25);
        double double28 = variance11.evaluate(doubleArray25);
        boolean boolean29 = variance11.isBiasCorrected();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test05695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05695");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double[] doubleArray7 = new double[] {};
        double double8 = variance1.evaluate(doubleArray7);
        variance1.setBiasCorrected(false);
        variance1.clear();
        double double12 = variance1.getResult();
        variance1.increment(0.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test05696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05696");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        double[] doubleArray8 = new double[] { 0L, (byte) 10 };
        double double9 = variance4.evaluate(doubleArray8);
        double double11 = variance1.evaluate(doubleArray8, (double) 10L);
        long long12 = variance1.getN();
        variance1.increment((double) 0L);
        double[] doubleArray16 = new double[] { 10.0d };
        variance1.incrementAll(doubleArray16);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        long long22 = secondMoment20.getN();
        secondMoment20.clear();
        secondMoment20.clear();
        secondMoment20.increment((double) (byte) 100);
        secondMoment20.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment20);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        double[] doubleArray38 = new double[] { 0L, (byte) 10 };
        double double39 = variance34.evaluate(doubleArray38);
        double double41 = variance31.evaluate(doubleArray38, (double) 10L);
        double double42 = variance29.evaluate(doubleArray38);
        double double43 = variance1.evaluate(doubleArray38);
        long long44 = variance1.getN();
        long long45 = variance1.getN();
        variance1.setBiasCorrected(true);
        double double48 = variance1.getResult();
        java.lang.Class<?> wildcardClass49 = variance1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.0d + "'", double9 == 50.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test05697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05697");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double[] doubleArray7 = new double[] {};
        double double8 = variance1.evaluate(doubleArray7);
        variance1.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray19 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double20 = variance12.evaluate(doubleArray19);
        double double21 = variance1.evaluate(doubleArray19);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean31 = variance24.equals((java.lang.Object) secondMoment30);
        secondMoment30.increment((double) (short) 0);
        secondMoment30.increment((double) 1.0f);
        long long36 = secondMoment30.getN();
        double double37 = secondMoment30.getResult();
        secondMoment30.increment(4684796.354166668d);
        secondMoment30.increment(25.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment30);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment43);
        long long45 = secondMoment43.getN();
        secondMoment43.clear();
        secondMoment43.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment43);
        variance49.clear();
        variance49.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double54 = variance53.getResult();
        long long55 = variance53.getN();
        long long56 = variance53.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double59 = variance58.getResult();
        double[] doubleArray62 = new double[] { 0L, (byte) 10 };
        double double63 = variance58.evaluate(doubleArray62);
        double double65 = variance53.evaluate(doubleArray62, (double) (short) -1);
        variance49.incrementAll(doubleArray62);
        double double67 = variance42.evaluate(doubleArray62);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray62, (int) (byte) -1, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 2136.8055555555557d + "'", double20 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2136.8055555555557d + "'", double21 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 2L + "'", long36 == 2L);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.5d + "'", double37 == 0.5d);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
    }

    @Test
    public void test05698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05698");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = secondMoment8.evaluate(doubleArray22);
        long long25 = secondMoment8.getN();
        long long26 = secondMoment8.getN();
        secondMoment8.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        double[] doubleArray35 = new double[] { 0L, (byte) 10 };
        double double36 = variance31.evaluate(doubleArray35);
        secondMoment8.incrementAll(doubleArray35);
        secondMoment8.clear();
        long long39 = secondMoment8.getN();
        secondMoment8.clear();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 12820.833333333334d + "'", double24 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
    }

    @Test
    public void test05699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05699");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        double double5 = secondMoment1.getResult();
        secondMoment1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double[] doubleArray9 = new double[] {};
        double double10 = secondMoment1.evaluate(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance13.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        double[] doubleArray29 = new double[] { 0L, (byte) 10 };
        double double30 = variance25.evaluate(doubleArray29);
        double double32 = variance22.evaluate(doubleArray29, (double) 10L);
        double double33 = variance20.evaluate(doubleArray29);
        double double34 = variance17.evaluate(doubleArray29);
        double double35 = variance13.evaluate(doubleArray29);
        double double36 = variance11.evaluate(doubleArray29);
        double double37 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance39.increment((-1.0d));
        variance39.setBiasCorrected(false);
        boolean boolean44 = variance39.isBiasCorrected();
        double[] doubleArray45 = new double[] {};
        double double46 = variance39.evaluate(doubleArray45);
        variance39.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray57 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double58 = variance50.evaluate(doubleArray57);
        double double59 = variance39.evaluate(doubleArray57);
        // The following exception was thrown during execution in test generation
        try {
            double double62 = variance11.evaluate(doubleArray57, 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2136.8055555555557d + "'", double58 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2136.8055555555557d + "'", double59 == 2136.8055555555557d);
    }

    @Test
    public void test05700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05700");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        double[] doubleArray8 = new double[] { 0L, (byte) 10 };
        double double9 = variance4.evaluate(doubleArray8);
        double double11 = variance1.evaluate(doubleArray8, (double) 10L);
        long long12 = variance1.getN();
        variance1.setBiasCorrected(false);
        boolean boolean15 = variance1.isBiasCorrected();
        double double16 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance18.increment((-1.0d));
        variance18.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean26 = variance24.equals((java.lang.Object) (short) 10);
        boolean boolean27 = variance18.equals((java.lang.Object) variance24);
        long long28 = variance24.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean32 = variance30.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray41 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double42 = variance34.evaluate(doubleArray41);
        double double43 = variance30.evaluate(doubleArray41);
        double double44 = variance24.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance48.increment((-1.0d));
        variance48.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double56 = variance55.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double59 = variance58.getResult();
        double[] doubleArray62 = new double[] { 0L, (byte) 10 };
        double double63 = variance58.evaluate(doubleArray62);
        double double65 = variance55.evaluate(doubleArray62, (double) 10L);
        double double66 = variance53.evaluate(doubleArray62);
        double double67 = variance48.evaluate(doubleArray62);
        variance46.incrementAll(doubleArray62);
        double double69 = variance24.evaluate(doubleArray62);
        double double70 = variance1.evaluate(doubleArray62);
        long long71 = variance1.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.0d + "'", double9 == 50.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2136.8055555555557d + "'", double42 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2564.166666666667d + "'", double43 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2564.166666666667d + "'", double44 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 25.0d + "'", double70 == 25.0d);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
    }

    @Test
    public void test05701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05701");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double double7 = variance1.getResult();
        variance1.increment((double) 0L);
        variance1.clear();
        double double11 = variance1.getResult();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test05702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05702");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        double[] doubleArray8 = new double[] { 0L, (byte) 10 };
        double double9 = variance4.evaluate(doubleArray8);
        double double11 = variance1.evaluate(doubleArray8, (double) 10L);
        long long12 = variance1.getN();
        variance1.increment((double) 0L);
        double[] doubleArray16 = new double[] { 10.0d };
        variance1.incrementAll(doubleArray16);
        variance1.clear();
        variance1.increment(4232.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.setBiasCorrected(false);
        boolean boolean28 = variance23.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean30 = variance23.equals((java.lang.Object) secondMoment29);
        secondMoment29.increment((double) (short) 0);
        secondMoment29.increment((double) 1.0f);
        double double35 = secondMoment29.getResult();
        secondMoment29.clear();
        long long37 = secondMoment29.getN();
        secondMoment29.clear();
        secondMoment29.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment29);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance43.increment((-1.0d));
        variance43.setBiasCorrected(false);
        boolean boolean48 = variance43.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean50 = variance43.equals((java.lang.Object) secondMoment49);
        secondMoment49.increment((double) (short) 0);
        secondMoment49.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray63 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double64 = variance56.evaluate(doubleArray63);
        double double65 = secondMoment49.evaluate(doubleArray63);
        long long66 = secondMoment49.getN();
        long long67 = secondMoment49.getN();
        secondMoment49.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment49);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double73 = variance72.getResult();
        double[] doubleArray76 = new double[] { 0L, (byte) 10 };
        double double77 = variance72.evaluate(doubleArray76);
        secondMoment49.incrementAll(doubleArray76);
        secondMoment29.incrementAll(doubleArray76);
        // The following exception was thrown during execution in test generation
        try {
            double double83 = variance1.evaluate(doubleArray76, 13802.0d, (int) '4', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.0d + "'", double9 == 50.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.5d + "'", double35 == 0.5d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2136.8055555555557d + "'", double64 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 12820.833333333334d + "'", double65 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 6L + "'", long66 == 6L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 6L + "'", long67 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
    }

    @Test
    public void test05703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05703");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double11 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        secondMoment9.incrementAll(doubleArray19);
        boolean boolean22 = variance2.equals((java.lang.Object) secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean31 = variance24.equals((java.lang.Object) secondMoment30);
        boolean boolean32 = secondMoment9.equals((java.lang.Object) boolean31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.setBiasCorrected(false);
        boolean boolean39 = variance34.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean41 = variance34.equals((java.lang.Object) secondMoment40);
        secondMoment40.increment((double) (short) 0);
        secondMoment40.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray54 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double55 = variance47.evaluate(doubleArray54);
        double double56 = secondMoment40.evaluate(doubleArray54);
        double double57 = secondMoment9.evaluate(doubleArray54);
        long long58 = secondMoment9.getN();
        double double59 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.increment(0.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2136.8055555555557d + "'", double55 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 12820.833333333334d + "'", double56 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 12820.833333333334d + "'", double57 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 6L + "'", long58 == 6L);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 12820.833333333334d + "'", double59 == 12820.833333333334d);
    }

    @Test
    public void test05704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05704");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        long long7 = secondMoment5.getN();
        secondMoment5.clear();
        secondMoment5.clear();
        secondMoment5.increment((double) (byte) 100);
        secondMoment5.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment5);
        variance14.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance19.increment((-1.0d));
        variance19.setBiasCorrected(false);
        boolean boolean24 = variance19.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean26 = variance19.equals((java.lang.Object) secondMoment25);
        double double27 = secondMoment25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        double[] doubleArray36 = new double[] { 0L, (byte) 10 };
        double double37 = variance32.evaluate(doubleArray36);
        double double39 = variance29.evaluate(doubleArray36, (double) 10L);
        double double42 = secondMoment25.evaluate(doubleArray36, (int) (short) 0, 1);
        long long43 = secondMoment25.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment25);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double47 = variance46.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double50 = variance49.getResult();
        double[] doubleArray53 = new double[] { 0L, (byte) 10 };
        double double54 = variance49.evaluate(doubleArray53);
        double double56 = variance46.evaluate(doubleArray53, (double) 10L);
        long long57 = variance46.getN();
        variance46.increment((double) 0L);
        double[] doubleArray61 = new double[] { 10.0d };
        variance46.incrementAll(doubleArray61);
        double double63 = variance44.evaluate(doubleArray61);
        variance14.incrementAll(doubleArray61);
        secondMoment0.incrementAll(doubleArray61);
        long long66 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.clear();
        long long69 = secondMoment0.getN();
        secondMoment0.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
    }

    @Test
    public void test05705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05705");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance7.increment((-1.0d));
        variance7.setBiasCorrected(false);
        boolean boolean12 = variance7.isBiasCorrected();
        double[] doubleArray13 = new double[] {};
        double double14 = variance7.evaluate(doubleArray13);
        secondMoment1.incrementAll(doubleArray13);
        secondMoment1.clear();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        long long20 = secondMoment18.getN();
        secondMoment18.clear();
        secondMoment18.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        variance24.setBiasCorrected(false);
        double[] doubleArray32 = new double[] { 1L, '#', 0.0d, 6L, 0.0d };
        variance24.incrementAll(doubleArray32);
        double double34 = variance24.getResult();
        boolean boolean35 = secondMoment1.equals((java.lang.Object) variance24);
        secondMoment1.increment(50.00390625d);
        secondMoment1.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 35.0, 0.0, 6.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test05706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05706");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        secondMoment2.increment((double) 2L);
        double double9 = secondMoment2.getResult();
        secondMoment2.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        variance13.increment(1641.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean19 = variance17.equals((java.lang.Object) (short) 10);
        double double20 = variance17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        double[] doubleArray29 = new double[] { 0L, (byte) 10 };
        double double30 = variance25.evaluate(doubleArray29);
        double double32 = variance22.evaluate(doubleArray29, (double) 10L);
        double double33 = variance17.evaluate(doubleArray29);
        variance13.incrementAll(doubleArray29);
        variance13.setBiasCorrected(false);
        variance13.clear();
        variance13.increment(2837.555555555555d);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
    }

    @Test
    public void test05707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05707");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        variance12.increment((double) (short) -1);
        boolean boolean16 = variance12.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        double double20 = secondMoment18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment18);
        secondMoment18.clear();
        secondMoment18.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        long long26 = secondMoment24.getN();
        secondMoment24.clear();
        secondMoment24.clear();
        secondMoment24.increment((double) (byte) 100);
        secondMoment24.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        double[] doubleArray42 = new double[] { 0L, (byte) 10 };
        double double43 = variance38.evaluate(doubleArray42);
        double double45 = variance35.evaluate(doubleArray42, (double) 10L);
        double double46 = variance33.evaluate(doubleArray42);
        double[] doubleArray50 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double51 = variance33.evaluate(doubleArray50);
        double double52 = secondMoment24.evaluate(doubleArray50);
        double double55 = secondMoment18.evaluate(doubleArray50, 0, (int) (short) 1);
        double double57 = variance12.evaluate(doubleArray50, 651942.9897959187d);
        double double59 = variance1.evaluate(doubleArray50, (double) 10);
        boolean boolean60 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment62);
        double double64 = secondMoment62.getResult();
        boolean boolean66 = secondMoment62.equals((java.lang.Object) 1.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment62);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance69.increment((-1.0d));
        boolean boolean72 = variance69.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment74 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment74);
        double double76 = secondMoment74.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment74);
        secondMoment74.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance80.increment((-1.0d));
        variance80.setBiasCorrected(false);
        boolean boolean85 = variance80.isBiasCorrected();
        double[] doubleArray86 = new double[] {};
        double double87 = variance80.evaluate(doubleArray86);
        secondMoment74.incrementAll(doubleArray86);
        double double89 = variance69.evaluate(doubleArray86);
        double double90 = secondMoment62.evaluate(doubleArray86);
        double double91 = variance1.evaluate(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2136.8055555555557d + "'", double9 == 2136.8055555555557d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2024039.120370371d + "'", double51 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 4048078.240740742d + "'", double52 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2024039.1204833984d + "'", double57 == 2024039.1204833984d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1349359.4135802474d + "'", double59 == 1349359.4135802474d);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertTrue(Double.isNaN(double91));
    }

    @Test
    public void test05708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05708");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double11 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        secondMoment9.incrementAll(doubleArray19);
        boolean boolean22 = variance2.equals((java.lang.Object) secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean31 = variance24.equals((java.lang.Object) secondMoment30);
        boolean boolean32 = secondMoment9.equals((java.lang.Object) boolean31);
        secondMoment9.clear();
        double double34 = secondMoment9.getResult();
        double double35 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment38);
        long long40 = secondMoment38.getN();
        secondMoment38.clear();
        secondMoment38.clear();
        secondMoment38.increment((double) (byte) 100);
        secondMoment38.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment38);
        variance47.increment((double) 2L);
        double double50 = variance47.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment52);
        long long54 = secondMoment52.getN();
        secondMoment52.clear();
        double double56 = secondMoment52.getResult();
        secondMoment52.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment52);
        double[] doubleArray60 = new double[] {};
        double double61 = secondMoment52.evaluate(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment52);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance64.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance68.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double74 = variance73.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double77 = variance76.getResult();
        double[] doubleArray80 = new double[] { 0L, (byte) 10 };
        double double81 = variance76.evaluate(doubleArray80);
        double double83 = variance73.evaluate(doubleArray80, (double) 10L);
        double double84 = variance71.evaluate(doubleArray80);
        double double85 = variance68.evaluate(doubleArray80);
        double double86 = variance64.evaluate(doubleArray80);
        double double87 = variance62.evaluate(doubleArray80);
        double double88 = variance47.evaluate(doubleArray80);
        // The following exception was thrown during execution in test generation
        try {
            double double91 = secondMoment9.evaluate(doubleArray80, (int) (short) 100, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
    }

    @Test
    public void test05709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05709");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment((double) 2L);
        double double8 = secondMoment1.getResult();
        secondMoment1.increment(50.0d);
        secondMoment1.clear();
        secondMoment1.clear();
        double double13 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        double[] doubleArray29 = new double[] { 0L, (byte) 10 };
        double double30 = variance25.evaluate(doubleArray29);
        double double32 = variance22.evaluate(doubleArray29, (double) 10L);
        double double33 = variance20.evaluate(doubleArray29);
        double double34 = variance15.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        double[] doubleArray40 = new double[] { 0L, (byte) 10 };
        double double41 = variance36.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray50 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double51 = variance43.evaluate(doubleArray50);
        double double52 = variance36.evaluate(doubleArray50);
        double double53 = variance15.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double61 = variance60.getResult();
        double[] doubleArray64 = new double[] { 0L, (byte) 10 };
        double double65 = variance60.evaluate(doubleArray64);
        double double67 = variance57.evaluate(doubleArray64, (double) 10L);
        double double68 = variance55.evaluate(doubleArray64);
        variance15.incrementAll(doubleArray64, (int) (byte) 0, (int) (byte) 0);
        variance15.clear();
        double double73 = variance15.getResult();
        boolean boolean74 = secondMoment1.equals((java.lang.Object) double73);
        long long75 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment77 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment77);
        double double79 = secondMoment77.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment77);
        secondMoment77.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double84 = variance83.getResult();
        double[] doubleArray87 = new double[] { 0L, (byte) 10 };
        double double88 = variance83.evaluate(doubleArray87);
        secondMoment77.incrementAll(doubleArray87);
        double double90 = secondMoment77.getResult();
        double[] doubleArray93 = new double[] { 2564.1666666667907d, 2666070.367346939d };
        double double94 = secondMoment77.evaluate(doubleArray93);
        // The following exception was thrown during execution in test generation
        try {
            double double97 = secondMoment1.evaluate(doubleArray93, (int) (short) -1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2136.8055555555557d + "'", double51 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2564.166666666667d + "'", double52 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2564.166666666667d + "'", double53 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[2564.1666666667907, 2666070.367346939]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 3.5471326405311294E12d + "'", double94 == 3.5471326405311294E12d);
    }

    @Test
    public void test05710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05710");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double9 = secondMoment0.getResult();
        secondMoment0.clear();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test05711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05711");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.clear();
        double double13 = secondMoment8.getResult();
        secondMoment8.increment(2024039.120370371d);
        long long16 = secondMoment8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
    }

    @Test
    public void test05712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05712");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        double[] doubleArray12 = new double[] { 0L, (byte) 10 };
        double double13 = variance8.evaluate(doubleArray12);
        secondMoment2.incrementAll(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.clear();
        long long17 = secondMoment2.getN();
        double double18 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        long long22 = secondMoment20.getN();
        secondMoment20.clear();
        secondMoment20.increment(10.0d);
        double double26 = secondMoment20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        double[] doubleArray37 = new double[] { 0L, (byte) 10 };
        double double38 = variance33.evaluate(doubleArray37);
        double double40 = variance30.evaluate(doubleArray37, (double) 10L);
        double double41 = variance28.evaluate(doubleArray37);
        double[] doubleArray45 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double46 = variance28.evaluate(doubleArray45);
        double double47 = secondMoment20.evaluate(doubleArray45);
        long long48 = secondMoment20.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment49);
        long long51 = secondMoment49.getN();
        secondMoment49.clear();
        double double53 = secondMoment49.getResult();
        secondMoment49.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment49);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance58.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double64 = variance63.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double67 = variance66.getResult();
        double[] doubleArray70 = new double[] { 0L, (byte) 10 };
        double double71 = variance66.evaluate(doubleArray70);
        double double73 = variance63.evaluate(doubleArray70, (double) 10L);
        double double74 = variance61.evaluate(doubleArray70);
        double double75 = variance58.evaluate(doubleArray70);
        variance56.incrementAll(doubleArray70);
        secondMoment20.incrementAll(doubleArray70);
        double double78 = secondMoment2.evaluate(doubleArray70);
        secondMoment2.increment(13860.857142857143d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double82 = secondMoment2.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2024039.120370371d + "'", double46 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 4048078.240740742d + "'", double47 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 3L + "'", long48 == 3L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.2798990144217688E8d + "'", double82 == 1.2798990144217688E8d);
    }

    @Test
    public void test05713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05713");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        boolean boolean7 = secondMoment1.equals((java.lang.Object) (byte) 0);
        double double8 = secondMoment1.getResult();
        secondMoment1.increment((double) 3L);
        long long11 = secondMoment1.getN();
        double double12 = secondMoment1.getResult();
        double double13 = secondMoment1.getResult();
        long long14 = secondMoment1.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
    }

    @Test
    public void test05714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05714");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        double double10 = secondMoment8.getResult();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        secondMoment8.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance16.increment((-1.0d));
        variance16.setBiasCorrected(false);
        boolean boolean21 = variance16.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean23 = variance16.equals((java.lang.Object) secondMoment22);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        double[] doubleArray32 = new double[] { 0L, (byte) 10 };
        double double33 = variance28.evaluate(doubleArray32);
        double double35 = variance25.evaluate(doubleArray32, (double) 10L);
        double double39 = variance16.evaluate(doubleArray32, (double) (short) 0, 0, (int) (short) 0);
        double double42 = secondMoment8.evaluate(doubleArray32, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        variance43.clear();
        long long45 = variance43.getN();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
    }

    @Test
    public void test05715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05715");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        double double22 = variance12.evaluate(doubleArray19, (double) 10L);
        double double25 = secondMoment8.evaluate(doubleArray19, (int) (short) 0, 1);
        long long26 = secondMoment8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean31 = variance29.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray40 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double41 = variance33.evaluate(doubleArray40);
        double double42 = variance29.evaluate(doubleArray40);
        java.lang.Class<?> wildcardClass43 = doubleArray40.getClass();
        boolean boolean44 = variance27.equals((java.lang.Object) wildcardClass43);
        variance27.setBiasCorrected(false);
        double double47 = variance27.getResult();
        variance27.setBiasCorrected(true);
        variance27.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment51);
        long long53 = secondMoment51.getN();
        secondMoment51.clear();
        secondMoment51.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment51);
        variance57.clear();
        double double59 = variance57.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance61.increment((-1.0d));
        variance61.setBiasCorrected(false);
        boolean boolean66 = variance61.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment67 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean68 = variance61.equals((java.lang.Object) secondMoment67);
        double double69 = secondMoment67.getResult();
        secondMoment67.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double73 = variance72.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        double[] doubleArray79 = new double[] { 0L, (byte) 10 };
        double double80 = variance75.evaluate(doubleArray79);
        double double82 = variance72.evaluate(doubleArray79, (double) 10L);
        long long83 = variance72.getN();
        variance72.increment((double) 0L);
        double[] doubleArray87 = new double[] { 10.0d };
        variance72.incrementAll(doubleArray87);
        secondMoment67.incrementAll(doubleArray87);
        double double91 = variance57.evaluate(doubleArray87, (double) 100.0f);
        double double93 = variance27.evaluate(doubleArray87, 25.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2136.8055555555557d + "'", double41 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2564.166666666667d + "'", double42 == 2564.166666666667d);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[10.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
    }

    @Test
    public void test05716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05716");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance7.increment((-1.0d));
        variance7.setBiasCorrected(false);
        boolean boolean12 = variance7.isBiasCorrected();
        double[] doubleArray13 = new double[] {};
        double double14 = variance7.evaluate(doubleArray13);
        secondMoment1.incrementAll(doubleArray13);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        variance17.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment19);
        long long21 = secondMoment19.getN();
        secondMoment19.clear();
        double double23 = secondMoment19.getResult();
        secondMoment19.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment19);
        double[] doubleArray27 = new double[] {};
        double double28 = secondMoment19.evaluate(doubleArray27);
        // The following exception was thrown during execution in test generation
        try {
            variance17.incrementAll(doubleArray27, 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
    }

    @Test
    public void test05717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05717");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment4 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment4);
        double double6 = secondMoment4.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment4);
        secondMoment4.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance10.increment((-1.0d));
        variance10.setBiasCorrected(false);
        boolean boolean15 = variance10.isBiasCorrected();
        double[] doubleArray16 = new double[] {};
        double double17 = variance10.evaluate(doubleArray16);
        secondMoment4.incrementAll(doubleArray16);
        secondMoment4.clear();
        secondMoment4.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment4);
        double double22 = secondMoment4.getResult();
        long long23 = secondMoment4.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment4);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment4);
        secondMoment4.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test05718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05718");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double2 = secondMoment0.getResult();
        secondMoment0.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        long long7 = secondMoment5.getN();
        secondMoment5.clear();
        secondMoment5.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        variance11.clear();
        double double13 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.setBiasCorrected(false);
        boolean boolean20 = variance15.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean22 = variance15.equals((java.lang.Object) secondMoment21);
        double double23 = secondMoment21.getResult();
        secondMoment21.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        double[] doubleArray33 = new double[] { 0L, (byte) 10 };
        double double34 = variance29.evaluate(doubleArray33);
        double double36 = variance26.evaluate(doubleArray33, (double) 10L);
        long long37 = variance26.getN();
        variance26.increment((double) 0L);
        double[] doubleArray41 = new double[] { 10.0d };
        variance26.incrementAll(doubleArray41);
        secondMoment21.incrementAll(doubleArray41);
        double double45 = variance11.evaluate(doubleArray41, (double) 100.0f);
        boolean boolean46 = secondMoment0.equals((java.lang.Object) 100.0f);
        secondMoment0.increment(Double.NaN);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double51 = variance50.getResult();
        double double52 = variance50.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
    }

    @Test
    public void test05719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05719");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double22 = variance14.evaluate(doubleArray21);
        double double23 = secondMoment7.evaluate(doubleArray21);
        long long24 = secondMoment7.getN();
        long long25 = secondMoment7.getN();
        long long26 = secondMoment7.getN();
        secondMoment7.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        double double30 = secondMoment7.getResult();
        double double31 = secondMoment7.getResult();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2136.8055555555557d + "'", double22 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 12820.833333333334d + "'", double23 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 6L + "'", long24 == 6L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 13349.428571428572d + "'", double30 == 13349.428571428572d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 13349.428571428572d + "'", double31 == 13349.428571428572d);
    }

    @Test
    public void test05720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05720");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance9.increment((-1.0d));
        variance9.setBiasCorrected(false);
        boolean boolean14 = variance9.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double17 = variance16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double20 = variance19.getResult();
        double[] doubleArray23 = new double[] { 0L, (byte) 10 };
        double double24 = variance19.evaluate(doubleArray23);
        double double26 = variance16.evaluate(doubleArray23, (double) 10L);
        double double27 = variance9.evaluate(doubleArray23);
        long long28 = variance9.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance30.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        double[] doubleArray42 = new double[] { 0L, (byte) 10 };
        double double43 = variance38.evaluate(doubleArray42);
        double double45 = variance35.evaluate(doubleArray42, (double) 10L);
        double double46 = variance33.evaluate(doubleArray42);
        double double47 = variance30.evaluate(doubleArray42);
        double double48 = variance9.evaluate(doubleArray42);
        boolean boolean49 = variance9.isBiasCorrected();
        double double50 = variance9.getResult();
        boolean boolean51 = variance1.equals((java.lang.Object) double50);
        variance1.increment(2024039.1203703713d);
        double[] doubleArray54 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double55 = variance1.evaluate(doubleArray54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 25.0d + "'", double27 == 25.0d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 25.0d + "'", double48 == 25.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test05721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05721");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.increment((double) 10L);
        variance1.increment((double) (short) 0);
        variance1.increment((double) 8L);
        double double8 = variance1.getResult();
        double double9 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance11.increment((-1.0d));
        variance11.setBiasCorrected(false);
        boolean boolean16 = variance11.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean18 = variance11.equals((java.lang.Object) secondMoment17);
        double double19 = variance11.getResult();
        boolean boolean20 = variance1.equals((java.lang.Object) variance11);
        long long21 = variance1.getN();
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 18.666666666666668d + "'", double8 == 18.666666666666668d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 18.666666666666668d + "'", double9 == 18.666666666666668d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3L + "'", long21 == 3L);
    }

    @Test
    public void test05722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05722");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double2 = secondMoment0.getResult();
        secondMoment0.clear();
        secondMoment0.increment(66.66666666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
    }

    @Test
    public void test05723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05723");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        secondMoment0.clear();
        long long8 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        double double12 = secondMoment10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        double double17 = secondMoment15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment15);
        secondMoment15.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double22 = variance21.getResult();
        double[] doubleArray25 = new double[] { 0L, (byte) 10 };
        double double26 = variance21.evaluate(doubleArray25);
        secondMoment15.incrementAll(doubleArray25);
        double double28 = variance13.evaluate(doubleArray25);
        double double29 = variance13.getResult();
        variance13.increment(2564.1666666030883d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        long long34 = secondMoment32.getN();
        secondMoment32.clear();
        secondMoment32.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        long long38 = variance37.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean42 = variance40.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double47 = variance46.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double50 = variance49.getResult();
        double[] doubleArray53 = new double[] { 0L, (byte) 10 };
        double double54 = variance49.evaluate(doubleArray53);
        double double56 = variance46.evaluate(doubleArray53, (double) 10L);
        double double57 = variance44.evaluate(doubleArray53);
        double[] doubleArray61 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double62 = variance44.evaluate(doubleArray61);
        double double64 = variance40.evaluate(doubleArray61, (double) (byte) 1);
        variance40.clear();
        double double66 = variance40.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double69 = variance68.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double72 = variance71.getResult();
        double[] doubleArray75 = new double[] { 0L, (byte) 10 };
        double double76 = variance71.evaluate(doubleArray75);
        double double78 = variance68.evaluate(doubleArray75, (double) 10L);
        long long79 = variance68.getN();
        variance68.increment((double) 0L);
        double[] doubleArray83 = new double[] { 10.0d };
        variance68.incrementAll(doubleArray83);
        double double85 = variance40.evaluate(doubleArray83);
        variance37.incrementAll(doubleArray83);
        double double88 = variance13.evaluate(doubleArray83, 0.0d);
        secondMoment0.incrementAll(doubleArray83, (int) (short) 1, (int) (byte) 0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 25.0d + "'", double28 == 25.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2024039.120370371d + "'", double62 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2024039.120370371d + "'", double64 == 2024039.120370371d);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
    }

    @Test
    public void test05724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05724");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        double double5 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        secondMoment1.increment(4232.0d);
        secondMoment1.clear();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test05725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05725");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        variance9.increment((double) (short) -1);
        double double13 = variance9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        double double21 = variance9.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.setBiasCorrected(false);
        boolean boolean28 = variance23.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean30 = variance23.equals((java.lang.Object) secondMoment29);
        double double31 = secondMoment29.getResult();
        secondMoment29.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        secondMoment29.increment((double) 10.0f);
        secondMoment29.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        java.lang.Object obj38 = null;
        boolean boolean39 = variance37.equals(obj38);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double41 = secondMoment40.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment42);
        long long44 = secondMoment42.getN();
        secondMoment42.clear();
        secondMoment42.clear();
        secondMoment42.increment((double) (byte) 100);
        long long49 = secondMoment42.getN();
        double[] doubleArray51 = new double[] { 2024039.1203703713d };
        double double52 = secondMoment42.evaluate(doubleArray51);
        secondMoment40.incrementAll(doubleArray51);
        variance37.incrementAll(doubleArray51);
        variance9.incrementAll(doubleArray51);
        double double57 = variance7.evaluate(doubleArray51, (double) (-1.0f));
        double double58 = variance7.getResult();
        variance7.increment((double) (short) -1);
        variance7.increment((double) 'a');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
    }

    @Test
    public void test05726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05726");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        double double5 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        secondMoment2.increment(1980.1224489795918d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test05727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05727");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        secondMoment7.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.setBiasCorrected(false);
        boolean boolean20 = variance15.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean22 = variance15.equals((java.lang.Object) secondMoment21);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        double[] doubleArray31 = new double[] { 0L, (byte) 10 };
        double double32 = variance27.evaluate(doubleArray31);
        double double34 = variance24.evaluate(doubleArray31, (double) 10L);
        double double38 = variance15.evaluate(doubleArray31, (double) (short) 0, 0, (int) (short) 0);
        double double41 = secondMoment7.evaluate(doubleArray31, 0, 0);
        long long42 = secondMoment7.getN();
        secondMoment7.increment(60.666666666666664d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
    }

    @Test
    public void test05728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05728");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double11 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        secondMoment9.increment((double) 2L);
        double double16 = secondMoment9.getResult();
        secondMoment9.increment(50.0d);
        double double19 = secondMoment9.getResult();
        long long20 = secondMoment9.getN();
        boolean boolean21 = variance7.equals((java.lang.Object) secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        variance22.increment(14205.875d);
        long long25 = variance22.getN();
        long long26 = variance22.getN();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1152.0d + "'", double19 == 1152.0d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2L + "'", long20 == 2L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2L + "'", long25 == 2L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 2L + "'", long26 == 2L);
    }

    @Test
    public void test05729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05729");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double2 = secondMoment1.getResult();
        long long3 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance5.increment((-1.0d));
        variance5.setBiasCorrected(false);
        boolean boolean10 = variance5.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean12 = variance5.equals((java.lang.Object) secondMoment11);
        secondMoment11.increment((double) (short) 0);
        secondMoment11.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray25 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double26 = variance18.evaluate(doubleArray25);
        double double27 = secondMoment11.evaluate(doubleArray25);
        long long28 = secondMoment11.getN();
        long long29 = secondMoment11.getN();
        secondMoment11.clear();
        double double31 = secondMoment11.getResult();
        secondMoment11.clear();
        boolean boolean33 = secondMoment1.equals((java.lang.Object) secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance35.increment((-1.0d));
        variance35.setBiasCorrected(false);
        boolean boolean40 = variance35.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        double[] doubleArray49 = new double[] { 0L, (byte) 10 };
        double double50 = variance45.evaluate(doubleArray49);
        double double52 = variance42.evaluate(doubleArray49, (double) 10L);
        double double53 = variance35.evaluate(doubleArray49);
        variance35.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray64 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double65 = variance57.evaluate(doubleArray64);
        double double66 = variance35.evaluate(doubleArray64);
        java.lang.Class<?> wildcardClass67 = doubleArray64.getClass();
        boolean boolean68 = secondMoment11.equals((java.lang.Object) wildcardClass67);
        double double69 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment11);
        secondMoment11.clear();
        secondMoment11.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2136.8055555555557d + "'", double26 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 12820.833333333334d + "'", double27 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 6L + "'", long28 == 6L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 6L + "'", long29 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 25.0d + "'", double53 == 25.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2136.8055555555557d + "'", double65 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 2136.8055555555557d + "'", double66 == 2136.8055555555557d);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
    }

    @Test
    public void test05730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05730");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        double double20 = variance10.evaluate(doubleArray17, (double) 10L);
        double double21 = variance8.evaluate(doubleArray17);
        double double22 = variance3.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        double[] doubleArray28 = new double[] { 0L, (byte) 10 };
        double double29 = variance24.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double39 = variance31.evaluate(doubleArray38);
        double double40 = variance24.evaluate(doubleArray38);
        double double41 = variance3.evaluate(doubleArray38);
        double double42 = secondMoment0.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.increment((-1.0d));
        variance44.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        double[] doubleArray58 = new double[] { 0L, (byte) 10 };
        double double59 = variance54.evaluate(doubleArray58);
        double double61 = variance51.evaluate(doubleArray58, (double) 10L);
        double double62 = variance49.evaluate(doubleArray58);
        double double63 = variance44.evaluate(doubleArray58);
        double double64 = secondMoment0.evaluate(doubleArray58);
        long long65 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long67 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment((double) 100.0f);
        secondMoment0.increment((double) 13L);
        double double73 = secondMoment0.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2136.8055555555557d + "'", double39 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2564.166666666667d + "'", double40 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2564.166666666667d + "'", double41 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 12820.833333333334d + "'", double42 == 12820.833333333334d);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 2L + "'", long65 == 2L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 2L + "'", long67 == 2L);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 3784.5d + "'", double73 == 3784.5d);
    }

    @Test
    public void test05731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05731");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance6.clear();
        variance6.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        long long11 = secondMoment9.getN();
        secondMoment9.clear();
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        variance17.setBiasCorrected(false);
        boolean boolean22 = variance17.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean24 = variance17.equals((java.lang.Object) secondMoment23);
        double double25 = secondMoment23.getResult();
        secondMoment23.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance29.increment((-1.0d));
        variance29.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        double[] doubleArray43 = new double[] { 0L, (byte) 10 };
        double double44 = variance39.evaluate(doubleArray43);
        double double46 = variance36.evaluate(doubleArray43, (double) 10L);
        double double47 = variance34.evaluate(doubleArray43);
        double double48 = variance29.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        double[] doubleArray54 = new double[] { 0L, (byte) 10 };
        double double55 = variance50.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray64 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double65 = variance57.evaluate(doubleArray64);
        double double66 = variance50.evaluate(doubleArray64);
        double double67 = variance29.evaluate(doubleArray64);
        double double68 = variance27.evaluate(doubleArray64);
        variance14.incrementAll(doubleArray64);
        double double70 = variance6.evaluate(doubleArray64);
        double double71 = variance6.getResult();
        variance6.clear();
        variance6.increment((double) (short) 0);
        variance6.increment((double) (byte) 10);
        long long77 = variance6.getN();
        double double78 = variance6.getResult();
        variance6.clear();
        variance6.setBiasCorrected(false);
        boolean boolean82 = variance6.isBiasCorrected();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2136.8055555555557d + "'", double65 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 2564.166666666667d + "'", double66 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2564.166666666667d + "'", double67 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 2136.8055555555557d + "'", double68 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2564.166666666667d + "'", double70 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test05732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05732");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance6.clear();
        variance6.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        long long11 = secondMoment9.getN();
        secondMoment9.clear();
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        variance17.setBiasCorrected(false);
        boolean boolean22 = variance17.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean24 = variance17.equals((java.lang.Object) secondMoment23);
        double double25 = secondMoment23.getResult();
        secondMoment23.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance29.increment((-1.0d));
        variance29.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        double[] doubleArray43 = new double[] { 0L, (byte) 10 };
        double double44 = variance39.evaluate(doubleArray43);
        double double46 = variance36.evaluate(doubleArray43, (double) 10L);
        double double47 = variance34.evaluate(doubleArray43);
        double double48 = variance29.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        double[] doubleArray54 = new double[] { 0L, (byte) 10 };
        double double55 = variance50.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray64 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double65 = variance57.evaluate(doubleArray64);
        double double66 = variance50.evaluate(doubleArray64);
        double double67 = variance29.evaluate(doubleArray64);
        double double68 = variance27.evaluate(doubleArray64);
        variance14.incrementAll(doubleArray64);
        double double70 = variance6.evaluate(doubleArray64);
        double double71 = variance6.getResult();
        long long72 = variance6.getN();
        variance6.setBiasCorrected(false);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2136.8055555555557d + "'", double65 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 2564.166666666667d + "'", double66 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2564.166666666667d + "'", double67 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 2136.8055555555557d + "'", double68 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2564.166666666667d + "'", double70 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
    }

    @Test
    public void test05733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05733");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        double double6 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        double double20 = variance10.evaluate(doubleArray17, (double) 10L);
        double double21 = variance8.evaluate(doubleArray17);
        double[] doubleArray25 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double26 = variance8.evaluate(doubleArray25);
        double double27 = secondMoment0.evaluate(doubleArray25);
        long long28 = secondMoment0.getN();
        long long29 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.clear();
        double double32 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.setBiasCorrected(false);
        boolean boolean39 = variance34.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        double[] doubleArray48 = new double[] { 0L, (byte) 10 };
        double double49 = variance44.evaluate(doubleArray48);
        double double51 = variance41.evaluate(doubleArray48, (double) 10L);
        double double52 = variance34.evaluate(doubleArray48);
        variance34.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray63 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double64 = variance56.evaluate(doubleArray63);
        double double65 = variance34.evaluate(doubleArray63);
        double double66 = secondMoment0.evaluate(doubleArray63);
        long long67 = secondMoment0.getN();
        java.lang.Class<?> wildcardClass68 = secondMoment0.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2024039.120370371d + "'", double26 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 4048078.240740742d + "'", double27 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 3L + "'", long28 == 3L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 3L + "'", long29 == 3L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 25.0d + "'", double52 == 25.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2136.8055555555557d + "'", double64 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2136.8055555555557d + "'", double65 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 12820.833333333334d + "'", double66 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 6L + "'", long67 == 6L);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test05734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05734");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        double double5 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        secondMoment2.increment(1980.1224489795918d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        secondMoment2.clear();
        secondMoment2.clear();
        double double12 = secondMoment2.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test05735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05735");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        long long8 = secondMoment6.getN();
        secondMoment6.clear();
        double double10 = secondMoment6.getResult();
        secondMoment6.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        double[] doubleArray14 = new double[] {};
        double double15 = secondMoment6.evaluate(doubleArray14);
        secondMoment0.incrementAll(doubleArray14);
        long long17 = secondMoment0.getN();
        secondMoment0.increment(0.0d);
        secondMoment0.clear();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        long long25 = secondMoment23.getN();
        secondMoment23.clear();
        secondMoment23.clear();
        double double28 = secondMoment23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean33 = variance31.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        double[] doubleArray44 = new double[] { 0L, (byte) 10 };
        double double45 = variance40.evaluate(doubleArray44);
        double double47 = variance37.evaluate(doubleArray44, (double) 10L);
        double double48 = variance35.evaluate(doubleArray44);
        double[] doubleArray52 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double53 = variance35.evaluate(doubleArray52);
        double double55 = variance31.evaluate(doubleArray52, (double) (byte) 1);
        variance31.clear();
        double double57 = variance31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double60 = variance59.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double63 = variance62.getResult();
        double[] doubleArray66 = new double[] { 0L, (byte) 10 };
        double double67 = variance62.evaluate(doubleArray66);
        double double69 = variance59.evaluate(doubleArray66, (double) 10L);
        long long70 = variance59.getN();
        variance59.increment((double) 0L);
        double[] doubleArray74 = new double[] { 10.0d };
        variance59.incrementAll(doubleArray74);
        double double76 = variance31.evaluate(doubleArray74);
        variance29.incrementAll(doubleArray74);
        secondMoment0.incrementAll(doubleArray74);
        long long79 = secondMoment0.getN();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2024039.120370371d + "'", double53 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2024039.120370371d + "'", double55 == 2024039.120370371d);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1L + "'", long79 == 1L);
    }

    @Test
    public void test05736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05736");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = secondMoment8.evaluate(doubleArray22);
        long long25 = secondMoment8.getN();
        long long26 = secondMoment8.getN();
        secondMoment8.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        secondMoment8.clear();
        long long32 = secondMoment8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 12820.833333333334d + "'", double24 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test05737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05737");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double[] doubleArray5 = new double[] { 0L, (byte) 10 };
        double double6 = variance1.evaluate(doubleArray5);
        variance1.clear();
        variance1.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        long long13 = secondMoment11.getN();
        secondMoment11.clear();
        double double15 = secondMoment11.getResult();
        secondMoment11.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        double[] doubleArray19 = new double[] {};
        double double20 = secondMoment11.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance27.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        double[] doubleArray39 = new double[] { 0L, (byte) 10 };
        double double40 = variance35.evaluate(doubleArray39);
        double double42 = variance32.evaluate(doubleArray39, (double) 10L);
        double double43 = variance30.evaluate(doubleArray39);
        double double44 = variance27.evaluate(doubleArray39);
        double double45 = variance23.evaluate(doubleArray39);
        double double46 = variance21.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance48.increment((-1.0d));
        variance48.setBiasCorrected(false);
        boolean boolean53 = variance48.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean55 = variance48.equals((java.lang.Object) secondMoment54);
        double double56 = secondMoment54.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double59 = variance58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        double[] doubleArray65 = new double[] { 0L, (byte) 10 };
        double double66 = variance61.evaluate(doubleArray65);
        double double68 = variance58.evaluate(doubleArray65, (double) 10L);
        double double71 = secondMoment54.evaluate(doubleArray65, (int) (short) 0, 1);
        double double72 = variance21.evaluate(doubleArray65);
        // The following exception was thrown during execution in test generation
        try {
            double double75 = variance1.evaluate(doubleArray65, (int) (short) 1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.0d + "'", double6 == 50.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
    }

    @Test
    public void test05738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05738");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
    }

    @Test
    public void test05739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05739");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        secondMoment8.incrementAll(doubleArray18);
        boolean boolean21 = variance1.equals((java.lang.Object) secondMoment8);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        double double26 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment24);
        secondMoment24.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        double[] doubleArray34 = new double[] { 0L, (byte) 10 };
        double double35 = variance30.evaluate(doubleArray34);
        secondMoment24.incrementAll(doubleArray34);
        double double37 = variance1.evaluate(doubleArray34);
        variance1.clear();
        long long39 = variance1.getN();
        boolean boolean40 = variance1.isBiasCorrected();
        double double41 = variance1.getResult();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 25.0d + "'", double37 == 25.0d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
    }

    @Test
    public void test05740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05740");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        secondMoment2.increment((double) 2L);
        double double9 = secondMoment2.getResult();
        secondMoment2.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        double double13 = secondMoment2.getResult();
        secondMoment2.clear();
        secondMoment2.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1152.0d + "'", double13 == 1152.0d);
    }

    @Test
    public void test05741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05741");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        double[] doubleArray11 = new double[] { 0L, (byte) 10 };
        double double12 = variance7.evaluate(doubleArray11);
        secondMoment1.incrementAll(doubleArray11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        long long16 = secondMoment1.getN();
        double double17 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment((double) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment((double) 8L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test05742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05742");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.increment((double) (byte) 100);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment(2024039.12109375d);
        secondMoment1.clear();
        secondMoment1.increment((double) 8L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        long long17 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        variance18.setBiasCorrected(true);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
    }

    @Test
    public void test05743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05743");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double[] doubleArray5 = new double[] { 0L, (byte) 10 };
        double double6 = variance1.evaluate(doubleArray5);
        double double7 = variance1.getResult();
        variance1.increment(1349359.4135802474d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray18 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double19 = variance11.evaluate(doubleArray18);
        double double20 = variance1.evaluate(doubleArray18);
        long long21 = variance1.getN();
        java.lang.Class<?> wildcardClass22 = variance1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.0d + "'", double6 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2136.8055555555557d + "'", double19 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 2564.166666666667d + "'", double20 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test05744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05744");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        long long10 = secondMoment8.getN();
        secondMoment8.clear();
        secondMoment8.clear();
        secondMoment8.increment((double) (byte) 100);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double20 = variance19.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        double[] doubleArray26 = new double[] { 0L, (byte) 10 };
        double double27 = variance22.evaluate(doubleArray26);
        double double29 = variance19.evaluate(doubleArray26, (double) 10L);
        double double30 = variance17.evaluate(doubleArray26);
        double[] doubleArray34 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double35 = variance17.evaluate(doubleArray34);
        double double36 = secondMoment8.evaluate(doubleArray34);
        double double39 = secondMoment2.evaluate(doubleArray34, 0, (int) (short) 1);
        long long40 = secondMoment2.getN();
        secondMoment2.increment(2564.166666666667d);
        double double43 = secondMoment2.getResult();
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        long long47 = secondMoment2.getN();
        secondMoment2.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 2024039.120370371d + "'", double35 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 4048078.240740742d + "'", double36 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
    }

    @Test
    public void test05745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05745");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean9 = variance7.equals((java.lang.Object) (short) 10);
        boolean boolean10 = variance1.equals((java.lang.Object) variance7);
        long long11 = variance7.getN();
        variance7.setBiasCorrected(false);
        variance7.increment(227.2998046875d);
        variance7.increment(2550.25d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        long long20 = secondMoment18.getN();
        secondMoment18.clear();
        secondMoment18.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        variance24.clear();
        double double26 = variance24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance28.increment((-1.0d));
        variance28.setBiasCorrected(false);
        boolean boolean33 = variance28.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean35 = variance28.equals((java.lang.Object) secondMoment34);
        double double36 = secondMoment34.getResult();
        secondMoment34.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        double[] doubleArray46 = new double[] { 0L, (byte) 10 };
        double double47 = variance42.evaluate(doubleArray46);
        double double49 = variance39.evaluate(doubleArray46, (double) 10L);
        long long50 = variance39.getN();
        variance39.increment((double) 0L);
        double[] doubleArray54 = new double[] { 10.0d };
        variance39.incrementAll(doubleArray54);
        secondMoment34.incrementAll(doubleArray54);
        double double58 = variance24.evaluate(doubleArray54, (double) 100.0f);
        variance24.setBiasCorrected(true);
        long long61 = variance24.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double64 = variance63.getResult();
        long long65 = variance63.getN();
        variance63.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance69.increment((-1.0d));
        variance69.setBiasCorrected(false);
        boolean boolean74 = variance69.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double77 = variance76.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double80 = variance79.getResult();
        double[] doubleArray83 = new double[] { 0L, (byte) 10 };
        double double84 = variance79.evaluate(doubleArray83);
        double double86 = variance76.evaluate(doubleArray83, (double) 10L);
        double double87 = variance69.evaluate(doubleArray83);
        variance63.incrementAll(doubleArray83);
        double double89 = variance24.evaluate(doubleArray83);
        double double90 = variance7.evaluate(doubleArray83);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 25.0d + "'", double87 == 25.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 25.0d + "'", double90 == 25.0d);
    }

    @Test
    public void test05746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05746");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        double double5 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        secondMoment3.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double10 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        long long13 = secondMoment11.getN();
        secondMoment11.clear();
        secondMoment11.clear();
        secondMoment11.increment((double) (byte) 100);
        long long18 = secondMoment11.getN();
        double[] doubleArray20 = new double[] { 2024039.1203703713d };
        double double21 = secondMoment11.evaluate(doubleArray20);
        secondMoment9.incrementAll(doubleArray20);
        double double23 = secondMoment3.evaluate(doubleArray20);
        secondMoment3.increment((double) (short) -1);
        secondMoment3.increment(25.00000011920929d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        secondMoment3.increment(10.0d);
        java.lang.Object obj31 = null;
        boolean boolean32 = secondMoment3.equals(obj31);
        secondMoment3.increment(5011295.755555557d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        double double36 = variance35.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.862107293419005E12d + "'", double36 == 3.862107293419005E12d);
    }

    @Test
    public void test05747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05747");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        double[] doubleArray21 = new double[] { 0L, (byte) 10 };
        double double22 = variance17.evaluate(doubleArray21);
        double double24 = variance14.evaluate(doubleArray21, (double) 10L);
        double double25 = variance12.evaluate(doubleArray21);
        double double26 = variance9.evaluate(doubleArray21);
        variance7.incrementAll(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance29.increment((-1.0d));
        variance29.setBiasCorrected(false);
        boolean boolean34 = variance29.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment36);
        double double38 = secondMoment36.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment36);
        secondMoment36.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        double[] doubleArray46 = new double[] { 0L, (byte) 10 };
        double double47 = variance42.evaluate(doubleArray46);
        secondMoment36.incrementAll(doubleArray46);
        boolean boolean49 = variance29.equals((java.lang.Object) secondMoment36);
        boolean boolean50 = variance7.equals((java.lang.Object) variance29);
        variance7.clear();
        variance7.setBiasCorrected(false);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test05748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05748");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        long long5 = secondMoment3.getN();
        secondMoment3.clear();
        secondMoment3.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        long long11 = secondMoment9.getN();
        secondMoment9.clear();
        double double13 = secondMoment9.getResult();
        secondMoment9.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double[] doubleArray17 = new double[] {};
        double double18 = secondMoment9.evaluate(doubleArray17);
        secondMoment3.incrementAll(doubleArray17);
        secondMoment3.increment((double) (-1L));
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        long long23 = secondMoment3.getN();
        double double24 = secondMoment3.getResult();
        secondMoment3.clear();
        double double26 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment3);
        secondMoment3.increment(1960442.4564764681d);
        long long31 = secondMoment3.getN();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2L + "'", long23 == 2L);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 60.5d + "'", double24 == 60.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
    }

    @Test
    public void test05749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05749");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.increment((double) (byte) 100);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment(2136.805555555555d);
        secondMoment1.clear();
        secondMoment1.increment(1557016.8402777782d);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance16.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance19.increment((-1.0d));
        variance19.setBiasCorrected(false);
        boolean boolean24 = variance19.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean26 = variance19.equals((java.lang.Object) secondMoment25);
        double double27 = secondMoment25.getResult();
        secondMoment25.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment25);
        secondMoment25.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance33.increment((-1.0d));
        variance33.setBiasCorrected(false);
        boolean boolean38 = variance33.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean40 = variance33.equals((java.lang.Object) secondMoment39);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        double[] doubleArray49 = new double[] { 0L, (byte) 10 };
        double double50 = variance45.evaluate(doubleArray49);
        double double52 = variance42.evaluate(doubleArray49, (double) 10L);
        double double56 = variance33.evaluate(doubleArray49, (double) (short) 0, 0, (int) (short) 0);
        double double59 = secondMoment25.evaluate(doubleArray49, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            variance16.incrementAll(doubleArray49, (int) '4', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
    }

    @Test
    public void test05750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05750");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance5.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        double double20 = variance10.evaluate(doubleArray17, (double) 10L);
        double double21 = variance8.evaluate(doubleArray17);
        double double22 = variance5.evaluate(doubleArray17);
        double double23 = variance1.evaluate(doubleArray17);
        variance1.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
    }

    @Test
    public void test05751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05751");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double9 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        long long12 = secondMoment10.getN();
        secondMoment10.clear();
        secondMoment10.clear();
        secondMoment10.increment((double) (byte) 100);
        long long17 = secondMoment10.getN();
        double[] doubleArray19 = new double[] { 2024039.1203703713d };
        double double20 = secondMoment10.evaluate(doubleArray19);
        secondMoment8.incrementAll(doubleArray19);
        double double22 = secondMoment2.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        variance24.increment(1.4631541463478633E13d);
        variance24.increment(1.41665254437524E11d);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    }

    @Test
    public void test05752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05752");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double2 = secondMoment1.getResult();
        double double3 = secondMoment1.getResult();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance7.increment((-1.0d));
        variance7.setBiasCorrected(false);
        boolean boolean12 = variance7.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean14 = variance7.equals((java.lang.Object) secondMoment13);
        boolean boolean15 = variance7.isBiasCorrected();
        long long16 = variance7.getN();
        variance7.increment(18.666666666666668d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        long long23 = variance20.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance28.increment((-1.0d));
        variance28.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        double[] doubleArray42 = new double[] { 0L, (byte) 10 };
        double double43 = variance38.evaluate(doubleArray42);
        double double45 = variance35.evaluate(doubleArray42, (double) 10L);
        double double46 = variance33.evaluate(doubleArray42);
        double double47 = variance28.evaluate(doubleArray42);
        variance26.incrementAll(doubleArray42);
        variance24.incrementAll(doubleArray42);
        double double50 = variance20.evaluate(doubleArray42);
        long long51 = variance20.getN();
        double double52 = variance20.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment53);
        long long55 = secondMoment53.getN();
        secondMoment53.clear();
        secondMoment53.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment53);
        variance59.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment61);
        long long63 = secondMoment61.getN();
        secondMoment61.clear();
        secondMoment61.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment61);
        variance67.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean73 = variance71.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray82 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double83 = variance75.evaluate(doubleArray82);
        double double84 = variance71.evaluate(doubleArray82);
        double double86 = variance67.evaluate(doubleArray82, (double) 1.0f);
        double double87 = variance59.evaluate(doubleArray82);
        double double89 = variance20.evaluate(doubleArray82, 26761.69230769231d);
        double double90 = variance7.evaluate(doubleArray82);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment1.incrementAll(doubleArray82, 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2136.8055555555557d + "'", double83 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2564.166666666667d + "'", double84 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2136.805555555555d + "'", double86 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 2564.166666666667d + "'", double87 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 2564.1666666030883d + "'", double89 == 2564.1666666030883d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 2136.8055555555557d + "'", double90 == 2136.8055555555557d);
    }

    @Test
    public void test05753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05753");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance8.increment((-1.0d));
        variance8.setBiasCorrected(false);
        boolean boolean13 = variance8.isBiasCorrected();
        double[] doubleArray14 = new double[] {};
        double double15 = variance8.evaluate(doubleArray14);
        secondMoment2.incrementAll(doubleArray14);
        secondMoment2.increment(1349359.4135802984d);
        double double19 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        long long21 = variance20.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
    }

    @Test
    public void test05754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05754");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        double[] doubleArray8 = new double[] { 0L, (byte) 10 };
        double double9 = variance4.evaluate(doubleArray8);
        double double11 = variance1.evaluate(doubleArray8, (double) 10L);
        long long12 = variance1.getN();
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        long long18 = secondMoment16.getN();
        secondMoment16.clear();
        secondMoment16.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        long long24 = secondMoment22.getN();
        secondMoment22.clear();
        double double26 = secondMoment22.getResult();
        secondMoment22.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        double[] doubleArray30 = new double[] {};
        double double31 = secondMoment22.evaluate(doubleArray30);
        secondMoment16.incrementAll(doubleArray30);
        secondMoment16.increment((double) (-1L));
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment16);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double44 = variance43.getResult();
        double[] doubleArray47 = new double[] { 0L, (byte) 10 };
        double double48 = variance43.evaluate(doubleArray47);
        double double50 = variance40.evaluate(doubleArray47, (double) 10L);
        double double51 = variance38.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance53.increment((-1.0d));
        variance53.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double61 = variance60.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double64 = variance63.getResult();
        double[] doubleArray67 = new double[] { 0L, (byte) 10 };
        double double68 = variance63.evaluate(doubleArray67);
        double double70 = variance60.evaluate(doubleArray67, (double) 10L);
        double double71 = variance58.evaluate(doubleArray67);
        double double72 = variance53.evaluate(doubleArray67);
        double double73 = variance38.evaluate(doubleArray67);
        secondMoment16.incrementAll(doubleArray67);
        double double75 = variance1.evaluate(doubleArray67);
        variance1.increment(2224.904761904762d);
        long long78 = variance1.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.0d + "'", double9 == 50.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 25.0d + "'", double75 == 25.0d);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1L + "'", long78 == 1L);
    }

    @Test
    public void test05755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05755");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment4 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment4);
        long long6 = secondMoment4.getN();
        secondMoment4.clear();
        secondMoment4.clear();
        secondMoment4.increment((double) (byte) 100);
        secondMoment4.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment4);
        secondMoment4.clear();
        secondMoment4.increment(2024039.12109375d);
        secondMoment4.clear();
        secondMoment4.increment((double) 8L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment4);
        double double20 = variance19.getResult();
        variance19.setBiasCorrected(false);
        boolean boolean23 = variance19.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance25.increment((-1.0d));
        variance25.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        double[] doubleArray39 = new double[] { 0L, (byte) 10 };
        double double40 = variance35.evaluate(doubleArray39);
        double double42 = variance32.evaluate(doubleArray39, (double) 10L);
        double double43 = variance30.evaluate(doubleArray39);
        double double44 = variance25.evaluate(doubleArray39);
        boolean boolean45 = variance25.isBiasCorrected();
        double double46 = variance25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance48.increment((-1.0d));
        variance48.setBiasCorrected(false);
        boolean boolean53 = variance48.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment55);
        double double57 = secondMoment55.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment55);
        secondMoment55.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        double[] doubleArray65 = new double[] { 0L, (byte) 10 };
        double double66 = variance61.evaluate(doubleArray65);
        secondMoment55.incrementAll(doubleArray65);
        boolean boolean68 = variance48.equals((java.lang.Object) secondMoment55);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment70 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment70);
        double double72 = secondMoment70.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment70);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment75 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment75);
        double double77 = secondMoment75.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment75);
        secondMoment75.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double82 = variance81.getResult();
        double[] doubleArray85 = new double[] { 0L, (byte) 10 };
        double double86 = variance81.evaluate(doubleArray85);
        secondMoment75.incrementAll(doubleArray85);
        double double88 = variance73.evaluate(doubleArray85);
        double double89 = secondMoment55.evaluate(doubleArray85);
        variance25.incrementAll(doubleArray85);
        variance19.incrementAll(doubleArray85);
        // The following exception was thrown during execution in test generation
        try {
            double double95 = variance2.evaluate(doubleArray85, 6049.698412698411d, (-1), (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 25.0d + "'", double88 == 25.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
    }

    @Test
    public void test05756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05756");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.increment(50.0d);
        secondMoment2.clear();
        double double9 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test05757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05757");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        double[] doubleArray8 = new double[] { 0L, (byte) 10 };
        double double9 = variance4.evaluate(doubleArray8);
        double double11 = variance1.evaluate(doubleArray8, (double) 10L);
        long long12 = variance1.getN();
        variance1.increment(0.0d);
        variance1.increment(1349359.4140625d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double22 = variance21.getResult();
        double[] doubleArray25 = new double[] { 0L, (byte) 10 };
        double double26 = variance21.evaluate(doubleArray25);
        double double28 = variance18.evaluate(doubleArray25, (double) 10L);
        long long29 = variance18.getN();
        variance18.increment((double) 0L);
        long long32 = variance18.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance35.increment((-1.0d));
        variance35.setBiasCorrected(false);
        boolean boolean40 = variance35.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean42 = variance35.equals((java.lang.Object) secondMoment41);
        double double43 = secondMoment41.getResult();
        secondMoment41.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment41);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance47.increment((-1.0d));
        variance47.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        double[] doubleArray61 = new double[] { 0L, (byte) 10 };
        double double62 = variance57.evaluate(doubleArray61);
        double double64 = variance54.evaluate(doubleArray61, (double) 10L);
        double double65 = variance52.evaluate(doubleArray61);
        double double66 = variance47.evaluate(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double69 = variance68.getResult();
        double[] doubleArray72 = new double[] { 0L, (byte) 10 };
        double double73 = variance68.evaluate(doubleArray72);
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray82 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double83 = variance75.evaluate(doubleArray82);
        double double84 = variance68.evaluate(doubleArray82);
        double double85 = variance47.evaluate(doubleArray82);
        double double86 = variance45.evaluate(doubleArray82);
        double double88 = variance18.evaluate(doubleArray82, (double) (byte) 1);
        double double91 = variance1.evaluate(doubleArray82, (int) (short) 0, 1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.0d + "'", double9 == 50.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2136.8055555555557d + "'", double83 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2564.166666666667d + "'", double84 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2564.166666666667d + "'", double85 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2136.8055555555557d + "'", double86 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 2564.1666666666665d + "'", double88 == 2564.1666666666665d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
    }

    @Test
    public void test05758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05758");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double11 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        secondMoment9.incrementAll(doubleArray19);
        boolean boolean22 = variance2.equals((java.lang.Object) secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean31 = variance24.equals((java.lang.Object) secondMoment30);
        boolean boolean32 = secondMoment9.equals((java.lang.Object) boolean31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.setBiasCorrected(false);
        boolean boolean39 = variance34.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean41 = variance34.equals((java.lang.Object) secondMoment40);
        secondMoment40.increment((double) (short) 0);
        secondMoment40.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray54 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double55 = variance47.evaluate(doubleArray54);
        double double56 = secondMoment40.evaluate(doubleArray54);
        double double57 = secondMoment9.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance59.increment((-1.0d));
        variance59.setBiasCorrected(false);
        variance59.increment((double) 100L);
        boolean boolean66 = variance59.isBiasCorrected();
        variance59.clear();
        double double68 = variance59.getResult();
        boolean boolean69 = secondMoment9.equals((java.lang.Object) double68);
        long long70 = secondMoment9.getN();
        double double71 = secondMoment9.getResult();
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2136.8055555555557d + "'", double55 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 12820.833333333334d + "'", double56 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 12820.833333333334d + "'", double57 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 6L + "'", long70 == 6L);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 12820.833333333334d + "'", double71 == 12820.833333333334d);
    }

    @Test
    public void test05759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05759");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.increment((double) (byte) 100);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment(2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance13.clear();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test05760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05760");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        secondMoment8.incrementAll(doubleArray18);
        boolean boolean21 = variance1.equals((java.lang.Object) secondMoment8);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean31 = variance24.equals((java.lang.Object) secondMoment30);
        variance24.increment((double) 100L);
        variance24.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        double[] doubleArray46 = new double[] { 0L, (byte) 10 };
        double double47 = variance42.evaluate(doubleArray46);
        double double49 = variance39.evaluate(doubleArray46, (double) 10L);
        double double50 = variance37.evaluate(doubleArray46);
        double[] doubleArray54 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double55 = variance37.evaluate(doubleArray54);
        variance24.incrementAll(doubleArray54);
        variance1.incrementAll(doubleArray54);
        variance1.setBiasCorrected(false);
        variance1.increment(0.0d);
        variance1.increment(7682.505380868912d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2024039.120370371d + "'", double55 == 2024039.120370371d);
    }

    @Test
    public void test05761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05761");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        double[] doubleArray8 = new double[] { 0L, (byte) 10 };
        double double9 = variance4.evaluate(doubleArray8);
        double double11 = variance1.evaluate(doubleArray8, (double) 10L);
        long long12 = variance1.getN();
        double double13 = variance1.getResult();
        double double14 = variance1.getResult();
        variance1.clear();
        boolean boolean16 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double22 = variance21.getResult();
        double[] doubleArray25 = new double[] { 0L, (byte) 10 };
        double double26 = variance21.evaluate(doubleArray25);
        double double28 = variance18.evaluate(doubleArray25, (double) 10L);
        long long29 = variance18.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance31.increment((-1.0d));
        variance31.setBiasCorrected(false);
        boolean boolean36 = variance31.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        double[] doubleArray45 = new double[] { 0L, (byte) 10 };
        double double46 = variance41.evaluate(doubleArray45);
        double double48 = variance38.evaluate(doubleArray45, (double) 10L);
        double double49 = variance31.evaluate(doubleArray45);
        variance18.incrementAll(doubleArray45, (int) (short) 0, (int) (byte) 1);
        double double53 = variance1.evaluate(doubleArray45);
        variance1.increment(2837.555555555555d);
        long long56 = variance1.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.0d + "'", double9 == 50.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 25.0d + "'", double49 == 25.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
    }

    @Test
    public void test05762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05762");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance7.increment((-1.0d));
        variance7.setBiasCorrected(false);
        boolean boolean12 = variance7.isBiasCorrected();
        double[] doubleArray13 = new double[] {};
        double double14 = variance7.evaluate(doubleArray13);
        secondMoment1.incrementAll(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        variance16.clear();
        variance16.setBiasCorrected(true);
        variance16.increment((double) 2L);
        double double22 = variance16.getResult();
        double double23 = variance16.getResult();
        long long24 = variance16.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test05763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05763");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        double double4 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance7.increment((-1.0d));
        variance7.setBiasCorrected(false);
        variance7.increment((double) 100L);
        boolean boolean14 = variance7.isBiasCorrected();
        variance7.clear();
        long long16 = variance7.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double18 = secondMoment17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        double[] doubleArray34 = new double[] { 0L, (byte) 10 };
        double double35 = variance30.evaluate(doubleArray34);
        double double37 = variance27.evaluate(doubleArray34, (double) 10L);
        double double38 = variance25.evaluate(doubleArray34);
        double double39 = variance20.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        double[] doubleArray45 = new double[] { 0L, (byte) 10 };
        double double46 = variance41.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray55 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double56 = variance48.evaluate(doubleArray55);
        double double57 = variance41.evaluate(doubleArray55);
        double double58 = variance20.evaluate(doubleArray55);
        double double59 = secondMoment17.evaluate(doubleArray55);
        double double60 = variance7.evaluate(doubleArray55);
        double double61 = variance1.evaluate(doubleArray55);
        java.lang.Class<?> wildcardClass62 = variance1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2136.8055555555557d + "'", double56 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2564.166666666667d + "'", double57 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2564.166666666667d + "'", double58 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 12820.833333333334d + "'", double59 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2136.8055555555557d + "'", double60 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2564.166666666667d + "'", double61 == 2564.166666666667d);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test05764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05764");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double24 = secondMoment7.evaluate(doubleArray18, (int) (short) 0, 1);
        secondMoment7.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance28.increment((-1.0d));
        variance28.setBiasCorrected(false);
        boolean boolean33 = variance28.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean35 = variance28.equals((java.lang.Object) secondMoment34);
        long long36 = secondMoment34.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance38.increment((-1.0d));
        variance38.setBiasCorrected(false);
        variance38.increment((double) 100L);
        boolean boolean45 = variance38.isBiasCorrected();
        boolean boolean46 = variance38.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray55 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double56 = variance48.evaluate(doubleArray55);
        double double58 = variance38.evaluate(doubleArray55, (double) (byte) 10);
        secondMoment34.incrementAll(doubleArray55);
        double double60 = secondMoment7.evaluate(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment62);
        double double64 = secondMoment62.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment62);
        secondMoment62.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance68.increment((-1.0d));
        variance68.setBiasCorrected(false);
        boolean boolean73 = variance68.isBiasCorrected();
        double[] doubleArray74 = new double[] {};
        double double75 = variance68.evaluate(doubleArray74);
        secondMoment62.incrementAll(doubleArray74);
        double double77 = secondMoment7.evaluate(doubleArray74);
        secondMoment7.clear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2136.8055555555557d + "'", double56 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2136.8055555555557d + "'", double58 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 12820.833333333334d + "'", double60 == 12820.833333333334d);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 12820.833333333334d + "'", double77 == 12820.833333333334d);
    }

    @Test
    public void test05765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05765");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.increment((double) (byte) 100);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment(2024039.12109375d);
        secondMoment1.clear();
        secondMoment1.increment((double) 8L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double double17 = variance16.getResult();
        variance16.setBiasCorrected(false);
        boolean boolean20 = variance16.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.setBiasCorrected(false);
        boolean boolean28 = variance23.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean30 = variance23.equals((java.lang.Object) secondMoment29);
        secondMoment29.increment((double) (short) 0);
        secondMoment29.increment((double) 1.0f);
        double double35 = secondMoment29.getResult();
        long long36 = secondMoment29.getN();
        double double37 = secondMoment29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment29);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        long long41 = secondMoment39.getN();
        secondMoment39.clear();
        secondMoment39.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        double double46 = variance45.getResult();
        variance45.increment(0.0d);
        long long49 = variance45.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance51.increment((-1.0d));
        variance51.setBiasCorrected(false);
        boolean boolean56 = variance51.isBiasCorrected();
        double[] doubleArray57 = new double[] {};
        double double58 = variance51.evaluate(doubleArray57);
        variance51.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double65 = variance64.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double68 = variance67.getResult();
        double[] doubleArray71 = new double[] { 0L, (byte) 10 };
        double double72 = variance67.evaluate(doubleArray71);
        double double74 = variance64.evaluate(doubleArray71, (double) 10L);
        double double75 = variance62.evaluate(doubleArray71);
        variance51.incrementAll(doubleArray71);
        double double78 = variance45.evaluate(doubleArray71, 9.10384064149901E11d);
        double double79 = variance38.evaluate(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            double double83 = variance16.evaluate(doubleArray71, 1809432.1316872428d, (int) ' ', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.5d + "'", double35 == 0.5d);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 2L + "'", long36 == 2L);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.5d + "'", double37 == 0.5d);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 25.0d + "'", double79 == 25.0d);
    }

    @Test
    public void test05766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05766");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment((double) 2L);
        double double8 = secondMoment1.getResult();
        secondMoment1.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long12 = secondMoment1.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2L + "'", long12 == 2L);
    }

    @Test
    public void test05767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05767");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double2 = secondMoment0.getResult();
        secondMoment0.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        long long7 = secondMoment5.getN();
        secondMoment5.clear();
        secondMoment5.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        variance11.clear();
        double double13 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.setBiasCorrected(false);
        boolean boolean20 = variance15.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean22 = variance15.equals((java.lang.Object) secondMoment21);
        double double23 = secondMoment21.getResult();
        secondMoment21.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        double[] doubleArray33 = new double[] { 0L, (byte) 10 };
        double double34 = variance29.evaluate(doubleArray33);
        double double36 = variance26.evaluate(doubleArray33, (double) 10L);
        long long37 = variance26.getN();
        variance26.increment((double) 0L);
        double[] doubleArray41 = new double[] { 10.0d };
        variance26.incrementAll(doubleArray41);
        secondMoment21.incrementAll(doubleArray41);
        double double45 = variance11.evaluate(doubleArray41, (double) 100.0f);
        boolean boolean46 = secondMoment0.equals((java.lang.Object) 100.0f);
        long long47 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(2.900925047450135E11d);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
    }

    @Test
    public void test05768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05768");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance6.clear();
        variance6.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        long long11 = secondMoment9.getN();
        secondMoment9.clear();
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        variance17.setBiasCorrected(false);
        boolean boolean22 = variance17.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean24 = variance17.equals((java.lang.Object) secondMoment23);
        double double25 = secondMoment23.getResult();
        secondMoment23.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance29.increment((-1.0d));
        variance29.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        double[] doubleArray43 = new double[] { 0L, (byte) 10 };
        double double44 = variance39.evaluate(doubleArray43);
        double double46 = variance36.evaluate(doubleArray43, (double) 10L);
        double double47 = variance34.evaluate(doubleArray43);
        double double48 = variance29.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        double[] doubleArray54 = new double[] { 0L, (byte) 10 };
        double double55 = variance50.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray64 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double65 = variance57.evaluate(doubleArray64);
        double double66 = variance50.evaluate(doubleArray64);
        double double67 = variance29.evaluate(doubleArray64);
        double double68 = variance27.evaluate(doubleArray64);
        variance14.incrementAll(doubleArray64);
        double double70 = variance6.evaluate(doubleArray64);
        double double71 = variance6.getResult();
        variance6.clear();
        variance6.increment((double) (short) 0);
        double double75 = variance6.getResult();
        double double76 = variance6.getResult();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2136.8055555555557d + "'", double65 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 2564.166666666667d + "'", double66 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2564.166666666667d + "'", double67 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 2136.8055555555557d + "'", double68 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2564.166666666667d + "'", double70 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
    }

    @Test
    public void test05769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05769");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double[] doubleArray5 = new double[] { 0L, (byte) 10 };
        double double6 = variance1.evaluate(doubleArray5);
        double double7 = variance1.getResult();
        variance1.increment(1349359.4135802474d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        long long13 = secondMoment11.getN();
        secondMoment11.clear();
        secondMoment11.clear();
        double double16 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance19.increment((-1.0d));
        variance19.setBiasCorrected(false);
        boolean boolean24 = variance19.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment26);
        double double28 = secondMoment26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment26);
        secondMoment26.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        double[] doubleArray36 = new double[] { 0L, (byte) 10 };
        double double37 = variance32.evaluate(doubleArray36);
        secondMoment26.incrementAll(doubleArray36);
        boolean boolean39 = variance19.equals((java.lang.Object) secondMoment26);
        variance19.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment42);
        double double44 = secondMoment42.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment42);
        secondMoment42.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        double[] doubleArray52 = new double[] { 0L, (byte) 10 };
        double double53 = variance48.evaluate(doubleArray52);
        secondMoment42.incrementAll(doubleArray52);
        double double55 = variance19.evaluate(doubleArray52);
        double double56 = variance17.evaluate(doubleArray52);
        double double57 = variance1.evaluate(doubleArray52);
        variance1.clear();
        double double59 = variance1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.0d + "'", double6 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 25.0d + "'", double55 == 25.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
    }

    @Test
    public void test05770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05770");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        long long9 = secondMoment7.getN();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        long long13 = secondMoment11.getN();
        secondMoment11.clear();
        double double15 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        double[] doubleArray29 = new double[] { 0L, (byte) 10 };
        double double30 = variance25.evaluate(doubleArray29);
        double double32 = variance22.evaluate(doubleArray29, (double) 10L);
        double double33 = variance20.evaluate(doubleArray29);
        double double34 = variance17.evaluate(doubleArray29);
        secondMoment11.incrementAll(doubleArray29, 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean41 = variance39.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        double[] doubleArray52 = new double[] { 0L, (byte) 10 };
        double double53 = variance48.evaluate(doubleArray52);
        double double55 = variance45.evaluate(doubleArray52, (double) 10L);
        double double56 = variance43.evaluate(doubleArray52);
        double[] doubleArray60 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double61 = variance43.evaluate(doubleArray60);
        double double63 = variance39.evaluate(doubleArray60, (double) (byte) 1);
        secondMoment11.incrementAll(doubleArray60);
        double double65 = secondMoment7.evaluate(doubleArray60);
        secondMoment7.increment(2.731158939245938E12d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2024039.120370371d + "'", double61 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2024039.120370371d + "'", double63 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 4048078.240740742d + "'", double65 == 4048078.240740742d);
    }

    @Test
    public void test05771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05771");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean9 = variance7.equals((java.lang.Object) (short) 10);
        boolean boolean10 = variance1.equals((java.lang.Object) variance7);
        long long11 = variance7.getN();
        variance7.setBiasCorrected(false);
        variance7.increment(227.2998046875d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        variance17.setBiasCorrected(false);
        boolean boolean22 = variance17.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean24 = variance17.equals((java.lang.Object) secondMoment23);
        secondMoment23.increment((double) (short) 0);
        secondMoment23.increment((double) 1.0f);
        double double29 = secondMoment23.getResult();
        secondMoment23.clear();
        long long31 = secondMoment23.getN();
        secondMoment23.clear();
        secondMoment23.increment(1988.7755102040815d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance36.increment((-1.0d));
        variance36.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double44 = variance43.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double47 = variance46.getResult();
        double[] doubleArray50 = new double[] { 0L, (byte) 10 };
        double double51 = variance46.evaluate(doubleArray50);
        double double53 = variance43.evaluate(doubleArray50, (double) 10L);
        double double54 = variance41.evaluate(doubleArray50);
        double double55 = variance36.evaluate(doubleArray50);
        secondMoment23.incrementAll(doubleArray50, 0, 0);
        variance7.incrementAll(doubleArray50, 0, (int) (short) 1);
        boolean boolean62 = variance7.isBiasCorrected();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.5d + "'", double29 == 0.5d);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test05772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05772");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance8.increment((-1.0d));
        variance8.setBiasCorrected(false);
        boolean boolean13 = variance8.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean15 = variance8.equals((java.lang.Object) secondMoment14);
        double double16 = secondMoment14.getResult();
        secondMoment14.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        double[] doubleArray34 = new double[] { 0L, (byte) 10 };
        double double35 = variance30.evaluate(doubleArray34);
        double double37 = variance27.evaluate(doubleArray34, (double) 10L);
        double double38 = variance25.evaluate(doubleArray34);
        double double39 = variance20.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        double[] doubleArray45 = new double[] { 0L, (byte) 10 };
        double double46 = variance41.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray55 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double56 = variance48.evaluate(doubleArray55);
        double double57 = variance41.evaluate(doubleArray55);
        double double58 = variance20.evaluate(doubleArray55);
        double double59 = variance18.evaluate(doubleArray55);
        variance5.incrementAll(doubleArray55);
        long long61 = variance5.getN();
        variance5.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance65.increment((-1.0d));
        variance65.setBiasCorrected(false);
        boolean boolean70 = variance65.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment71 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean72 = variance65.equals((java.lang.Object) secondMoment71);
        secondMoment71.increment((double) (short) 0);
        secondMoment71.increment((double) 1.0f);
        double double77 = secondMoment71.getResult();
        secondMoment71.clear();
        long long79 = secondMoment71.getN();
        secondMoment71.increment(0.0d);
        secondMoment71.increment(2136.8055555559695d);
        boolean boolean84 = variance5.equals((java.lang.Object) secondMoment71);
        secondMoment71.clear();
        double double86 = secondMoment71.getResult();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2136.8055555555557d + "'", double56 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2564.166666666667d + "'", double57 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2564.166666666667d + "'", double58 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2136.8055555555557d + "'", double59 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.5d + "'", double77 == 0.5d);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
    }

    @Test
    public void test05773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05773");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        double double4 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        double[] doubleArray13 = new double[] { 0L, (byte) 10 };
        double double14 = variance9.evaluate(doubleArray13);
        double double16 = variance6.evaluate(doubleArray13, (double) 10L);
        double double17 = variance1.evaluate(doubleArray13);
        double double18 = variance1.getResult();
        double double19 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        long long22 = secondMoment20.getN();
        secondMoment20.clear();
        secondMoment20.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        variance26.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        long long30 = secondMoment28.getN();
        secondMoment28.clear();
        secondMoment28.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        variance34.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean40 = variance38.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray49 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double50 = variance42.evaluate(doubleArray49);
        double double51 = variance38.evaluate(doubleArray49);
        double double53 = variance34.evaluate(doubleArray49, (double) 1.0f);
        double double54 = variance26.evaluate(doubleArray49);
        variance1.incrementAll(doubleArray49);
        variance1.increment(4232.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2136.8055555555557d + "'", double50 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2564.166666666667d + "'", double51 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2136.805555555555d + "'", double53 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2564.166666666667d + "'", double54 == 2564.166666666667d);
    }

    @Test
    public void test05774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05774");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double double8 = variance7.getResult();
        double double9 = variance7.getResult();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test05775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05775");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double[] doubleArray5 = new double[] { 0L, (byte) 10 };
        double double6 = variance1.evaluate(doubleArray5);
        double double7 = variance1.getResult();
        variance1.increment(1349359.4135802474d);
        variance1.setBiasCorrected(true);
        variance1.clear();
        double double13 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double33 = variance25.evaluate(doubleArray32);
        double double35 = variance15.evaluate(doubleArray32, (double) '#');
        double double36 = variance15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance38.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double44 = variance43.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double47 = variance46.getResult();
        double[] doubleArray50 = new double[] { 0L, (byte) 10 };
        double double51 = variance46.evaluate(doubleArray50);
        double double53 = variance43.evaluate(doubleArray50, (double) 10L);
        double double54 = variance41.evaluate(doubleArray50);
        double double55 = variance38.evaluate(doubleArray50);
        variance15.incrementAll(doubleArray50);
        double double57 = variance1.evaluate(doubleArray50);
        long long58 = variance1.getN();
        double double59 = variance1.getResult();
        variance1.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.0d + "'", double6 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2136.8055555555557d + "'", double33 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 2136.8055555555557d + "'", double35 == 2136.8055555555557d);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
    }

    @Test
    public void test05776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05776");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        secondMoment7.clear();
        long long15 = secondMoment7.getN();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        double[] doubleArray18 = null;
        // The following exception was thrown during execution in test generation
        try {
            secondMoment7.incrementAll(doubleArray18, (int) (short) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test05777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05777");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double22 = variance14.evaluate(doubleArray21);
        double double23 = secondMoment7.evaluate(doubleArray21);
        long long24 = secondMoment7.getN();
        long long25 = secondMoment7.getN();
        long long26 = secondMoment7.getN();
        secondMoment7.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        variance30.increment((double) (short) -1);
        long long34 = variance30.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        double[] doubleArray45 = new double[] { 0L, (byte) 10 };
        double double46 = variance41.evaluate(doubleArray45);
        double double48 = variance38.evaluate(doubleArray45, (double) 10L);
        double double49 = variance36.evaluate(doubleArray45);
        variance36.increment((double) 0.0f);
        boolean boolean52 = variance36.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment53);
        long long55 = secondMoment53.getN();
        secondMoment53.clear();
        secondMoment53.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment53);
        variance59.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean65 = variance63.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray74 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double75 = variance67.evaluate(doubleArray74);
        double double76 = variance63.evaluate(doubleArray74);
        double double78 = variance59.evaluate(doubleArray74, (double) 1.0f);
        double double81 = variance36.evaluate(doubleArray74, (int) (byte) 0, 1);
        double double82 = variance30.evaluate(doubleArray74);
        double double83 = secondMoment7.evaluate(doubleArray74);
        secondMoment7.clear();
        secondMoment7.clear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2136.8055555555557d + "'", double22 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 12820.833333333334d + "'", double23 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 6L + "'", long24 == 6L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 2136.8055555555557d + "'", double75 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2564.166666666667d + "'", double76 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2136.805555555555d + "'", double78 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 2564.166666666667d + "'", double82 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 12820.833333333334d + "'", double83 == 12820.833333333334d);
    }

    @Test
    public void test05778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05778");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance7.increment((double) (byte) -1);
        long long10 = variance7.getN();
        variance7.increment((double) 100.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.setBiasCorrected(false);
        boolean boolean20 = variance15.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean22 = variance15.equals((java.lang.Object) secondMoment21);
        double double23 = secondMoment21.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        double[] doubleArray32 = new double[] { 0L, (byte) 10 };
        double double33 = variance28.evaluate(doubleArray32);
        double double35 = variance25.evaluate(doubleArray32, (double) 10L);
        double double38 = secondMoment21.evaluate(doubleArray32, (int) (short) 0, 1);
        long long39 = secondMoment21.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment21);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        double[] doubleArray49 = new double[] { 0L, (byte) 10 };
        double double50 = variance45.evaluate(doubleArray49);
        double double52 = variance42.evaluate(doubleArray49, (double) 10L);
        long long53 = variance42.getN();
        variance42.increment((double) 0L);
        double[] doubleArray57 = new double[] { 10.0d };
        variance42.incrementAll(doubleArray57);
        double double59 = variance40.evaluate(doubleArray57);
        double double60 = variance7.evaluate(doubleArray57);
        variance7.increment(51.0d);
        double double63 = variance7.getResult();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
    }

    @Test
    public void test05779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05779");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        double[] doubleArray11 = new double[] { 0L, (byte) 10 };
        double double12 = variance7.evaluate(doubleArray11);
        secondMoment1.incrementAll(doubleArray11);
        long long14 = secondMoment1.getN();
        long long15 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance21.increment((-1.0d));
        variance21.setBiasCorrected(false);
        boolean boolean26 = variance21.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean28 = variance21.equals((java.lang.Object) secondMoment27);
        double double29 = secondMoment27.getResult();
        secondMoment27.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment27);
        secondMoment27.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance35.increment((-1.0d));
        variance35.setBiasCorrected(false);
        boolean boolean40 = variance35.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean42 = variance35.equals((java.lang.Object) secondMoment41);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        double[] doubleArray51 = new double[] { 0L, (byte) 10 };
        double double52 = variance47.evaluate(doubleArray51);
        double double54 = variance44.evaluate(doubleArray51, (double) 10L);
        double double58 = variance35.evaluate(doubleArray51, (double) (short) 0, 0, (int) (short) 0);
        double double61 = secondMoment27.evaluate(doubleArray51, 0, 0);
        variance19.incrementAll(doubleArray51);
        variance17.incrementAll(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment64 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment64);
        long long66 = secondMoment64.getN();
        secondMoment64.clear();
        double double68 = secondMoment64.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance70.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double79 = variance78.getResult();
        double[] doubleArray82 = new double[] { 0L, (byte) 10 };
        double double83 = variance78.evaluate(doubleArray82);
        double double85 = variance75.evaluate(doubleArray82, (double) 10L);
        double double86 = variance73.evaluate(doubleArray82);
        double double87 = variance70.evaluate(doubleArray82);
        secondMoment64.incrementAll(doubleArray82, 1, (int) (byte) 0);
        double double91 = variance17.evaluate(doubleArray82);
        double double92 = secondMoment1.evaluate(doubleArray82);
        org.apache.commons.math.stat.descriptive.moment.Variance variance93 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double94 = secondMoment1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2L + "'", long14 == 2L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 50.0d + "'", double94 == 50.0d);
    }

    @Test
    public void test05780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05780");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.clear();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test05781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05781");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        long long4 = secondMoment2.getN();
        secondMoment2.clear();
        secondMoment2.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance9.increment((-1.0d));
        variance9.setBiasCorrected(false);
        variance9.increment((double) 100L);
        boolean boolean16 = variance9.isBiasCorrected();
        boolean boolean17 = variance9.isBiasCorrected();
        boolean boolean18 = secondMoment2.equals((java.lang.Object) boolean17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        variance20.increment(2136.8055555423102d);
        boolean boolean23 = variance20.isBiasCorrected();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test05782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05782");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance4.increment((-1.0d));
        variance4.setBiasCorrected(false);
        boolean boolean9 = variance4.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        double double13 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment11);
        secondMoment11.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        double[] doubleArray21 = new double[] { 0L, (byte) 10 };
        double double22 = variance17.evaluate(doubleArray21);
        secondMoment11.incrementAll(doubleArray21);
        boolean boolean24 = variance4.equals((java.lang.Object) secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance26.increment((-1.0d));
        variance26.setBiasCorrected(false);
        boolean boolean31 = variance26.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean33 = variance26.equals((java.lang.Object) secondMoment32);
        boolean boolean34 = secondMoment11.equals((java.lang.Object) boolean33);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance36.increment((-1.0d));
        variance36.setBiasCorrected(false);
        boolean boolean41 = variance36.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean43 = variance36.equals((java.lang.Object) secondMoment42);
        secondMoment42.increment((double) (short) 0);
        secondMoment42.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray56 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double57 = variance49.evaluate(doubleArray56);
        double double58 = secondMoment42.evaluate(doubleArray56);
        double double59 = secondMoment11.evaluate(doubleArray56);
        double double60 = secondMoment0.evaluate(doubleArray56);
        secondMoment0.clear();
        double double62 = secondMoment0.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2136.8055555555557d + "'", double57 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 12820.833333333334d + "'", double58 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 12820.833333333334d + "'", double59 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 12820.833333333334d + "'", double60 == 12820.833333333334d);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
    }

    @Test
    public void test05783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05783");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        long long6 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double double8 = variance7.getResult();
        variance7.increment(1349359.4135802472d);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test05784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05784");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        double double5 = secondMoment1.getResult();
        secondMoment1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double[] doubleArray9 = new double[] {};
        double double10 = secondMoment1.evaluate(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance13.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        double[] doubleArray29 = new double[] { 0L, (byte) 10 };
        double double30 = variance25.evaluate(doubleArray29);
        double double32 = variance22.evaluate(doubleArray29, (double) 10L);
        double double33 = variance20.evaluate(doubleArray29);
        double double34 = variance17.evaluate(doubleArray29);
        double double35 = variance13.evaluate(doubleArray29);
        double double36 = variance11.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        long long39 = secondMoment37.getN();
        secondMoment37.clear();
        secondMoment37.increment(10.0d);
        double double43 = secondMoment37.getResult();
        boolean boolean44 = variance11.equals((java.lang.Object) secondMoment37);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        secondMoment37.clear();
        secondMoment37.clear();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test05785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05785");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double3 = variance2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double6 = variance5.getResult();
        double[] doubleArray9 = new double[] { 0L, (byte) 10 };
        double double10 = variance5.evaluate(doubleArray9);
        double double12 = variance2.evaluate(doubleArray9, (double) 10L);
        long long13 = variance2.getN();
        boolean boolean14 = secondMoment0.equals((java.lang.Object) long13);
        secondMoment0.increment(50.0d);
        secondMoment0.clear();
        long long18 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance19.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean24 = variance22.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        double[] doubleArray35 = new double[] { 0L, (byte) 10 };
        double double36 = variance31.evaluate(doubleArray35);
        double double38 = variance28.evaluate(doubleArray35, (double) 10L);
        double double39 = variance26.evaluate(doubleArray35);
        double[] doubleArray43 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double44 = variance26.evaluate(doubleArray43);
        double double46 = variance22.evaluate(doubleArray43, (double) (byte) 1);
        variance22.increment(10.0d);
        variance22.setBiasCorrected(true);
        variance22.clear();
        variance22.setBiasCorrected(false);
        variance22.clear();
        variance22.increment(24.5d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance58.increment((-1.0d));
        variance58.setBiasCorrected(false);
        boolean boolean63 = variance58.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment64 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean65 = variance58.equals((java.lang.Object) secondMoment64);
        secondMoment64.increment((double) (short) 0);
        secondMoment64.increment((double) 1.0f);
        double double70 = secondMoment64.getResult();
        double double71 = secondMoment64.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment72);
        double double74 = secondMoment72.getResult();
        boolean boolean75 = secondMoment64.equals((java.lang.Object) double74);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment76 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment76);
        long long78 = secondMoment76.getN();
        secondMoment76.clear();
        secondMoment76.clear();
        secondMoment76.increment((double) (byte) 100);
        long long83 = secondMoment76.getN();
        double[] doubleArray85 = new double[] { 2024039.1203703713d };
        double double86 = secondMoment76.evaluate(doubleArray85);
        double double87 = secondMoment64.evaluate(doubleArray85);
        double double88 = variance22.evaluate(doubleArray85);
        double double90 = variance19.evaluate(doubleArray85, 4.6116859540028824E16d);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 50.0d + "'", double10 == 50.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2024039.120370371d + "'", double44 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2024039.120370371d + "'", double46 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.5d + "'", double70 == 0.5d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.5d + "'", double71 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1L + "'", long83 == 1L);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
    }

    @Test
    public void test05786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05786");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = secondMoment8.evaluate(doubleArray22);
        long long25 = secondMoment8.getN();
        long long26 = secondMoment8.getN();
        secondMoment8.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        variance29.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance33.increment((-1.0d));
        variance33.setBiasCorrected(false);
        boolean boolean38 = variance33.isBiasCorrected();
        double double39 = variance33.getResult();
        variance33.setBiasCorrected(true);
        double double42 = variance33.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment43);
        long long45 = secondMoment43.getN();
        secondMoment43.clear();
        double double47 = secondMoment43.getResult();
        secondMoment43.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment43);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance52.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double61 = variance60.getResult();
        double[] doubleArray64 = new double[] { 0L, (byte) 10 };
        double double65 = variance60.evaluate(doubleArray64);
        double double67 = variance57.evaluate(doubleArray64, (double) 10L);
        double double68 = variance55.evaluate(doubleArray64);
        double double69 = variance52.evaluate(doubleArray64);
        variance50.incrementAll(doubleArray64);
        variance50.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance73.increment((-1.0d));
        variance73.setBiasCorrected(false);
        boolean boolean78 = variance73.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double81 = variance80.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double84 = variance83.getResult();
        double[] doubleArray87 = new double[] { 0L, (byte) 10 };
        double double88 = variance83.evaluate(doubleArray87);
        double double90 = variance80.evaluate(doubleArray87, (double) 10L);
        double double91 = variance73.evaluate(doubleArray87);
        double double93 = variance50.evaluate(doubleArray87, 2310.1428571428573d);
        variance33.incrementAll(doubleArray87, (int) (byte) 1, (int) (short) 1);
        variance29.incrementAll(doubleArray87);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 12820.833333333334d + "'", double24 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 25.0d + "'", double91 == 25.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 50.0d + "'", double93 == 50.0d);
    }

    @Test
    public void test05787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05787");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double3 = variance2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double6 = variance5.getResult();
        double[] doubleArray9 = new double[] { 0L, (byte) 10 };
        double double10 = variance5.evaluate(doubleArray9);
        double double12 = variance2.evaluate(doubleArray9, (double) 10L);
        long long13 = variance2.getN();
        boolean boolean14 = secondMoment0.equals((java.lang.Object) long13);
        secondMoment0.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance18.increment((-1.0d));
        variance18.setBiasCorrected(false);
        variance18.increment(2136.8055555555557d);
        variance18.setBiasCorrected(false);
        java.lang.Class<?> wildcardClass27 = variance18.getClass();
        boolean boolean28 = secondMoment0.equals((java.lang.Object) variance18);
        double double29 = secondMoment0.getResult();
        long long30 = secondMoment0.getN();
        secondMoment0.clear();
        long long32 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment33);
        long long35 = secondMoment33.getN();
        secondMoment33.clear();
        secondMoment33.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment33);
        variance39.clear();
        variance39.clear();
        boolean boolean42 = variance39.isBiasCorrected();
        variance39.increment((double) '4');
        variance39.setBiasCorrected(false);
        boolean boolean47 = secondMoment0.equals((java.lang.Object) false);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 50.0d + "'", double10 == 50.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test05788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05788");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        double[] doubleArray12 = new double[] { 0L, (byte) 10 };
        double double13 = variance8.evaluate(doubleArray12);
        secondMoment2.incrementAll(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.clear();
        secondMoment2.increment(Double.NaN);
        secondMoment2.increment(0.0d);
        secondMoment2.clear();
        long long22 = secondMoment2.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        double double24 = secondMoment2.getResult();
        long long25 = secondMoment2.getN();
        double double26 = secondMoment2.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
    }

    @Test
    public void test05789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05789");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        long long7 = variance1.getN();
        boolean boolean8 = variance1.isBiasCorrected();
        variance1.increment((double) (byte) 100);
        double double11 = variance1.getResult();
        long long12 = variance1.getN();
        double[] doubleArray13 = null;
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray13, (-1), (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2550.25d + "'", double11 == 2550.25d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2L + "'", long12 == 2L);
    }

    @Test
    public void test05790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05790");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        variance1.increment((double) (short) -1);
        boolean boolean5 = variance1.isBiasCorrected();
        double double6 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean10 = variance8.equals((java.lang.Object) (short) 10);
        double double11 = variance8.getResult();
        variance8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance14.increment((-1.0d));
        variance14.setBiasCorrected(false);
        variance14.increment((double) 100L);
        boolean boolean21 = variance14.isBiasCorrected();
        variance14.clear();
        long long23 = variance14.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double25 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance27.increment((-1.0d));
        variance27.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        double[] doubleArray41 = new double[] { 0L, (byte) 10 };
        double double42 = variance37.evaluate(doubleArray41);
        double double44 = variance34.evaluate(doubleArray41, (double) 10L);
        double double45 = variance32.evaluate(doubleArray41);
        double double46 = variance27.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        double[] doubleArray52 = new double[] { 0L, (byte) 10 };
        double double53 = variance48.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray62 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double63 = variance55.evaluate(doubleArray62);
        double double64 = variance48.evaluate(doubleArray62);
        double double65 = variance27.evaluate(doubleArray62);
        double double66 = secondMoment24.evaluate(doubleArray62);
        double double67 = variance14.evaluate(doubleArray62);
        double double68 = variance8.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance70.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance74.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double80 = variance79.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance82 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double83 = variance82.getResult();
        double[] doubleArray86 = new double[] { 0L, (byte) 10 };
        double double87 = variance82.evaluate(doubleArray86);
        double double89 = variance79.evaluate(doubleArray86, (double) 10L);
        double double90 = variance77.evaluate(doubleArray86);
        double double91 = variance74.evaluate(doubleArray86);
        double double92 = variance70.evaluate(doubleArray86);
        double double93 = variance8.evaluate(doubleArray86);
        double double94 = variance1.evaluate(doubleArray86);
        variance1.increment(12820.833333333334d);
        variance1.setBiasCorrected(false);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2136.8055555555557d + "'", double63 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2564.166666666667d + "'", double64 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2564.166666666667d + "'", double65 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 12820.833333333334d + "'", double66 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2136.8055555555557d + "'", double67 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 2564.166666666667d + "'", double68 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 50.0d + "'", double93 == 50.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 50.0d + "'", double94 == 50.0d);
    }

    @Test
    public void test05791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05791");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double[] doubleArray7 = new double[] {};
        double double8 = variance1.evaluate(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        double double13 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment11);
        secondMoment11.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        variance17.setBiasCorrected(false);
        boolean boolean22 = variance17.isBiasCorrected();
        double[] doubleArray23 = new double[] {};
        double double24 = variance17.evaluate(doubleArray23);
        secondMoment11.incrementAll(doubleArray23);
        secondMoment11.clear();
        secondMoment11.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment30);
        double double32 = secondMoment30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment30);
        secondMoment30.clear();
        secondMoment30.increment((double) 2L);
        double double37 = secondMoment30.getResult();
        secondMoment30.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment40);
        long long42 = secondMoment40.getN();
        secondMoment40.clear();
        secondMoment40.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment40);
        variance46.setBiasCorrected(false);
        double double49 = variance46.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment50);
        long long52 = secondMoment50.getN();
        secondMoment50.clear();
        secondMoment50.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment50);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance57.increment((-1.0d));
        variance57.setBiasCorrected(false);
        boolean boolean62 = variance57.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment63 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean64 = variance57.equals((java.lang.Object) secondMoment63);
        variance57.increment((double) 100L);
        variance57.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double73 = variance72.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        double[] doubleArray79 = new double[] { 0L, (byte) 10 };
        double double80 = variance75.evaluate(doubleArray79);
        double double82 = variance72.evaluate(doubleArray79, (double) 10L);
        double double83 = variance70.evaluate(doubleArray79);
        double[] doubleArray87 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double88 = variance70.evaluate(doubleArray87);
        variance57.incrementAll(doubleArray87);
        double double90 = variance55.evaluate(doubleArray87);
        variance46.incrementAll(doubleArray87);
        secondMoment30.incrementAll(doubleArray87);
        double double95 = variance28.evaluate(doubleArray87, 0, (int) (short) 1);
        double double97 = variance1.evaluate(doubleArray87, 1.0d);
        variance1.clear();
        java.lang.Class<?> wildcardClass99 = variance1.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 2024039.120370371d + "'", double88 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 2024039.120370371d + "'", double90 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 1349359.4135802474d + "'", double97 == 1349359.4135802474d);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test05792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05792");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance4.increment((-1.0d));
        variance4.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double22 = variance9.evaluate(doubleArray18);
        double double23 = variance4.evaluate(doubleArray18);
        variance2.incrementAll(doubleArray18);
        variance0.incrementAll(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance28.increment((-1.0d));
        variance28.setBiasCorrected(false);
        boolean boolean33 = variance28.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean35 = variance28.equals((java.lang.Object) secondMoment34);
        secondMoment34.increment((double) (short) 0);
        secondMoment34.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray48 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double49 = variance41.evaluate(doubleArray48);
        double double50 = secondMoment34.evaluate(doubleArray48);
        secondMoment26.incrementAll(doubleArray48);
        double double52 = variance0.evaluate(doubleArray48);
        variance0.increment(1349359.4135802474d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance56.increment((-1.0d));
        long long59 = variance56.getN();
        variance56.clear();
        boolean boolean61 = variance0.equals((java.lang.Object) variance56);
        variance0.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 2136.8055555555557d + "'", double49 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 12820.833333333334d + "'", double50 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2564.166666666667d + "'", double52 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test05793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05793");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance5.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        double double20 = variance10.evaluate(doubleArray17, (double) 10L);
        double double21 = variance8.evaluate(doubleArray17);
        double double22 = variance5.evaluate(doubleArray17);
        double double23 = variance1.evaluate(doubleArray17);
        long long24 = variance1.getN();
        variance1.increment(50.0d);
        long long27 = variance1.getN();
        variance1.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
    }

    @Test
    public void test05794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05794");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double[] doubleArray7 = new double[] {};
        double double8 = variance1.evaluate(doubleArray7);
        long long9 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        variance11.increment((double) (short) -1);
        variance11.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        long long20 = secondMoment18.getN();
        secondMoment18.clear();
        double double22 = secondMoment18.getResult();
        secondMoment18.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        double[] doubleArray26 = new double[] {};
        double double27 = secondMoment18.evaluate(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment18);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance30.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        double[] doubleArray46 = new double[] { 0L, (byte) 10 };
        double double47 = variance42.evaluate(doubleArray46);
        double double49 = variance39.evaluate(doubleArray46, (double) 10L);
        double double50 = variance37.evaluate(doubleArray46);
        double double51 = variance34.evaluate(doubleArray46);
        double double52 = variance30.evaluate(doubleArray46);
        double double53 = variance28.evaluate(doubleArray46);
        variance11.incrementAll(doubleArray46);
        double double56 = variance1.evaluate(doubleArray46, 26761.69230769231d);
        boolean boolean57 = variance1.isBiasCorrected();
        variance1.clear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 25.00000011920929d + "'", double56 == 25.00000011920929d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test05795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05795");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        boolean boolean17 = variance16.isBiasCorrected();
        double double18 = variance16.getResult();
        variance16.setBiasCorrected(true);
        long long21 = variance16.getN();
        variance16.clear();
        variance16.increment(2136.8055555559695d);
        long long25 = variance16.getN();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.5d + "'", double18 == 0.5d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2L + "'", long21 == 2L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2L + "'", long25 == 2L);
    }

    @Test
    public void test05796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05796");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double22 = variance14.evaluate(doubleArray21);
        double double23 = secondMoment7.evaluate(doubleArray21);
        long long24 = secondMoment7.getN();
        long long25 = secondMoment7.getN();
        long long26 = secondMoment7.getN();
        long long27 = secondMoment7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        double double29 = secondMoment7.getResult();
        secondMoment7.increment(2837.555555555555d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2136.8055555555557d + "'", double22 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 12820.833333333334d + "'", double23 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 6L + "'", long24 == 6L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 6L + "'", long27 == 6L);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 12820.833333333334d + "'", double29 == 12820.833333333334d);
    }

    @Test
    public void test05797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05797");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double22 = variance14.evaluate(doubleArray21);
        double double23 = secondMoment7.evaluate(doubleArray21);
        long long24 = secondMoment7.getN();
        long long25 = secondMoment7.getN();
        secondMoment7.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        long long29 = variance28.getN();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2136.8055555555557d + "'", double22 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 12820.833333333334d + "'", double23 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 6L + "'", long24 == 6L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 7L + "'", long29 == 7L);
    }

    @Test
    public void test05798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05798");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment((double) 2L);
        double double8 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance10.increment((-1.0d));
        long long13 = variance10.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance18.increment((-1.0d));
        variance18.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        double[] doubleArray32 = new double[] { 0L, (byte) 10 };
        double double33 = variance28.evaluate(doubleArray32);
        double double35 = variance25.evaluate(doubleArray32, (double) 10L);
        double double36 = variance23.evaluate(doubleArray32);
        double double37 = variance18.evaluate(doubleArray32);
        variance16.incrementAll(doubleArray32);
        variance14.incrementAll(doubleArray32);
        double double40 = variance10.evaluate(doubleArray32);
        boolean boolean41 = secondMoment1.equals((java.lang.Object) doubleArray32);
        double double42 = secondMoment1.getResult();
        secondMoment1.clear();
        secondMoment1.increment((-1.0d));
        secondMoment1.increment(2268035.8522376535d);
        secondMoment1.increment(2564.166666666686d);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
    }

    @Test
    public void test05799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05799");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance5.increment((-1.0d));
        variance5.setBiasCorrected(false);
        boolean boolean10 = variance5.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean12 = variance5.equals((java.lang.Object) secondMoment11);
        long long13 = secondMoment11.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.setBiasCorrected(false);
        variance15.increment((double) 100L);
        boolean boolean22 = variance15.isBiasCorrected();
        boolean boolean23 = variance15.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double33 = variance25.evaluate(doubleArray32);
        double double35 = variance15.evaluate(doubleArray32, (double) (byte) 10);
        secondMoment11.incrementAll(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        long long39 = secondMoment37.getN();
        secondMoment37.clear();
        double double41 = secondMoment37.getResult();
        secondMoment37.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance46.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        double[] doubleArray58 = new double[] { 0L, (byte) 10 };
        double double59 = variance54.evaluate(doubleArray58);
        double double61 = variance51.evaluate(doubleArray58, (double) 10L);
        double double62 = variance49.evaluate(doubleArray58);
        double double63 = variance46.evaluate(doubleArray58);
        variance44.incrementAll(doubleArray58);
        variance44.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double68 = variance67.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double71 = variance70.getResult();
        double[] doubleArray74 = new double[] { 0L, (byte) 10 };
        double double75 = variance70.evaluate(doubleArray74);
        double double77 = variance67.evaluate(doubleArray74, (double) 10L);
        variance44.incrementAll(doubleArray74);
        secondMoment11.incrementAll(doubleArray74);
        double double80 = secondMoment11.getResult();
        boolean boolean81 = variance1.equals((java.lang.Object) secondMoment11);
        boolean boolean82 = variance1.isBiasCorrected();
        long long83 = variance1.getN();
        variance1.clear();
        long long85 = variance1.getN();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2136.8055555555557d + "'", double33 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 2136.8055555555557d + "'", double35 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 14205.875d + "'", double80 == 14205.875d);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1L + "'", long83 == 1L);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
    }

    @Test
    public void test05800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05800");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance7.setBiasCorrected(true);
        variance7.increment(1152.0d);
        boolean boolean12 = variance7.isBiasCorrected();
        variance7.clear();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test05801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05801");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        double[] doubleArray12 = new double[] { 0L, (byte) 10 };
        double double13 = variance8.evaluate(doubleArray12);
        secondMoment2.incrementAll(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean19 = variance17.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance21.increment((-1.0d));
        variance21.setBiasCorrected(false);
        boolean boolean26 = variance21.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean28 = variance21.equals((java.lang.Object) secondMoment27);
        double double29 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        double[] doubleArray38 = new double[] { 0L, (byte) 10 };
        double double39 = variance34.evaluate(doubleArray38);
        double double41 = variance31.evaluate(doubleArray38, (double) 10L);
        double double44 = secondMoment27.evaluate(doubleArray38, (int) (short) 0, 1);
        double double45 = variance17.evaluate(doubleArray38);
        secondMoment2.incrementAll(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment50);
        long long52 = secondMoment50.getN();
        secondMoment50.clear();
        secondMoment50.clear();
        secondMoment50.increment((double) (byte) 100);
        secondMoment50.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment50);
        double double59 = variance58.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment60 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double61 = secondMoment60.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment60);
        variance62.increment(2564.166666666667d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double67 = variance66.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double70 = variance69.getResult();
        double[] doubleArray73 = new double[] { 0L, (byte) 10 };
        double double74 = variance69.evaluate(doubleArray73);
        double double76 = variance66.evaluate(doubleArray73, (double) 10L);
        long long77 = variance66.getN();
        variance66.increment((double) 0L);
        double[] doubleArray81 = new double[] { 10.0d };
        variance66.incrementAll(doubleArray81);
        double double84 = variance62.evaluate(doubleArray81, (double) 2L);
        double double85 = variance58.evaluate(doubleArray81);
        double double86 = secondMoment2.evaluate(doubleArray81);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[10.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
    }

    @Test
    public void test05802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05802");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double2 = secondMoment0.getResult();
        secondMoment0.increment(4048078.240740742d);
        secondMoment0.increment(2.2759611724070415E12d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
    }

    @Test
    public void test05803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05803");
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.setBiasCorrected(false);
        boolean boolean8 = variance3.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean10 = variance3.equals((java.lang.Object) secondMoment9);
        secondMoment9.increment((double) (short) 0);
        secondMoment9.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double24 = variance16.evaluate(doubleArray23);
        double double25 = secondMoment9.evaluate(doubleArray23);
        long long26 = secondMoment9.getN();
        long long27 = secondMoment9.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        double[] doubleArray37 = new double[] { 0L, (byte) 10 };
        double double38 = variance33.evaluate(doubleArray37);
        double double39 = variance33.getResult();
        variance33.increment(1349359.4135802474d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment43);
        long long45 = secondMoment43.getN();
        secondMoment43.clear();
        secondMoment43.clear();
        double double48 = secondMoment43.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment43);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance51.increment((-1.0d));
        variance51.setBiasCorrected(false);
        boolean boolean56 = variance51.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment58);
        double double60 = secondMoment58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment58);
        secondMoment58.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double65 = variance64.getResult();
        double[] doubleArray68 = new double[] { 0L, (byte) 10 };
        double double69 = variance64.evaluate(doubleArray68);
        secondMoment58.incrementAll(doubleArray68);
        boolean boolean71 = variance51.equals((java.lang.Object) secondMoment58);
        variance51.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment74 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment74);
        double double76 = secondMoment74.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment74);
        secondMoment74.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double81 = variance80.getResult();
        double[] doubleArray84 = new double[] { 0L, (byte) 10 };
        double double85 = variance80.evaluate(doubleArray84);
        secondMoment74.incrementAll(doubleArray84);
        double double87 = variance51.evaluate(doubleArray84);
        double double88 = variance49.evaluate(doubleArray84);
        double double89 = variance33.evaluate(doubleArray84);
        double double90 = secondMoment9.evaluate(doubleArray84);
        long long91 = secondMoment9.getN();
        long long92 = secondMoment9.getN();
        secondMoment9.clear();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2136.8055555555557d + "'", double24 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 12820.833333333334d + "'", double25 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 6L + "'", long27 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 25.0d + "'", double87 == 25.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 2L + "'", long91 == 2L);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 2L + "'", long92 == 2L);
    }

    @Test
    public void test05804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05804");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.setBiasCorrected(false);
        boolean boolean8 = variance3.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean10 = variance3.equals((java.lang.Object) secondMoment9);
        double double11 = secondMoment9.getResult();
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        secondMoment9.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        variance17.setBiasCorrected(false);
        boolean boolean22 = variance17.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean24 = variance17.equals((java.lang.Object) secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        double[] doubleArray33 = new double[] { 0L, (byte) 10 };
        double double34 = variance29.evaluate(doubleArray33);
        double double36 = variance26.evaluate(doubleArray33, (double) 10L);
        double double40 = variance17.evaluate(doubleArray33, (double) (short) 0, 0, (int) (short) 0);
        double double43 = secondMoment9.evaluate(doubleArray33, 0, 0);
        variance1.incrementAll(doubleArray33);
        variance1.increment(4048078.240740742d);
        boolean boolean47 = variance1.isBiasCorrected();
        double double48 = variance1.getResult();
        double double49 = variance1.getResult();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 3.6415326583280566E12d + "'", double48 == 3.6415326583280566E12d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 3.6415326583280566E12d + "'", double49 == 3.6415326583280566E12d);
    }

    @Test
    public void test05805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05805");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        long long2 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance4.increment((-1.0d));
        variance4.setBiasCorrected(false);
        boolean boolean9 = variance4.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean11 = variance4.equals((java.lang.Object) secondMoment10);
        secondMoment10.increment((double) (short) 0);
        secondMoment10.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray24 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double25 = variance17.evaluate(doubleArray24);
        double double26 = secondMoment10.evaluate(doubleArray24);
        long long27 = secondMoment10.getN();
        long long28 = secondMoment10.getN();
        secondMoment10.clear();
        double double30 = secondMoment10.getResult();
        secondMoment10.clear();
        boolean boolean32 = secondMoment0.equals((java.lang.Object) secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.setBiasCorrected(false);
        boolean boolean39 = variance34.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        double[] doubleArray48 = new double[] { 0L, (byte) 10 };
        double double49 = variance44.evaluate(doubleArray48);
        double double51 = variance41.evaluate(doubleArray48, (double) 10L);
        double double52 = variance34.evaluate(doubleArray48);
        variance34.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray63 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double64 = variance56.evaluate(doubleArray63);
        double double65 = variance34.evaluate(doubleArray63);
        java.lang.Class<?> wildcardClass66 = doubleArray63.getClass();
        boolean boolean67 = secondMoment10.equals((java.lang.Object) wildcardClass66);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        secondMoment10.clear();
        long long70 = secondMoment10.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2136.8055555555557d + "'", double25 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 12820.833333333334d + "'", double26 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 6L + "'", long27 == 6L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 6L + "'", long28 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 25.0d + "'", double52 == 25.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2136.8055555555557d + "'", double64 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2136.8055555555557d + "'", double65 == 2136.8055555555557d);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
    }

    @Test
    public void test05806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05806");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        double[] doubleArray10 = new double[] { 0L, (byte) 10 };
        double double11 = variance6.evaluate(doubleArray10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double21 = variance13.evaluate(doubleArray20);
        double double22 = variance6.evaluate(doubleArray20);
        double double23 = secondMoment1.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        variance25.clear();
        double[] doubleArray27 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double28 = variance25.evaluate(doubleArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2136.8055555555557d + "'", double21 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2564.166666666667d + "'", double22 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 12820.833333333334d + "'", double23 == 12820.833333333334d);
    }

    @Test
    public void test05807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05807");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        long long5 = secondMoment3.getN();
        secondMoment3.clear();
        secondMoment3.clear();
        secondMoment3.increment((double) (byte) 100);
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        double[] doubleArray22 = new double[] { 0L, (byte) 10 };
        double double23 = variance18.evaluate(doubleArray22);
        double double25 = variance15.evaluate(doubleArray22, (double) 10L);
        long long26 = variance15.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance28.increment((-1.0d));
        variance28.setBiasCorrected(false);
        boolean boolean33 = variance28.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        double[] doubleArray42 = new double[] { 0L, (byte) 10 };
        double double43 = variance38.evaluate(doubleArray42);
        double double45 = variance35.evaluate(doubleArray42, (double) 10L);
        double double46 = variance28.evaluate(doubleArray42);
        variance15.incrementAll(doubleArray42, (int) (short) 0, (int) (byte) 1);
        secondMoment3.incrementAll(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        double double52 = secondMoment3.getResult();
        double double53 = secondMoment3.getResult();
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 25.0d + "'", double46 == 25.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
    }

    @Test
    public void test05808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05808");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance1.clear();
        double double3 = variance1.getResult();
        variance1.increment(1840.2222222222222d);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
    }

    @Test
    public void test05809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05809");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        double[] doubleArray15 = new double[] { 0L, (byte) 10 };
        double double16 = variance11.evaluate(doubleArray15);
        double double18 = variance8.evaluate(doubleArray15, (double) 10L);
        double double19 = variance6.evaluate(doubleArray15);
        double double20 = variance1.evaluate(doubleArray15);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        double[] doubleArray26 = new double[] { 0L, (byte) 10 };
        double double27 = variance22.evaluate(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray36 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double37 = variance29.evaluate(doubleArray36);
        double double38 = variance22.evaluate(doubleArray36);
        double double39 = variance1.evaluate(doubleArray36);
        variance1.clear();
        variance1.clear();
        variance1.increment(2136.8059895833335d);
        double double44 = variance1.getResult();
        java.lang.Class<?> wildcardClass45 = variance1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2136.8055555555557d + "'", double37 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2564.166666666667d + "'", double38 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2564.166666666667d + "'", double39 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test05810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05810");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        secondMoment7.clear();
        secondMoment7.increment((double) 10.0f);
        double double14 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double17 = variance16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double20 = variance19.getResult();
        double[] doubleArray23 = new double[] { 0L, (byte) 10 };
        double double24 = variance19.evaluate(doubleArray23);
        double double26 = variance16.evaluate(doubleArray23, (double) 10L);
        long long27 = variance16.getN();
        variance16.increment((double) 0L);
        long long30 = variance16.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance33.increment((-1.0d));
        variance33.setBiasCorrected(false);
        boolean boolean38 = variance33.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean40 = variance33.equals((java.lang.Object) secondMoment39);
        double double41 = secondMoment39.getResult();
        secondMoment39.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment39);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance45.increment((-1.0d));
        variance45.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double53 = variance52.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double56 = variance55.getResult();
        double[] doubleArray59 = new double[] { 0L, (byte) 10 };
        double double60 = variance55.evaluate(doubleArray59);
        double double62 = variance52.evaluate(doubleArray59, (double) 10L);
        double double63 = variance50.evaluate(doubleArray59);
        double double64 = variance45.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double67 = variance66.getResult();
        double[] doubleArray70 = new double[] { 0L, (byte) 10 };
        double double71 = variance66.evaluate(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray80 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double81 = variance73.evaluate(doubleArray80);
        double double82 = variance66.evaluate(doubleArray80);
        double double83 = variance45.evaluate(doubleArray80);
        double double84 = variance43.evaluate(doubleArray80);
        double double86 = variance16.evaluate(doubleArray80, (double) (byte) 1);
        double double87 = secondMoment7.evaluate(doubleArray80);
        double double88 = secondMoment7.getResult();
        double double89 = secondMoment7.getResult();
        secondMoment7.increment(4684796.354166668d);
        double double92 = secondMoment7.getResult();
        secondMoment7.increment(3799924.1673280406d);
        long long95 = secondMoment7.getN();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 2136.8055555555557d + "'", double81 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 2564.166666666667d + "'", double82 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2564.166666666667d + "'", double83 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2136.8055555555557d + "'", double84 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2564.1666666666665d + "'", double86 == 2564.1666666666665d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 12820.833333333334d + "'", double87 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 12820.833333333334d + "'", double88 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 12820.833333333334d + "'", double89 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1.8811706161747113E13d + "'", double92 == 1.8811706161747113E13d);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 8L + "'", long95 == 8L);
    }

    @Test
    public void test05811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05811");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = secondMoment8.evaluate(doubleArray22);
        long long25 = secondMoment8.getN();
        long long26 = secondMoment8.getN();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        variance28.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        variance31.increment((double) (short) -1);
        long long35 = variance31.getN();
        variance31.setBiasCorrected(false);
        double double38 = variance31.getResult();
        long long39 = variance31.getN();
        variance31.clear();
        variance31.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment43);
        long long45 = secondMoment43.getN();
        secondMoment43.clear();
        secondMoment43.clear();
        long long48 = secondMoment43.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment43);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double54 = variance53.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double57 = variance56.getResult();
        double[] doubleArray60 = new double[] { 0L, (byte) 10 };
        double double61 = variance56.evaluate(doubleArray60);
        double double63 = variance53.evaluate(doubleArray60, (double) 10L);
        double double64 = variance51.evaluate(doubleArray60);
        variance51.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean70 = variance68.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double75 = variance74.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double78 = variance77.getResult();
        double[] doubleArray81 = new double[] { 0L, (byte) 10 };
        double double82 = variance77.evaluate(doubleArray81);
        double double84 = variance74.evaluate(doubleArray81, (double) 10L);
        double double85 = variance72.evaluate(doubleArray81);
        double[] doubleArray89 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double90 = variance72.evaluate(doubleArray89);
        double double92 = variance68.evaluate(doubleArray89, (double) (byte) 1);
        double double93 = variance51.evaluate(doubleArray89);
        double double95 = variance49.evaluate(doubleArray89, 0.0d);
        double double96 = variance31.evaluate(doubleArray89);
        double double98 = variance28.evaluate(doubleArray89, 7657532.253333333d);
        long long99 = variance28.getN();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 12820.833333333334d + "'", double24 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 2024039.120370371d + "'", double90 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 2024039.120370371d + "'", double92 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 2024039.120370371d + "'", double93 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1349359.4135802472d + "'", double95 == 1349359.4135802472d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 1349359.4135802474d + "'", double96 == 1349359.4135802474d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 2024039.109375d + "'", double98 == 2024039.109375d);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 0L + "'", long99 == 0L);
    }

    @Test
    public void test05812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05812");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double double7 = variance1.getResult();
        double double8 = variance1.getResult();
        double double9 = variance1.getResult();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test05813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05813");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        boolean boolean9 = variance1.isBiasCorrected();
        long long10 = variance1.getN();
        variance1.increment(18.666666666666668d);
        variance1.increment(9.536988751020409E7d);
        variance1.setBiasCorrected(false);
        double double17 = variance1.getResult();
        variance1.setBiasCorrected(false);
        variance1.setBiasCorrected(true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 2.0212030575202972E15d + "'", double17 == 2.0212030575202972E15d);
    }

    @Test
    public void test05814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05814");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double[] doubleArray5 = new double[] { 0L, (byte) 10 };
        double double6 = variance1.evaluate(doubleArray5);
        boolean boolean7 = variance1.isBiasCorrected();
        long long8 = variance1.getN();
        boolean boolean9 = variance1.isBiasCorrected();
        double double10 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance12.increment((-1.0d));
        variance12.setBiasCorrected(false);
        boolean boolean17 = variance12.isBiasCorrected();
        double double18 = variance12.getResult();
        variance12.setBiasCorrected(true);
        variance12.increment(227.3d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance29.increment((-1.0d));
        variance29.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        double[] doubleArray43 = new double[] { 0L, (byte) 10 };
        double double44 = variance39.evaluate(doubleArray43);
        double double46 = variance36.evaluate(doubleArray43, (double) 10L);
        double double47 = variance34.evaluate(doubleArray43);
        double double48 = variance29.evaluate(doubleArray43);
        variance27.incrementAll(doubleArray43);
        double double50 = variance24.evaluate(doubleArray43);
        variance12.incrementAll(doubleArray43);
        // The following exception was thrown during execution in test generation
        try {
            double double55 = variance1.evaluate(doubleArray43, 34443.467473983765d, (int) (byte) -1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.0d + "'", double6 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
    }

    @Test
    public void test05815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05815");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.increment((double) (byte) 100);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        double double22 = variance12.evaluate(doubleArray19, (double) 10L);
        double double23 = variance10.evaluate(doubleArray19);
        double double24 = variance10.getResult();
        long long25 = variance10.getN();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test05816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05816");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment4 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment4);
        double double6 = secondMoment4.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment4);
        secondMoment4.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        double[] doubleArray14 = new double[] { 0L, (byte) 10 };
        double double15 = variance10.evaluate(doubleArray14);
        secondMoment4.incrementAll(doubleArray14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment4);
        secondMoment4.clear();
        secondMoment4.increment(Double.NaN);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment4);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment4);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment4);
        double double24 = variance23.getResult();
        double double25 = variance23.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 50.0d + "'", double15 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    }

    @Test
    public void test05817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05817");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        double double10 = secondMoment8.getResult();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double13 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.increment(4048078.240740742d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test05818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05818");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (byte) 0);
        long long10 = secondMoment0.getN();
        long long11 = secondMoment0.getN();
        secondMoment0.clear();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2L + "'", long10 == 2L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2L + "'", long11 == 2L);
    }

    @Test
    public void test05819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05819");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double22 = variance14.evaluate(doubleArray21);
        double double23 = secondMoment7.evaluate(doubleArray21);
        long long24 = secondMoment7.getN();
        long long25 = secondMoment7.getN();
        secondMoment7.increment((double) (short) 0);
        long long28 = secondMoment7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance30.increment((-1.0d));
        variance30.setBiasCorrected(false);
        boolean boolean35 = variance30.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        double[] doubleArray44 = new double[] { 0L, (byte) 10 };
        double double45 = variance40.evaluate(doubleArray44);
        double double47 = variance37.evaluate(doubleArray44, (double) 10L);
        double double48 = variance30.evaluate(doubleArray44);
        double double49 = secondMoment7.evaluate(doubleArray44);
        secondMoment7.clear();
        secondMoment7.increment(4.5d);
        secondMoment7.clear();
        secondMoment7.increment(17541.5d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2136.8055555555557d + "'", double22 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 12820.833333333334d + "'", double23 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 6L + "'", long24 == 6L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 7L + "'", long28 == 7L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 25.0d + "'", double48 == 25.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
    }

    @Test
    public void test05820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05820");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        boolean boolean17 = variance16.isBiasCorrected();
        double double18 = variance16.getResult();
        variance16.setBiasCorrected(true);
        long long21 = variance16.getN();
        variance16.clear();
        variance16.increment(2136.8055555559695d);
        variance16.increment(9.536988751020409E7d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.5d + "'", double18 == 0.5d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2L + "'", long21 == 2L);
    }

    @Test
    public void test05821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05821");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        long long13 = secondMoment11.getN();
        secondMoment11.clear();
        double double15 = secondMoment11.getResult();
        secondMoment11.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        double[] doubleArray19 = new double[] {};
        double double20 = secondMoment11.evaluate(doubleArray19);
        double double21 = secondMoment7.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.setBiasCorrected(false);
        boolean boolean28 = variance23.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        double[] doubleArray37 = new double[] { 0L, (byte) 10 };
        double double38 = variance33.evaluate(doubleArray37);
        double double40 = variance30.evaluate(doubleArray37, (double) 10L);
        double double41 = variance23.evaluate(doubleArray37);
        variance23.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray52 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double53 = variance45.evaluate(doubleArray52);
        double double54 = variance23.evaluate(doubleArray52);
        double double55 = variance23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance57.increment((-1.0d));
        boolean boolean60 = variance57.isBiasCorrected();
        double double61 = variance57.getResult();
        variance57.clear();
        variance57.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance66.increment((-1.0d));
        variance66.setBiasCorrected(false);
        boolean boolean71 = variance66.isBiasCorrected();
        double[] doubleArray72 = new double[] {};
        double double73 = variance66.evaluate(doubleArray72);
        variance66.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray84 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double85 = variance77.evaluate(doubleArray84);
        double double86 = variance66.evaluate(doubleArray84);
        variance57.incrementAll(doubleArray84);
        variance23.incrementAll(doubleArray84);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment7.incrementAll(doubleArray84, (int) (short) -1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 25.0d + "'", double41 == 25.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2136.8055555555557d + "'", double53 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2136.8055555555557d + "'", double54 == 2136.8055555555557d);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2136.8055555555557d + "'", double85 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2136.8055555555557d + "'", double86 == 2136.8055555555557d);
    }

    @Test
    public void test05822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05822");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment((double) 2L);
        double double8 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance10.increment((-1.0d));
        long long13 = variance10.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance18.increment((-1.0d));
        variance18.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        double[] doubleArray32 = new double[] { 0L, (byte) 10 };
        double double33 = variance28.evaluate(doubleArray32);
        double double35 = variance25.evaluate(doubleArray32, (double) 10L);
        double double36 = variance23.evaluate(doubleArray32);
        double double37 = variance18.evaluate(doubleArray32);
        variance16.incrementAll(doubleArray32);
        variance14.incrementAll(doubleArray32);
        double double40 = variance10.evaluate(doubleArray32);
        boolean boolean41 = secondMoment1.equals((java.lang.Object) doubleArray32);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        variance44.increment((double) (short) -1);
        long long48 = variance44.getN();
        variance44.setBiasCorrected(false);
        double double51 = variance44.getResult();
        variance44.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment53);
        long long55 = secondMoment53.getN();
        secondMoment53.clear();
        secondMoment53.clear();
        secondMoment53.increment((double) (byte) 100);
        long long60 = secondMoment53.getN();
        double[] doubleArray62 = new double[] { 2024039.1203703713d };
        double double63 = secondMoment53.evaluate(doubleArray62);
        variance44.incrementAll(doubleArray62);
        double double65 = secondMoment1.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double67 = secondMoment1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
    }

    @Test
    public void test05823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05823");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance5.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        double double20 = variance10.evaluate(doubleArray17, (double) 10L);
        double double21 = variance8.evaluate(doubleArray17);
        double double22 = variance5.evaluate(doubleArray17);
        double double23 = variance1.evaluate(doubleArray17);
        long long24 = variance1.getN();
        variance1.increment(50.0d);
        long long27 = variance1.getN();
        variance1.increment(12820.833333333334d);
        variance1.increment(3.6415326583280566E12d);
        double double32 = variance1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 4.420253351600081E24d + "'", double32 == 4.420253351600081E24d);
    }

    @Test
    public void test05824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05824");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        long long9 = secondMoment7.getN();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance13.increment((-1.0d));
        variance13.setBiasCorrected(false);
        boolean boolean18 = variance13.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean20 = variance13.equals((java.lang.Object) secondMoment19);
        double double21 = secondMoment19.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double24 = variance23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        double[] doubleArray30 = new double[] { 0L, (byte) 10 };
        double double31 = variance26.evaluate(doubleArray30);
        double double33 = variance23.evaluate(doubleArray30, (double) 10L);
        double double36 = secondMoment19.evaluate(doubleArray30, (int) (short) 0, 1);
        long long37 = secondMoment19.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance41.increment((-1.0d));
        variance41.setBiasCorrected(false);
        boolean boolean46 = variance41.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean48 = variance41.equals((java.lang.Object) secondMoment47);
        double double49 = secondMoment47.getResult();
        secondMoment47.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        secondMoment47.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance55.increment((-1.0d));
        variance55.setBiasCorrected(false);
        boolean boolean60 = variance55.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean62 = variance55.equals((java.lang.Object) secondMoment61);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double65 = variance64.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double68 = variance67.getResult();
        double[] doubleArray71 = new double[] { 0L, (byte) 10 };
        double double72 = variance67.evaluate(doubleArray71);
        double double74 = variance64.evaluate(doubleArray71, (double) 10L);
        double double78 = variance55.evaluate(doubleArray71, (double) (short) 0, 0, (int) (short) 0);
        double double81 = secondMoment47.evaluate(doubleArray71, 0, 0);
        variance39.incrementAll(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            double double85 = secondMoment7.evaluate(doubleArray71, (int) ' ', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
    }

    @Test
    public void test05825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05825");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.clear();
        secondMoment0.increment(2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance12.clear();
        double double14 = variance12.getResult();
        boolean boolean15 = variance12.isBiasCorrected();
        long long16 = variance12.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance18.increment((-1.0d));
        variance18.setBiasCorrected(false);
        variance18.increment((double) 100L);
        boolean boolean25 = variance18.isBiasCorrected();
        variance18.clear();
        double double27 = variance18.getResult();
        boolean boolean28 = variance18.isBiasCorrected();
        long long29 = variance18.getN();
        boolean boolean30 = variance18.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        variance32.increment((double) (short) -1);
        variance32.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        long long41 = secondMoment39.getN();
        secondMoment39.clear();
        double double43 = secondMoment39.getResult();
        secondMoment39.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        double[] doubleArray47 = new double[] {};
        double double48 = secondMoment39.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment39);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance51.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance55.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double61 = variance60.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double64 = variance63.getResult();
        double[] doubleArray67 = new double[] { 0L, (byte) 10 };
        double double68 = variance63.evaluate(doubleArray67);
        double double70 = variance60.evaluate(doubleArray67, (double) 10L);
        double double71 = variance58.evaluate(doubleArray67);
        double double72 = variance55.evaluate(doubleArray67);
        double double73 = variance51.evaluate(doubleArray67);
        double double74 = variance49.evaluate(doubleArray67);
        variance32.incrementAll(doubleArray67);
        double double76 = variance18.evaluate(doubleArray67);
        double double77 = variance12.evaluate(doubleArray67);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 25.0d + "'", double76 == 25.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
    }

    @Test
    public void test05826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05826");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.increment((double) (byte) 100);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment(2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double double15 = secondMoment1.getResult();
        double double16 = secondMoment1.getResult();
        long long17 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean21 = variance19.equals((java.lang.Object) (short) 10);
        double double22 = variance19.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        double[] doubleArray31 = new double[] { 0L, (byte) 10 };
        double double32 = variance27.evaluate(doubleArray31);
        double double34 = variance24.evaluate(doubleArray31, (double) 10L);
        double double35 = variance19.evaluate(doubleArray31);
        double double36 = variance19.getResult();
        variance19.clear();
        variance19.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        double double41 = secondMoment39.getResult();
        secondMoment39.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance45.increment((-1.0d));
        variance45.setBiasCorrected(false);
        boolean boolean50 = variance45.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean52 = variance45.equals((java.lang.Object) secondMoment51);
        double double53 = secondMoment51.getResult();
        secondMoment51.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment51);
        double double56 = secondMoment51.getResult();
        long long57 = secondMoment51.getN();
        secondMoment51.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double63 = variance62.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double66 = variance65.getResult();
        double[] doubleArray69 = new double[] { 0L, (byte) 10 };
        double double70 = variance65.evaluate(doubleArray69);
        double double72 = variance62.evaluate(doubleArray69, (double) 10L);
        double double73 = variance60.evaluate(doubleArray69);
        double[] doubleArray77 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double78 = variance60.evaluate(doubleArray77);
        secondMoment51.incrementAll(doubleArray77);
        secondMoment39.incrementAll(doubleArray77);
        variance19.incrementAll(doubleArray77);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment1.incrementAll(doubleArray77, (int) '#', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2024039.120370371d + "'", double78 == 2024039.120370371d);
    }

    @Test
    public void test05827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05827");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.clear();
        double double3 = variance1.getResult();
        variance1.setBiasCorrected(true);
        variance1.increment(0.5d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance9.increment((-1.0d));
        variance9.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean17 = variance15.equals((java.lang.Object) (short) 10);
        boolean boolean18 = variance9.equals((java.lang.Object) variance15);
        long long19 = variance15.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean23 = variance21.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double33 = variance25.evaluate(doubleArray32);
        double double34 = variance21.evaluate(doubleArray32);
        double double35 = variance15.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance39.increment((-1.0d));
        variance39.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double47 = variance46.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double50 = variance49.getResult();
        double[] doubleArray53 = new double[] { 0L, (byte) 10 };
        double double54 = variance49.evaluate(doubleArray53);
        double double56 = variance46.evaluate(doubleArray53, (double) 10L);
        double double57 = variance44.evaluate(doubleArray53);
        double double58 = variance39.evaluate(doubleArray53);
        variance37.incrementAll(doubleArray53);
        double double60 = variance15.evaluate(doubleArray53);
        double double61 = variance1.evaluate(doubleArray53);
        long long62 = variance1.getN();
        boolean boolean63 = variance1.isBiasCorrected();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2136.8055555555557d + "'", double33 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2564.166666666667d + "'", double34 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 2564.166666666667d + "'", double35 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test05828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05828");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        long long4 = secondMoment2.getN();
        secondMoment2.clear();
        secondMoment2.increment((double) '4');
        long long8 = secondMoment2.getN();
        long long9 = secondMoment2.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        variance11.increment((double) (-1L));
        variance11.increment(7286540.833333336d);
        double double16 = variance11.getResult();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test05829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05829");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance4.increment((-1.0d));
        variance4.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double22 = variance9.evaluate(doubleArray18);
        double double23 = variance4.evaluate(doubleArray18);
        variance2.incrementAll(doubleArray18);
        variance0.incrementAll(doubleArray18);
        variance0.clear();
        long long27 = variance0.getN();
        long long28 = variance0.getN();
        variance0.clear();
        long long30 = variance0.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test05830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05830");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance8.increment((-1.0d));
        variance8.setBiasCorrected(false);
        boolean boolean13 = variance8.isBiasCorrected();
        double[] doubleArray14 = new double[] {};
        double double15 = variance8.evaluate(doubleArray14);
        secondMoment2.incrementAll(doubleArray14);
        long long17 = secondMoment2.getN();
        double double18 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        long long20 = variance19.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        long long23 = secondMoment21.getN();
        secondMoment21.clear();
        secondMoment21.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment27);
        long long29 = secondMoment27.getN();
        secondMoment27.clear();
        double double31 = secondMoment27.getResult();
        secondMoment27.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment27);
        double[] doubleArray35 = new double[] {};
        double double36 = secondMoment27.evaluate(doubleArray35);
        secondMoment21.incrementAll(doubleArray35);
        // The following exception was thrown during execution in test generation
        try {
            double double40 = variance19.evaluate(doubleArray35, (int) (short) 0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
    }

    @Test
    public void test05831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05831");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        boolean boolean8 = variance7.isBiasCorrected();
        long long9 = variance7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance11.increment((-1.0d));
        variance11.setBiasCorrected(false);
        boolean boolean16 = variance11.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double22 = variance21.getResult();
        double[] doubleArray25 = new double[] { 0L, (byte) 10 };
        double double26 = variance21.evaluate(doubleArray25);
        double double28 = variance18.evaluate(doubleArray25, (double) 10L);
        double double29 = variance11.evaluate(doubleArray25);
        long long30 = variance11.getN();
        long long31 = variance11.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance33.increment((-1.0d));
        variance33.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double44 = variance43.getResult();
        double[] doubleArray47 = new double[] { 0L, (byte) 10 };
        double double48 = variance43.evaluate(doubleArray47);
        double double50 = variance40.evaluate(doubleArray47, (double) 10L);
        double double51 = variance38.evaluate(doubleArray47);
        double double52 = variance33.evaluate(doubleArray47);
        double double53 = variance33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance55.increment((-1.0d));
        variance55.setBiasCorrected(false);
        variance55.increment(2136.8055555555557d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance63.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double69 = variance68.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double72 = variance71.getResult();
        double[] doubleArray75 = new double[] { 0L, (byte) 10 };
        double double76 = variance71.evaluate(doubleArray75);
        double double78 = variance68.evaluate(doubleArray75, (double) 10L);
        double double79 = variance66.evaluate(doubleArray75);
        double double80 = variance63.evaluate(doubleArray75);
        variance55.incrementAll(doubleArray75);
        double double82 = variance33.evaluate(doubleArray75);
        double double83 = variance11.evaluate(doubleArray75);
        // The following exception was thrown during execution in test generation
        try {
            double double87 = variance7.evaluate(doubleArray75, 50.0009765625d, (int) (short) 100, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 25.0d + "'", double29 == 25.0d);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 25.0d + "'", double83 == 25.0d);
    }

    @Test
    public void test05832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05832");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance5.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        double double20 = variance10.evaluate(doubleArray17, (double) 10L);
        double double21 = variance8.evaluate(doubleArray17);
        double double22 = variance5.evaluate(doubleArray17);
        double double23 = variance1.evaluate(doubleArray17);
        long long24 = variance1.getN();
        variance1.increment(50.0d);
        long long27 = variance1.getN();
        variance1.increment(12820.833333333334d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment30);
        long long32 = secondMoment30.getN();
        secondMoment30.clear();
        double double34 = secondMoment30.getResult();
        secondMoment30.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment30);
        double[] doubleArray38 = new double[] {};
        double double39 = secondMoment30.evaluate(doubleArray38);
        double double40 = variance1.evaluate(doubleArray38);
        boolean boolean41 = variance1.isBiasCorrected();
        double double42 = variance1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 8.15470920138889E7d + "'", double42 == 8.15470920138889E7d);
    }

    @Test
    public void test05833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05833");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        long long7 = secondMoment5.getN();
        secondMoment5.clear();
        secondMoment5.clear();
        secondMoment5.increment((double) (byte) 100);
        secondMoment5.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        double[] doubleArray24 = new double[] { 0L, (byte) 10 };
        double double25 = variance20.evaluate(doubleArray24);
        double double27 = variance17.evaluate(doubleArray24, (double) 10L);
        long long28 = variance17.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance30.increment((-1.0d));
        variance30.setBiasCorrected(false);
        boolean boolean35 = variance30.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        double[] doubleArray44 = new double[] { 0L, (byte) 10 };
        double double45 = variance40.evaluate(doubleArray44);
        double double47 = variance37.evaluate(doubleArray44, (double) 10L);
        double double48 = variance30.evaluate(doubleArray44);
        variance17.incrementAll(doubleArray44, (int) (short) 0, (int) (byte) 1);
        secondMoment5.incrementAll(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment5);
        double double54 = secondMoment5.getResult();
        secondMoment5.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment5);
        double double58 = variance57.getResult();
        double[] doubleArray59 = null;
        // The following exception was thrown during execution in test generation
        try {
            variance57.incrementAll(doubleArray59, (int) (short) -1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 25.0d + "'", double48 == 25.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
    }

    @Test
    public void test05834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05834");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double22 = variance14.evaluate(doubleArray21);
        double double23 = secondMoment7.evaluate(doubleArray21);
        long long24 = secondMoment7.getN();
        long long25 = secondMoment7.getN();
        long long26 = secondMoment7.getN();
        long long27 = secondMoment7.getN();
        long long28 = secondMoment7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        variance30.increment((double) (short) -1);
        long long34 = variance30.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        double[] doubleArray45 = new double[] { 0L, (byte) 10 };
        double double46 = variance41.evaluate(doubleArray45);
        double double48 = variance38.evaluate(doubleArray45, (double) 10L);
        double double49 = variance36.evaluate(doubleArray45);
        variance36.increment((double) 0.0f);
        boolean boolean52 = variance36.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment53);
        long long55 = secondMoment53.getN();
        secondMoment53.clear();
        secondMoment53.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment53);
        variance59.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean65 = variance63.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray74 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double75 = variance67.evaluate(doubleArray74);
        double double76 = variance63.evaluate(doubleArray74);
        double double78 = variance59.evaluate(doubleArray74, (double) 1.0f);
        double double81 = variance36.evaluate(doubleArray74, (int) (byte) 0, 1);
        double double82 = variance30.evaluate(doubleArray74);
        double double83 = secondMoment7.evaluate(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.Variance variance84 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        secondMoment7.increment(60.666666666666664d);
        double double87 = secondMoment7.getResult();
        secondMoment7.clear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2136.8055555555557d + "'", double22 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 12820.833333333334d + "'", double23 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 6L + "'", long24 == 6L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 6L + "'", long27 == 6L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 6L + "'", long28 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 2136.8055555555557d + "'", double75 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2564.166666666667d + "'", double76 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2136.805555555555d + "'", double78 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 2564.166666666667d + "'", double82 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 12820.833333333334d + "'", double83 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 13392.857142857143d + "'", double87 == 13392.857142857143d);
    }

    @Test
    public void test05835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05835");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance8.increment((-1.0d));
        variance8.setBiasCorrected(false);
        boolean boolean13 = variance8.isBiasCorrected();
        double[] doubleArray14 = new double[] {};
        double double15 = variance8.evaluate(doubleArray14);
        secondMoment2.incrementAll(doubleArray14);
        secondMoment2.clear();
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        double double20 = secondMoment2.getResult();
        secondMoment2.increment(0.0d);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        variance25.increment((double) (short) -1);
        long long29 = variance25.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        double[] doubleArray40 = new double[] { 0L, (byte) 10 };
        double double41 = variance36.evaluate(doubleArray40);
        double double43 = variance33.evaluate(doubleArray40, (double) 10L);
        double double44 = variance31.evaluate(doubleArray40);
        variance31.increment((double) 0.0f);
        boolean boolean47 = variance31.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment48);
        long long50 = secondMoment48.getN();
        secondMoment48.clear();
        secondMoment48.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment48);
        variance54.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean60 = variance58.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray69 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double70 = variance62.evaluate(doubleArray69);
        double double71 = variance58.evaluate(doubleArray69);
        double double73 = variance54.evaluate(doubleArray69, (double) 1.0f);
        double double76 = variance31.evaluate(doubleArray69, (int) (byte) 0, 1);
        double double77 = variance25.evaluate(doubleArray69);
        double[] doubleArray82 = new double[] { (short) 1, (short) 10, 1.0d, 50.0d };
        double double83 = variance25.evaluate(doubleArray82);
        secondMoment2.incrementAll(doubleArray82);
        secondMoment2.clear();
        secondMoment2.increment(1.0949710601851854E8d);
        secondMoment2.clear();
        double double89 = secondMoment2.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2136.8055555555557d + "'", double70 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2564.166666666667d + "'", double71 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 2136.805555555555d + "'", double73 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2564.166666666667d + "'", double77 == 2564.166666666667d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 10.0, 1.0, 50.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 547.0d + "'", double83 == 547.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
    }

    @Test
    public void test05836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05836");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.increment((double) (byte) 100);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance10.increment((double) 2L);
        double double13 = variance10.getResult();
        double double14 = variance10.getResult();
        boolean boolean15 = variance10.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        variance17.setBiasCorrected(false);
        boolean boolean22 = variance17.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean24 = variance17.equals((java.lang.Object) secondMoment23);
        secondMoment23.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment27);
        long long29 = secondMoment27.getN();
        secondMoment27.clear();
        double double31 = secondMoment27.getResult();
        secondMoment27.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment27);
        double[] doubleArray35 = new double[] {};
        double double36 = secondMoment27.evaluate(doubleArray35);
        double double37 = secondMoment23.evaluate(doubleArray35);
        double double38 = variance10.evaluate(doubleArray35);
        variance10.increment(2024039.120370371d);
        variance10.setBiasCorrected(true);
        variance10.increment(7657532.253333333d);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
    }

    @Test
    public void test05837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05837");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double[] doubleArray7 = new double[] {};
        double double8 = variance1.evaluate(doubleArray7);
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance13.increment((-1.0d));
        variance13.setBiasCorrected(false);
        boolean boolean18 = variance13.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean20 = variance13.equals((java.lang.Object) secondMoment19);
        double double21 = secondMoment19.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double24 = variance23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        double[] doubleArray30 = new double[] { 0L, (byte) 10 };
        double double31 = variance26.evaluate(doubleArray30);
        double double33 = variance23.evaluate(doubleArray30, (double) 10L);
        double double36 = secondMoment19.evaluate(doubleArray30, (int) (short) 0, 1);
        long long37 = secondMoment19.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double44 = variance43.getResult();
        double[] doubleArray47 = new double[] { 0L, (byte) 10 };
        double double48 = variance43.evaluate(doubleArray47);
        double double50 = variance40.evaluate(doubleArray47, (double) 10L);
        long long51 = variance40.getN();
        variance40.increment((double) 0L);
        double[] doubleArray55 = new double[] { 10.0d };
        variance40.incrementAll(doubleArray55);
        double double57 = variance38.evaluate(doubleArray55);
        double double61 = variance1.evaluate(doubleArray55, (double) 1L, 0, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance63.increment((-1.0d));
        long long66 = variance63.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance68.increment((-1.0d));
        variance68.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean76 = variance74.equals((java.lang.Object) (short) 10);
        boolean boolean77 = variance68.equals((java.lang.Object) variance74);
        long long78 = variance74.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean82 = variance80.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance84 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray91 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double92 = variance84.evaluate(doubleArray91);
        double double93 = variance80.evaluate(doubleArray91);
        double double94 = variance74.evaluate(doubleArray91);
        double double95 = variance63.evaluate(doubleArray91);
        double double96 = variance1.evaluate(doubleArray91);
        long long97 = variance1.getN();
        boolean boolean98 = variance1.isBiasCorrected();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 2136.8055555555557d + "'", double92 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 2564.166666666667d + "'", double93 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 2564.166666666667d + "'", double94 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 2564.166666666667d + "'", double95 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 2136.8055555555557d + "'", double96 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 0L + "'", long97 == 0L);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test05838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05838");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        double[] doubleArray11 = new double[] { 0L, (byte) 10 };
        double double12 = variance7.evaluate(doubleArray11);
        secondMoment1.incrementAll(doubleArray11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long15 = secondMoment1.getN();
        secondMoment1.clear();
        double[] doubleArray17 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double18 = secondMoment1.evaluate(doubleArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
    }

    @Test
    public void test05839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05839");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment(50.0009765625d);
        long long11 = secondMoment7.getN();
        long long12 = secondMoment7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        long long14 = secondMoment7.getN();
        secondMoment7.increment((-7.505999378950826E14d));
        double double17 = secondMoment7.getResult();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 2.8170013338408847E29d + "'", double17 == 2.8170013338408847E29d);
    }

    @Test
    public void test05840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05840");
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.setBiasCorrected(false);
        boolean boolean8 = variance3.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean10 = variance3.equals((java.lang.Object) secondMoment9);
        secondMoment9.increment((double) (short) 0);
        secondMoment9.increment((double) 1);
        secondMoment9.increment(4671050.520833335d);
        double double17 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.increment(2.0432086265156394E12d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.4545805531418566E13d + "'", double17 == 1.4545805531418566E13d);
    }

    @Test
    public void test05841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05841");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = secondMoment8.evaluate(doubleArray22);
        long long25 = secondMoment8.getN();
        long long26 = secondMoment8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        double[] doubleArray37 = new double[] { 0L, (byte) 10 };
        double double38 = variance33.evaluate(doubleArray37);
        double double40 = variance30.evaluate(doubleArray37, (double) 10L);
        long long41 = variance30.getN();
        variance30.increment((double) 0L);
        variance30.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance46.increment((-1.0d));
        variance46.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double54 = variance53.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double57 = variance56.getResult();
        double[] doubleArray60 = new double[] { 0L, (byte) 10 };
        double double61 = variance56.evaluate(doubleArray60);
        double double63 = variance53.evaluate(doubleArray60, (double) 10L);
        double double64 = variance51.evaluate(doubleArray60);
        double double65 = variance46.evaluate(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double68 = variance67.getResult();
        double[] doubleArray71 = new double[] { 0L, (byte) 10 };
        double double72 = variance67.evaluate(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray81 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double82 = variance74.evaluate(doubleArray81);
        double double83 = variance67.evaluate(doubleArray81);
        double double84 = variance46.evaluate(doubleArray81);
        double double86 = variance30.evaluate(doubleArray81, 227.3d);
        double double87 = secondMoment8.evaluate(doubleArray81);
        long long88 = secondMoment8.getN();
        double double89 = secondMoment8.getResult();
        secondMoment8.increment(2.731142746998975E12d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 12820.833333333334d + "'", double24 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 2136.8055555555557d + "'", double82 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2564.166666666667d + "'", double83 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2564.166666666667d + "'", double84 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2564.166666666686d + "'", double86 == 2564.166666666686d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 12820.833333333334d + "'", double87 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 6L + "'", long88 == 6L);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 12820.833333333334d + "'", double89 == 12820.833333333334d);
    }

    @Test
    public void test05842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05842");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        secondMoment0.increment(25.0d);
        secondMoment0.clear();
        double double9 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        long long14 = secondMoment12.getN();
        secondMoment12.clear();
        double double16 = secondMoment12.getResult();
        secondMoment12.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        double[] doubleArray20 = new double[] {};
        double double21 = secondMoment12.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment12);
        double double24 = variance23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean28 = variance26.equals((java.lang.Object) (short) 10);
        double double29 = variance26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        double[] doubleArray38 = new double[] { 0L, (byte) 10 };
        double double39 = variance34.evaluate(doubleArray38);
        double double41 = variance31.evaluate(doubleArray38, (double) 10L);
        double double42 = variance26.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.increment((-1.0d));
        variance44.setBiasCorrected(false);
        boolean boolean49 = variance44.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean51 = variance44.equals((java.lang.Object) secondMoment50);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double54 = variance53.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double57 = variance56.getResult();
        double[] doubleArray60 = new double[] { 0L, (byte) 10 };
        double double61 = variance56.evaluate(doubleArray60);
        double double63 = variance53.evaluate(doubleArray60, (double) 10L);
        double double67 = variance44.evaluate(doubleArray60, (double) (short) 0, 0, (int) (short) 0);
        double double70 = variance26.evaluate(doubleArray60, 0, (int) (byte) 1);
        double double71 = variance23.evaluate(doubleArray60);
        secondMoment0.incrementAll(doubleArray60);
        double double73 = secondMoment0.getResult();
        secondMoment0.clear();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 25.0d + "'", double71 == 25.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
    }

    @Test
    public void test05843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05843");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        secondMoment7.clear();
        secondMoment7.clear();
        long long16 = secondMoment7.getN();
        long long17 = secondMoment7.getN();
        secondMoment7.clear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test05844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05844");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        variance1.increment((double) (short) -1);
        double double5 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        double[] doubleArray11 = new double[] { 0L, (byte) 10 };
        double double12 = variance7.evaluate(doubleArray11);
        double double13 = variance1.evaluate(doubleArray11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        boolean boolean18 = variance15.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.setBiasCorrected(false);
        variance20.increment((double) 100L);
        boolean boolean27 = variance20.isBiasCorrected();
        boolean boolean28 = variance20.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray37 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double38 = variance30.evaluate(doubleArray37);
        double double40 = variance20.evaluate(doubleArray37, (double) (byte) 10);
        double double41 = variance15.evaluate(doubleArray37);
        variance1.incrementAll(doubleArray37, 0, 1);
        boolean boolean45 = variance1.isBiasCorrected();
        double double46 = variance1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2136.8055555555557d + "'", double38 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2136.8055555555557d + "'", double40 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2564.166666666667d + "'", double41 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
    }

    @Test
    public void test05845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05845");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double double7 = variance1.getResult();
        variance1.setBiasCorrected(true);
        variance1.increment(227.3d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance18.increment((-1.0d));
        variance18.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        double[] doubleArray32 = new double[] { 0L, (byte) 10 };
        double double33 = variance28.evaluate(doubleArray32);
        double double35 = variance25.evaluate(doubleArray32, (double) 10L);
        double double36 = variance23.evaluate(doubleArray32);
        double double37 = variance18.evaluate(doubleArray32);
        variance16.incrementAll(doubleArray32);
        double double39 = variance13.evaluate(doubleArray32);
        variance1.incrementAll(doubleArray32);
        double double41 = variance1.getResult();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 12602.289166666667d + "'", double41 == 12602.289166666667d);
    }

    @Test
    public void test05846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05846");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance7.increment((-1.0d));
        variance7.setBiasCorrected(false);
        boolean boolean12 = variance7.isBiasCorrected();
        double[] doubleArray13 = new double[] {};
        double double14 = variance7.evaluate(doubleArray13);
        secondMoment1.incrementAll(doubleArray13);
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test05847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05847");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance6.setBiasCorrected(false);
        double double9 = variance6.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        long long12 = secondMoment10.getN();
        secondMoment10.clear();
        secondMoment10.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        variance17.setBiasCorrected(false);
        boolean boolean22 = variance17.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean24 = variance17.equals((java.lang.Object) secondMoment23);
        variance17.increment((double) 100L);
        variance17.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        double[] doubleArray39 = new double[] { 0L, (byte) 10 };
        double double40 = variance35.evaluate(doubleArray39);
        double double42 = variance32.evaluate(doubleArray39, (double) 10L);
        double double43 = variance30.evaluate(doubleArray39);
        double[] doubleArray47 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double48 = variance30.evaluate(doubleArray47);
        variance17.incrementAll(doubleArray47);
        double double50 = variance15.evaluate(doubleArray47);
        variance6.incrementAll(doubleArray47);
        variance6.increment((double) 100.0f);
        double double54 = variance6.getResult();
        variance6.clear();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2024039.120370371d + "'", double48 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2024039.120370371d + "'", double50 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    }

    @Test
    public void test05848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05848");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        double double4 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        long long9 = secondMoment7.getN();
        secondMoment7.clear();
        secondMoment7.clear();
        secondMoment7.increment((double) (byte) 100);
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        secondMoment7.clear();
        secondMoment7.increment(2024039.12109375d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance21.increment((-1.0d));
        variance21.setBiasCorrected(false);
        boolean boolean26 = variance21.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean28 = variance21.equals((java.lang.Object) secondMoment27);
        variance21.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean34 = variance32.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray43 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double44 = variance36.evaluate(doubleArray43);
        double double45 = variance32.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance47.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double53 = variance52.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double56 = variance55.getResult();
        double[] doubleArray59 = new double[] { 0L, (byte) 10 };
        double double60 = variance55.evaluate(doubleArray59);
        double double62 = variance52.evaluate(doubleArray59, (double) 10L);
        double double63 = variance50.evaluate(doubleArray59);
        double double64 = variance47.evaluate(doubleArray59);
        double double65 = variance32.evaluate(doubleArray59);
        double double67 = variance21.evaluate(doubleArray59, (double) 0L);
        double double68 = secondMoment7.evaluate(doubleArray59);
        variance1.incrementAll(doubleArray59);
        variance1.increment(0.0d);
        java.lang.Class<?> wildcardClass72 = variance1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2136.8055555555557d + "'", double44 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2564.166666666667d + "'", double45 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 25.0d + "'", double67 == 25.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test05849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05849");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double22 = variance14.evaluate(doubleArray21);
        double double23 = secondMoment7.evaluate(doubleArray21);
        long long24 = secondMoment7.getN();
        long long25 = secondMoment7.getN();
        secondMoment7.increment((double) (short) 0);
        long long28 = secondMoment7.getN();
        secondMoment7.clear();
        double double30 = secondMoment7.getResult();
        long long31 = secondMoment7.getN();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2136.8055555555557d + "'", double22 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 12820.833333333334d + "'", double23 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 6L + "'", long24 == 6L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 7L + "'", long28 == 7L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
    }

    @Test
    public void test05850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05850");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        variance12.increment((double) (short) -1);
        double double16 = variance12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        double[] doubleArray22 = new double[] { 0L, (byte) 10 };
        double double23 = variance18.evaluate(doubleArray22);
        double double24 = variance12.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment26);
        double double28 = secondMoment26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment26);
        secondMoment26.clear();
        secondMoment26.increment((double) 2L);
        double double33 = secondMoment26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance35.increment((-1.0d));
        long long38 = variance35.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance43.increment((-1.0d));
        variance43.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double54 = variance53.getResult();
        double[] doubleArray57 = new double[] { 0L, (byte) 10 };
        double double58 = variance53.evaluate(doubleArray57);
        double double60 = variance50.evaluate(doubleArray57, (double) 10L);
        double double61 = variance48.evaluate(doubleArray57);
        double double62 = variance43.evaluate(doubleArray57);
        variance41.incrementAll(doubleArray57);
        variance39.incrementAll(doubleArray57);
        double double65 = variance35.evaluate(doubleArray57);
        boolean boolean66 = secondMoment26.equals((java.lang.Object) doubleArray57);
        double double67 = variance12.evaluate(doubleArray57);
        // The following exception was thrown during execution in test generation
        try {
            double double70 = variance1.evaluate(doubleArray57, 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
    }

    @Test
    public void test05851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05851");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = secondMoment8.evaluate(doubleArray22);
        long long25 = secondMoment8.getN();
        long long26 = secondMoment8.getN();
        long long27 = secondMoment8.getN();
        secondMoment8.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        variance31.increment((double) (short) -1);
        long long35 = variance31.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        double[] doubleArray46 = new double[] { 0L, (byte) 10 };
        double double47 = variance42.evaluate(doubleArray46);
        double double49 = variance39.evaluate(doubleArray46, (double) 10L);
        double double50 = variance37.evaluate(doubleArray46);
        variance37.increment((double) 0.0f);
        boolean boolean53 = variance37.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment54);
        long long56 = secondMoment54.getN();
        secondMoment54.clear();
        secondMoment54.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment54);
        variance60.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean66 = variance64.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray75 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double76 = variance68.evaluate(doubleArray75);
        double double77 = variance64.evaluate(doubleArray75);
        double double79 = variance60.evaluate(doubleArray75, (double) 1.0f);
        double double82 = variance37.evaluate(doubleArray75, (int) (byte) 0, 1);
        double double83 = variance31.evaluate(doubleArray75);
        double double84 = secondMoment8.evaluate(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Variance variance85 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance86 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 12820.833333333334d + "'", double24 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 6L + "'", long27 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2136.8055555555557d + "'", double76 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2564.166666666667d + "'", double77 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 2136.805555555555d + "'", double79 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2564.166666666667d + "'", double83 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 12820.833333333334d + "'", double84 == 12820.833333333334d);
    }

    @Test
    public void test05852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05852");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        long long5 = secondMoment0.getN();
        secondMoment0.increment(2024039.120370371d);
        secondMoment0.increment(2550.25d);
        long long10 = secondMoment0.getN();
        double double11 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance14.increment((-1.0d));
        variance14.setBiasCorrected(false);
        boolean boolean19 = variance14.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean21 = variance14.equals((java.lang.Object) secondMoment20);
        secondMoment20.increment((double) (short) 0);
        secondMoment20.increment((double) 1.0f);
        double double26 = secondMoment20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment20);
        secondMoment20.increment(25.00000011920929d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance32.increment((-1.0d));
        variance32.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean39 = variance37.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double44 = variance43.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double47 = variance46.getResult();
        double[] doubleArray50 = new double[] { 0L, (byte) 10 };
        double double51 = variance46.evaluate(doubleArray50);
        double double53 = variance43.evaluate(doubleArray50, (double) 10L);
        double double54 = variance41.evaluate(doubleArray50);
        double[] doubleArray58 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double59 = variance41.evaluate(doubleArray58);
        double double61 = variance37.evaluate(doubleArray58, (double) (byte) 1);
        double double63 = variance32.evaluate(doubleArray58, 4048078.240740742d);
        double double64 = variance30.evaluate(doubleArray58);
        secondMoment0.incrementAll(doubleArray58);
        long long66 = secondMoment0.getN();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2L + "'", long10 == 2L);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2.0432086265156394E12d + "'", double11 == 2.0432086265156394E12d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.5d + "'", double26 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2024039.120370371d + "'", double59 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2024039.120370371d + "'", double61 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2024039.12109375d + "'", double63 == 2024039.12109375d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2024039.120370371d + "'", double64 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 5L + "'", long66 == 5L);
    }

    @Test
    public void test05853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05853");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance8.increment((-1.0d));
        variance8.setBiasCorrected(false);
        boolean boolean13 = variance8.isBiasCorrected();
        double[] doubleArray14 = new double[] {};
        double double15 = variance8.evaluate(doubleArray14);
        secondMoment2.incrementAll(doubleArray14);
        secondMoment2.clear();
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        double double20 = secondMoment2.getResult();
        long long21 = secondMoment2.getN();
        secondMoment2.increment(0.5d);
        long long24 = secondMoment2.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
    }

    @Test
    public void test05854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05854");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        double double4 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        double[] doubleArray13 = new double[] { 0L, (byte) 10 };
        double double14 = variance9.evaluate(doubleArray13);
        double double16 = variance6.evaluate(doubleArray13, (double) 10L);
        double double17 = variance1.evaluate(doubleArray13);
        double double18 = variance1.getResult();
        double double19 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        long long22 = secondMoment20.getN();
        secondMoment20.clear();
        secondMoment20.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        variance26.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        long long30 = secondMoment28.getN();
        secondMoment28.clear();
        secondMoment28.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        variance34.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean40 = variance38.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray49 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double50 = variance42.evaluate(doubleArray49);
        double double51 = variance38.evaluate(doubleArray49);
        double double53 = variance34.evaluate(doubleArray49, (double) 1.0f);
        double double54 = variance26.evaluate(doubleArray49);
        variance1.incrementAll(doubleArray49);
        variance1.clear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2136.8055555555557d + "'", double50 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2564.166666666667d + "'", double51 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2136.805555555555d + "'", double53 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2564.166666666667d + "'", double54 == 2564.166666666667d);
    }

    @Test
    public void test05855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05855");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double2 = secondMoment0.getResult();
        secondMoment0.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        long long7 = secondMoment5.getN();
        secondMoment5.clear();
        secondMoment5.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        variance11.clear();
        double double13 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.setBiasCorrected(false);
        boolean boolean20 = variance15.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean22 = variance15.equals((java.lang.Object) secondMoment21);
        double double23 = secondMoment21.getResult();
        secondMoment21.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        double[] doubleArray33 = new double[] { 0L, (byte) 10 };
        double double34 = variance29.evaluate(doubleArray33);
        double double36 = variance26.evaluate(doubleArray33, (double) 10L);
        long long37 = variance26.getN();
        variance26.increment((double) 0L);
        double[] doubleArray41 = new double[] { 10.0d };
        variance26.incrementAll(doubleArray41);
        secondMoment21.incrementAll(doubleArray41);
        double double45 = variance11.evaluate(doubleArray41, (double) 100.0f);
        boolean boolean46 = secondMoment0.equals((java.lang.Object) 100.0f);
        secondMoment0.increment(Double.NaN);
        long long49 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance53.increment((-1.0d));
        variance53.setBiasCorrected(false);
        variance53.increment(2136.8055555555557d);
        variance53.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment62);
        long long64 = secondMoment62.getN();
        secondMoment62.clear();
        double double66 = secondMoment62.getResult();
        secondMoment62.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment62);
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance71.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double77 = variance76.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double80 = variance79.getResult();
        double[] doubleArray83 = new double[] { 0L, (byte) 10 };
        double double84 = variance79.evaluate(doubleArray83);
        double double86 = variance76.evaluate(doubleArray83, (double) 10L);
        double double87 = variance74.evaluate(doubleArray83);
        double double88 = variance71.evaluate(doubleArray83);
        variance69.incrementAll(doubleArray83);
        double double91 = variance53.evaluate(doubleArray83, (double) 3L);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray83, (int) (byte) 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 2L + "'", long49 == 2L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 25.0d + "'", double91 == 25.0d);
    }

    @Test
    public void test05856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05856");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = secondMoment8.evaluate(doubleArray22);
        long long25 = secondMoment8.getN();
        long long26 = secondMoment8.getN();
        secondMoment8.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        variance29.increment(5.7261176190072966E17d);
        double[] doubleArray32 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double35 = variance29.evaluate(doubleArray32, (int) '4', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 12820.833333333334d + "'", double24 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
    }

    @Test
    public void test05857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05857");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double2 = secondMoment0.getResult();
        secondMoment0.clear();
        long long4 = secondMoment0.getN();
        secondMoment0.increment((double) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        double[] doubleArray12 = new double[] { 0L, (byte) 10 };
        double double13 = variance8.evaluate(doubleArray12);
        long long14 = variance8.getN();
        variance8.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double24 = variance23.getResult();
        double[] doubleArray27 = new double[] { 0L, (byte) 10 };
        double double28 = variance23.evaluate(doubleArray27);
        double double30 = variance20.evaluate(doubleArray27, (double) 10L);
        double double31 = variance18.evaluate(doubleArray27);
        variance18.increment((double) 0.0f);
        boolean boolean34 = variance18.isBiasCorrected();
        long long35 = variance18.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance37.increment((-1.0d));
        variance37.setBiasCorrected(false);
        boolean boolean42 = variance37.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean44 = variance37.equals((java.lang.Object) secondMoment43);
        secondMoment43.increment((double) (short) 0);
        secondMoment43.increment((double) 1.0f);
        double double49 = secondMoment43.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment43);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment43);
        boolean boolean52 = variance18.equals((java.lang.Object) variance51);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance54.increment((-1.0d));
        variance54.setBiasCorrected(false);
        boolean boolean59 = variance54.isBiasCorrected();
        double[] doubleArray60 = new double[] {};
        double double61 = variance54.evaluate(doubleArray60);
        variance54.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double68 = variance67.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double71 = variance70.getResult();
        double[] doubleArray74 = new double[] { 0L, (byte) 10 };
        double double75 = variance70.evaluate(doubleArray74);
        double double77 = variance67.evaluate(doubleArray74, (double) 10L);
        double double78 = variance65.evaluate(doubleArray74);
        variance54.incrementAll(doubleArray74);
        double double83 = variance18.evaluate(doubleArray74, 14205.875d, (int) (short) 1, 0);
        variance8.incrementAll(doubleArray74);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray74, (int) (byte) 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.5d + "'", double49 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
    }

    @Test
    public void test05858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05858");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        double double14 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double22 = variance21.getResult();
        double[] doubleArray25 = new double[] { 0L, (byte) 10 };
        double double26 = variance21.evaluate(doubleArray25);
        double double28 = variance18.evaluate(doubleArray25, (double) 10L);
        long long29 = variance18.getN();
        variance18.increment((double) 0L);
        long long32 = variance18.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance35.increment((-1.0d));
        variance35.setBiasCorrected(false);
        boolean boolean40 = variance35.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean42 = variance35.equals((java.lang.Object) secondMoment41);
        double double43 = secondMoment41.getResult();
        secondMoment41.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment41);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance47.increment((-1.0d));
        variance47.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        double[] doubleArray61 = new double[] { 0L, (byte) 10 };
        double double62 = variance57.evaluate(doubleArray61);
        double double64 = variance54.evaluate(doubleArray61, (double) 10L);
        double double65 = variance52.evaluate(doubleArray61);
        double double66 = variance47.evaluate(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double69 = variance68.getResult();
        double[] doubleArray72 = new double[] { 0L, (byte) 10 };
        double double73 = variance68.evaluate(doubleArray72);
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray82 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double83 = variance75.evaluate(doubleArray82);
        double double84 = variance68.evaluate(doubleArray82);
        double double85 = variance47.evaluate(doubleArray82);
        double double86 = variance45.evaluate(doubleArray82);
        double double88 = variance18.evaluate(doubleArray82, (double) (byte) 1);
        double double89 = secondMoment8.evaluate(doubleArray82);
        org.apache.commons.math.stat.descriptive.moment.Variance variance90 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        double double91 = secondMoment8.getResult();
        secondMoment8.increment((double) 7L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2136.8055555555557d + "'", double83 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2564.166666666667d + "'", double84 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2564.166666666667d + "'", double85 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2136.8055555555557d + "'", double86 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 2564.1666666666665d + "'", double88 == 2564.1666666666665d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 12820.833333333334d + "'", double89 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 12820.833333333334d + "'", double91 == 12820.833333333334d);
    }

    @Test
    public void test05859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05859");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        secondMoment7.clear();
        secondMoment7.increment(60.5d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        long long15 = variance14.getN();
        long long16 = variance14.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        variance18.increment((double) (short) -1);
        double double22 = variance18.getResult();
        variance18.increment(50.0d);
        double double25 = variance18.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment27);
        double double29 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment27);
        secondMoment27.clear();
        secondMoment27.increment((double) 2L);
        double double34 = secondMoment27.getResult();
        secondMoment27.increment(50.0d);
        double double37 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment27);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        double[] doubleArray49 = new double[] { 0L, (byte) 10 };
        double double50 = variance45.evaluate(doubleArray49);
        double double52 = variance42.evaluate(doubleArray49, (double) 10L);
        double double53 = variance40.evaluate(doubleArray49);
        variance40.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean59 = variance57.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray68 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double69 = variance61.evaluate(doubleArray68);
        double double70 = variance57.evaluate(doubleArray68);
        variance40.incrementAll(doubleArray68);
        double double72 = variance40.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance74.increment((-1.0d));
        variance74.setBiasCorrected(false);
        boolean boolean79 = variance74.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment80 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean81 = variance74.equals((java.lang.Object) secondMoment80);
        secondMoment80.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment84 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance85 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment84);
        long long86 = secondMoment84.getN();
        secondMoment84.clear();
        double double88 = secondMoment84.getResult();
        secondMoment84.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance91 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment84);
        double[] doubleArray92 = new double[] {};
        double double93 = secondMoment84.evaluate(doubleArray92);
        double double94 = secondMoment80.evaluate(doubleArray92);
        double double95 = variance40.evaluate(doubleArray92);
        double double96 = variance38.evaluate(doubleArray92);
        double double97 = variance18.evaluate(doubleArray92);
        double double98 = variance14.evaluate(doubleArray92);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1300.5d + "'", double25 == 1300.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1152.0d + "'", double37 == 1152.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2136.8055555555557d + "'", double69 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2564.166666666667d + "'", double70 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2310.1428571428573d + "'", double72 == 2310.1428571428573d);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double95));
        org.junit.Assert.assertTrue(Double.isNaN(double96));
        org.junit.Assert.assertTrue(Double.isNaN(double97));
        org.junit.Assert.assertTrue(Double.isNaN(double98));
    }

    @Test
    public void test05860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05860");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = secondMoment8.evaluate(doubleArray22);
        long long25 = secondMoment8.getN();
        long long26 = secondMoment8.getN();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        variance28.increment(25.00000011920929d);
        variance28.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray41 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double42 = variance34.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray51 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double52 = variance44.evaluate(doubleArray51);
        double double54 = variance34.evaluate(doubleArray51, (double) '#');
        double double55 = variance34.getResult();
        variance34.increment(2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment58);
        long long60 = secondMoment58.getN();
        secondMoment58.clear();
        secondMoment58.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment58);
        variance64.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance67.increment((-1.0d));
        variance67.setBiasCorrected(false);
        boolean boolean72 = variance67.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment73 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean74 = variance67.equals((java.lang.Object) secondMoment73);
        secondMoment73.increment((double) (short) 0);
        secondMoment73.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray87 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double88 = variance80.evaluate(doubleArray87);
        double double89 = secondMoment73.evaluate(doubleArray87);
        variance64.incrementAll(doubleArray87);
        double double92 = variance34.evaluate(doubleArray87, 1127637.5094521607d);
        double double94 = variance28.evaluate(doubleArray87, (double) 5L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 12820.833333333334d + "'", double24 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2136.8055555555557d + "'", double42 == 2136.8055555555557d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2136.8055555555557d + "'", double52 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2136.8055555555557d + "'", double54 == 2136.8055555555557d);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 2136.8055555555557d + "'", double88 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 12820.833333333334d + "'", double89 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 2136.8055013020835d + "'", double92 == 2136.8055013020835d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 2564.1666666666665d + "'", double94 == 2564.1666666666665d);
    }

    @Test
    public void test05861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05861");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        variance9.increment((double) (short) -1);
        long long13 = variance9.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        double[] doubleArray24 = new double[] { 0L, (byte) 10 };
        double double25 = variance20.evaluate(doubleArray24);
        double double27 = variance17.evaluate(doubleArray24, (double) 10L);
        double double28 = variance15.evaluate(doubleArray24);
        variance15.increment((double) 0.0f);
        boolean boolean31 = variance15.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        long long34 = secondMoment32.getN();
        secondMoment32.clear();
        secondMoment32.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        variance38.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean44 = variance42.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray53 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double54 = variance46.evaluate(doubleArray53);
        double double55 = variance42.evaluate(doubleArray53);
        double double57 = variance38.evaluate(doubleArray53, (double) 1.0f);
        double double60 = variance15.evaluate(doubleArray53, (int) (byte) 0, 1);
        double double61 = variance9.evaluate(doubleArray53);
        boolean boolean62 = variance1.equals((java.lang.Object) doubleArray53);
        long long63 = variance1.getN();
        double double64 = variance1.getResult();
        long long65 = variance1.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2136.8055555555557d + "'", double54 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2564.166666666667d + "'", double55 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2136.805555555555d + "'", double57 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2564.166666666667d + "'", double61 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 2L + "'", long63 == 2L);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2550.25d + "'", double64 == 2550.25d);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 2L + "'", long65 == 2L);
    }

    @Test
    public void test05862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05862");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.clear();
        secondMoment0.increment(2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment(13860.857142857143d);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test05863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05863");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        long long7 = variance1.getN();
        boolean boolean8 = variance1.isBiasCorrected();
        variance1.increment((double) (byte) 100);
        boolean boolean11 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance13.clear();
        variance13.increment((double) (short) -1);
        boolean boolean17 = variance13.isBiasCorrected();
        variance13.increment((double) 6L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance21.increment((-1.0d));
        variance21.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray34 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double35 = variance27.evaluate(doubleArray34);
        variance21.incrementAll(doubleArray34);
        variance13.incrementAll(doubleArray34);
        variance13.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        variance40.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance45.increment((-1.0d));
        variance45.setBiasCorrected(false);
        boolean boolean50 = variance45.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean52 = variance45.equals((java.lang.Object) secondMoment51);
        double double53 = secondMoment51.getResult();
        secondMoment51.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment51);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment57 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment57);
        double double59 = secondMoment57.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment57);
        secondMoment57.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance63.increment((-1.0d));
        variance63.setBiasCorrected(false);
        boolean boolean68 = variance63.isBiasCorrected();
        double[] doubleArray69 = new double[] {};
        double double70 = variance63.evaluate(doubleArray69);
        secondMoment57.incrementAll(doubleArray69);
        double double72 = variance55.evaluate(doubleArray69);
        double double73 = variance40.evaluate(doubleArray69);
        variance13.incrementAll(doubleArray69);
        double double75 = variance1.evaluate(doubleArray69);
        variance1.increment(2.731142746998975E12d);
        variance1.clear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 2136.8055555555557d + "'", double35 == 2136.8055555555557d);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double75));
    }

    @Test
    public void test05864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05864");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        double double5 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        secondMoment3.clear();
        secondMoment3.increment((double) 2L);
        double double10 = secondMoment3.getResult();
        secondMoment3.increment(50.0d);
        double double13 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment3);
        double double16 = secondMoment3.getResult();
        long long17 = secondMoment3.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance19.increment((-1.0d));
        variance19.setBiasCorrected(false);
        boolean boolean24 = variance19.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment26);
        double double28 = secondMoment26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment26);
        secondMoment26.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        double[] doubleArray36 = new double[] { 0L, (byte) 10 };
        double double37 = variance32.evaluate(doubleArray36);
        secondMoment26.incrementAll(doubleArray36);
        boolean boolean39 = variance19.equals((java.lang.Object) secondMoment26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance41.increment((-1.0d));
        variance41.setBiasCorrected(false);
        boolean boolean46 = variance41.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean48 = variance41.equals((java.lang.Object) secondMoment47);
        boolean boolean49 = secondMoment26.equals((java.lang.Object) boolean48);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance51.increment((-1.0d));
        variance51.setBiasCorrected(false);
        boolean boolean56 = variance51.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment57 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean58 = variance51.equals((java.lang.Object) secondMoment57);
        secondMoment57.increment((double) (short) 0);
        secondMoment57.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray71 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double72 = variance64.evaluate(doubleArray71);
        double double73 = secondMoment57.evaluate(doubleArray71);
        double double74 = secondMoment26.evaluate(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance76.increment((-1.0d));
        variance76.setBiasCorrected(false);
        variance76.increment((double) 100L);
        boolean boolean83 = variance76.isBiasCorrected();
        variance76.clear();
        double double85 = variance76.getResult();
        boolean boolean86 = secondMoment26.equals((java.lang.Object) double85);
        org.apache.commons.math.stat.descriptive.moment.Variance variance87 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment26);
        secondMoment26.clear();
        secondMoment26.clear();
        secondMoment26.increment(13802.0d);
        double double92 = secondMoment26.getResult();
        boolean boolean93 = secondMoment3.equals((java.lang.Object) double92);
        long long94 = secondMoment3.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1152.0d + "'", double13 == 1152.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1152.0d + "'", double16 == 1152.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2136.8055555555557d + "'", double72 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 12820.833333333334d + "'", double73 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 12820.833333333334d + "'", double74 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 2L + "'", long94 == 2L);
    }

    @Test
    public void test05865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05865");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = secondMoment8.evaluate(doubleArray22);
        long long25 = secondMoment8.getN();
        long long26 = secondMoment8.getN();
        long long27 = secondMoment8.getN();
        secondMoment8.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        variance31.increment((double) (short) -1);
        long long35 = variance31.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        double[] doubleArray46 = new double[] { 0L, (byte) 10 };
        double double47 = variance42.evaluate(doubleArray46);
        double double49 = variance39.evaluate(doubleArray46, (double) 10L);
        double double50 = variance37.evaluate(doubleArray46);
        variance37.increment((double) 0.0f);
        boolean boolean53 = variance37.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment54);
        long long56 = secondMoment54.getN();
        secondMoment54.clear();
        secondMoment54.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment54);
        variance60.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean66 = variance64.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray75 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double76 = variance68.evaluate(doubleArray75);
        double double77 = variance64.evaluate(doubleArray75);
        double double79 = variance60.evaluate(doubleArray75, (double) 1.0f);
        double double82 = variance37.evaluate(doubleArray75, (int) (byte) 0, 1);
        double double83 = variance31.evaluate(doubleArray75);
        double double84 = secondMoment8.evaluate(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Variance variance85 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        variance85.increment(2268035.8522376535d);
        variance85.increment(1352.0d);
        double double90 = variance85.getResult();
        variance85.increment((double) 100.0f);
        variance85.clear();
        double double94 = variance85.getResult();
        double[] doubleArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double96 = variance85.evaluate(doubleArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 12820.833333333334d + "'", double24 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 6L + "'", long27 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2136.8055555555557d + "'", double76 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2564.166666666667d + "'", double77 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 2136.805555555555d + "'", double79 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2564.166666666667d + "'", double83 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 12820.833333333334d + "'", double84 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 2564.166666666667d + "'", double90 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 2564.166666666667d + "'", double94 == 2564.166666666667d);
    }

    @Test
    public void test05866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05866");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        double double5 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        double[] doubleArray13 = new double[] { 0L, (byte) 10 };
        double double14 = variance9.evaluate(doubleArray13);
        secondMoment3.incrementAll(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        secondMoment3.clear();
        secondMoment3.increment(Double.NaN);
        secondMoment3.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean26 = variance24.equals((java.lang.Object) (short) 10);
        double double27 = variance24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        double[] doubleArray36 = new double[] { 0L, (byte) 10 };
        double double37 = variance32.evaluate(doubleArray36);
        double double39 = variance29.evaluate(doubleArray36, (double) 10L);
        double double40 = variance24.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance42.increment((-1.0d));
        variance42.setBiasCorrected(false);
        boolean boolean47 = variance42.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean49 = variance42.equals((java.lang.Object) secondMoment48);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        double[] doubleArray58 = new double[] { 0L, (byte) 10 };
        double double59 = variance54.evaluate(doubleArray58);
        double double61 = variance51.evaluate(doubleArray58, (double) 10L);
        double double65 = variance42.evaluate(doubleArray58, (double) (short) 0, 0, (int) (short) 0);
        double double68 = variance24.evaluate(doubleArray58, 0, (int) (byte) 1);
        secondMoment3.incrementAll(doubleArray58, (int) (short) 0, (int) (byte) 1);
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        double double74 = variance73.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
    }

    @Test
    public void test05867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05867");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        variance1.increment((double) (short) -1);
        long long5 = variance1.getN();
        variance1.setBiasCorrected(false);
        double double8 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance11.increment((-1.0d));
        variance11.setBiasCorrected(false);
        variance11.increment((double) 100L);
        boolean boolean18 = variance11.isBiasCorrected();
        variance11.clear();
        long long20 = variance11.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        double double24 = secondMoment22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment22);
        secondMoment22.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        double[] doubleArray32 = new double[] { 0L, (byte) 10 };
        double double33 = variance28.evaluate(doubleArray32);
        secondMoment22.incrementAll(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean39 = variance37.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance41.increment((-1.0d));
        variance41.setBiasCorrected(false);
        boolean boolean46 = variance41.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean48 = variance41.equals((java.lang.Object) secondMoment47);
        double double49 = secondMoment47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        double[] doubleArray58 = new double[] { 0L, (byte) 10 };
        double double59 = variance54.evaluate(doubleArray58);
        double double61 = variance51.evaluate(doubleArray58, (double) 10L);
        double double64 = secondMoment47.evaluate(doubleArray58, (int) (short) 0, 1);
        double double65 = variance37.evaluate(doubleArray58);
        secondMoment22.incrementAll(doubleArray58);
        double double67 = variance11.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance69.increment((-1.0d));
        variance69.setBiasCorrected(false);
        boolean boolean74 = variance69.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment75 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean76 = variance69.equals((java.lang.Object) secondMoment75);
        secondMoment75.increment((double) (short) 0);
        secondMoment75.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance82 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray89 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double90 = variance82.evaluate(doubleArray89);
        double double91 = secondMoment75.evaluate(doubleArray89);
        double double92 = variance11.evaluate(doubleArray89);
        double double93 = variance9.evaluate(doubleArray89);
        double double94 = variance1.evaluate(doubleArray89);
        variance1.clear();
        boolean boolean96 = variance1.isBiasCorrected();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 25.0d + "'", double67 == 25.0d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 2136.8055555555557d + "'", double90 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 12820.833333333334d + "'", double91 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 2136.8055555555557d + "'", double92 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 2564.166666666667d + "'", double93 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 2136.8055555555557d + "'", double94 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test05868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05868");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double3 = variance2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double6 = variance5.getResult();
        double[] doubleArray9 = new double[] { 0L, (byte) 10 };
        double double10 = variance5.evaluate(doubleArray9);
        double double12 = variance2.evaluate(doubleArray9, (double) 10L);
        long long13 = variance2.getN();
        boolean boolean14 = secondMoment0.equals((java.lang.Object) long13);
        secondMoment0.increment(50.0d);
        double double17 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance19.increment((-1.0d));
        boolean boolean22 = variance19.isBiasCorrected();
        double double23 = variance19.getResult();
        variance19.clear();
        boolean boolean25 = variance19.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        variance27.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance32.increment((-1.0d));
        variance32.setBiasCorrected(false);
        boolean boolean37 = variance32.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean39 = variance32.equals((java.lang.Object) secondMoment38);
        double double40 = secondMoment38.getResult();
        secondMoment38.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment38);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment44);
        double double46 = secondMoment44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment44);
        secondMoment44.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance50.increment((-1.0d));
        variance50.setBiasCorrected(false);
        boolean boolean55 = variance50.isBiasCorrected();
        double[] doubleArray56 = new double[] {};
        double double57 = variance50.evaluate(doubleArray56);
        secondMoment44.incrementAll(doubleArray56);
        double double59 = variance42.evaluate(doubleArray56);
        double double60 = variance27.evaluate(doubleArray56);
        double double61 = variance19.evaluate(doubleArray56);
        double double62 = secondMoment0.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment(5000.0d);
        secondMoment0.increment(0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 50.0d + "'", double10 == 50.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
    }

    @Test
    public void test05869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05869");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance4.increment((-1.0d));
        variance4.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double22 = variance9.evaluate(doubleArray18);
        double double23 = variance4.evaluate(doubleArray18);
        variance2.incrementAll(doubleArray18);
        variance0.incrementAll(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        double[] doubleArray31 = new double[] { 0L, (byte) 10 };
        double double32 = variance27.evaluate(doubleArray31);
        boolean boolean33 = variance0.equals((java.lang.Object) double32);
        variance0.clear();
        variance0.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance38.clear();
        long long40 = variance38.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment42);
        long long44 = secondMoment42.getN();
        secondMoment42.clear();
        secondMoment42.clear();
        double double47 = secondMoment42.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment42);
        variance48.increment((double) (byte) -1);
        long long51 = variance48.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment52);
        long long54 = secondMoment52.getN();
        secondMoment52.clear();
        secondMoment52.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment58);
        long long60 = secondMoment58.getN();
        secondMoment58.clear();
        double double62 = secondMoment58.getResult();
        secondMoment58.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment58);
        double[] doubleArray66 = new double[] {};
        double double67 = secondMoment58.evaluate(doubleArray66);
        secondMoment52.incrementAll(doubleArray66);
        double double69 = variance48.evaluate(doubleArray66);
        double double70 = variance38.evaluate(doubleArray66);
        double double72 = variance0.evaluate(doubleArray66, (double) 7L);
        variance0.increment(2224.904761904762d);
        variance0.setBiasCorrected(true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
    }

    @Test
    public void test05870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05870");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance7.increment((-1.0d));
        variance7.setBiasCorrected(false);
        boolean boolean12 = variance7.isBiasCorrected();
        double[] doubleArray13 = new double[] {};
        double double14 = variance7.evaluate(doubleArray13);
        secondMoment1.incrementAll(doubleArray13);
        long long16 = secondMoment1.getN();
        double double17 = secondMoment1.getResult();
        secondMoment1.clear();
        secondMoment1.increment(2550.25d);
        double double21 = secondMoment1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test05871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05871");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        double double8 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment6);
        secondMoment6.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        double[] doubleArray16 = new double[] { 0L, (byte) 10 };
        double double17 = variance12.evaluate(doubleArray16);
        secondMoment6.incrementAll(doubleArray16);
        double double19 = variance4.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance22.increment((-1.0d));
        variance22.setBiasCorrected(false);
        boolean boolean27 = variance22.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean29 = variance22.equals((java.lang.Object) secondMoment28);
        secondMoment28.increment((double) (short) 0);
        secondMoment28.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray42 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double43 = variance35.evaluate(doubleArray42);
        double double44 = secondMoment28.evaluate(doubleArray42);
        secondMoment20.incrementAll(doubleArray42);
        variance4.incrementAll(doubleArray42);
        variance4.increment(50.0009765625d);
        variance4.setBiasCorrected(true);
        boolean boolean51 = variance4.isBiasCorrected();
        double double52 = variance4.getResult();
        variance4.clear();
        variance4.setBiasCorrected(false);
        boolean boolean56 = variance4.isBiasCorrected();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 25.0d + "'", double19 == 25.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2136.8055555555557d + "'", double43 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 12820.833333333334d + "'", double44 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test05872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05872");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        long long2 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance4.increment((-1.0d));
        variance4.setBiasCorrected(false);
        boolean boolean9 = variance4.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean11 = variance4.equals((java.lang.Object) secondMoment10);
        secondMoment10.increment((double) (short) 0);
        secondMoment10.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray24 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double25 = variance17.evaluate(doubleArray24);
        double double26 = secondMoment10.evaluate(doubleArray24);
        long long27 = secondMoment10.getN();
        long long28 = secondMoment10.getN();
        secondMoment10.clear();
        double double30 = secondMoment10.getResult();
        secondMoment10.clear();
        boolean boolean32 = secondMoment0.equals((java.lang.Object) secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.setBiasCorrected(false);
        boolean boolean39 = variance34.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        double[] doubleArray48 = new double[] { 0L, (byte) 10 };
        double double49 = variance44.evaluate(doubleArray48);
        double double51 = variance41.evaluate(doubleArray48, (double) 10L);
        double double52 = variance34.evaluate(doubleArray48);
        variance34.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray63 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double64 = variance56.evaluate(doubleArray63);
        double double65 = variance34.evaluate(doubleArray63);
        java.lang.Class<?> wildcardClass66 = doubleArray63.getClass();
        boolean boolean67 = secondMoment10.equals((java.lang.Object) wildcardClass66);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        long long69 = variance68.getN();
        double double70 = variance68.getResult();
        long long71 = variance68.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2136.8055555555557d + "'", double25 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 12820.833333333334d + "'", double26 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 6L + "'", long27 == 6L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 6L + "'", long28 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 25.0d + "'", double52 == 25.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2136.8055555555557d + "'", double64 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2136.8055555555557d + "'", double65 == 2136.8055555555557d);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
    }

    @Test
    public void test05873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05873");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        boolean boolean8 = variance1.isBiasCorrected();
        variance1.clear();
        double double10 = variance1.getResult();
        variance1.clear();
        double double12 = variance1.getResult();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test05874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05874");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double24 = secondMoment7.evaluate(doubleArray18, (int) (short) 0, 1);
        long long25 = secondMoment7.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment27);
        double double29 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment27);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        double[] doubleArray36 = new double[] { 0L, (byte) 10 };
        double double37 = variance32.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray46 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double47 = variance39.evaluate(doubleArray46);
        double double48 = variance32.evaluate(doubleArray46);
        double double49 = secondMoment27.evaluate(doubleArray46);
        double double50 = secondMoment7.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean55 = variance53.equals((java.lang.Object) (short) 10);
        double double56 = variance53.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double59 = variance58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        double[] doubleArray65 = new double[] { 0L, (byte) 10 };
        double double66 = variance61.evaluate(doubleArray65);
        double double68 = variance58.evaluate(doubleArray65, (double) 10L);
        double double69 = variance53.evaluate(doubleArray65);
        // The following exception was thrown during execution in test generation
        try {
            double double73 = variance51.evaluate(doubleArray65, 2024039.1203703708d, (int) (byte) 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2136.8055555555557d + "'", double47 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2564.166666666667d + "'", double48 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 12820.833333333334d + "'", double49 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 12820.833333333334d + "'", double50 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
    }

    @Test
    public void test05875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05875");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        boolean boolean8 = variance1.isBiasCorrected();
        variance1.clear();
        double double10 = variance1.getResult();
        boolean boolean11 = variance1.isBiasCorrected();
        java.lang.Class<?> wildcardClass12 = variance1.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test05876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05876");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        double double14 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        long long17 = secondMoment8.getN();
        secondMoment8.clear();
        double double19 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test05877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05877");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double[] doubleArray5 = new double[] { (byte) 100, 10 };
        double double8 = variance2.evaluate(doubleArray5, (int) (short) 1, 0);
        variance2.setBiasCorrected(false);
        variance2.increment((double) ' ');
        variance2.clear();
        variance2.setBiasCorrected(false);
        variance2.increment(14618.888888888889d);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[100.0, 10.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test05878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05878");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        boolean boolean12 = variance11.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance16.increment((-1.0d));
        variance16.setBiasCorrected(false);
        boolean boolean21 = variance16.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean23 = variance16.equals((java.lang.Object) secondMoment22);
        double double24 = secondMoment22.getResult();
        secondMoment22.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        secondMoment22.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance30.increment((-1.0d));
        variance30.setBiasCorrected(false);
        boolean boolean35 = variance30.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean37 = variance30.equals((java.lang.Object) secondMoment36);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        double[] doubleArray46 = new double[] { 0L, (byte) 10 };
        double double47 = variance42.evaluate(doubleArray46);
        double double49 = variance39.evaluate(doubleArray46, (double) 10L);
        double double53 = variance30.evaluate(doubleArray46, (double) (short) 0, 0, (int) (short) 0);
        double double56 = secondMoment22.evaluate(doubleArray46, 0, 0);
        variance14.incrementAll(doubleArray46);
        double double58 = variance11.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double63 = variance62.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double66 = variance65.getResult();
        double[] doubleArray69 = new double[] { 0L, (byte) 10 };
        double double70 = variance65.evaluate(doubleArray69);
        double double72 = variance62.evaluate(doubleArray69, (double) 10L);
        double double73 = variance60.evaluate(doubleArray69);
        double[] doubleArray77 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double78 = variance60.evaluate(doubleArray77);
        double double80 = variance11.evaluate(doubleArray77, (double) 100);
        variance11.clear();
        variance11.clear();
        double double83 = variance11.getResult();
        variance11.clear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2024039.120370371d + "'", double78 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 2024039.1203703708d + "'", double80 == 2024039.1203703708d);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
    }

    @Test
    public void test05879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05879");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double4 = variance3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        double[] doubleArray10 = new double[] { 0L, (byte) 10 };
        double double11 = variance6.evaluate(doubleArray10);
        double double13 = variance3.evaluate(doubleArray10, (double) 10L);
        double double14 = variance1.evaluate(doubleArray10);
        variance1.increment(10.0d);
        double double17 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance19.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.setBiasCorrected(false);
        boolean boolean28 = variance23.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean30 = variance23.equals((java.lang.Object) secondMoment29);
        double double31 = secondMoment29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        double[] doubleArray40 = new double[] { 0L, (byte) 10 };
        double double41 = variance36.evaluate(doubleArray40);
        double double43 = variance33.evaluate(doubleArray40, (double) 10L);
        double double46 = secondMoment29.evaluate(doubleArray40, (int) (short) 0, 1);
        double double47 = variance19.evaluate(doubleArray40);
        variance19.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean53 = variance51.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance55.increment((-1.0d));
        variance55.setBiasCorrected(false);
        boolean boolean60 = variance55.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean62 = variance55.equals((java.lang.Object) secondMoment61);
        double double63 = secondMoment61.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double66 = variance65.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double69 = variance68.getResult();
        double[] doubleArray72 = new double[] { 0L, (byte) 10 };
        double double73 = variance68.evaluate(doubleArray72);
        double double75 = variance65.evaluate(doubleArray72, (double) 10L);
        double double78 = secondMoment61.evaluate(doubleArray72, (int) (short) 0, 1);
        double double79 = variance51.evaluate(doubleArray72);
        variance51.increment((double) (byte) 0);
        boolean boolean82 = variance51.isBiasCorrected();
        long long83 = variance51.getN();
        variance51.clear();
        boolean boolean85 = variance19.equals((java.lang.Object) variance51);
        boolean boolean86 = variance1.equals((java.lang.Object) boolean85);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1L + "'", long83 == 1L);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test05880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05880");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = secondMoment8.evaluate(doubleArray22);
        long long25 = secondMoment8.getN();
        long long26 = secondMoment8.getN();
        secondMoment8.increment((double) (short) 0);
        long long29 = secondMoment8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance31.increment((-1.0d));
        variance31.setBiasCorrected(false);
        boolean boolean36 = variance31.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        double[] doubleArray45 = new double[] { 0L, (byte) 10 };
        double double46 = variance41.evaluate(doubleArray45);
        double double48 = variance38.evaluate(doubleArray45, (double) 10L);
        double double49 = variance31.evaluate(doubleArray45);
        double double50 = secondMoment8.evaluate(doubleArray45);
        double double51 = secondMoment8.getResult();
        long long52 = secondMoment8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 12820.833333333334d + "'", double24 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 7L + "'", long29 == 7L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 25.0d + "'", double49 == 25.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 2L + "'", long52 == 2L);
    }

    @Test
    public void test05881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05881");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = variance1.getResult();
        variance1.clear();
        variance1.increment(0.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test05882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05882");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.clear();
        secondMoment0.increment(2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) 1);
        secondMoment0.clear();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test05883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05883");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double[] doubleArray5 = new double[] { 0L, (byte) 10 };
        double double6 = variance1.evaluate(doubleArray5);
        boolean boolean7 = variance1.isBiasCorrected();
        long long8 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        long long12 = variance10.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance14.increment((-1.0d));
        variance14.setBiasCorrected(false);
        variance14.increment((double) 100L);
        boolean boolean21 = variance14.isBiasCorrected();
        variance14.clear();
        long long23 = variance14.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment25);
        double double27 = secondMoment25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment25);
        secondMoment25.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        double[] doubleArray35 = new double[] { 0L, (byte) 10 };
        double double36 = variance31.evaluate(doubleArray35);
        secondMoment25.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment25);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean42 = variance40.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.increment((-1.0d));
        variance44.setBiasCorrected(false);
        boolean boolean49 = variance44.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean51 = variance44.equals((java.lang.Object) secondMoment50);
        double double52 = secondMoment50.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        double[] doubleArray61 = new double[] { 0L, (byte) 10 };
        double double62 = variance57.evaluate(doubleArray61);
        double double64 = variance54.evaluate(doubleArray61, (double) 10L);
        double double67 = secondMoment50.evaluate(doubleArray61, (int) (short) 0, 1);
        double double68 = variance40.evaluate(doubleArray61);
        secondMoment25.incrementAll(doubleArray61);
        double double70 = variance14.evaluate(doubleArray61);
        double double72 = variance10.evaluate(doubleArray61, (double) (byte) 100);
        variance1.incrementAll(doubleArray61);
        double double74 = variance1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.0d + "'", double6 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 25.0d + "'", double70 == 25.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
    }

    @Test
    public void test05884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05884");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance8.increment((-1.0d));
        variance8.setBiasCorrected(false);
        boolean boolean13 = variance8.isBiasCorrected();
        double[] doubleArray14 = new double[] {};
        double double15 = variance8.evaluate(doubleArray14);
        secondMoment2.incrementAll(doubleArray14);
        secondMoment2.clear();
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        double double23 = secondMoment21.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment21);
        secondMoment21.clear();
        secondMoment21.increment((double) 2L);
        double double28 = secondMoment21.getResult();
        secondMoment21.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment31);
        long long33 = secondMoment31.getN();
        secondMoment31.clear();
        secondMoment31.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment31);
        variance37.setBiasCorrected(false);
        double double40 = variance37.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        long long43 = secondMoment41.getN();
        secondMoment41.clear();
        secondMoment41.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance48.increment((-1.0d));
        variance48.setBiasCorrected(false);
        boolean boolean53 = variance48.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean55 = variance48.equals((java.lang.Object) secondMoment54);
        variance48.increment((double) 100L);
        variance48.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double64 = variance63.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double67 = variance66.getResult();
        double[] doubleArray70 = new double[] { 0L, (byte) 10 };
        double double71 = variance66.evaluate(doubleArray70);
        double double73 = variance63.evaluate(doubleArray70, (double) 10L);
        double double74 = variance61.evaluate(doubleArray70);
        double[] doubleArray78 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double79 = variance61.evaluate(doubleArray78);
        variance48.incrementAll(doubleArray78);
        double double81 = variance46.evaluate(doubleArray78);
        variance37.incrementAll(doubleArray78);
        secondMoment21.incrementAll(doubleArray78);
        double double86 = variance19.evaluate(doubleArray78, 0, (int) (short) 1);
        java.lang.Class<?> wildcardClass87 = doubleArray78.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 2024039.120370371d + "'", double79 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 2024039.120370371d + "'", double81 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test05885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05885");
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance4.increment((-1.0d));
        variance4.setBiasCorrected(false);
        boolean boolean9 = variance4.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean11 = variance4.equals((java.lang.Object) secondMoment10);
        secondMoment10.increment((double) (short) 0);
        secondMoment10.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray24 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double25 = variance17.evaluate(doubleArray24);
        double double26 = secondMoment10.evaluate(doubleArray24);
        long long27 = secondMoment10.getN();
        long long28 = secondMoment10.getN();
        secondMoment10.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment10);
        variance33.setBiasCorrected(false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2136.8055555555557d + "'", double25 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 12820.833333333334d + "'", double26 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 6L + "'", long27 == 6L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 6L + "'", long28 == 6L);
    }

    @Test
    public void test05886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05886");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        double double6 = secondMoment0.getResult();
        secondMoment0.increment((double) (byte) 100);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance10.increment((-1.0d));
        variance10.setBiasCorrected(false);
        boolean boolean15 = variance10.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean17 = variance10.equals((java.lang.Object) secondMoment16);
        variance10.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double24 = variance23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        double[] doubleArray30 = new double[] { 0L, (byte) 10 };
        double double31 = variance26.evaluate(doubleArray30);
        double double33 = variance23.evaluate(doubleArray30, (double) 10L);
        double double34 = variance21.evaluate(doubleArray30);
        variance21.increment((double) 0.0f);
        boolean boolean37 = variance21.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment38);
        long long40 = secondMoment38.getN();
        secondMoment38.clear();
        secondMoment38.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment38);
        variance44.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean50 = variance48.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray59 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double60 = variance52.evaluate(doubleArray59);
        double double61 = variance48.evaluate(doubleArray59);
        double double63 = variance44.evaluate(doubleArray59, (double) 1.0f);
        double double66 = variance21.evaluate(doubleArray59, (int) (byte) 0, 1);
        double double67 = variance10.evaluate(doubleArray59);
        double double68 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance72.increment((-1.0d));
        variance72.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double80 = variance79.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance82 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double83 = variance82.getResult();
        double[] doubleArray86 = new double[] { 0L, (byte) 10 };
        double double87 = variance82.evaluate(doubleArray86);
        double double89 = variance79.evaluate(doubleArray86, (double) 10L);
        double double90 = variance77.evaluate(doubleArray86);
        double double91 = variance72.evaluate(doubleArray86);
        variance70.incrementAll(doubleArray86);
        double double93 = variance10.evaluate(doubleArray86);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray86, (int) (byte) -1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2136.8055555555557d + "'", double60 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2564.166666666667d + "'", double61 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2136.805555555555d + "'", double63 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2136.8055555555557d + "'", double67 == 2136.8055555555557d);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 25.0d + "'", double93 == 25.0d);
    }

    @Test
    public void test05887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05887");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double2 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double4 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long6 = variance5.getN();
        boolean boolean7 = variance5.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double10 = secondMoment8.getResult();
        boolean boolean12 = secondMoment8.equals((java.lang.Object) 1.0d);
        secondMoment8.increment((double) (-1L));
        secondMoment8.increment((double) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double24 = variance23.getResult();
        double[] doubleArray27 = new double[] { 0L, (byte) 10 };
        double double28 = variance23.evaluate(doubleArray27);
        double double30 = variance20.evaluate(doubleArray27, (double) 10L);
        double double31 = variance18.evaluate(doubleArray27);
        variance18.increment(10.0d);
        double double34 = variance18.getResult();
        variance18.increment(1152.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        double double39 = secondMoment37.getResult();
        boolean boolean41 = secondMoment37.equals((java.lang.Object) 1.0d);
        double double42 = secondMoment37.getResult();
        secondMoment37.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment44);
        long long46 = secondMoment44.getN();
        secondMoment44.clear();
        secondMoment44.clear();
        secondMoment44.increment((double) (byte) 100);
        secondMoment44.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment44);
        secondMoment44.increment(2136.805555555555d);
        secondMoment44.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance57.increment((-1.0d));
        variance57.setBiasCorrected(false);
        variance57.increment((double) 100L);
        boolean boolean64 = variance57.isBiasCorrected();
        boolean boolean65 = variance57.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray74 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double75 = variance67.evaluate(doubleArray74);
        double double77 = variance57.evaluate(doubleArray74, (double) (byte) 10);
        secondMoment44.incrementAll(doubleArray74);
        double double79 = secondMoment37.evaluate(doubleArray74);
        double double82 = variance18.evaluate(doubleArray74, 1, 1);
        secondMoment8.incrementAll(doubleArray74, 1, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            variance5.incrementAll(doubleArray74, (int) (short) -1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 2136.8055555555557d + "'", double75 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2136.8055555555557d + "'", double77 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 12820.833333333334d + "'", double79 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
    }

    @Test
    public void test05888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05888");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment((double) 2L);
        double double8 = secondMoment1.getResult();
        secondMoment1.increment(50.0d);
        double double11 = secondMoment1.getResult();
        long long12 = secondMoment1.getN();
        secondMoment1.clear();
        double double14 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1152.0d + "'", double11 == 1152.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2L + "'", long12 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test05889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05889");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double[] doubleArray8 = new double[] {};
        double double9 = secondMoment0.evaluate(doubleArray8);
        double double10 = secondMoment0.getResult();
        secondMoment0.clear();
        double double12 = secondMoment0.getResult();
        long long13 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean17 = variance15.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray26 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double27 = variance19.evaluate(doubleArray26);
        double double28 = variance15.evaluate(doubleArray26);
        variance15.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean33 = variance31.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray42 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double43 = variance35.evaluate(doubleArray42);
        double double44 = variance31.evaluate(doubleArray42);
        variance15.incrementAll(doubleArray42);
        secondMoment0.incrementAll(doubleArray42, 1, (int) (short) 1);
        double double49 = secondMoment0.getResult();
        secondMoment0.increment(60.666666666666664d);
        double double52 = secondMoment0.getResult();
        long long53 = secondMoment0.getN();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 2136.8055555555557d + "'", double27 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 2564.166666666667d + "'", double28 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2136.8055555555557d + "'", double43 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2564.166666666667d + "'", double44 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1840.2222222222222d + "'", double52 == 1840.2222222222222d);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 2L + "'", long53 == 2L);
    }

    @Test
    public void test05890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05890");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        double double15 = secondMoment7.getResult();
        secondMoment7.increment(25.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.clear();
        long long22 = variance20.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        long long26 = secondMoment24.getN();
        secondMoment24.clear();
        secondMoment24.clear();
        double double29 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment24);
        variance30.increment((double) (byte) -1);
        long long33 = variance30.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment34);
        long long36 = secondMoment34.getN();
        secondMoment34.clear();
        secondMoment34.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment40);
        long long42 = secondMoment40.getN();
        secondMoment40.clear();
        double double44 = secondMoment40.getResult();
        secondMoment40.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment40);
        double[] doubleArray48 = new double[] {};
        double double49 = secondMoment40.evaluate(doubleArray48);
        secondMoment34.incrementAll(doubleArray48);
        double double51 = variance30.evaluate(doubleArray48);
        double double52 = variance20.evaluate(doubleArray48);
        variance18.incrementAll(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance55.increment((-1.0d));
        variance55.setBiasCorrected(false);
        boolean boolean60 = variance55.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean62 = variance55.equals((java.lang.Object) secondMoment61);
        double double63 = secondMoment61.getResult();
        secondMoment61.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment61);
        secondMoment61.increment((double) 10.0f);
        secondMoment61.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment61);
        java.lang.Object obj70 = null;
        boolean boolean71 = variance69.equals(obj70);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double73 = secondMoment72.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment74 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment74);
        long long76 = secondMoment74.getN();
        secondMoment74.clear();
        secondMoment74.clear();
        secondMoment74.increment((double) (byte) 100);
        long long81 = secondMoment74.getN();
        double[] doubleArray83 = new double[] { 2024039.1203703713d };
        double double84 = secondMoment74.evaluate(doubleArray83);
        secondMoment72.incrementAll(doubleArray83);
        variance69.incrementAll(doubleArray83);
        double double88 = variance18.evaluate(doubleArray83, (double) (byte) 0);
        variance18.clear();
        variance18.increment(2564.1666666686533d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.5d + "'", double15 == 0.5d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1L + "'", long81 == 1L);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
    }

    @Test
    public void test05891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05891");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double double7 = variance1.getResult();
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance11.increment((-1.0d));
        variance11.setBiasCorrected(false);
        boolean boolean16 = variance11.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean18 = variance11.equals((java.lang.Object) secondMoment17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double24 = variance23.getResult();
        double[] doubleArray27 = new double[] { 0L, (byte) 10 };
        double double28 = variance23.evaluate(doubleArray27);
        double double30 = variance20.evaluate(doubleArray27, (double) 10L);
        double double34 = variance11.evaluate(doubleArray27, (double) (short) 0, 0, (int) (short) 0);
        double double35 = variance1.evaluate(doubleArray27);
        variance1.clear();
        variance1.increment(2564.1666666666665d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        long long41 = secondMoment39.getN();
        secondMoment39.clear();
        double double43 = secondMoment39.getResult();
        secondMoment39.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        secondMoment39.increment(2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        boolean boolean50 = variance1.equals((java.lang.Object) variance49);
        variance49.increment(1.5524847101785716E8d);
        variance49.clear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test05892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05892");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment4 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment4);
        double double6 = secondMoment4.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment4);
        secondMoment4.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        double[] doubleArray14 = new double[] { 0L, (byte) 10 };
        double double15 = variance10.evaluate(doubleArray14);
        secondMoment4.incrementAll(doubleArray14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment4);
        secondMoment4.clear();
        secondMoment4.increment(Double.NaN);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment4);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment4);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment4);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double25 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        secondMoment24.increment(2024039.120370371d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        variance30.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance35.increment((-1.0d));
        variance35.setBiasCorrected(false);
        boolean boolean40 = variance35.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean42 = variance35.equals((java.lang.Object) secondMoment41);
        double double43 = secondMoment41.getResult();
        secondMoment41.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        double double49 = secondMoment47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment47);
        secondMoment47.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance53.increment((-1.0d));
        variance53.setBiasCorrected(false);
        boolean boolean58 = variance53.isBiasCorrected();
        double[] doubleArray59 = new double[] {};
        double double60 = variance53.evaluate(doubleArray59);
        secondMoment47.incrementAll(doubleArray59);
        double double62 = variance45.evaluate(doubleArray59);
        double double63 = variance30.evaluate(doubleArray59);
        secondMoment24.incrementAll(doubleArray59);
        double double65 = secondMoment4.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment4);
        secondMoment4.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 50.0d + "'", double15 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
    }

    @Test
    public void test05893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05893");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        double double3 = secondMoment0.getResult();
        secondMoment0.increment(2024039.120370371d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance9.increment((-1.0d));
        variance9.setBiasCorrected(false);
        boolean boolean14 = variance9.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean16 = variance9.equals((java.lang.Object) secondMoment15);
        secondMoment15.increment((double) (short) 0);
        secondMoment15.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray29 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double30 = variance22.evaluate(doubleArray29);
        double double31 = secondMoment15.evaluate(doubleArray29);
        double double32 = secondMoment0.evaluate(doubleArray29);
        long long33 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2136.8055555555557d + "'", double30 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 12820.833333333334d + "'", double31 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 12820.833333333334d + "'", double32 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 6L + "'", long33 == 6L);
    }

    @Test
    public void test05894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05894");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double4 = variance3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        double[] doubleArray10 = new double[] { 0L, (byte) 10 };
        double double11 = variance6.evaluate(doubleArray10);
        double double13 = variance3.evaluate(doubleArray10, (double) 10L);
        double double14 = variance1.evaluate(doubleArray10);
        variance1.increment((double) 0.0f);
        boolean boolean17 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        long long20 = secondMoment18.getN();
        secondMoment18.clear();
        secondMoment18.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        variance24.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean30 = variance28.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray39 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double40 = variance32.evaluate(doubleArray39);
        double double41 = variance28.evaluate(doubleArray39);
        double double43 = variance24.evaluate(doubleArray39, (double) 1.0f);
        double double46 = variance1.evaluate(doubleArray39, (int) (byte) 0, 1);
        variance1.increment((double) ' ');
        double double49 = variance1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2136.8055555555557d + "'", double40 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2564.166666666667d + "'", double41 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2136.805555555555d + "'", double43 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
    }

    @Test
    public void test05895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05895");
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.setBiasCorrected(false);
        boolean boolean8 = variance3.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean10 = variance3.equals((java.lang.Object) secondMoment9);
        double double11 = secondMoment9.getResult();
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        long long14 = secondMoment9.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        secondMoment9.clear();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test05896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05896");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        double[] doubleArray12 = new double[] { 0L, (byte) 10 };
        double double13 = variance8.evaluate(doubleArray12);
        secondMoment2.incrementAll(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.clear();
        secondMoment2.increment(Double.NaN);
        secondMoment2.increment(0.0d);
        secondMoment2.clear();
        long long22 = secondMoment2.getN();
        long long23 = secondMoment2.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        long long25 = variance24.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean29 = variance27.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance31.increment((-1.0d));
        variance31.setBiasCorrected(false);
        boolean boolean36 = variance31.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean38 = variance31.equals((java.lang.Object) secondMoment37);
        double double39 = secondMoment37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        double[] doubleArray48 = new double[] { 0L, (byte) 10 };
        double double49 = variance44.evaluate(doubleArray48);
        double double51 = variance41.evaluate(doubleArray48, (double) 10L);
        double double54 = secondMoment37.evaluate(doubleArray48, (int) (short) 0, 1);
        double double55 = variance27.evaluate(doubleArray48);
        variance27.increment((double) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance59.increment((-1.0d));
        variance59.setBiasCorrected(false);
        boolean boolean64 = variance59.isBiasCorrected();
        double double65 = variance59.getResult();
        variance59.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance69.increment((-1.0d));
        variance69.setBiasCorrected(false);
        boolean boolean74 = variance69.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment75 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean76 = variance69.equals((java.lang.Object) secondMoment75);
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double79 = variance78.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double82 = variance81.getResult();
        double[] doubleArray85 = new double[] { 0L, (byte) 10 };
        double double86 = variance81.evaluate(doubleArray85);
        double double88 = variance78.evaluate(doubleArray85, (double) 10L);
        double double92 = variance69.evaluate(doubleArray85, (double) (short) 0, 0, (int) (short) 0);
        double double93 = variance59.evaluate(doubleArray85);
        double double94 = variance27.evaluate(doubleArray85);
        variance27.clear();
        boolean boolean96 = variance27.isBiasCorrected();
        variance27.increment(2024039.1203703708d);
        boolean boolean99 = variance24.equals((java.lang.Object) 2024039.1203703708d);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 50.0d + "'", double93 == 50.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 50.0d + "'", double94 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test05897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05897");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        boolean boolean4 = variance1.isBiasCorrected();
        double double5 = variance1.getResult();
        variance1.clear();
        variance1.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance10.increment((-1.0d));
        variance10.setBiasCorrected(false);
        boolean boolean15 = variance10.isBiasCorrected();
        double[] doubleArray16 = new double[] {};
        double double17 = variance10.evaluate(doubleArray16);
        variance10.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray28 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double29 = variance21.evaluate(doubleArray28);
        double double30 = variance10.evaluate(doubleArray28);
        variance1.incrementAll(doubleArray28);
        variance1.clear();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2136.8055555555557d + "'", double29 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2136.8055555555557d + "'", double30 == 2136.8055555555557d);
    }

    @Test
    public void test05898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05898");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double11 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        secondMoment9.incrementAll(doubleArray19);
        boolean boolean22 = variance2.equals((java.lang.Object) secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        double double26 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment24);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        double double31 = secondMoment29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment29);
        secondMoment29.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        double[] doubleArray39 = new double[] { 0L, (byte) 10 };
        double double40 = variance35.evaluate(doubleArray39);
        secondMoment29.incrementAll(doubleArray39);
        double double42 = variance27.evaluate(doubleArray39);
        double double43 = secondMoment9.evaluate(doubleArray39);
        double double44 = secondMoment9.getResult();
        double double45 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.increment((double) 4L);
        long long49 = secondMoment9.getN();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 25.0d + "'", double42 == 25.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 3L + "'", long49 == 3L);
    }

    @Test
    public void test05899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05899");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        double double10 = secondMoment8.getResult();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        secondMoment8.increment((double) 10.0f);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        double double18 = variance17.getResult();
        variance17.increment(3366144.9420553935d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test05900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05900");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        double double4 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance7.increment((-1.0d));
        variance7.setBiasCorrected(false);
        variance7.increment((double) 100L);
        boolean boolean14 = variance7.isBiasCorrected();
        variance7.clear();
        long long16 = variance7.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double18 = secondMoment17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        double[] doubleArray34 = new double[] { 0L, (byte) 10 };
        double double35 = variance30.evaluate(doubleArray34);
        double double37 = variance27.evaluate(doubleArray34, (double) 10L);
        double double38 = variance25.evaluate(doubleArray34);
        double double39 = variance20.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        double[] doubleArray45 = new double[] { 0L, (byte) 10 };
        double double46 = variance41.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray55 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double56 = variance48.evaluate(doubleArray55);
        double double57 = variance41.evaluate(doubleArray55);
        double double58 = variance20.evaluate(doubleArray55);
        double double59 = secondMoment17.evaluate(doubleArray55);
        double double60 = variance7.evaluate(doubleArray55);
        double double61 = variance1.evaluate(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance63.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance67.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double73 = variance72.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        double[] doubleArray79 = new double[] { 0L, (byte) 10 };
        double double80 = variance75.evaluate(doubleArray79);
        double double82 = variance72.evaluate(doubleArray79, (double) 10L);
        double double83 = variance70.evaluate(doubleArray79);
        double double84 = variance67.evaluate(doubleArray79);
        double double85 = variance63.evaluate(doubleArray79);
        double double86 = variance1.evaluate(doubleArray79);
        long long87 = variance1.getN();
        variance1.setBiasCorrected(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2136.8055555555557d + "'", double56 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2564.166666666667d + "'", double57 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2564.166666666667d + "'", double58 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 12820.833333333334d + "'", double59 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2136.8055555555557d + "'", double60 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2564.166666666667d + "'", double61 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
    }

    @Test
    public void test05901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05901");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        double[] doubleArray14 = new double[] { 0L, (byte) 10 };
        double double15 = variance10.evaluate(doubleArray14);
        double double17 = variance7.evaluate(doubleArray14, (double) 10L);
        double double18 = variance5.evaluate(doubleArray14);
        double[] doubleArray22 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double23 = variance5.evaluate(doubleArray22);
        double double25 = variance1.evaluate(doubleArray22, (double) (byte) 1);
        variance1.clear();
        variance1.increment((double) (byte) 100);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance30.increment((-1.0d));
        variance30.setBiasCorrected(false);
        boolean boolean35 = variance30.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean37 = variance30.equals((java.lang.Object) secondMoment36);
        double double38 = secondMoment36.getResult();
        secondMoment36.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment36);
        double double41 = secondMoment36.getResult();
        long long42 = secondMoment36.getN();
        secondMoment36.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        double[] doubleArray54 = new double[] { 0L, (byte) 10 };
        double double55 = variance50.evaluate(doubleArray54);
        double double57 = variance47.evaluate(doubleArray54, (double) 10L);
        double double58 = variance45.evaluate(doubleArray54);
        double[] doubleArray62 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double63 = variance45.evaluate(doubleArray62);
        secondMoment36.incrementAll(doubleArray62);
        double double65 = variance1.evaluate(doubleArray62);
        variance1.clear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 50.0d + "'", double15 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2024039.120370371d + "'", double23 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2024039.120370371d + "'", double25 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2024039.120370371d + "'", double63 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2024039.120370371d + "'", double65 == 2024039.120370371d);
    }

    @Test
    public void test05902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05902");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double22 = variance14.evaluate(doubleArray21);
        double double23 = secondMoment7.evaluate(doubleArray21);
        long long24 = secondMoment7.getN();
        long long25 = secondMoment7.getN();
        secondMoment7.increment((double) (short) 0);
        long long28 = secondMoment7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance30.increment((-1.0d));
        variance30.setBiasCorrected(false);
        boolean boolean35 = variance30.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        double[] doubleArray44 = new double[] { 0L, (byte) 10 };
        double double45 = variance40.evaluate(doubleArray44);
        double double47 = variance37.evaluate(doubleArray44, (double) 10L);
        double double48 = variance30.evaluate(doubleArray44);
        double double49 = secondMoment7.evaluate(doubleArray44);
        secondMoment7.clear();
        secondMoment7.increment((double) 7L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2136.8055555555557d + "'", double22 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 12820.833333333334d + "'", double23 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 6L + "'", long24 == 6L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 7L + "'", long28 == 7L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 25.0d + "'", double48 == 25.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
    }

    @Test
    public void test05903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05903");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        secondMoment0.increment(25.0d);
        secondMoment0.clear();
        double double9 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        long long14 = secondMoment12.getN();
        secondMoment12.clear();
        double double16 = secondMoment12.getResult();
        secondMoment12.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        double[] doubleArray20 = new double[] {};
        double double21 = secondMoment12.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment12);
        double double24 = variance23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean28 = variance26.equals((java.lang.Object) (short) 10);
        double double29 = variance26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        double[] doubleArray38 = new double[] { 0L, (byte) 10 };
        double double39 = variance34.evaluate(doubleArray38);
        double double41 = variance31.evaluate(doubleArray38, (double) 10L);
        double double42 = variance26.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.increment((-1.0d));
        variance44.setBiasCorrected(false);
        boolean boolean49 = variance44.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean51 = variance44.equals((java.lang.Object) secondMoment50);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double54 = variance53.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double57 = variance56.getResult();
        double[] doubleArray60 = new double[] { 0L, (byte) 10 };
        double double61 = variance56.evaluate(doubleArray60);
        double double63 = variance53.evaluate(doubleArray60, (double) 10L);
        double double67 = variance44.evaluate(doubleArray60, (double) (short) 0, 0, (int) (short) 0);
        double double70 = variance26.evaluate(doubleArray60, 0, (int) (byte) 1);
        double double71 = variance23.evaluate(doubleArray60);
        secondMoment0.incrementAll(doubleArray60);
        double double73 = secondMoment0.getResult();
        double double74 = secondMoment0.getResult();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 25.0d + "'", double71 == 25.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
    }

    @Test
    public void test05904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05904");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double11 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        secondMoment9.incrementAll(doubleArray19);
        boolean boolean22 = variance2.equals((java.lang.Object) secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean31 = variance24.equals((java.lang.Object) secondMoment30);
        boolean boolean32 = secondMoment9.equals((java.lang.Object) boolean31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        variance33.increment(2024039.12109375d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance37.increment((-1.0d));
        long long40 = variance37.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance45.increment((-1.0d));
        variance45.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double53 = variance52.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double56 = variance55.getResult();
        double[] doubleArray59 = new double[] { 0L, (byte) 10 };
        double double60 = variance55.evaluate(doubleArray59);
        double double62 = variance52.evaluate(doubleArray59, (double) 10L);
        double double63 = variance50.evaluate(doubleArray59);
        double double64 = variance45.evaluate(doubleArray59);
        variance43.incrementAll(doubleArray59);
        variance41.incrementAll(doubleArray59);
        double double67 = variance37.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment69);
        double double71 = secondMoment69.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment69);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment74 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment74);
        double double76 = secondMoment74.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment74);
        secondMoment74.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double81 = variance80.getResult();
        double[] doubleArray84 = new double[] { 0L, (byte) 10 };
        double double85 = variance80.evaluate(doubleArray84);
        secondMoment74.incrementAll(doubleArray84);
        double double87 = variance72.evaluate(doubleArray84);
        double double88 = variance37.evaluate(doubleArray84);
        // The following exception was thrown during execution in test generation
        try {
            double double91 = variance33.evaluate(doubleArray84, (int) (short) 10, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 25.0d + "'", double87 == 25.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
    }

    @Test
    public void test05905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05905");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double2 = secondMoment1.getResult();
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double double5 = variance4.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test05906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05906");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        secondMoment8.incrementAll(doubleArray18);
        boolean boolean21 = variance1.equals((java.lang.Object) secondMoment8);
        double double22 = secondMoment8.getResult();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        long long26 = secondMoment24.getN();
        secondMoment24.clear();
        double double28 = secondMoment24.getResult();
        secondMoment24.increment((double) (short) 0);
        long long31 = secondMoment24.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        variance32.increment(1349359.4135802474d);
        boolean boolean35 = variance32.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        long long39 = secondMoment37.getN();
        secondMoment37.clear();
        secondMoment37.clear();
        secondMoment37.increment((double) (byte) 100);
        secondMoment37.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment37);
        variance46.increment((double) 2L);
        double double49 = variance46.getResult();
        double double50 = variance46.getResult();
        boolean boolean51 = variance46.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance53.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double59 = variance58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        double[] doubleArray65 = new double[] { 0L, (byte) 10 };
        double double66 = variance61.evaluate(doubleArray65);
        double double68 = variance58.evaluate(doubleArray65, (double) 10L);
        double double69 = variance56.evaluate(doubleArray65);
        double double70 = variance53.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment72);
        double double74 = secondMoment72.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment72);
        secondMoment72.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance78.increment((-1.0d));
        variance78.setBiasCorrected(false);
        boolean boolean83 = variance78.isBiasCorrected();
        double[] doubleArray84 = new double[] {};
        double double85 = variance78.evaluate(doubleArray84);
        secondMoment72.incrementAll(doubleArray84);
        double double87 = variance53.evaluate(doubleArray84);
        variance46.incrementAll(doubleArray84);
        double double89 = variance32.evaluate(doubleArray84);
        secondMoment8.incrementAll(doubleArray84);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertTrue(Double.isNaN(double89));
    }

    @Test
    public void test05907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05907");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance5.increment((-1.0d));
        variance5.setBiasCorrected(false);
        boolean boolean10 = variance5.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean12 = variance5.equals((java.lang.Object) secondMoment11);
        double double13 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        double[] doubleArray22 = new double[] { 0L, (byte) 10 };
        double double23 = variance18.evaluate(doubleArray22);
        double double25 = variance15.evaluate(doubleArray22, (double) 10L);
        double double28 = secondMoment11.evaluate(doubleArray22, (int) (short) 0, 1);
        double double29 = variance1.evaluate(doubleArray22);
        double double30 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment31);
        long long33 = secondMoment31.getN();
        secondMoment31.clear();
        secondMoment31.increment(10.0d);
        secondMoment31.increment(25.0d);
        secondMoment31.increment(0.0d);
        secondMoment31.clear();
        double double42 = secondMoment31.getResult();
        boolean boolean43 = variance1.equals((java.lang.Object) secondMoment31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        double[] doubleArray52 = new double[] { 0L, (byte) 10 };
        double double53 = variance48.evaluate(doubleArray52);
        double double55 = variance45.evaluate(doubleArray52, (double) 10L);
        long long56 = variance45.getN();
        variance45.increment((double) 0L);
        long long59 = variance45.getN();
        double double60 = variance45.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance62.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double68 = variance67.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double71 = variance70.getResult();
        double[] doubleArray74 = new double[] { 0L, (byte) 10 };
        double double75 = variance70.evaluate(doubleArray74);
        double double77 = variance67.evaluate(doubleArray74, (double) 10L);
        double double78 = variance65.evaluate(doubleArray74);
        double double79 = variance62.evaluate(doubleArray74);
        double double80 = variance45.evaluate(doubleArray74);
        // The following exception was thrown during execution in test generation
        try {
            double double83 = variance1.evaluate(doubleArray74, 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
    }

    @Test
    public void test05908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05908");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.increment(50.0d);
        long long7 = secondMoment1.getN();
        double double8 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance10.increment((-1.0d));
        variance10.setBiasCorrected(false);
        boolean boolean15 = variance10.isBiasCorrected();
        double double16 = variance10.getResult();
        variance10.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        double[] doubleArray29 = new double[] { 0L, (byte) 10 };
        double double30 = variance25.evaluate(doubleArray29);
        double double32 = variance22.evaluate(doubleArray29, (double) 10L);
        double double33 = variance20.evaluate(doubleArray29);
        variance20.increment((double) 0.0f);
        boolean boolean36 = variance20.isBiasCorrected();
        long long37 = variance20.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance39.increment((-1.0d));
        variance39.setBiasCorrected(false);
        boolean boolean44 = variance39.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean46 = variance39.equals((java.lang.Object) secondMoment45);
        secondMoment45.increment((double) (short) 0);
        secondMoment45.increment((double) 1.0f);
        double double51 = secondMoment45.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment45);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment45);
        boolean boolean54 = variance20.equals((java.lang.Object) variance53);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance56.increment((-1.0d));
        variance56.setBiasCorrected(false);
        boolean boolean61 = variance56.isBiasCorrected();
        double[] doubleArray62 = new double[] {};
        double double63 = variance56.evaluate(doubleArray62);
        variance56.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double70 = variance69.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double73 = variance72.getResult();
        double[] doubleArray76 = new double[] { 0L, (byte) 10 };
        double double77 = variance72.evaluate(doubleArray76);
        double double79 = variance69.evaluate(doubleArray76, (double) 10L);
        double double80 = variance67.evaluate(doubleArray76);
        variance56.incrementAll(doubleArray76);
        double double85 = variance20.evaluate(doubleArray76, 14205.875d, (int) (short) 1, 0);
        double double87 = variance10.evaluate(doubleArray76, 4671050.520833335d);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment1.incrementAll(doubleArray76, (int) 'a', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.5d + "'", double51 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 25.0d + "'", double87 == 25.0d);
    }

    @Test
    public void test05909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05909");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        double[] doubleArray12 = new double[] { 0L, (byte) 10 };
        double double13 = variance8.evaluate(doubleArray12);
        secondMoment2.incrementAll(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean19 = variance17.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance21.increment((-1.0d));
        variance21.setBiasCorrected(false);
        boolean boolean26 = variance21.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean28 = variance21.equals((java.lang.Object) secondMoment27);
        double double29 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        double[] doubleArray38 = new double[] { 0L, (byte) 10 };
        double double39 = variance34.evaluate(doubleArray38);
        double double41 = variance31.evaluate(doubleArray38, (double) 10L);
        double double44 = secondMoment27.evaluate(doubleArray38, (int) (short) 0, 1);
        double double45 = variance17.evaluate(doubleArray38);
        secondMoment2.incrementAll(doubleArray38);
        secondMoment2.clear();
        secondMoment2.increment((double) 'a');
        long long50 = secondMoment2.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment52);
        double double54 = secondMoment52.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment52);
        secondMoment52.increment(50.0d);
        secondMoment52.clear();
        long long59 = secondMoment52.getN();
        boolean boolean60 = secondMoment2.equals((java.lang.Object) secondMoment52);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        java.lang.Class<?> wildcardClass62 = secondMoment2.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test05910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05910");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        double[] doubleArray12 = new double[] { 0L, (byte) 10 };
        double double13 = variance8.evaluate(doubleArray12);
        secondMoment2.incrementAll(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.clear();
        long long17 = secondMoment2.getN();
        double double18 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        double double20 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test05911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05911");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        boolean boolean7 = secondMoment1.equals((java.lang.Object) (byte) 0);
        double double8 = secondMoment1.getResult();
        secondMoment1.increment((double) 3L);
        double double11 = secondMoment1.getResult();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        double double16 = secondMoment14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double20 = variance19.getResult();
        double[] doubleArray23 = new double[] { 0L, (byte) 10 };
        double double24 = variance19.evaluate(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray33 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double34 = variance26.evaluate(doubleArray33);
        double double35 = variance19.evaluate(doubleArray33);
        double double36 = secondMoment14.evaluate(doubleArray33);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment1.incrementAll(doubleArray33, 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2136.8055555555557d + "'", double34 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 2564.166666666667d + "'", double35 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 12820.833333333334d + "'", double36 == 12820.833333333334d);
    }

    @Test
    public void test05912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05912");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        double[] doubleArray12 = new double[] { 0L, (byte) 10 };
        double double13 = variance8.evaluate(doubleArray12);
        secondMoment2.incrementAll(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.clear();
        secondMoment2.increment(Double.NaN);
        secondMoment2.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.setBiasCorrected(false);
        boolean boolean28 = variance23.isBiasCorrected();
        double[] doubleArray29 = new double[] {};
        double double30 = variance23.evaluate(doubleArray29);
        variance23.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean41 = variance39.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        double[] doubleArray52 = new double[] { 0L, (byte) 10 };
        double double53 = variance48.evaluate(doubleArray52);
        double double55 = variance45.evaluate(doubleArray52, (double) 10L);
        double double56 = variance43.evaluate(doubleArray52);
        double[] doubleArray60 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double61 = variance43.evaluate(doubleArray60);
        double double63 = variance39.evaluate(doubleArray60, (double) (byte) 1);
        double double65 = variance34.evaluate(doubleArray60, 4048078.240740742d);
        double double66 = variance23.evaluate(doubleArray60);
        boolean boolean67 = secondMoment2.equals((java.lang.Object) variance23);
        long long68 = variance23.getN();
        long long69 = variance23.getN();
        variance23.clear();
        variance23.clear();
        variance23.increment(3.581208497781065E8d);
        variance23.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2024039.120370371d + "'", double61 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2024039.120370371d + "'", double63 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2024039.12109375d + "'", double65 == 2024039.12109375d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1349359.4135802474d + "'", double66 == 1349359.4135802474d);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
    }

    @Test
    public void test05913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05913");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double2 = secondMoment1.getResult();
        double double3 = secondMoment1.getResult();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance5.clear();
        variance5.clear();
        long long8 = variance5.getN();
        variance5.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        double[] doubleArray15 = new double[] { 0L, (byte) 10 };
        double double16 = variance11.evaluate(doubleArray15);
        variance11.clear();
        boolean boolean18 = variance11.isBiasCorrected();
        variance11.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance21.increment((-1.0d));
        variance21.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        double[] doubleArray35 = new double[] { 0L, (byte) 10 };
        double double36 = variance31.evaluate(doubleArray35);
        double double38 = variance28.evaluate(doubleArray35, (double) 10L);
        double double39 = variance26.evaluate(doubleArray35);
        double double40 = variance21.evaluate(doubleArray35);
        boolean boolean41 = variance21.isBiasCorrected();
        variance21.increment((double) (short) 10);
        long long44 = variance21.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment45);
        long long47 = secondMoment45.getN();
        secondMoment45.clear();
        double double49 = secondMoment45.getResult();
        secondMoment45.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment45);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance54.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double60 = variance59.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double63 = variance62.getResult();
        double[] doubleArray66 = new double[] { 0L, (byte) 10 };
        double double67 = variance62.evaluate(doubleArray66);
        double double69 = variance59.evaluate(doubleArray66, (double) 10L);
        double double70 = variance57.evaluate(doubleArray66);
        double double71 = variance54.evaluate(doubleArray66);
        variance52.incrementAll(doubleArray66);
        variance52.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double79 = variance78.getResult();
        double[] doubleArray82 = new double[] { 0L, (byte) 10 };
        double double83 = variance78.evaluate(doubleArray82);
        double double85 = variance75.evaluate(doubleArray82, (double) 10L);
        variance52.incrementAll(doubleArray82);
        double double87 = variance21.evaluate(doubleArray82);
        double double89 = variance11.evaluate(doubleArray82, 1349359.413580247d);
        double double90 = variance5.evaluate(doubleArray82);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 25.0d + "'", double90 == 25.0d);
    }

    @Test
    public void test05914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05914");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        double[] doubleArray12 = new double[] { 0L, (byte) 10 };
        double double13 = variance8.evaluate(doubleArray12);
        secondMoment2.incrementAll(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.clear();
        secondMoment2.increment(Double.NaN);
        secondMoment2.increment(0.0d);
        secondMoment2.clear();
        secondMoment2.clear();
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
    }

    @Test
    public void test05915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05915");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double double7 = variance1.getResult();
        long long8 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        long long12 = secondMoment10.getN();
        secondMoment10.clear();
        secondMoment10.increment(10.0d);
        double double16 = secondMoment10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.setBiasCorrected(false);
        boolean boolean28 = variance23.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean30 = variance23.equals((java.lang.Object) secondMoment29);
        double double31 = secondMoment29.getResult();
        secondMoment29.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        secondMoment29.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance37.increment((-1.0d));
        variance37.setBiasCorrected(false);
        boolean boolean42 = variance37.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean44 = variance37.equals((java.lang.Object) secondMoment43);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double47 = variance46.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double50 = variance49.getResult();
        double[] doubleArray53 = new double[] { 0L, (byte) 10 };
        double double54 = variance49.evaluate(doubleArray53);
        double double56 = variance46.evaluate(doubleArray53, (double) 10L);
        double double60 = variance37.evaluate(doubleArray53, (double) (short) 0, 0, (int) (short) 0);
        double double63 = secondMoment29.evaluate(doubleArray53, 0, 0);
        variance21.incrementAll(doubleArray53);
        variance19.incrementAll(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment66 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment66);
        long long68 = secondMoment66.getN();
        secondMoment66.clear();
        double double70 = secondMoment66.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance72.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double78 = variance77.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double81 = variance80.getResult();
        double[] doubleArray84 = new double[] { 0L, (byte) 10 };
        double double85 = variance80.evaluate(doubleArray84);
        double double87 = variance77.evaluate(doubleArray84, (double) 10L);
        double double88 = variance75.evaluate(doubleArray84);
        double double89 = variance72.evaluate(doubleArray84);
        secondMoment66.incrementAll(doubleArray84, 1, (int) (byte) 0);
        double double93 = variance19.evaluate(doubleArray84);
        boolean boolean94 = variance17.equals((java.lang.Object) double93);
        variance17.clear();
        boolean boolean96 = variance1.equals((java.lang.Object) variance17);
        long long97 = variance17.getN();
        java.lang.Class<?> wildcardClass98 = variance17.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 50.0d + "'", double93 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 1L + "'", long97 == 1L);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test05916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05916");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment4 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment4);
        double double6 = secondMoment4.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment4);
        secondMoment4.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        double[] doubleArray14 = new double[] { 0L, (byte) 10 };
        double double15 = variance10.evaluate(doubleArray14);
        secondMoment4.incrementAll(doubleArray14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment4);
        secondMoment4.clear();
        secondMoment4.increment(Double.NaN);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment4);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment4);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment4);
        double double24 = secondMoment4.getResult();
        secondMoment4.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 50.0d + "'", double15 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
    }

    @Test
    public void test05917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05917");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        boolean boolean17 = variance16.isBiasCorrected();
        double double18 = variance16.getResult();
        variance16.setBiasCorrected(true);
        long long21 = variance16.getN();
        variance16.clear();
        boolean boolean23 = variance16.isBiasCorrected();
        variance16.increment(5.7261176190072966E17d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.5d + "'", double18 == 0.5d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2L + "'", long21 == 2L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test05918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05918");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double11 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        secondMoment9.increment((double) 2L);
        double double16 = secondMoment9.getResult();
        secondMoment9.increment(50.0d);
        double double19 = secondMoment9.getResult();
        long long20 = secondMoment9.getN();
        boolean boolean21 = variance7.equals((java.lang.Object) secondMoment9);
        double double22 = variance7.getResult();
        variance7.increment((double) 6L);
        java.lang.Class<?> wildcardClass25 = variance7.getClass();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1152.0d + "'", double19 == 1152.0d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2L + "'", long20 == 2L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test05919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05919");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        secondMoment1.increment((double) 0.0f);
        secondMoment1.clear();
        long long7 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        long long12 = secondMoment10.getN();
        secondMoment10.clear();
        secondMoment10.clear();
        secondMoment10.increment((double) (byte) 100);
        secondMoment10.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment10);
        variance19.increment((double) 2L);
        double double22 = variance19.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        long long26 = secondMoment24.getN();
        secondMoment24.clear();
        double double28 = secondMoment24.getResult();
        secondMoment24.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        double[] doubleArray32 = new double[] {};
        double double33 = secondMoment24.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance36.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance40.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        double[] doubleArray52 = new double[] { 0L, (byte) 10 };
        double double53 = variance48.evaluate(doubleArray52);
        double double55 = variance45.evaluate(doubleArray52, (double) 10L);
        double double56 = variance43.evaluate(doubleArray52);
        double double57 = variance40.evaluate(doubleArray52);
        double double58 = variance36.evaluate(doubleArray52);
        double double59 = variance34.evaluate(doubleArray52);
        double double60 = variance19.evaluate(doubleArray52);
        // The following exception was thrown during execution in test generation
        try {
            double double63 = secondMoment1.evaluate(doubleArray52, (int) (byte) -1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
    }

    @Test
    public void test05920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05920");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double[] doubleArray5 = new double[] { 0L, (byte) 10 };
        double double6 = variance1.evaluate(doubleArray5);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray15 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double16 = variance8.evaluate(doubleArray15);
        double double17 = variance1.evaluate(doubleArray15);
        variance1.clear();
        variance1.setBiasCorrected(false);
        variance1.increment(2136.8055555547276d);
        java.lang.Class<?> wildcardClass23 = variance1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.0d + "'", double6 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 2136.8055555555557d + "'", double16 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 2564.166666666667d + "'", double17 == 2564.166666666667d);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test05921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05921");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double[] doubleArray7 = new double[] {};
        double double8 = variance1.evaluate(doubleArray7);
        variance1.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        double[] doubleArray21 = new double[] { 0L, (byte) 10 };
        double double22 = variance17.evaluate(doubleArray21);
        double double24 = variance14.evaluate(doubleArray21, (double) 10L);
        double double25 = variance12.evaluate(doubleArray21);
        variance1.incrementAll(doubleArray21);
        variance1.increment(4048078.240740742d);
        variance1.increment(0.5d);
        long long31 = variance1.getN();
        variance1.clear();
        boolean boolean33 = variance1.isBiasCorrected();
        boolean boolean34 = variance1.isBiasCorrected();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 6L + "'", long31 == 6L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test05922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05922");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double11 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        secondMoment9.incrementAll(doubleArray19);
        boolean boolean22 = variance2.equals((java.lang.Object) secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean31 = variance24.equals((java.lang.Object) secondMoment30);
        boolean boolean32 = secondMoment9.equals((java.lang.Object) boolean31);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test05923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05923");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = secondMoment8.evaluate(doubleArray22);
        long long25 = secondMoment8.getN();
        long long26 = secondMoment8.getN();
        secondMoment8.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        double[] doubleArray35 = new double[] { 0L, (byte) 10 };
        double double36 = variance31.evaluate(doubleArray35);
        secondMoment8.incrementAll(doubleArray35);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance41.increment((-1.0d));
        variance41.setBiasCorrected(false);
        boolean boolean46 = variance41.isBiasCorrected();
        double[] doubleArray47 = new double[] {};
        double double48 = variance41.evaluate(doubleArray47);
        variance41.setBiasCorrected(false);
        variance41.clear();
        double double52 = variance41.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment53);
        long long55 = secondMoment53.getN();
        secondMoment53.clear();
        double double57 = secondMoment53.getResult();
        secondMoment53.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment53);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double63 = variance62.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double66 = variance65.getResult();
        double[] doubleArray69 = new double[] { 0L, (byte) 10 };
        double double70 = variance65.evaluate(doubleArray69);
        double double72 = variance62.evaluate(doubleArray69, (double) 10L);
        variance62.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance76.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double82 = variance81.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance84 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double85 = variance84.getResult();
        double[] doubleArray88 = new double[] { 0L, (byte) 10 };
        double double89 = variance84.evaluate(doubleArray88);
        double double91 = variance81.evaluate(doubleArray88, (double) 10L);
        double double92 = variance79.evaluate(doubleArray88);
        double double93 = variance76.evaluate(doubleArray88);
        double double94 = variance62.evaluate(doubleArray88);
        double double95 = secondMoment53.evaluate(doubleArray88);
        variance41.incrementAll(doubleArray88);
        double double98 = variance39.evaluate(doubleArray88, (-2.147483648E9d));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 12820.833333333334d + "'", double24 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 50.0d + "'", double93 == 50.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 50.0d + "'", double94 == 50.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 50.0d + "'", double95 == 50.0d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 0.0d + "'", double98 == 0.0d);
    }

    @Test
    public void test05924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05924");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment((double) 2L);
        double double8 = secondMoment1.getResult();
        secondMoment1.increment(50.0d);
        long long11 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2L + "'", long11 == 2L);
    }

    @Test
    public void test05925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05925");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double[] doubleArray5 = new double[] { 0L, (byte) 10 };
        double double6 = variance1.evaluate(doubleArray5);
        double double7 = variance1.getResult();
        variance1.increment(1349359.4135802474d);
        variance1.setBiasCorrected(true);
        variance1.clear();
        double double13 = variance1.getResult();
        variance1.clear();
        variance1.increment(200.33333528041842d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance18.clear();
        double double20 = variance18.getResult();
        variance18.setBiasCorrected(true);
        double double23 = variance18.getResult();
        variance18.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance27.increment((-1.0d));
        variance27.setBiasCorrected(false);
        variance27.increment((double) 100L);
        boolean boolean34 = variance27.isBiasCorrected();
        variance27.clear();
        double double36 = variance27.getResult();
        boolean boolean37 = variance27.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray46 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double47 = variance39.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray56 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double57 = variance49.evaluate(doubleArray56);
        double double59 = variance39.evaluate(doubleArray56, (double) '#');
        variance27.incrementAll(doubleArray56);
        double double61 = variance18.evaluate(doubleArray56);
        variance1.incrementAll(doubleArray56);
        variance1.increment(5055850.555555557d);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.0d + "'", double6 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2136.8055555555557d + "'", double47 == 2136.8055555555557d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2136.8055555555557d + "'", double57 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2136.8055555555557d + "'", double59 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2564.166666666667d + "'", double61 == 2564.166666666667d);
    }

    @Test
    public void test05926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05926");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = secondMoment8.evaluate(doubleArray22);
        long long25 = secondMoment8.getN();
        long long26 = secondMoment8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        secondMoment8.clear();
        secondMoment8.increment(0.0d);
        secondMoment8.increment((double) 'a');
        secondMoment8.clear();
        double double34 = secondMoment8.getResult();
        double double35 = secondMoment8.getResult();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 12820.833333333334d + "'", double24 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
    }

    @Test
    public void test05927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05927");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment((double) 2L);
        double double8 = secondMoment1.getResult();
        secondMoment1.increment(24.5d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        long long13 = secondMoment11.getN();
        secondMoment11.clear();
        double double15 = secondMoment11.getResult();
        secondMoment11.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        variance18.setBiasCorrected(true);
        variance18.increment(1152.0d);
        boolean boolean23 = variance18.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        long long27 = variance25.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance29.clear();
        double double31 = variance29.getResult();
        variance29.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        double[] doubleArray48 = new double[] { 0L, (byte) 10 };
        double double49 = variance44.evaluate(doubleArray48);
        double double51 = variance41.evaluate(doubleArray48, (double) 10L);
        double double52 = variance39.evaluate(doubleArray48);
        double double53 = variance34.evaluate(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double56 = variance55.getResult();
        double[] doubleArray59 = new double[] { 0L, (byte) 10 };
        double double60 = variance55.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray69 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double70 = variance62.evaluate(doubleArray69);
        double double71 = variance55.evaluate(doubleArray69);
        double double72 = variance34.evaluate(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double77 = variance76.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double80 = variance79.getResult();
        double[] doubleArray83 = new double[] { 0L, (byte) 10 };
        double double84 = variance79.evaluate(doubleArray83);
        double double86 = variance76.evaluate(doubleArray83, (double) 10L);
        double double87 = variance74.evaluate(doubleArray83);
        variance34.incrementAll(doubleArray83, (int) (byte) 0, (int) (byte) 0);
        double double91 = variance29.evaluate(doubleArray83);
        double double92 = variance25.evaluate(doubleArray83);
        double double93 = variance18.evaluate(doubleArray83);
        secondMoment1.incrementAll(doubleArray83);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2136.8055555555557d + "'", double70 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2564.166666666667d + "'", double71 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2564.166666666667d + "'", double72 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 50.0d + "'", double93 == 50.0d);
    }

    @Test
    public void test05928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05928");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.increment((double) (byte) 100);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment(2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double double15 = variance14.getResult();
        double double16 = variance14.getResult();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test05929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05929");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        double double5 = secondMoment1.getResult();
        secondMoment1.increment((double) (short) 0);
        long long8 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance10.increment(876046.7222222224d);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
    }

    @Test
    public void test05930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05930");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        double double10 = secondMoment8.getResult();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double13 = secondMoment8.getResult();
        long long14 = secondMoment8.getN();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        variance17.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.setBiasCorrected(false);
        variance20.setBiasCorrected(false);
        variance20.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        long long31 = secondMoment29.getN();
        secondMoment29.clear();
        double double33 = secondMoment29.getResult();
        secondMoment29.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance38.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double44 = variance43.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double47 = variance46.getResult();
        double[] doubleArray50 = new double[] { 0L, (byte) 10 };
        double double51 = variance46.evaluate(doubleArray50);
        double double53 = variance43.evaluate(doubleArray50, (double) 10L);
        double double54 = variance41.evaluate(doubleArray50);
        double double55 = variance38.evaluate(doubleArray50);
        variance36.incrementAll(doubleArray50);
        variance36.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance59.increment((-1.0d));
        variance59.setBiasCorrected(false);
        boolean boolean64 = variance59.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double67 = variance66.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double70 = variance69.getResult();
        double[] doubleArray73 = new double[] { 0L, (byte) 10 };
        double double74 = variance69.evaluate(doubleArray73);
        double double76 = variance66.evaluate(doubleArray73, (double) 10L);
        double double77 = variance59.evaluate(doubleArray73);
        double double79 = variance36.evaluate(doubleArray73, 2310.1428571428573d);
        double double80 = variance20.evaluate(doubleArray73);
        // The following exception was thrown during execution in test generation
        try {
            double double83 = variance17.evaluate(doubleArray73, (int) (byte) 1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 25.0d + "'", double77 == 25.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 25.0d + "'", double80 == 25.0d);
    }

    @Test
    public void test05931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05931");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        long long13 = secondMoment7.getN();
        double double14 = secondMoment7.getResult();
        long long15 = secondMoment7.getN();
        secondMoment7.increment((double) (short) 10);
        double double18 = secondMoment7.getResult();
        secondMoment7.increment(12820.833333333334d);
        long long21 = secondMoment7.getN();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2L + "'", long13 == 2L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 60.666666666666664d + "'", double18 == 60.666666666666664d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 4L + "'", long21 == 4L);
    }

    @Test
    public void test05932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05932");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        variance9.increment((double) (short) -1);
        long long13 = variance9.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        double[] doubleArray24 = new double[] { 0L, (byte) 10 };
        double double25 = variance20.evaluate(doubleArray24);
        double double27 = variance17.evaluate(doubleArray24, (double) 10L);
        double double28 = variance15.evaluate(doubleArray24);
        variance15.increment((double) 0.0f);
        boolean boolean31 = variance15.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        long long34 = secondMoment32.getN();
        secondMoment32.clear();
        secondMoment32.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        variance38.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean44 = variance42.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray53 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double54 = variance46.evaluate(doubleArray53);
        double double55 = variance42.evaluate(doubleArray53);
        double double57 = variance38.evaluate(doubleArray53, (double) 1.0f);
        double double60 = variance15.evaluate(doubleArray53, (int) (byte) 0, 1);
        double double61 = variance9.evaluate(doubleArray53);
        boolean boolean62 = variance1.equals((java.lang.Object) doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance64.increment((-1.0d));
        variance64.setBiasCorrected(false);
        variance64.increment((double) 100L);
        boolean boolean71 = variance64.isBiasCorrected();
        variance64.clear();
        variance64.clear();
        boolean boolean74 = variance1.equals((java.lang.Object) variance64);
        variance64.clear();
        variance64.clear();
        variance64.increment(13921.428571428572d);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2136.8055555555557d + "'", double54 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2564.166666666667d + "'", double55 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2136.805555555555d + "'", double57 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2564.166666666667d + "'", double61 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test05933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05933");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance6.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double22 = variance9.evaluate(doubleArray18);
        double double23 = variance6.evaluate(doubleArray18);
        secondMoment0.incrementAll(doubleArray18, 1, (int) (byte) 0);
        secondMoment0.clear();
        double double28 = secondMoment0.getResult();
        double double29 = secondMoment0.getResult();
        double double30 = secondMoment0.getResult();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test05934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05934");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        secondMoment2.increment((double) 2L);
        double double9 = secondMoment2.getResult();
        secondMoment2.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        long long13 = variance12.getN();
        variance12.increment(25641.666666666668d);
        boolean boolean16 = variance12.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment17);
        long long19 = secondMoment17.getN();
        secondMoment17.clear();
        secondMoment17.clear();
        secondMoment17.increment((double) (byte) 100);
        secondMoment17.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment17);
        secondMoment17.clear();
        secondMoment17.increment(2024039.12109375d);
        secondMoment17.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance32.increment((-1.0d));
        variance32.setBiasCorrected(false);
        boolean boolean37 = variance32.isBiasCorrected();
        double[] doubleArray38 = new double[] {};
        double double39 = variance32.evaluate(doubleArray38);
        long long40 = variance32.getN();
        variance32.increment(2024039.120370371d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.increment((-1.0d));
        variance44.setBiasCorrected(false);
        boolean boolean49 = variance44.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean51 = variance44.equals((java.lang.Object) secondMoment50);
        double double52 = secondMoment50.getResult();
        secondMoment50.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment50);
        secondMoment50.increment((double) 10.0f);
        secondMoment50.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment50);
        java.lang.Object obj59 = null;
        boolean boolean60 = variance58.equals(obj59);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double62 = secondMoment61.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment63 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment63);
        long long65 = secondMoment63.getN();
        secondMoment63.clear();
        secondMoment63.clear();
        secondMoment63.increment((double) (byte) 100);
        long long70 = secondMoment63.getN();
        double[] doubleArray72 = new double[] { 2024039.1203703713d };
        double double73 = secondMoment63.evaluate(doubleArray72);
        secondMoment61.incrementAll(doubleArray72);
        variance58.incrementAll(doubleArray72);
        variance32.incrementAll(doubleArray72);
        double double77 = secondMoment17.evaluate(doubleArray72);
        // The following exception was thrown during execution in test generation
        try {
            double double80 = variance12.evaluate(doubleArray72, 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2L + "'", long13 == 2L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1L + "'", long70 == 1L);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
    }

    @Test
    public void test05935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05935");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double2 = secondMoment1.getResult();
        long long3 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance5.increment((-1.0d));
        variance5.setBiasCorrected(false);
        boolean boolean10 = variance5.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean12 = variance5.equals((java.lang.Object) secondMoment11);
        secondMoment11.increment((double) (short) 0);
        secondMoment11.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray25 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double26 = variance18.evaluate(doubleArray25);
        double double27 = secondMoment11.evaluate(doubleArray25);
        long long28 = secondMoment11.getN();
        long long29 = secondMoment11.getN();
        secondMoment11.clear();
        double double31 = secondMoment11.getResult();
        secondMoment11.clear();
        boolean boolean33 = secondMoment1.equals((java.lang.Object) secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance35.increment((-1.0d));
        variance35.setBiasCorrected(false);
        boolean boolean40 = variance35.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        double[] doubleArray49 = new double[] { 0L, (byte) 10 };
        double double50 = variance45.evaluate(doubleArray49);
        double double52 = variance42.evaluate(doubleArray49, (double) 10L);
        double double53 = variance35.evaluate(doubleArray49);
        variance35.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray64 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double65 = variance57.evaluate(doubleArray64);
        double double66 = variance35.evaluate(doubleArray64);
        java.lang.Class<?> wildcardClass67 = doubleArray64.getClass();
        boolean boolean68 = secondMoment11.equals((java.lang.Object) wildcardClass67);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment11);
        double double70 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2136.8055555555557d + "'", double26 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 12820.833333333334d + "'", double27 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 6L + "'", long28 == 6L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 6L + "'", long29 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 25.0d + "'", double53 == 25.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2136.8055555555557d + "'", double65 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 2136.8055555555557d + "'", double66 == 2136.8055555555557d);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
    }

    @Test
    public void test05936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05936");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray14 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double15 = variance7.evaluate(doubleArray14);
        variance1.incrementAll(doubleArray14);
        boolean boolean17 = variance1.isBiasCorrected();
        long long18 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment19);
        long long21 = secondMoment19.getN();
        secondMoment19.clear();
        secondMoment19.clear();
        secondMoment19.increment((double) (byte) 100);
        secondMoment19.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment19);
        secondMoment19.increment(2136.805555555555d);
        secondMoment19.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance32.increment((-1.0d));
        variance32.setBiasCorrected(false);
        variance32.increment((double) 100L);
        boolean boolean39 = variance32.isBiasCorrected();
        boolean boolean40 = variance32.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray49 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double50 = variance42.evaluate(doubleArray49);
        double double52 = variance32.evaluate(doubleArray49, (double) (byte) 10);
        secondMoment19.incrementAll(doubleArray49);
        variance1.incrementAll(doubleArray49);
        double double55 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance60.increment((-1.0d));
        variance60.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double68 = variance67.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double71 = variance70.getResult();
        double[] doubleArray74 = new double[] { 0L, (byte) 10 };
        double double75 = variance70.evaluate(doubleArray74);
        double double77 = variance67.evaluate(doubleArray74, (double) 10L);
        double double78 = variance65.evaluate(doubleArray74);
        double double79 = variance60.evaluate(doubleArray74);
        variance58.incrementAll(doubleArray74);
        double double81 = variance1.evaluate(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 2136.8055555555557d + "'", double15 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 7L + "'", long18 == 7L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2136.8055555555557d + "'", double50 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2136.8055555555557d + "'", double52 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2063.6094674556216d + "'", double55 == 2063.6094674556216d);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 25.0d + "'", double81 == 25.0d);
    }

    @Test
    public void test05937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05937");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        double double10 = secondMoment8.getResult();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        long long15 = variance14.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        double[] doubleArray24 = new double[] { 0L, (byte) 10 };
        double double25 = variance20.evaluate(doubleArray24);
        double double27 = variance17.evaluate(doubleArray24, (double) 10L);
        long long28 = variance17.getN();
        variance17.increment((double) 0L);
        double[] doubleArray32 = new double[] { 10.0d };
        variance17.incrementAll(doubleArray32);
        variance17.clear();
        variance17.setBiasCorrected(true);
        boolean boolean37 = variance17.isBiasCorrected();
        long long38 = variance17.getN();
        variance17.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance41.increment((-1.0d));
        long long44 = variance41.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance46.increment((-1.0d));
        variance46.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean54 = variance52.equals((java.lang.Object) (short) 10);
        boolean boolean55 = variance46.equals((java.lang.Object) variance52);
        long long56 = variance52.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean60 = variance58.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray69 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double70 = variance62.evaluate(doubleArray69);
        double double71 = variance58.evaluate(doubleArray69);
        double double72 = variance52.evaluate(doubleArray69);
        double double73 = variance41.evaluate(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment74 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment74);
        long long76 = secondMoment74.getN();
        secondMoment74.clear();
        secondMoment74.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment74);
        variance80.setBiasCorrected(false);
        double[] doubleArray88 = new double[] { 1L, '#', 0.0d, 6L, 0.0d };
        variance80.incrementAll(doubleArray88);
        double double90 = variance41.evaluate(doubleArray88);
        variance17.incrementAll(doubleArray88, 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double97 = variance14.evaluate(doubleArray88, 120.0d, (int) '4', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2136.8055555555557d + "'", double70 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2564.166666666667d + "'", double71 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2564.166666666667d + "'", double72 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 2564.166666666667d + "'", double73 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, 35.0, 0.0, 6.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 227.3d + "'", double90 == 227.3d);
    }

    @Test
    public void test05938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05938");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double22 = variance14.evaluate(doubleArray21);
        double double23 = secondMoment7.evaluate(doubleArray21);
        long long24 = secondMoment7.getN();
        secondMoment7.increment(2136.805555555555d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        double[] doubleArray35 = new double[] { 0L, (byte) 10 };
        double double36 = variance31.evaluate(doubleArray35);
        double double38 = variance28.evaluate(doubleArray35, (double) 10L);
        long long39 = variance28.getN();
        variance28.setBiasCorrected(false);
        boolean boolean42 = variance28.isBiasCorrected();
        long long43 = variance28.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        double[] doubleArray49 = new double[] { 0L, (byte) 10 };
        double double50 = variance45.evaluate(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray59 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double60 = variance52.evaluate(doubleArray59);
        double double61 = variance45.evaluate(doubleArray59);
        double double63 = variance28.evaluate(doubleArray59, 0.0d);
        secondMoment7.incrementAll(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        secondMoment7.clear();
        double double67 = secondMoment7.getResult();
        secondMoment7.clear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2136.8055555555557d + "'", double22 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 12820.833333333334d + "'", double23 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 6L + "'", long24 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2136.8055555555557d + "'", double60 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2564.166666666667d + "'", double61 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2136.805555555555d + "'", double63 == 2136.805555555555d);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
    }

    @Test
    public void test05939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05939");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.increment((double) '4');
        long long7 = secondMoment1.getN();
        long long8 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance11.increment((-1.0d));
        variance11.setBiasCorrected(false);
        variance11.increment((double) 100L);
        boolean boolean18 = variance11.isBiasCorrected();
        boolean boolean19 = variance11.isBiasCorrected();
        long long20 = variance11.getN();
        variance11.increment(58606.246913580246d);
        variance11.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance25.increment((-1.0d));
        variance25.setBiasCorrected(false);
        boolean boolean30 = variance25.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean32 = variance25.equals((java.lang.Object) secondMoment31);
        secondMoment31.increment((double) (short) 0);
        secondMoment31.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double46 = variance38.evaluate(doubleArray45);
        double double47 = secondMoment31.evaluate(doubleArray45);
        double double49 = variance11.evaluate(doubleArray45, 2310.1428571428573d);
        variance9.incrementAll(doubleArray45);
        double double51 = variance9.getResult();
        double double52 = variance9.getResult();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2L + "'", long20 == 2L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2136.8055555555557d + "'", double46 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 12820.833333333334d + "'", double47 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 2136.80555555659d + "'", double49 == 2136.80555555659d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
    }

    @Test
    public void test05940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05940");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment4 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment4);
        double double6 = secondMoment4.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment4);
        secondMoment4.clear();
        secondMoment4.increment((double) 2L);
        double double11 = secondMoment4.getResult();
        secondMoment4.increment(50.0d);
        double double14 = secondMoment4.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment4);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment4);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment4);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment4);
        secondMoment4.increment((double) 2L);
        secondMoment4.increment((-1.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1152.0d + "'", double14 == 1152.0d);
    }

    @Test
    public void test05941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05941");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray14 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double15 = variance7.evaluate(doubleArray14);
        variance1.incrementAll(doubleArray14);
        boolean boolean17 = variance1.isBiasCorrected();
        boolean boolean18 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance22.increment((-1.0d));
        variance22.setBiasCorrected(false);
        boolean boolean27 = variance22.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean29 = variance22.equals((java.lang.Object) secondMoment28);
        double double30 = secondMoment28.getResult();
        secondMoment28.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment28);
        secondMoment28.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment28);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment35);
        long long37 = secondMoment35.getN();
        secondMoment35.clear();
        secondMoment35.increment((double) '4');
        long long41 = secondMoment35.getN();
        long long42 = secondMoment35.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.increment((-1.0d));
        variance44.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray57 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double58 = variance50.evaluate(doubleArray57);
        variance44.incrementAll(doubleArray57);
        secondMoment35.incrementAll(doubleArray57);
        secondMoment28.incrementAll(doubleArray57);
        // The following exception was thrown during execution in test generation
        try {
            double double64 = variance1.evaluate(doubleArray57, 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 2136.8055555555557d + "'", double15 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2136.8055555555557d + "'", double58 == 2136.8055555555557d);
    }

    @Test
    public void test05942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05942");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        double[] doubleArray15 = new double[] { 0L, (byte) 10 };
        double double16 = variance11.evaluate(doubleArray15);
        double double18 = variance8.evaluate(doubleArray15, (double) 10L);
        double double19 = variance6.evaluate(doubleArray15);
        double double20 = variance1.evaluate(doubleArray15);
        double double21 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        long long25 = secondMoment23.getN();
        secondMoment23.clear();
        secondMoment23.clear();
        double double28 = secondMoment23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment23);
        variance29.increment((double) (byte) -1);
        long long32 = variance29.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment33);
        long long35 = secondMoment33.getN();
        secondMoment33.clear();
        secondMoment33.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        long long41 = secondMoment39.getN();
        secondMoment39.clear();
        double double43 = secondMoment39.getResult();
        secondMoment39.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        double[] doubleArray47 = new double[] {};
        double double48 = secondMoment39.evaluate(doubleArray47);
        secondMoment33.incrementAll(doubleArray47);
        double double50 = variance29.evaluate(doubleArray47);
        double double52 = variance1.evaluate(doubleArray47, 1349359.4135802472d);
        double[] doubleArray53 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double57 = variance1.evaluate(doubleArray53, 1781.8024691358025d, (int) ' ', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
    }

    @Test
    public void test05943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05943");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        boolean boolean8 = variance1.isBiasCorrected();
        variance1.clear();
        double double10 = variance1.getResult();
        variance1.clear();
        variance1.clear();
        double double13 = variance1.getResult();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test05944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05944");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double9 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        long long12 = secondMoment10.getN();
        secondMoment10.clear();
        secondMoment10.clear();
        secondMoment10.increment((double) (byte) 100);
        long long17 = secondMoment10.getN();
        double[] doubleArray19 = new double[] { 2024039.1203703713d };
        double double20 = secondMoment10.evaluate(doubleArray19);
        secondMoment8.incrementAll(doubleArray19);
        double double22 = secondMoment2.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.increment(24.666666666666668d);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    }

    @Test
    public void test05945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05945");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        secondMoment8.incrementAll(doubleArray18);
        boolean boolean21 = variance1.equals((java.lang.Object) secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.setBiasCorrected(false);
        boolean boolean28 = variance23.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean30 = variance23.equals((java.lang.Object) secondMoment29);
        boolean boolean31 = secondMoment8.equals((java.lang.Object) boolean30);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance33.increment((-1.0d));
        variance33.setBiasCorrected(false);
        boolean boolean38 = variance33.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean40 = variance33.equals((java.lang.Object) secondMoment39);
        secondMoment39.increment((double) (short) 0);
        secondMoment39.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray53 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double54 = variance46.evaluate(doubleArray53);
        double double55 = secondMoment39.evaluate(doubleArray53);
        double double56 = secondMoment8.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance58.increment((-1.0d));
        variance58.setBiasCorrected(false);
        variance58.increment((double) 100L);
        boolean boolean65 = variance58.isBiasCorrected();
        variance58.clear();
        double double67 = variance58.getResult();
        boolean boolean68 = secondMoment8.equals((java.lang.Object) double67);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        long long70 = secondMoment8.getN();
        secondMoment8.increment(3.2730923038584746E12d);
        double double73 = secondMoment8.getResult();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2136.8055555555557d + "'", double54 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 12820.833333333334d + "'", double55 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 12820.833333333334d + "'", double56 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 6L + "'", long70 == 6L);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 9.182685625156758E24d + "'", double73 == 9.182685625156758E24d);
    }

    @Test
    public void test05946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05946");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        variance1.increment((double) (short) -1);
        long long5 = variance1.getN();
        variance1.setBiasCorrected(false);
        double double8 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        long long12 = secondMoment10.getN();
        secondMoment10.clear();
        secondMoment10.clear();
        secondMoment10.increment((double) (byte) 100);
        long long17 = secondMoment10.getN();
        double[] doubleArray19 = new double[] { 2024039.1203703713d };
        double double20 = secondMoment10.evaluate(doubleArray19);
        variance1.incrementAll(doubleArray19);
        variance1.setBiasCorrected(false);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test05947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05947");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        variance1.increment((double) (short) -1);
        long long5 = variance1.getN();
        variance1.setBiasCorrected(false);
        double double8 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        long long12 = secondMoment10.getN();
        secondMoment10.clear();
        secondMoment10.clear();
        secondMoment10.increment((double) (byte) 100);
        long long17 = secondMoment10.getN();
        double[] doubleArray19 = new double[] { 2024039.1203703713d };
        double double20 = secondMoment10.evaluate(doubleArray19);
        variance1.incrementAll(doubleArray19);
        long long22 = variance1.getN();
        variance1.increment(800.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
    }

    @Test
    public void test05948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05948");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.clear();
        secondMoment0.increment(2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance12.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        long long17 = secondMoment15.getN();
        secondMoment15.clear();
        double double19 = secondMoment15.getResult();
        secondMoment15.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        double[] doubleArray23 = new double[] {};
        double double24 = secondMoment15.evaluate(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment15);
        variance25.increment(58606.246913580246d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        long long30 = secondMoment28.getN();
        secondMoment28.clear();
        secondMoment28.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance36.increment((-1.0d));
        variance36.setBiasCorrected(false);
        boolean boolean41 = variance36.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean43 = variance36.equals((java.lang.Object) secondMoment42);
        double double44 = secondMoment42.getResult();
        secondMoment42.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment42);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance48.increment((-1.0d));
        variance48.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double56 = variance55.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double59 = variance58.getResult();
        double[] doubleArray62 = new double[] { 0L, (byte) 10 };
        double double63 = variance58.evaluate(doubleArray62);
        double double65 = variance55.evaluate(doubleArray62, (double) 10L);
        double double66 = variance53.evaluate(doubleArray62);
        double double67 = variance48.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double70 = variance69.getResult();
        double[] doubleArray73 = new double[] { 0L, (byte) 10 };
        double double74 = variance69.evaluate(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray83 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double84 = variance76.evaluate(doubleArray83);
        double double85 = variance69.evaluate(doubleArray83);
        double double86 = variance48.evaluate(doubleArray83);
        double double87 = variance46.evaluate(doubleArray83);
        variance33.incrementAll(doubleArray83);
        variance25.incrementAll(doubleArray83);
        // The following exception was thrown during execution in test generation
        try {
            double double92 = variance12.evaluate(doubleArray83, 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2136.8055555555557d + "'", double84 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2564.166666666667d + "'", double85 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2564.166666666667d + "'", double86 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 2136.8055555555557d + "'", double87 == 2136.8055555555557d);
    }

    @Test
    public void test05949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05949");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment(2136.8055555555557d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        double[] doubleArray21 = new double[] { 0L, (byte) 10 };
        double double22 = variance17.evaluate(doubleArray21);
        double double24 = variance14.evaluate(doubleArray21, (double) 10L);
        double double25 = variance12.evaluate(doubleArray21);
        double double26 = variance9.evaluate(doubleArray21);
        variance1.incrementAll(doubleArray21);
        long long28 = variance1.getN();
        double double29 = variance1.getResult();
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance33.increment((-1.0d));
        variance33.setBiasCorrected(false);
        boolean boolean38 = variance33.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean40 = variance33.equals((java.lang.Object) secondMoment39);
        double double41 = variance33.getResult();
        long long42 = variance33.getN();
        variance33.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double45 = secondMoment44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance47.increment((-1.0d));
        variance47.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        double[] doubleArray61 = new double[] { 0L, (byte) 10 };
        double double62 = variance57.evaluate(doubleArray61);
        double double64 = variance54.evaluate(doubleArray61, (double) 10L);
        double double65 = variance52.evaluate(doubleArray61);
        double double66 = variance47.evaluate(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double69 = variance68.getResult();
        double[] doubleArray72 = new double[] { 0L, (byte) 10 };
        double double73 = variance68.evaluate(doubleArray72);
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray82 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double83 = variance75.evaluate(doubleArray82);
        double double84 = variance68.evaluate(doubleArray82);
        double double85 = variance47.evaluate(doubleArray82);
        double double86 = secondMoment44.evaluate(doubleArray82);
        double double88 = variance33.evaluate(doubleArray82, (double) 100L);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray82, (int) ' ', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 4L + "'", long28 == 4L);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 853729.6529224537d + "'", double29 == 853729.6529224537d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2136.8055555555557d + "'", double83 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2564.166666666667d + "'", double84 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2564.166666666667d + "'", double85 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 12820.833333333334d + "'", double86 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 2136.805555555555d + "'", double88 == 2136.805555555555d);
    }

    @Test
    public void test05950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05950");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        double double5 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        secondMoment3.clear();
        secondMoment3.increment((double) 2L);
        double double10 = secondMoment3.getResult();
        secondMoment3.increment(50.0d);
        double double13 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment3);
        long long16 = variance15.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1152.0d + "'", double13 == 1152.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2L + "'", long16 == 2L);
    }

    @Test
    public void test05951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05951");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        secondMoment1.increment((double) 0.0f);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance10.increment((-1.0d));
        variance10.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        double[] doubleArray24 = new double[] { 0L, (byte) 10 };
        double double25 = variance20.evaluate(doubleArray24);
        double double27 = variance17.evaluate(doubleArray24, (double) 10L);
        double double28 = variance15.evaluate(doubleArray24);
        double double29 = variance10.evaluate(doubleArray24);
        variance8.incrementAll(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        double[] doubleArray41 = new double[] { 0L, (byte) 10 };
        double double42 = variance37.evaluate(doubleArray41);
        double double44 = variance34.evaluate(doubleArray41, (double) 10L);
        double double45 = variance32.evaluate(doubleArray41);
        variance32.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance50.increment((-1.0d));
        variance50.setBiasCorrected(false);
        boolean boolean55 = variance50.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean57 = variance50.equals((java.lang.Object) secondMoment56);
        secondMoment56.increment((double) (short) 0);
        secondMoment56.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray70 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double71 = variance63.evaluate(doubleArray70);
        double double72 = secondMoment56.evaluate(doubleArray70);
        secondMoment48.incrementAll(doubleArray70);
        variance32.incrementAll(doubleArray70);
        variance8.incrementAll(doubleArray70);
        double double76 = secondMoment1.evaluate(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance77.clear();
        variance77.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2136.8055555555557d + "'", double71 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 12820.833333333334d + "'", double72 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 12820.833333333334d + "'", double76 == 12820.833333333334d);
    }

    @Test
    public void test05952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05952");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        double double22 = variance12.evaluate(doubleArray19, (double) 10L);
        double double25 = secondMoment8.evaluate(doubleArray19, (int) (short) 0, 1);
        long long26 = secondMoment8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        long long29 = secondMoment8.getN();
        secondMoment8.increment(0.0d);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.setBiasCorrected(false);
        boolean boolean39 = variance34.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean41 = variance34.equals((java.lang.Object) secondMoment40);
        double double42 = secondMoment40.getResult();
        secondMoment40.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        double[] doubleArray52 = new double[] { 0L, (byte) 10 };
        double double53 = variance48.evaluate(doubleArray52);
        double double55 = variance45.evaluate(doubleArray52, (double) 10L);
        long long56 = variance45.getN();
        variance45.increment((double) 0L);
        double[] doubleArray60 = new double[] { 10.0d };
        variance45.incrementAll(doubleArray60);
        secondMoment40.incrementAll(doubleArray60);
        // The following exception was thrown during execution in test generation
        try {
            double double65 = secondMoment8.evaluate(doubleArray60, (int) (byte) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0]");
    }

    @Test
    public void test05953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05953");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        boolean boolean8 = variance1.isBiasCorrected();
        variance1.clear();
        long long10 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        double double14 = secondMoment12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment12);
        secondMoment12.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        double[] doubleArray22 = new double[] { 0L, (byte) 10 };
        double double23 = variance18.evaluate(doubleArray22);
        secondMoment12.incrementAll(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean29 = variance27.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance31.increment((-1.0d));
        variance31.setBiasCorrected(false);
        boolean boolean36 = variance31.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean38 = variance31.equals((java.lang.Object) secondMoment37);
        double double39 = secondMoment37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        double[] doubleArray48 = new double[] { 0L, (byte) 10 };
        double double49 = variance44.evaluate(doubleArray48);
        double double51 = variance41.evaluate(doubleArray48, (double) 10L);
        double double54 = secondMoment37.evaluate(doubleArray48, (int) (short) 0, 1);
        double double55 = variance27.evaluate(doubleArray48);
        secondMoment12.incrementAll(doubleArray48);
        double double57 = variance1.evaluate(doubleArray48);
        variance1.increment(2024039.1203703708d);
        variance1.setBiasCorrected(false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 25.0d + "'", double57 == 25.0d);
    }

    @Test
    public void test05954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05954");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        double[] doubleArray14 = new double[] { 0L, (byte) 10 };
        double double15 = variance10.evaluate(doubleArray14);
        double double17 = variance7.evaluate(doubleArray14, (double) 10L);
        double double18 = variance5.evaluate(doubleArray14);
        double[] doubleArray22 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double23 = variance5.evaluate(doubleArray22);
        double double25 = variance1.evaluate(doubleArray22, (double) (byte) 1);
        variance1.increment(10.0d);
        variance1.setBiasCorrected(true);
        double double30 = variance1.getResult();
        long long31 = variance1.getN();
        boolean boolean32 = variance1.isBiasCorrected();
        variance1.clear();
        variance1.increment(5011295.755555557d);
        variance1.increment(1.516047625587078E12d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        double double41 = secondMoment39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment39);
        secondMoment39.increment(50.0d);
        secondMoment39.clear();
        secondMoment39.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        variance48.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment51);
        long long53 = secondMoment51.getN();
        secondMoment51.clear();
        secondMoment51.clear();
        secondMoment51.increment((double) (byte) 100);
        long long58 = secondMoment51.getN();
        double[] doubleArray60 = new double[] { 2024039.1203703713d };
        double double61 = secondMoment51.evaluate(doubleArray60);
        double double62 = variance48.evaluate(doubleArray60);
        // The following exception was thrown during execution in test generation
        try {
            double double65 = variance1.evaluate(doubleArray60, (int) (short) -1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 50.0d + "'", double15 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2024039.120370371d + "'", double23 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2024039.120370371d + "'", double25 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
    }

    @Test
    public void test05955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05955");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        double[] doubleArray8 = new double[] { 0L, (byte) 10 };
        double double9 = variance4.evaluate(doubleArray8);
        double double11 = variance1.evaluate(doubleArray8, (double) 10L);
        long long12 = variance1.getN();
        double double13 = variance1.getResult();
        double double14 = variance1.getResult();
        variance1.clear();
        boolean boolean16 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double22 = variance21.getResult();
        double[] doubleArray25 = new double[] { 0L, (byte) 10 };
        double double26 = variance21.evaluate(doubleArray25);
        double double28 = variance18.evaluate(doubleArray25, (double) 10L);
        long long29 = variance18.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance31.increment((-1.0d));
        variance31.setBiasCorrected(false);
        boolean boolean36 = variance31.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        double[] doubleArray45 = new double[] { 0L, (byte) 10 };
        double double46 = variance41.evaluate(doubleArray45);
        double double48 = variance38.evaluate(doubleArray45, (double) 10L);
        double double49 = variance31.evaluate(doubleArray45);
        variance18.incrementAll(doubleArray45, (int) (short) 0, (int) (byte) 1);
        double double53 = variance1.evaluate(doubleArray45);
        boolean boolean54 = variance1.isBiasCorrected();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.0d + "'", double9 == 50.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 25.0d + "'", double49 == 25.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test05956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05956");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1);
        secondMoment8.increment(4671050.520833335d);
        double double16 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        long long22 = secondMoment20.getN();
        secondMoment20.clear();
        secondMoment20.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance27.increment((-1.0d));
        variance27.setBiasCorrected(false);
        variance27.increment((double) 100L);
        boolean boolean34 = variance27.isBiasCorrected();
        boolean boolean35 = variance27.isBiasCorrected();
        boolean boolean36 = secondMoment20.equals((java.lang.Object) boolean35);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment20);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment20);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        long long41 = secondMoment39.getN();
        secondMoment39.clear();
        secondMoment39.clear();
        secondMoment39.increment((double) (byte) 100);
        secondMoment39.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        secondMoment39.increment(2136.805555555555d);
        secondMoment39.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance52.increment((-1.0d));
        variance52.setBiasCorrected(false);
        variance52.increment((double) 100L);
        boolean boolean59 = variance52.isBiasCorrected();
        boolean boolean60 = variance52.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray69 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double70 = variance62.evaluate(doubleArray69);
        double double72 = variance52.evaluate(doubleArray69, (double) (byte) 10);
        secondMoment39.incrementAll(doubleArray69);
        double double75 = variance38.evaluate(doubleArray69, 2564.166666666686d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance77.increment((-1.0d));
        variance77.setBiasCorrected(false);
        boolean boolean82 = variance77.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance84 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double85 = variance84.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance87 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double88 = variance87.getResult();
        double[] doubleArray91 = new double[] { 0L, (byte) 10 };
        double double92 = variance87.evaluate(doubleArray91);
        double double94 = variance84.evaluate(doubleArray91, (double) 10L);
        double double95 = variance77.evaluate(doubleArray91);
        double double96 = variance38.evaluate(doubleArray91);
        double double97 = variance17.evaluate(doubleArray91);
        double double98 = variance17.getResult();
        boolean boolean99 = variance17.isBiasCorrected();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.4545805531418566E13d + "'", double16 == 1.4545805531418566E13d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2136.8055555555557d + "'", double70 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2136.8055555555557d + "'", double72 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 2136.8055555559695d + "'", double75 == 2136.8055555559695d);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 50.0d + "'", double94 == 50.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 25.0d + "'", double95 == 25.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 25.0d + "'", double96 == 25.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 50.0d + "'", double97 == 50.0d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 7.272902765709283E12d + "'", double98 == 7.272902765709283E12d);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test05957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05957");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double[] doubleArray5 = new double[] { 0L, (byte) 10 };
        double double6 = variance1.evaluate(doubleArray5);
        double double7 = variance1.getResult();
        variance1.increment(1349359.4135802474d);
        variance1.setBiasCorrected(true);
        variance1.clear();
        double double13 = variance1.getResult();
        variance1.clear();
        double double15 = variance1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.0d + "'", double6 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test05958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05958");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double double8 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        long long11 = secondMoment9.getN();
        secondMoment9.clear();
        secondMoment9.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double16 = variance15.getResult();
        variance15.increment(0.0d);
        long long19 = variance15.getN();
        variance15.clear();
        boolean boolean21 = secondMoment1.equals((java.lang.Object) variance15);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        long long24 = secondMoment22.getN();
        secondMoment22.clear();
        secondMoment22.clear();
        secondMoment22.increment((double) (byte) 100);
        secondMoment22.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        secondMoment22.increment(2136.805555555555d);
        secondMoment22.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance35.increment((-1.0d));
        variance35.setBiasCorrected(false);
        variance35.increment((double) 100L);
        boolean boolean42 = variance35.isBiasCorrected();
        boolean boolean43 = variance35.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray52 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double53 = variance45.evaluate(doubleArray52);
        double double55 = variance35.evaluate(doubleArray52, (double) (byte) 10);
        secondMoment22.incrementAll(doubleArray52);
        // The following exception was thrown during execution in test generation
        try {
            double double59 = secondMoment1.evaluate(doubleArray52, 10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2136.8055555555557d + "'", double53 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2136.8055555555557d + "'", double55 == 2136.8055555555557d);
    }

    @Test
    public void test05959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05959");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        double[] doubleArray14 = new double[] { 0L, (byte) 10 };
        double double15 = variance10.evaluate(doubleArray14);
        double double17 = variance7.evaluate(doubleArray14, (double) 10L);
        double double18 = variance5.evaluate(doubleArray14);
        double[] doubleArray22 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double23 = variance5.evaluate(doubleArray22);
        double double25 = variance1.evaluate(doubleArray22, (double) (byte) 1);
        variance1.increment(10.0d);
        variance1.clear();
        variance1.increment(2024039.120370371d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment31);
        long long33 = secondMoment31.getN();
        secondMoment31.clear();
        secondMoment31.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment31);
        boolean boolean38 = variance1.equals((java.lang.Object) variance37);
        variance37.increment(9.103408869945068E11d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 50.0d + "'", double15 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2024039.120370371d + "'", double23 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2024039.120370371d + "'", double25 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test05960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05960");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        double[] doubleArray8 = new double[] { 0L, (byte) 10 };
        double double9 = variance4.evaluate(doubleArray8);
        double double11 = variance1.evaluate(doubleArray8, (double) 10L);
        variance1.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean23 = variance21.equals((java.lang.Object) (short) 10);
        boolean boolean24 = variance15.equals((java.lang.Object) variance21);
        long long25 = variance21.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean29 = variance27.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double39 = variance31.evaluate(doubleArray38);
        double double40 = variance27.evaluate(doubleArray38);
        double double41 = variance21.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance45.increment((-1.0d));
        variance45.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double53 = variance52.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double56 = variance55.getResult();
        double[] doubleArray59 = new double[] { 0L, (byte) 10 };
        double double60 = variance55.evaluate(doubleArray59);
        double double62 = variance52.evaluate(doubleArray59, (double) 10L);
        double double63 = variance50.evaluate(doubleArray59);
        double double64 = variance45.evaluate(doubleArray59);
        variance43.incrementAll(doubleArray59);
        double double66 = variance21.evaluate(doubleArray59);
        double double67 = variance1.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment68 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance70.increment((-1.0d));
        variance70.setBiasCorrected(false);
        boolean boolean75 = variance70.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment76 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean77 = variance70.equals((java.lang.Object) secondMoment76);
        secondMoment76.increment((double) (short) 0);
        secondMoment76.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray90 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double91 = variance83.evaluate(doubleArray90);
        double double92 = secondMoment76.evaluate(doubleArray90);
        secondMoment68.incrementAll(doubleArray90);
        org.apache.commons.math.stat.descriptive.moment.Variance variance94 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment68);
        boolean boolean95 = variance1.equals((java.lang.Object) secondMoment68);
        secondMoment68.increment(4684796.354166668d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance98 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment68);
        java.lang.Class<?> wildcardClass99 = variance98.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.0d + "'", double9 == 50.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2136.8055555555557d + "'", double39 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2564.166666666667d + "'", double40 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2564.166666666667d + "'", double41 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 2136.8055555555557d + "'", double91 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 12820.833333333334d + "'", double92 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test05961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05961");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long6 = variance5.getN();
        variance5.increment(10.0d);
        variance5.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean13 = variance11.equals((java.lang.Object) (short) 10);
        double double14 = variance11.getResult();
        variance11.clear();
        double double16 = variance11.getResult();
        double double17 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double20 = variance19.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        double[] doubleArray38 = new double[] { 0L, (byte) 10 };
        double double39 = variance34.evaluate(doubleArray38);
        double double41 = variance31.evaluate(doubleArray38, (double) 10L);
        double double42 = variance29.evaluate(doubleArray38);
        double double43 = variance24.evaluate(doubleArray38);
        variance22.incrementAll(doubleArray38);
        double double45 = variance19.evaluate(doubleArray38);
        double double46 = variance11.evaluate(doubleArray38);
        // The following exception was thrown during execution in test generation
        try {
            variance5.incrementAll(doubleArray38, (int) (short) 100, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
    }

    @Test
    public void test05962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05962");
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.setBiasCorrected(false);
        boolean boolean8 = variance3.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean10 = variance3.equals((java.lang.Object) secondMoment9);
        double double11 = secondMoment9.getResult();
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        double double14 = secondMoment9.getResult();
        double double15 = secondMoment9.getResult();
        double double16 = secondMoment9.getResult();
        double double17 = secondMoment9.getResult();
        double double18 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        double double20 = secondMoment9.getResult();
        double double21 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        long long24 = secondMoment22.getN();
        secondMoment22.clear();
        secondMoment22.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance29.increment((-1.0d));
        variance29.setBiasCorrected(false);
        boolean boolean34 = variance29.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean36 = variance29.equals((java.lang.Object) secondMoment35);
        variance29.increment((double) 100L);
        variance29.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        double[] doubleArray51 = new double[] { 0L, (byte) 10 };
        double double52 = variance47.evaluate(doubleArray51);
        double double54 = variance44.evaluate(doubleArray51, (double) 10L);
        double double55 = variance42.evaluate(doubleArray51);
        double[] doubleArray59 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double60 = variance42.evaluate(doubleArray59);
        variance29.incrementAll(doubleArray59);
        double double62 = variance27.evaluate(doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            double double65 = secondMoment9.evaluate(doubleArray59, (int) '#', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2024039.120370371d + "'", double60 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2024039.120370371d + "'", double62 == 2024039.120370371d);
    }

    @Test
    public void test05963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05963");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.increment((double) (byte) 100);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance10.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.setBiasCorrected(false);
        boolean boolean20 = variance15.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean22 = variance15.equals((java.lang.Object) secondMoment21);
        double double23 = secondMoment21.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        double[] doubleArray32 = new double[] { 0L, (byte) 10 };
        double double33 = variance28.evaluate(doubleArray32);
        double double35 = variance25.evaluate(doubleArray32, (double) 10L);
        double double38 = secondMoment21.evaluate(doubleArray32, (int) (short) 0, 1);
        long long39 = secondMoment21.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment21);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        double[] doubleArray49 = new double[] { 0L, (byte) 10 };
        double double50 = variance45.evaluate(doubleArray49);
        double double52 = variance42.evaluate(doubleArray49, (double) 10L);
        long long53 = variance42.getN();
        variance42.increment((double) 0L);
        double[] doubleArray57 = new double[] { 10.0d };
        variance42.incrementAll(doubleArray57);
        double double59 = variance40.evaluate(doubleArray57);
        variance10.incrementAll(doubleArray57);
        long long61 = variance10.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double64 = variance63.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double67 = variance66.getResult();
        double[] doubleArray70 = new double[] { 0L, (byte) 10 };
        double double71 = variance66.evaluate(doubleArray70);
        double double73 = variance63.evaluate(doubleArray70, (double) 10L);
        long long74 = variance63.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance76.increment((-1.0d));
        variance76.setBiasCorrected(false);
        boolean boolean81 = variance76.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double84 = variance83.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance86 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double87 = variance86.getResult();
        double[] doubleArray90 = new double[] { 0L, (byte) 10 };
        double double91 = variance86.evaluate(doubleArray90);
        double double93 = variance83.evaluate(doubleArray90, (double) 10L);
        double double94 = variance76.evaluate(doubleArray90);
        variance63.incrementAll(doubleArray90, (int) (short) 0, (int) (byte) 1);
        variance10.incrementAll(doubleArray90);
        java.lang.Class<?> wildcardClass99 = doubleArray90.getClass();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 50.0d + "'", double93 == 50.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 25.0d + "'", double94 == 25.0d);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test05964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05964");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        secondMoment2.increment((double) 2L);
        double double9 = secondMoment2.getResult();
        secondMoment2.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        variance17.setBiasCorrected(false);
        boolean boolean22 = variance17.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean24 = variance17.equals((java.lang.Object) secondMoment23);
        secondMoment23.increment((double) (short) 0);
        secondMoment23.increment((double) 1.0f);
        double double29 = secondMoment23.getResult();
        double double30 = secondMoment23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance32.increment((-1.0d));
        variance32.setBiasCorrected(false);
        boolean boolean37 = variance32.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean39 = variance32.equals((java.lang.Object) secondMoment38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        double[] doubleArray48 = new double[] { 0L, (byte) 10 };
        double double49 = variance44.evaluate(doubleArray48);
        double double51 = variance41.evaluate(doubleArray48, (double) 10L);
        double double55 = variance32.evaluate(doubleArray48, (double) (short) 0, 0, (int) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance57.increment((-1.0d));
        variance57.setBiasCorrected(false);
        boolean boolean62 = variance57.isBiasCorrected();
        double[] doubleArray63 = new double[] {};
        double double64 = variance57.evaluate(doubleArray63);
        variance57.setBiasCorrected(false);
        variance57.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment69);
        double double71 = secondMoment69.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment69);
        secondMoment69.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        double[] doubleArray79 = new double[] { 0L, (byte) 10 };
        double double80 = variance75.evaluate(doubleArray79);
        secondMoment69.incrementAll(doubleArray79);
        variance57.incrementAll(doubleArray79);
        double[] doubleArray83 = new double[] {};
        double double84 = variance57.evaluate(doubleArray83);
        boolean boolean85 = variance32.equals((java.lang.Object) doubleArray83);
        secondMoment23.incrementAll(doubleArray83);
        // The following exception was thrown during execution in test generation
        try {
            double double89 = secondMoment2.evaluate(doubleArray83, (int) (byte) -1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.5d + "'", double29 == 0.5d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.5d + "'", double30 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test05965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05965");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double double7 = variance1.getResult();
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance11.increment((-1.0d));
        variance11.setBiasCorrected(false);
        boolean boolean16 = variance11.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean18 = variance11.equals((java.lang.Object) secondMoment17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double24 = variance23.getResult();
        double[] doubleArray27 = new double[] { 0L, (byte) 10 };
        double double28 = variance23.evaluate(doubleArray27);
        double double30 = variance20.evaluate(doubleArray27, (double) 10L);
        double double34 = variance11.evaluate(doubleArray27, (double) (short) 0, 0, (int) (short) 0);
        double double35 = variance1.evaluate(doubleArray27);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance38.increment((-1.0d));
        variance38.setBiasCorrected(false);
        boolean boolean43 = variance38.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean45 = variance38.equals((java.lang.Object) secondMoment44);
        secondMoment44.increment((double) (short) 0);
        secondMoment44.increment((double) 1.0f);
        double double50 = secondMoment44.getResult();
        double double51 = secondMoment44.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment52);
        double double54 = secondMoment52.getResult();
        boolean boolean55 = secondMoment44.equals((java.lang.Object) double54);
        boolean boolean56 = variance1.equals((java.lang.Object) boolean55);
        variance1.clear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.5d + "'", double50 == 0.5d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.5d + "'", double51 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test05966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05966");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        double[] doubleArray8 = new double[] { 0L, (byte) 10 };
        double double9 = variance4.evaluate(doubleArray8);
        double double11 = variance1.evaluate(doubleArray8, (double) 10L);
        variance1.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean23 = variance21.equals((java.lang.Object) (short) 10);
        boolean boolean24 = variance15.equals((java.lang.Object) variance21);
        long long25 = variance21.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean29 = variance27.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double39 = variance31.evaluate(doubleArray38);
        double double40 = variance27.evaluate(doubleArray38);
        double double41 = variance21.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance45.increment((-1.0d));
        variance45.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double53 = variance52.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double56 = variance55.getResult();
        double[] doubleArray59 = new double[] { 0L, (byte) 10 };
        double double60 = variance55.evaluate(doubleArray59);
        double double62 = variance52.evaluate(doubleArray59, (double) 10L);
        double double63 = variance50.evaluate(doubleArray59);
        double double64 = variance45.evaluate(doubleArray59);
        variance43.incrementAll(doubleArray59);
        double double66 = variance21.evaluate(doubleArray59);
        double double67 = variance1.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment68 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment68);
        long long70 = secondMoment68.getN();
        secondMoment68.clear();
        secondMoment68.increment(10.0d);
        double double74 = secondMoment68.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double79 = variance78.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double82 = variance81.getResult();
        double[] doubleArray85 = new double[] { 0L, (byte) 10 };
        double double86 = variance81.evaluate(doubleArray85);
        double double88 = variance78.evaluate(doubleArray85, (double) 10L);
        double double89 = variance76.evaluate(doubleArray85);
        double[] doubleArray93 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double94 = variance76.evaluate(doubleArray93);
        double double95 = secondMoment68.evaluate(doubleArray93);
        double double97 = variance1.evaluate(doubleArray93, (double) 100);
        boolean boolean98 = variance1.isBiasCorrected();
        double double99 = variance1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.0d + "'", double9 == 50.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2136.8055555555557d + "'", double39 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2564.166666666667d + "'", double40 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2564.166666666667d + "'", double41 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 2024039.120370371d + "'", double94 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 4048078.240740742d + "'", double95 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 2024039.1203703708d + "'", double97 == 2024039.1203703708d);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double99));
    }

    @Test
    public void test05967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05967");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        long long8 = secondMoment6.getN();
        secondMoment6.clear();
        double double10 = secondMoment6.getResult();
        secondMoment6.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        double[] doubleArray14 = new double[] {};
        double double15 = secondMoment6.evaluate(doubleArray14);
        secondMoment0.incrementAll(doubleArray14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double18 = variance17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance21.increment((-1.0d));
        variance21.setBiasCorrected(false);
        boolean boolean26 = variance21.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean28 = variance21.equals((java.lang.Object) secondMoment27);
        secondMoment27.increment((double) (short) 0);
        secondMoment27.increment((double) 1.0f);
        double double33 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment27);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment27);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance37.increment((-1.0d));
        variance37.setBiasCorrected(false);
        boolean boolean42 = variance37.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean44 = variance37.equals((java.lang.Object) secondMoment43);
        long long45 = secondMoment43.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance47.increment((-1.0d));
        variance47.setBiasCorrected(false);
        variance47.increment((double) 100L);
        boolean boolean54 = variance47.isBiasCorrected();
        boolean boolean55 = variance47.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray64 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double65 = variance57.evaluate(doubleArray64);
        double double67 = variance47.evaluate(doubleArray64, (double) (byte) 10);
        secondMoment43.incrementAll(doubleArray64);
        secondMoment27.incrementAll(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment27);
        secondMoment27.increment(1.0d);
        boolean boolean73 = variance17.equals((java.lang.Object) 1.0d);
        variance17.clear();
        variance17.clear();
        variance17.clear();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.5d + "'", double33 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2136.8055555555557d + "'", double65 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2136.8055555555557d + "'", double67 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test05968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05968");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        secondMoment7.increment(Double.NaN);
        secondMoment7.clear();
        double double18 = secondMoment7.getResult();
        secondMoment7.increment(74.0d);
        double double21 = secondMoment7.getResult();
        double double22 = secondMoment7.getResult();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    }

    @Test
    public void test05969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05969");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = secondMoment8.evaluate(doubleArray22);
        long long25 = secondMoment8.getN();
        long long26 = secondMoment8.getN();
        secondMoment8.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance31.increment((-1.0d));
        variance31.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean39 = variance37.equals((java.lang.Object) (short) 10);
        boolean boolean40 = variance31.equals((java.lang.Object) variance37);
        long long41 = variance37.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean45 = variance43.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray54 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double55 = variance47.evaluate(doubleArray54);
        double double56 = variance43.evaluate(doubleArray54);
        double double57 = variance37.evaluate(doubleArray54);
        secondMoment8.incrementAll(doubleArray54);
        long long59 = secondMoment8.getN();
        secondMoment8.clear();
        secondMoment8.clear();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 12820.833333333334d + "'", double24 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2136.8055555555557d + "'", double55 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2564.166666666667d + "'", double56 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2564.166666666667d + "'", double57 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 13L + "'", long59 == 13L);
    }

    @Test
    public void test05970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05970");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double9 = secondMoment1.getResult();
        long long10 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment((double) (short) 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test05971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05971");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double2 = secondMoment1.getResult();
        long long3 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance5.increment((-1.0d));
        variance5.setBiasCorrected(false);
        boolean boolean10 = variance5.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean12 = variance5.equals((java.lang.Object) secondMoment11);
        secondMoment11.increment((double) (short) 0);
        secondMoment11.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray25 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double26 = variance18.evaluate(doubleArray25);
        double double27 = secondMoment11.evaluate(doubleArray25);
        long long28 = secondMoment11.getN();
        long long29 = secondMoment11.getN();
        secondMoment11.clear();
        double double31 = secondMoment11.getResult();
        secondMoment11.clear();
        boolean boolean33 = secondMoment1.equals((java.lang.Object) secondMoment11);
        secondMoment1.clear();
        secondMoment1.increment(22.88888888888889d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        double[] doubleArray42 = new double[] { 0L, (byte) 10 };
        double double43 = variance38.evaluate(doubleArray42);
        double double44 = variance38.getResult();
        variance38.increment(1349359.4135802474d);
        variance38.setBiasCorrected(true);
        variance38.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        variance51.increment((double) (short) -1);
        long long55 = variance51.getN();
        variance51.setBiasCorrected(false);
        double double58 = variance51.getResult();
        variance51.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment60 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment60);
        long long62 = secondMoment60.getN();
        secondMoment60.clear();
        secondMoment60.clear();
        secondMoment60.increment((double) (byte) 100);
        long long67 = secondMoment60.getN();
        double[] doubleArray69 = new double[] { 2024039.1203703713d };
        double double70 = secondMoment60.evaluate(doubleArray69);
        variance51.incrementAll(doubleArray69);
        variance38.incrementAll(doubleArray69);
        boolean boolean73 = secondMoment1.equals((java.lang.Object) variance38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance74.increment(1.427737295770406E11d);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2136.8055555555557d + "'", double26 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 12820.833333333334d + "'", double27 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 6L + "'", long28 == 6L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 6L + "'", long29 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1L + "'", long55 == 1L);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test05972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05972");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.clear();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        double double9 = variance7.getResult();
        double double10 = variance7.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        long long13 = secondMoment11.getN();
        secondMoment11.clear();
        secondMoment11.clear();
        secondMoment11.increment((double) (byte) 100);
        secondMoment11.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        secondMoment11.clear();
        secondMoment11.increment(2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        boolean boolean24 = variance23.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment27);
        double double29 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment27);
        secondMoment27.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        double[] doubleArray37 = new double[] { 0L, (byte) 10 };
        double double38 = variance33.evaluate(doubleArray37);
        secondMoment27.incrementAll(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment27);
        secondMoment27.clear();
        secondMoment27.increment(Double.NaN);
        secondMoment27.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment27);
        long long47 = variance46.getN();
        boolean boolean48 = variance46.isBiasCorrected();
        long long49 = variance46.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance51.increment((-1.0d));
        variance51.setBiasCorrected(false);
        boolean boolean56 = variance51.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment57 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean58 = variance51.equals((java.lang.Object) secondMoment57);
        secondMoment57.increment((double) (short) 0);
        secondMoment57.increment((double) 1.0f);
        long long63 = secondMoment57.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment64 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment64);
        long long66 = secondMoment64.getN();
        secondMoment64.clear();
        double double68 = secondMoment64.getResult();
        secondMoment64.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment64);
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance73.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double79 = variance78.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double82 = variance81.getResult();
        double[] doubleArray85 = new double[] { 0L, (byte) 10 };
        double double86 = variance81.evaluate(doubleArray85);
        double double88 = variance78.evaluate(doubleArray85, (double) 10L);
        double double89 = variance76.evaluate(doubleArray85);
        double double90 = variance73.evaluate(doubleArray85);
        variance71.incrementAll(doubleArray85);
        double double92 = secondMoment57.evaluate(doubleArray85);
        variance46.incrementAll(doubleArray85);
        variance23.incrementAll(doubleArray85);
        double double95 = variance7.evaluate(doubleArray85);
        double double96 = variance1.evaluate(doubleArray85);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 2L + "'", long47 == 2L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 2L + "'", long49 == 2L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 2L + "'", long63 == 2L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 50.0d + "'", double95 == 50.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 50.0d + "'", double96 == 50.0d);
    }

    @Test
    public void test05973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05973");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double8 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        long long11 = secondMoment9.getN();
        secondMoment9.clear();
        secondMoment9.clear();
        secondMoment9.increment((double) (byte) 100);
        long long16 = secondMoment9.getN();
        double[] doubleArray18 = new double[] { 2024039.1203703713d };
        double double19 = secondMoment9.evaluate(doubleArray18);
        secondMoment7.incrementAll(doubleArray18);
        double double21 = secondMoment1.evaluate(doubleArray18);
        secondMoment1.increment((double) (short) -1);
        long long24 = secondMoment1.getN();
        secondMoment1.increment(8.579406224874637E8d);
        long long27 = secondMoment1.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 2L + "'", long24 == 2L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 3L + "'", long27 == 3L);
    }

    @Test
    public void test05974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05974");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        secondMoment7.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.setBiasCorrected(false);
        boolean boolean20 = variance15.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean22 = variance15.equals((java.lang.Object) secondMoment21);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        double[] doubleArray31 = new double[] { 0L, (byte) 10 };
        double double32 = variance27.evaluate(doubleArray31);
        double double34 = variance24.evaluate(doubleArray31, (double) 10L);
        double double38 = variance15.evaluate(doubleArray31, (double) (short) 0, 0, (int) (short) 0);
        double double41 = secondMoment7.evaluate(doubleArray31, 0, 0);
        long long42 = secondMoment7.getN();
        long long43 = secondMoment7.getN();
        double double44 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        double double46 = variance45.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double48 = secondMoment47.getResult();
        double double49 = secondMoment47.getResult();
        secondMoment47.clear();
        double double51 = secondMoment47.getResult();
        secondMoment47.clear();
        secondMoment47.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean57 = variance55.equals((java.lang.Object) (short) 10);
        double double58 = variance55.getResult();
        variance55.clear();
        double double60 = variance55.getResult();
        double double61 = variance55.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double64 = variance63.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance68.increment((-1.0d));
        variance68.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double79 = variance78.getResult();
        double[] doubleArray82 = new double[] { 0L, (byte) 10 };
        double double83 = variance78.evaluate(doubleArray82);
        double double85 = variance75.evaluate(doubleArray82, (double) 10L);
        double double86 = variance73.evaluate(doubleArray82);
        double double87 = variance68.evaluate(doubleArray82);
        variance66.incrementAll(doubleArray82);
        double double89 = variance63.evaluate(doubleArray82);
        double double90 = variance55.evaluate(doubleArray82);
        double double91 = secondMoment47.evaluate(doubleArray82);
        double double92 = variance45.evaluate(doubleArray82);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
    }

    @Test
    public void test05975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05975");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        double double15 = secondMoment7.getResult();
        secondMoment7.increment(25.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.setBiasCorrected(false);
        boolean boolean25 = variance20.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        double[] doubleArray34 = new double[] { 0L, (byte) 10 };
        double double35 = variance30.evaluate(doubleArray34);
        double double37 = variance27.evaluate(doubleArray34, (double) 10L);
        double double38 = variance20.evaluate(doubleArray34);
        long long39 = variance20.getN();
        long long40 = variance20.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean44 = variance42.equals((java.lang.Object) (short) 10);
        double double45 = variance42.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        double[] doubleArray54 = new double[] { 0L, (byte) 10 };
        double double55 = variance50.evaluate(doubleArray54);
        double double57 = variance47.evaluate(doubleArray54, (double) 10L);
        double double58 = variance42.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance60.increment((-1.0d));
        variance60.setBiasCorrected(false);
        boolean boolean65 = variance60.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment66 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean67 = variance60.equals((java.lang.Object) secondMoment66);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double70 = variance69.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double73 = variance72.getResult();
        double[] doubleArray76 = new double[] { 0L, (byte) 10 };
        double double77 = variance72.evaluate(doubleArray76);
        double double79 = variance69.evaluate(doubleArray76, (double) 10L);
        double double83 = variance60.evaluate(doubleArray76, (double) (short) 0, 0, (int) (short) 0);
        double double86 = variance42.evaluate(doubleArray76, 0, (int) (byte) 1);
        double double87 = variance20.evaluate(doubleArray76);
        // The following exception was thrown during execution in test generation
        try {
            double double90 = secondMoment7.evaluate(doubleArray76, 10, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.5d + "'", double15 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 25.0d + "'", double38 == 25.0d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 25.0d + "'", double87 == 25.0d);
    }

    @Test
    public void test05976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05976");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double[] doubleArray5 = new double[] { 0L, (byte) 10 };
        double double6 = variance1.evaluate(doubleArray5);
        boolean boolean7 = variance1.isBiasCorrected();
        variance1.clear();
        boolean boolean9 = variance1.isBiasCorrected();
        long long10 = variance1.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.0d + "'", double6 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test05977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05977");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double9 = variance8.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double11 = secondMoment10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        variance12.increment(2564.166666666667d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double17 = variance16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double20 = variance19.getResult();
        double[] doubleArray23 = new double[] { 0L, (byte) 10 };
        double double24 = variance19.evaluate(doubleArray23);
        double double26 = variance16.evaluate(doubleArray23, (double) 10L);
        long long27 = variance16.getN();
        variance16.increment((double) 0L);
        double[] doubleArray31 = new double[] { 10.0d };
        variance16.incrementAll(doubleArray31);
        double double34 = variance12.evaluate(doubleArray31, (double) 2L);
        double double35 = variance8.evaluate(doubleArray31);
        variance8.increment(0.0d);
        boolean boolean38 = variance8.isBiasCorrected();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test05978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05978");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        double[] doubleArray12 = new double[] { 0L, (byte) 10 };
        double double13 = variance8.evaluate(doubleArray12);
        secondMoment2.incrementAll(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.clear();
        long long17 = secondMoment2.getN();
        double double18 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double20 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test05979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05979");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance14.increment((-1.0d));
        variance14.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double22 = variance21.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        double[] doubleArray28 = new double[] { 0L, (byte) 10 };
        double double29 = variance24.evaluate(doubleArray28);
        double double31 = variance21.evaluate(doubleArray28, (double) 10L);
        double double32 = variance19.evaluate(doubleArray28);
        double double33 = variance14.evaluate(doubleArray28);
        variance12.incrementAll(doubleArray28);
        double double35 = secondMoment7.evaluate(doubleArray28);
        secondMoment7.clear();
        long long37 = secondMoment7.getN();
        secondMoment7.increment(1720.0703132629396d);
        java.lang.Class<?> wildcardClass40 = secondMoment7.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test05980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05980");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance4.increment((-1.0d));
        variance4.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double22 = variance9.evaluate(doubleArray18);
        double double23 = variance4.evaluate(doubleArray18);
        variance2.incrementAll(doubleArray18);
        variance0.incrementAll(doubleArray18);
        variance0.clear();
        long long27 = variance0.getN();
        double double28 = variance0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        double double32 = variance30.getResult();
        double double33 = variance30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance35.increment((-1.0d));
        variance35.setBiasCorrected(false);
        boolean boolean40 = variance35.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean42 = variance35.equals((java.lang.Object) secondMoment41);
        double double43 = secondMoment41.getResult();
        secondMoment41.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        secondMoment41.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance49.increment((-1.0d));
        variance49.setBiasCorrected(false);
        boolean boolean54 = variance49.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean56 = variance49.equals((java.lang.Object) secondMoment55);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double59 = variance58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        double[] doubleArray65 = new double[] { 0L, (byte) 10 };
        double double66 = variance61.evaluate(doubleArray65);
        double double68 = variance58.evaluate(doubleArray65, (double) 10L);
        double double72 = variance49.evaluate(doubleArray65, (double) (short) 0, 0, (int) (short) 0);
        double double75 = secondMoment41.evaluate(doubleArray65, 0, 0);
        variance30.incrementAll(doubleArray65);
        double double78 = variance0.evaluate(doubleArray65, 5.415271412037037E7d);
        long long79 = variance0.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 51.0d + "'", double78 == 51.0d);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
    }

    @Test
    public void test05981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05981");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        secondMoment8.incrementAll(doubleArray18);
        boolean boolean21 = variance1.equals((java.lang.Object) secondMoment8);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean31 = variance24.equals((java.lang.Object) secondMoment30);
        variance24.increment((double) 100L);
        variance24.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        double[] doubleArray46 = new double[] { 0L, (byte) 10 };
        double double47 = variance42.evaluate(doubleArray46);
        double double49 = variance39.evaluate(doubleArray46, (double) 10L);
        double double50 = variance37.evaluate(doubleArray46);
        double[] doubleArray54 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double55 = variance37.evaluate(doubleArray54);
        variance24.incrementAll(doubleArray54);
        variance1.incrementAll(doubleArray54);
        long long58 = variance1.getN();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2024039.120370371d + "'", double55 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 3L + "'", long58 == 3L);
    }

    @Test
    public void test05982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05982");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        double double15 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        long long17 = variance16.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double20 = variance19.getResult();
        long long21 = variance19.getN();
        variance19.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance25.increment((-1.0d));
        variance25.setBiasCorrected(false);
        boolean boolean30 = variance25.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        double[] doubleArray39 = new double[] { 0L, (byte) 10 };
        double double40 = variance35.evaluate(doubleArray39);
        double double42 = variance32.evaluate(doubleArray39, (double) 10L);
        double double43 = variance25.evaluate(doubleArray39);
        variance19.incrementAll(doubleArray39);
        variance16.incrementAll(doubleArray39);
        long long46 = variance16.getN();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.5d + "'", double15 == 0.5d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 25.0d + "'", double43 == 25.0d);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 2L + "'", long46 == 2L);
    }

    @Test
    public void test05983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05983");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        long long7 = variance1.getN();
        boolean boolean8 = variance1.isBiasCorrected();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance11.increment((-1.0d));
        variance11.setBiasCorrected(false);
        boolean boolean16 = variance11.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean18 = variance11.equals((java.lang.Object) secondMoment17);
        secondMoment17.increment((double) (short) 0);
        secondMoment17.increment((double) 1.0f);
        double double23 = secondMoment17.getResult();
        secondMoment17.clear();
        long long25 = secondMoment17.getN();
        secondMoment17.clear();
        secondMoment17.increment(1988.7755102040815d);
        secondMoment17.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment17);
        secondMoment17.increment(49.999755859375d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment34);
        long long36 = secondMoment34.getN();
        secondMoment34.clear();
        secondMoment34.clear();
        secondMoment34.increment((double) (byte) 100);
        secondMoment34.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment34);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment34);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        double[] doubleArray52 = new double[] { 0L, (byte) 10 };
        double double53 = variance48.evaluate(doubleArray52);
        double double55 = variance45.evaluate(doubleArray52, (double) 10L);
        double double56 = variance43.evaluate(doubleArray52);
        double double57 = secondMoment17.evaluate(doubleArray52);
        double double58 = variance1.evaluate(doubleArray52);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5d + "'", double23 == 0.5d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 25.0d + "'", double58 == 25.0d);
    }

    @Test
    public void test05984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05984");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double[] doubleArray6 = new double[] { 'a', (-1.0f), '4' };
        variance2.incrementAll(doubleArray6);
        variance2.clear();
        variance2.increment((double) (byte) 100);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean14 = variance12.equals((java.lang.Object) (short) 10);
        double double15 = variance12.getResult();
        variance12.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double24 = variance23.getResult();
        double[] doubleArray27 = new double[] { 0L, (byte) 10 };
        double double28 = variance23.evaluate(doubleArray27);
        double double30 = variance20.evaluate(doubleArray27, (double) 10L);
        double double31 = variance18.evaluate(doubleArray27);
        double[] doubleArray35 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double36 = variance18.evaluate(doubleArray35);
        double double39 = variance12.evaluate(doubleArray35, 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double42 = variance2.evaluate(doubleArray35, (int) (short) -1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[97.0, -1.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 2024039.120370371d + "'", double36 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
    }

    @Test
    public void test05985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05985");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        long long15 = secondMoment13.getN();
        secondMoment13.clear();
        secondMoment13.clear();
        secondMoment13.increment((double) (byte) 100);
        secondMoment13.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment13);
        variance22.increment((double) 2L);
        double double25 = variance22.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment27);
        long long29 = secondMoment27.getN();
        secondMoment27.clear();
        double double31 = secondMoment27.getResult();
        secondMoment27.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment27);
        double[] doubleArray35 = new double[] {};
        double double36 = secondMoment27.evaluate(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment27);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance39.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance43.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        double[] doubleArray55 = new double[] { 0L, (byte) 10 };
        double double56 = variance51.evaluate(doubleArray55);
        double double58 = variance48.evaluate(doubleArray55, (double) 10L);
        double double59 = variance46.evaluate(doubleArray55);
        double double60 = variance43.evaluate(doubleArray55);
        double double61 = variance39.evaluate(doubleArray55);
        double double62 = variance37.evaluate(doubleArray55);
        double double63 = variance22.evaluate(doubleArray55);
        double double64 = secondMoment7.evaluate(doubleArray55);
        double double65 = secondMoment7.getResult();
        secondMoment7.clear();
        long long67 = secondMoment7.getN();
        secondMoment7.increment(1349359.4140625d);
        long long70 = secondMoment7.getN();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1L + "'", long70 == 1L);
    }

    @Test
    public void test05986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05986");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        secondMoment7.clear();
        secondMoment7.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        boolean boolean16 = variance15.isBiasCorrected();
        variance15.increment(2668380.010204082d);
        variance15.increment(1.4631541463478633E13d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test05987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05987");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        boolean boolean4 = variance1.isBiasCorrected();
        double double5 = variance1.getResult();
        variance1.clear();
        variance1.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance10.increment((-1.0d));
        variance10.setBiasCorrected(false);
        boolean boolean15 = variance10.isBiasCorrected();
        double[] doubleArray16 = new double[] {};
        double double17 = variance10.evaluate(doubleArray16);
        variance10.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray28 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double29 = variance21.evaluate(doubleArray28);
        double double30 = variance10.evaluate(doubleArray28);
        variance1.incrementAll(doubleArray28);
        double double32 = variance1.getResult();
        double double33 = variance1.getResult();
        long long34 = variance1.getN();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2136.8055555555557d + "'", double29 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2136.8055555555557d + "'", double30 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2224.904761904762d + "'", double32 == 2224.904761904762d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2224.904761904762d + "'", double33 == 2224.904761904762d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 7L + "'", long34 == 7L);
    }

    @Test
    public void test05988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05988");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        long long6 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double22 = variance9.evaluate(doubleArray18);
        variance9.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean28 = variance26.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        double[] doubleArray39 = new double[] { 0L, (byte) 10 };
        double double40 = variance35.evaluate(doubleArray39);
        double double42 = variance32.evaluate(doubleArray39, (double) 10L);
        double double43 = variance30.evaluate(doubleArray39);
        double[] doubleArray47 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double48 = variance30.evaluate(doubleArray47);
        double double50 = variance26.evaluate(doubleArray47, (double) (byte) 1);
        double double51 = variance9.evaluate(doubleArray47);
        double double53 = variance7.evaluate(doubleArray47, 0.0d);
        double double54 = variance7.getResult();
        variance7.increment((double) 100);
        double double57 = variance7.getResult();
        long long58 = variance7.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment59);
        double double61 = secondMoment59.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment59);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance64.increment((-1.0d));
        variance64.setBiasCorrected(false);
        boolean boolean69 = variance64.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment70 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean71 = variance64.equals((java.lang.Object) secondMoment70);
        variance64.increment((double) 100L);
        variance64.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double80 = variance79.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance82 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double83 = variance82.getResult();
        double[] doubleArray86 = new double[] { 0L, (byte) 10 };
        double double87 = variance82.evaluate(doubleArray86);
        double double89 = variance79.evaluate(doubleArray86, (double) 10L);
        double double90 = variance77.evaluate(doubleArray86);
        double[] doubleArray94 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double95 = variance77.evaluate(doubleArray94);
        variance64.incrementAll(doubleArray94);
        variance62.incrementAll(doubleArray94);
        double double98 = variance7.evaluate(doubleArray94);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2024039.120370371d + "'", double48 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2024039.120370371d + "'", double50 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2024039.120370371d + "'", double51 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1349359.4135802472d + "'", double53 == 1349359.4135802472d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 2024039.120370371d + "'", double95 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 1349359.4135802474d + "'", double98 == 1349359.4135802474d);
    }

    @Test
    public void test05989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05989");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance8.increment((-1.0d));
        variance8.setBiasCorrected(false);
        variance8.increment((double) 100L);
        boolean boolean15 = variance8.isBiasCorrected();
        boolean boolean16 = variance8.isBiasCorrected();
        boolean boolean17 = secondMoment1.equals((java.lang.Object) boolean16);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double double19 = variance18.getResult();
        variance18.clear();
        double double21 = variance18.getResult();
        variance18.clear();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test05990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05990");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        boolean boolean8 = variance1.isBiasCorrected();
        variance1.clear();
        double double10 = variance1.getResult();
        long long11 = variance1.getN();
        variance1.increment(0.0d);
        long long14 = variance1.getN();
        variance1.clear();
        boolean boolean16 = variance1.isBiasCorrected();
        double double17 = variance1.getResult();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test05991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05991");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment(876046.7222222224d);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test05992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05992");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        long long7 = secondMoment5.getN();
        secondMoment5.clear();
        secondMoment5.clear();
        secondMoment5.increment((double) (byte) 100);
        secondMoment5.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment5);
        variance14.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance19.increment((-1.0d));
        variance19.setBiasCorrected(false);
        boolean boolean24 = variance19.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean26 = variance19.equals((java.lang.Object) secondMoment25);
        double double27 = secondMoment25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        double[] doubleArray36 = new double[] { 0L, (byte) 10 };
        double double37 = variance32.evaluate(doubleArray36);
        double double39 = variance29.evaluate(doubleArray36, (double) 10L);
        double double42 = secondMoment25.evaluate(doubleArray36, (int) (short) 0, 1);
        long long43 = secondMoment25.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment25);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double47 = variance46.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double50 = variance49.getResult();
        double[] doubleArray53 = new double[] { 0L, (byte) 10 };
        double double54 = variance49.evaluate(doubleArray53);
        double double56 = variance46.evaluate(doubleArray53, (double) 10L);
        long long57 = variance46.getN();
        variance46.increment((double) 0L);
        double[] doubleArray61 = new double[] { 10.0d };
        variance46.incrementAll(doubleArray61);
        double double63 = variance44.evaluate(doubleArray61);
        variance14.incrementAll(doubleArray61);
        secondMoment0.incrementAll(doubleArray61);
        double double66 = secondMoment0.getResult();
        secondMoment0.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
    }

    @Test
    public void test05993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05993");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        boolean boolean8 = variance1.isBiasCorrected();
        boolean boolean9 = variance1.isBiasCorrected();
        double double10 = variance1.getResult();
        variance1.clear();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 2550.25d + "'", double10 == 2550.25d);
    }

    @Test
    public void test05994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05994");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        double double5 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        secondMoment3.clear();
        secondMoment3.increment((double) 2L);
        double double10 = secondMoment3.getResult();
        secondMoment3.increment(50.0d);
        double double13 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment3);
        double double16 = secondMoment3.getResult();
        secondMoment3.clear();
        double double18 = secondMoment3.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1152.0d + "'", double13 == 1152.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1152.0d + "'", double16 == 1152.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test05995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05995");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = secondMoment8.evaluate(doubleArray22);
        long long25 = secondMoment8.getN();
        long long26 = secondMoment8.getN();
        secondMoment8.clear();
        double double28 = secondMoment8.getResult();
        secondMoment8.clear();
        long long30 = secondMoment8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 12820.833333333334d + "'", double24 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test05996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05996");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = secondMoment8.evaluate(doubleArray22);
        long long25 = secondMoment8.getN();
        long long26 = secondMoment8.getN();
        secondMoment8.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance31.increment((-1.0d));
        variance31.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean39 = variance37.equals((java.lang.Object) (short) 10);
        boolean boolean40 = variance31.equals((java.lang.Object) variance37);
        long long41 = variance37.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean45 = variance43.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray54 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double55 = variance47.evaluate(doubleArray54);
        double double56 = variance43.evaluate(doubleArray54);
        double double57 = variance37.evaluate(doubleArray54);
        secondMoment8.incrementAll(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment59);
        long long61 = secondMoment59.getN();
        secondMoment59.clear();
        secondMoment59.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment65 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment65);
        long long67 = secondMoment65.getN();
        secondMoment65.clear();
        double double69 = secondMoment65.getResult();
        secondMoment65.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment65);
        double[] doubleArray73 = new double[] {};
        double double74 = secondMoment65.evaluate(doubleArray73);
        secondMoment59.incrementAll(doubleArray73);
        double double76 = secondMoment8.evaluate(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        java.lang.Class<?> wildcardClass78 = secondMoment8.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 12820.833333333334d + "'", double24 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2136.8055555555557d + "'", double55 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2564.166666666667d + "'", double56 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2564.166666666667d + "'", double57 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 26761.69230769231d + "'", double76 == 26761.69230769231d);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test05997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05997");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        variance1.increment((double) (short) -1);
        boolean boolean5 = variance1.isBiasCorrected();
        variance1.increment(2.731142747304003E12d);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance10.increment((-1.0d));
        variance10.setBiasCorrected(false);
        boolean boolean15 = variance10.isBiasCorrected();
        double[] doubleArray16 = new double[] {};
        double double17 = variance10.evaluate(doubleArray16);
        variance10.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double24 = variance23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        double[] doubleArray30 = new double[] { 0L, (byte) 10 };
        double double31 = variance26.evaluate(doubleArray30);
        double double33 = variance23.evaluate(doubleArray30, (double) 10L);
        double double34 = variance21.evaluate(doubleArray30);
        variance10.incrementAll(doubleArray30);
        variance10.increment(4048078.240740742d);
        variance10.increment(0.5d);
        long long40 = variance10.getN();
        variance10.clear();
        double double42 = variance10.getResult();
        variance10.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean47 = variance45.equals((java.lang.Object) (short) 10);
        double double48 = variance45.getResult();
        variance45.increment((double) 13L);
        variance45.setBiasCorrected(true);
        double double53 = variance45.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment55);
        double double57 = secondMoment55.getResult();
        boolean boolean59 = secondMoment55.equals((java.lang.Object) 1.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment55);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance62.increment((-1.0d));
        boolean boolean65 = variance62.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment67 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment67);
        double double69 = secondMoment67.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment67);
        secondMoment67.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance73.increment((-1.0d));
        variance73.setBiasCorrected(false);
        boolean boolean78 = variance73.isBiasCorrected();
        double[] doubleArray79 = new double[] {};
        double double80 = variance73.evaluate(doubleArray79);
        secondMoment67.incrementAll(doubleArray79);
        double double82 = variance62.evaluate(doubleArray79);
        double double83 = secondMoment55.evaluate(doubleArray79);
        double double84 = variance45.evaluate(doubleArray79);
        variance10.incrementAll(doubleArray79);
        double double86 = variance1.evaluate(doubleArray79);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 6L + "'", long40 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue(Double.isNaN(double86));
    }

    @Test
    public void test05998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05998");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance7.increment((-1.0d));
        variance7.setBiasCorrected(false);
        boolean boolean12 = variance7.isBiasCorrected();
        double[] doubleArray13 = new double[] {};
        double double14 = variance7.evaluate(doubleArray13);
        secondMoment1.incrementAll(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        variance16.clear();
        variance16.increment(576.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test05999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05999");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = secondMoment8.evaluate(doubleArray22);
        long long25 = secondMoment8.getN();
        long long26 = secondMoment8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        variance27.setBiasCorrected(false);
        double double30 = variance27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance32.increment((-1.0d));
        variance32.setBiasCorrected(false);
        boolean boolean37 = variance32.isBiasCorrected();
        double double38 = variance32.getResult();
        variance32.setBiasCorrected(true);
        double double41 = variance32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.increment((-1.0d));
        variance44.setBiasCorrected(false);
        boolean boolean49 = variance44.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean51 = variance44.equals((java.lang.Object) secondMoment50);
        double double52 = secondMoment50.getResult();
        secondMoment50.clear();
        secondMoment50.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment50);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance57.increment((-1.0d));
        variance57.setBiasCorrected(false);
        boolean boolean62 = variance57.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double65 = variance64.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double68 = variance67.getResult();
        double[] doubleArray71 = new double[] { 0L, (byte) 10 };
        double double72 = variance67.evaluate(doubleArray71);
        double double74 = variance64.evaluate(doubleArray71, (double) 10L);
        double double75 = variance57.evaluate(doubleArray71);
        long long76 = variance57.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance78.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double84 = variance83.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance86 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double87 = variance86.getResult();
        double[] doubleArray90 = new double[] { 0L, (byte) 10 };
        double double91 = variance86.evaluate(doubleArray90);
        double double93 = variance83.evaluate(doubleArray90, (double) 10L);
        double double94 = variance81.evaluate(doubleArray90);
        double double95 = variance78.evaluate(doubleArray90);
        double double96 = variance57.evaluate(doubleArray90);
        double double97 = variance55.evaluate(doubleArray90);
        variance32.incrementAll(doubleArray90);
        double double99 = variance27.evaluate(doubleArray90);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 12820.833333333334d + "'", double24 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2136.8055555555557d + "'", double30 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 25.0d + "'", double75 == 25.0d);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 50.0d + "'", double93 == 50.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 50.0d + "'", double94 == 50.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 50.0d + "'", double95 == 50.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 25.0d + "'", double96 == 25.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 25.0d + "'", double97 == 25.0d);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 25.0d + "'", double99 == 25.0d);
    }

    @Test
    public void test06000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test06000");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.increment(10.0d);
        double double7 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double double9 = variance8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean15 = variance13.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray24 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double25 = variance17.evaluate(doubleArray24);
        double double26 = variance13.evaluate(doubleArray24);
        variance13.setBiasCorrected(false);
        variance13.increment((double) (byte) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance32.increment((-1.0d));
        variance32.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean40 = variance38.equals((java.lang.Object) (short) 10);
        boolean boolean41 = variance32.equals((java.lang.Object) variance38);
        long long42 = variance38.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean46 = variance44.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray55 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double56 = variance48.evaluate(doubleArray55);
        double double57 = variance44.evaluate(doubleArray55);
        double double58 = variance38.evaluate(doubleArray55);
        double double60 = variance13.evaluate(doubleArray55, 24.5d);
        double double63 = variance11.evaluate(doubleArray55, 0, 1);
        double double64 = variance8.evaluate(doubleArray55);
        variance8.increment(5000.0d);
        double double67 = variance8.getResult();
        boolean boolean68 = variance8.isBiasCorrected();
        variance8.clear();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2136.8055555555557d + "'", double25 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2564.166666666667d + "'", double26 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2136.8055555555557d + "'", double56 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2564.166666666667d + "'", double57 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2564.166666666667d + "'", double58 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2136.8055555555557d + "'", double60 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2136.8055555555557d + "'", double64 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }
}


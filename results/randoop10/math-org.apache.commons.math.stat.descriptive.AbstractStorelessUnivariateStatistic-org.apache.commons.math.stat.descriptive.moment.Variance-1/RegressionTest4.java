import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test02001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02001");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance6.increment((-1.0d));
        variance6.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double17 = variance16.getResult();
        double[] doubleArray20 = new double[] { 0L, (byte) 10 };
        double double21 = variance16.evaluate(doubleArray20);
        double double23 = variance13.evaluate(doubleArray20, (double) 10L);
        double double24 = variance11.evaluate(doubleArray20);
        double double25 = variance6.evaluate(doubleArray20);
        variance4.incrementAll(doubleArray20);
        double double27 = variance1.evaluate(doubleArray20);
        variance1.increment((double) 1.0f);
        boolean boolean30 = variance1.isBiasCorrected();
        variance1.increment(3.2635121145526935E11d);
        variance1.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test02002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02002");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance6.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean12 = variance10.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double22 = variance14.evaluate(doubleArray21);
        double double23 = variance10.evaluate(doubleArray21);
        double double25 = variance6.evaluate(doubleArray21, (double) 1.0f);
        boolean boolean26 = variance6.isBiasCorrected();
        long long27 = variance6.getN();
        double double28 = variance6.getResult();
        long long29 = variance6.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment30);
        long long32 = secondMoment30.getN();
        secondMoment30.clear();
        secondMoment30.clear();
        secondMoment30.increment((double) (byte) 100);
        secondMoment30.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment30);
        secondMoment30.clear();
        secondMoment30.increment(2024039.12109375d);
        secondMoment30.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment30);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance45.increment((-1.0d));
        variance45.setBiasCorrected(false);
        boolean boolean50 = variance45.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean52 = variance45.equals((java.lang.Object) secondMoment51);
        double double53 = secondMoment51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double56 = variance55.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double59 = variance58.getResult();
        double[] doubleArray62 = new double[] { 0L, (byte) 10 };
        double double63 = variance58.evaluate(doubleArray62);
        double double65 = variance55.evaluate(doubleArray62, (double) 10L);
        double double68 = secondMoment51.evaluate(doubleArray62, (int) (short) 0, 1);
        double double69 = variance43.evaluate(doubleArray62);
        variance6.incrementAll(doubleArray62);
        java.lang.Class<?> wildcardClass71 = doubleArray62.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2136.8055555555557d + "'", double22 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2564.166666666667d + "'", double23 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2136.805555555555d + "'", double25 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test02003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02003");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double[] doubleArray5 = new double[] { 0L, (byte) 10 };
        double double6 = variance1.evaluate(doubleArray5);
        double double7 = variance1.getResult();
        variance1.increment(1349359.4135802474d);
        variance1.setBiasCorrected(true);
        variance1.clear();
        double double13 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double33 = variance25.evaluate(doubleArray32);
        double double35 = variance15.evaluate(doubleArray32, (double) '#');
        double double36 = variance15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance38.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double44 = variance43.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double47 = variance46.getResult();
        double[] doubleArray50 = new double[] { 0L, (byte) 10 };
        double double51 = variance46.evaluate(doubleArray50);
        double double53 = variance43.evaluate(doubleArray50, (double) 10L);
        double double54 = variance41.evaluate(doubleArray50);
        double double55 = variance38.evaluate(doubleArray50);
        variance15.incrementAll(doubleArray50);
        double double57 = variance1.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment58);
        long long60 = secondMoment58.getN();
        secondMoment58.clear();
        secondMoment58.clear();
        secondMoment58.increment((double) (byte) 100);
        secondMoment58.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment58);
        secondMoment58.clear();
        secondMoment58.increment(2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment58);
        boolean boolean71 = variance70.isBiasCorrected();
        double double72 = variance70.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment74 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment74);
        double double76 = secondMoment74.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment74);
        secondMoment74.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment80 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double81 = secondMoment80.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment82 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment82);
        long long84 = secondMoment82.getN();
        secondMoment82.clear();
        secondMoment82.clear();
        secondMoment82.increment((double) (byte) 100);
        long long89 = secondMoment82.getN();
        double[] doubleArray91 = new double[] { 2024039.1203703713d };
        double double92 = secondMoment82.evaluate(doubleArray91);
        secondMoment80.incrementAll(doubleArray91);
        double double94 = secondMoment74.evaluate(doubleArray91);
        double double95 = variance70.evaluate(doubleArray91);
        double double97 = variance1.evaluate(doubleArray91, 31.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.0d + "'", double6 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2136.8055555555557d + "'", double33 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 2136.8055555555557d + "'", double35 == 2136.8055555555557d);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 1L + "'", long89 == 1L);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
    }

    @Test
    public void test02004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02004");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.clear();
        variance1.increment((double) (short) -1);
        boolean boolean5 = variance1.isBiasCorrected();
        variance1.increment((double) 6L);
        double double8 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        double double12 = secondMoment10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment10);
        secondMoment10.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance16.increment((-1.0d));
        variance16.setBiasCorrected(false);
        boolean boolean21 = variance16.isBiasCorrected();
        double[] doubleArray22 = new double[] {};
        double double23 = variance16.evaluate(doubleArray22);
        secondMoment10.incrementAll(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment26);
        long long28 = secondMoment26.getN();
        secondMoment26.clear();
        secondMoment26.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment26);
        long long32 = variance31.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean36 = variance34.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double44 = variance43.getResult();
        double[] doubleArray47 = new double[] { 0L, (byte) 10 };
        double double48 = variance43.evaluate(doubleArray47);
        double double50 = variance40.evaluate(doubleArray47, (double) 10L);
        double double51 = variance38.evaluate(doubleArray47);
        double[] doubleArray55 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double56 = variance38.evaluate(doubleArray55);
        double double58 = variance34.evaluate(doubleArray55, (double) (byte) 1);
        variance34.clear();
        double double60 = variance34.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double63 = variance62.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double66 = variance65.getResult();
        double[] doubleArray69 = new double[] { 0L, (byte) 10 };
        double double70 = variance65.evaluate(doubleArray69);
        double double72 = variance62.evaluate(doubleArray69, (double) 10L);
        long long73 = variance62.getN();
        variance62.increment((double) 0L);
        double[] doubleArray77 = new double[] { 10.0d };
        variance62.incrementAll(doubleArray77);
        double double79 = variance34.evaluate(doubleArray77);
        variance31.incrementAll(doubleArray77);
        double double81 = variance25.evaluate(doubleArray77);
        variance1.incrementAll(doubleArray77);
        double double83 = variance1.getResult();
        java.lang.Class<?> wildcardClass84 = variance1.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 24.5d + "'", double8 == 24.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2024039.120370371d + "'", double56 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2024039.120370371d + "'", double58 == 2024039.120370371d);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[10.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 31.0d + "'", double83 == 31.0d);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test02005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02005");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.increment((double) 3L);
        java.lang.Class<?> wildcardClass5 = variance2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test02006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02006");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double[] doubleArray7 = new double[] {};
        double double8 = variance1.evaluate(doubleArray7);
        variance1.increment((double) (-1.0f));
        double double11 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        long long15 = secondMoment13.getN();
        secondMoment13.clear();
        secondMoment13.clear();
        double double18 = secondMoment13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance21.increment((-1.0d));
        variance21.setBiasCorrected(false);
        boolean boolean26 = variance21.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        double double30 = secondMoment28.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment28);
        secondMoment28.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        double[] doubleArray38 = new double[] { 0L, (byte) 10 };
        double double39 = variance34.evaluate(doubleArray38);
        secondMoment28.incrementAll(doubleArray38);
        boolean boolean41 = variance21.equals((java.lang.Object) secondMoment28);
        variance21.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment44);
        double double46 = secondMoment44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment44);
        secondMoment44.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        double[] doubleArray54 = new double[] { 0L, (byte) 10 };
        double double55 = variance50.evaluate(doubleArray54);
        secondMoment44.incrementAll(doubleArray54);
        double double57 = variance21.evaluate(doubleArray54);
        double double58 = variance19.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance60.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double66 = variance65.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double69 = variance68.getResult();
        double[] doubleArray72 = new double[] { 0L, (byte) 10 };
        double double73 = variance68.evaluate(doubleArray72);
        double double75 = variance65.evaluate(doubleArray72, (double) 10L);
        double double76 = variance63.evaluate(doubleArray72);
        double double77 = variance60.evaluate(doubleArray72);
        double double79 = variance19.evaluate(doubleArray72, 2024039.1203703713d);
        variance1.incrementAll(doubleArray72);
        variance1.clear();
        boolean boolean82 = variance1.isBiasCorrected();
        double double83 = variance1.getResult();
        double double84 = variance1.getResult();
        double[] doubleArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double88 = variance1.evaluate(doubleArray85, 0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 25.0d + "'", double57 == 25.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0009765625d + "'", double79 == 50.0009765625d);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue(Double.isNaN(double84));
    }

    @Test
    public void test02007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02007");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        double double5 = secondMoment0.getResult();
        long long6 = secondMoment0.getN();
        double double7 = secondMoment0.getResult();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test02008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02008");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        double double20 = variance10.evaluate(doubleArray17, (double) 10L);
        double double21 = variance8.evaluate(doubleArray17);
        double double22 = variance3.evaluate(doubleArray17);
        variance1.incrementAll(doubleArray17);
        variance1.increment((double) 100.0f);
        variance1.increment(1641.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance29.increment((-1.0d));
        variance29.setBiasCorrected(false);
        variance29.increment((double) 100L);
        boolean boolean36 = variance29.isBiasCorrected();
        variance29.clear();
        long long38 = variance29.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance40.increment((-1.0d));
        variance40.setBiasCorrected(false);
        variance40.increment((double) 100L);
        boolean boolean47 = variance40.isBiasCorrected();
        variance40.clear();
        long long49 = variance40.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment51);
        double double53 = secondMoment51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment51);
        secondMoment51.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        double[] doubleArray61 = new double[] { 0L, (byte) 10 };
        double double62 = variance57.evaluate(doubleArray61);
        secondMoment51.incrementAll(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment51);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean68 = variance66.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance70.increment((-1.0d));
        variance70.setBiasCorrected(false);
        boolean boolean75 = variance70.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment76 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean77 = variance70.equals((java.lang.Object) secondMoment76);
        double double78 = secondMoment76.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double81 = variance80.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double84 = variance83.getResult();
        double[] doubleArray87 = new double[] { 0L, (byte) 10 };
        double double88 = variance83.evaluate(doubleArray87);
        double double90 = variance80.evaluate(doubleArray87, (double) 10L);
        double double93 = secondMoment76.evaluate(doubleArray87, (int) (short) 0, 1);
        double double94 = variance66.evaluate(doubleArray87);
        secondMoment51.incrementAll(doubleArray87);
        double double96 = variance40.evaluate(doubleArray87);
        double double97 = variance29.evaluate(doubleArray87);
        double double99 = variance1.evaluate(doubleArray87, 3645321.8520408166d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 50.0d + "'", double94 == 50.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 25.0d + "'", double96 == 25.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 25.0d + "'", double97 == 25.0d);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 50.00390625d + "'", double99 == 50.00390625d);
    }

    @Test
    public void test02009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02009");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        secondMoment2.increment((double) 2L);
        double double9 = secondMoment2.getResult();
        secondMoment2.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        long long13 = variance12.getN();
        variance12.clear();
        java.lang.Class<?> wildcardClass15 = variance12.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2L + "'", long13 == 2L);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test02010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02010");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance8.increment((-1.0d));
        variance8.setBiasCorrected(false);
        boolean boolean13 = variance8.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean15 = variance8.equals((java.lang.Object) secondMoment14);
        double double16 = secondMoment14.getResult();
        secondMoment14.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        double double22 = secondMoment20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment20);
        secondMoment20.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance26.increment((-1.0d));
        variance26.setBiasCorrected(false);
        boolean boolean31 = variance26.isBiasCorrected();
        double[] doubleArray32 = new double[] {};
        double double33 = variance26.evaluate(doubleArray32);
        secondMoment20.incrementAll(doubleArray32);
        double double35 = variance18.evaluate(doubleArray32);
        variance18.increment(50.0009765625d);
        long long38 = variance18.getN();
        variance18.increment(2564.166666666686d);
        variance18.increment((-1.0d));
        long long43 = variance18.getN();
        boolean boolean44 = secondMoment1.equals((java.lang.Object) variance18);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        java.lang.Class<?> wildcardClass46 = variance45.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test02011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02011");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean9 = variance7.equals((java.lang.Object) (short) 10);
        boolean boolean10 = variance1.equals((java.lang.Object) variance7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance12.increment((-1.0d));
        variance12.setBiasCorrected(false);
        boolean boolean17 = variance12.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean19 = variance12.equals((java.lang.Object) secondMoment18);
        secondMoment18.increment((double) (short) 0);
        secondMoment18.increment((double) 1.0f);
        double double24 = secondMoment18.getResult();
        secondMoment18.clear();
        secondMoment18.clear();
        secondMoment18.increment((double) 13L);
        secondMoment18.clear();
        boolean boolean30 = variance7.equals((java.lang.Object) secondMoment18);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean34 = variance32.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray43 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double44 = variance36.evaluate(doubleArray43);
        double double45 = variance32.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance47.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double53 = variance52.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double56 = variance55.getResult();
        double[] doubleArray59 = new double[] { 0L, (byte) 10 };
        double double60 = variance55.evaluate(doubleArray59);
        double double62 = variance52.evaluate(doubleArray59, (double) 10L);
        double double63 = variance50.evaluate(doubleArray59);
        double double64 = variance47.evaluate(doubleArray59);
        double double65 = variance32.evaluate(doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            variance7.incrementAll(doubleArray59, (int) (byte) -1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.5d + "'", double24 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2136.8055555555557d + "'", double44 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2564.166666666667d + "'", double45 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
    }

    @Test
    public void test02012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02012");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        secondMoment0.clear();
        long long8 = secondMoment0.getN();
        double double9 = secondMoment0.getResult();
        double double10 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        double double15 = secondMoment13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment13);
        secondMoment13.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double20 = variance19.getResult();
        double[] doubleArray23 = new double[] { 0L, (byte) 10 };
        double double24 = variance19.evaluate(doubleArray23);
        secondMoment13.incrementAll(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        secondMoment13.clear();
        secondMoment13.increment(Double.NaN);
        secondMoment13.increment(0.0d);
        secondMoment13.clear();
        long long33 = secondMoment13.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance38.increment((-1.0d));
        variance38.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        double[] doubleArray52 = new double[] { 0L, (byte) 10 };
        double double53 = variance48.evaluate(doubleArray52);
        double double55 = variance45.evaluate(doubleArray52, (double) 10L);
        double double56 = variance43.evaluate(doubleArray52);
        double double57 = variance38.evaluate(doubleArray52);
        variance36.incrementAll(doubleArray52);
        boolean boolean59 = variance34.equals((java.lang.Object) doubleArray52);
        double double60 = secondMoment0.evaluate(doubleArray52);
        long long61 = secondMoment0.getN();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 2L + "'", long61 == 2L);
    }

    @Test
    public void test02013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02013");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double2 = secondMoment1.getResult();
        double double3 = secondMoment1.getResult();
        secondMoment1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double double7 = secondMoment1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test02014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02014");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        double double15 = secondMoment7.getResult();
        secondMoment7.increment(25.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.setBiasCorrected(false);
        boolean boolean25 = variance20.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean27 = variance20.equals((java.lang.Object) secondMoment26);
        secondMoment26.increment((double) (short) 0);
        secondMoment26.increment((double) 1.0f);
        double double32 = secondMoment26.getResult();
        double double33 = secondMoment26.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment34);
        double double36 = secondMoment34.getResult();
        boolean boolean37 = secondMoment26.equals((java.lang.Object) double36);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment38);
        long long40 = secondMoment38.getN();
        secondMoment38.clear();
        secondMoment38.clear();
        secondMoment38.increment((double) (byte) 100);
        long long45 = secondMoment38.getN();
        double[] doubleArray47 = new double[] { 2024039.1203703713d };
        double double48 = secondMoment38.evaluate(doubleArray47);
        double double49 = secondMoment26.evaluate(doubleArray47);
        double double50 = variance18.evaluate(doubleArray47);
        double[] doubleArray51 = null;
        // The following exception was thrown during execution in test generation
        try {
            variance18.incrementAll(doubleArray51, (int) (short) 100, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.5d + "'", double15 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.5d + "'", double32 == 0.5d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.5d + "'", double33 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
    }

    @Test
    public void test02015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02015");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        double[] doubleArray8 = new double[] { 0L, (byte) 10 };
        double double9 = variance4.evaluate(doubleArray8);
        double double11 = variance1.evaluate(doubleArray8, (double) 10L);
        long long12 = variance1.getN();
        variance1.increment((double) 0L);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        long long20 = variance17.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance25.increment((-1.0d));
        variance25.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        double[] doubleArray39 = new double[] { 0L, (byte) 10 };
        double double40 = variance35.evaluate(doubleArray39);
        double double42 = variance32.evaluate(doubleArray39, (double) 10L);
        double double43 = variance30.evaluate(doubleArray39);
        double double44 = variance25.evaluate(doubleArray39);
        variance23.incrementAll(doubleArray39);
        variance21.incrementAll(doubleArray39);
        double double47 = variance17.evaluate(doubleArray39);
        variance1.incrementAll(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        variance50.increment((double) (short) -1);
        boolean boolean54 = variance50.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment56);
        double double58 = secondMoment56.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment56);
        secondMoment56.clear();
        secondMoment56.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment62);
        long long64 = secondMoment62.getN();
        secondMoment62.clear();
        secondMoment62.clear();
        secondMoment62.increment((double) (byte) 100);
        secondMoment62.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double74 = variance73.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double77 = variance76.getResult();
        double[] doubleArray80 = new double[] { 0L, (byte) 10 };
        double double81 = variance76.evaluate(doubleArray80);
        double double83 = variance73.evaluate(doubleArray80, (double) 10L);
        double double84 = variance71.evaluate(doubleArray80);
        double[] doubleArray88 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double89 = variance71.evaluate(doubleArray88);
        double double90 = secondMoment62.evaluate(doubleArray88);
        double double93 = secondMoment56.evaluate(doubleArray88, 0, (int) (short) 1);
        double double95 = variance50.evaluate(doubleArray88, 651942.9897959187d);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray88, (-1), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.0d + "'", double9 == 50.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 2024039.120370371d + "'", double89 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 4048078.240740742d + "'", double90 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 2024039.1204833984d + "'", double95 == 2024039.1204833984d);
    }

    @Test
    public void test02016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02016");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance9.increment((-1.0d));
        variance9.setBiasCorrected(false);
        boolean boolean14 = variance9.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        double double18 = secondMoment16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment16);
        secondMoment16.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        double[] doubleArray26 = new double[] { 0L, (byte) 10 };
        double double27 = variance22.evaluate(doubleArray26);
        secondMoment16.incrementAll(doubleArray26);
        boolean boolean29 = variance9.equals((java.lang.Object) secondMoment16);
        variance9.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        double double34 = secondMoment32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment32);
        secondMoment32.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        double[] doubleArray42 = new double[] { 0L, (byte) 10 };
        double double43 = variance38.evaluate(doubleArray42);
        secondMoment32.incrementAll(doubleArray42);
        double double45 = variance9.evaluate(doubleArray42);
        double double46 = variance7.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean50 = variance48.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray59 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double60 = variance52.evaluate(doubleArray59);
        double double61 = variance48.evaluate(doubleArray59);
        variance48.setBiasCorrected(false);
        variance48.increment((double) (byte) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance67.increment((-1.0d));
        variance67.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean75 = variance73.equals((java.lang.Object) (short) 10);
        boolean boolean76 = variance67.equals((java.lang.Object) variance73);
        long long77 = variance73.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean81 = variance79.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray90 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double91 = variance83.evaluate(doubleArray90);
        double double92 = variance79.evaluate(doubleArray90);
        double double93 = variance73.evaluate(doubleArray90);
        double double95 = variance48.evaluate(doubleArray90, 24.5d);
        double double96 = variance7.evaluate(doubleArray90);
        variance7.increment(25.00000011920929d);
        long long99 = variance7.getN();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 25.0d + "'", double45 == 25.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2136.8055555555557d + "'", double60 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2564.166666666667d + "'", double61 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 2136.8055555555557d + "'", double91 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 2564.166666666667d + "'", double92 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 2564.166666666667d + "'", double93 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 2136.8055555555557d + "'", double95 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 2564.166666666667d + "'", double96 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 0L + "'", long99 == 0L);
    }

    @Test
    public void test02017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02017");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        double double5 = secondMoment1.getResult();
        secondMoment1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double[] doubleArray9 = new double[] {};
        double double10 = secondMoment1.evaluate(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        secondMoment1.clear();
        double double13 = secondMoment1.getResult();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test02018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02018");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        long long9 = secondMoment7.getN();
        secondMoment7.clear();
        double double11 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        long long14 = secondMoment12.getN();
        secondMoment12.clear();
        secondMoment12.clear();
        secondMoment12.increment((double) (byte) 100);
        secondMoment12.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        secondMoment12.clear();
        secondMoment12.increment(2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        boolean boolean25 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance27.increment((-1.0d));
        variance27.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        double[] doubleArray41 = new double[] { 0L, (byte) 10 };
        double double42 = variance37.evaluate(doubleArray41);
        double double44 = variance34.evaluate(doubleArray41, (double) 10L);
        double double45 = variance32.evaluate(doubleArray41);
        double double46 = variance27.evaluate(doubleArray41);
        double double47 = variance27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance49.increment((-1.0d));
        variance49.setBiasCorrected(false);
        variance49.increment(2136.8055555555557d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance57.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double63 = variance62.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double66 = variance65.getResult();
        double[] doubleArray69 = new double[] { 0L, (byte) 10 };
        double double70 = variance65.evaluate(doubleArray69);
        double double72 = variance62.evaluate(doubleArray69, (double) 10L);
        double double73 = variance60.evaluate(doubleArray69);
        double double74 = variance57.evaluate(doubleArray69);
        variance49.incrementAll(doubleArray69);
        double double76 = variance27.evaluate(doubleArray69);
        variance24.incrementAll(doubleArray69);
        // The following exception was thrown during execution in test generation
        try {
            double double80 = secondMoment7.evaluate(doubleArray69, (int) (byte) -1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
    }

    @Test
    public void test02019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02019");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        variance9.increment((double) (short) -1);
        long long13 = variance9.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        double[] doubleArray24 = new double[] { 0L, (byte) 10 };
        double double25 = variance20.evaluate(doubleArray24);
        double double27 = variance17.evaluate(doubleArray24, (double) 10L);
        double double28 = variance15.evaluate(doubleArray24);
        variance15.increment((double) 0.0f);
        boolean boolean31 = variance15.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        long long34 = secondMoment32.getN();
        secondMoment32.clear();
        secondMoment32.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        variance38.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean44 = variance42.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray53 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double54 = variance46.evaluate(doubleArray53);
        double double55 = variance42.evaluate(doubleArray53);
        double double57 = variance38.evaluate(doubleArray53, (double) 1.0f);
        double double60 = variance15.evaluate(doubleArray53, (int) (byte) 0, 1);
        double double61 = variance9.evaluate(doubleArray53);
        boolean boolean62 = variance1.equals((java.lang.Object) doubleArray53);
        java.lang.Object obj63 = null;
        boolean boolean64 = variance1.equals(obj63);
        variance1.increment(2024039.1204833984d);
        boolean boolean67 = variance1.isBiasCorrected();
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2136.8055555555557d + "'", double54 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2564.166666666667d + "'", double55 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2136.805555555555d + "'", double57 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2564.166666666667d + "'", double61 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test02020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02020");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment4 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment4);
        long long6 = secondMoment4.getN();
        secondMoment4.clear();
        secondMoment4.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment4);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance11.increment((-1.0d));
        variance11.setBiasCorrected(false);
        boolean boolean16 = variance11.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean18 = variance11.equals((java.lang.Object) secondMoment17);
        variance11.increment((double) 100L);
        variance11.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        double[] doubleArray33 = new double[] { 0L, (byte) 10 };
        double double34 = variance29.evaluate(doubleArray33);
        double double36 = variance26.evaluate(doubleArray33, (double) 10L);
        double double37 = variance24.evaluate(doubleArray33);
        double[] doubleArray41 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double42 = variance24.evaluate(doubleArray41);
        variance11.incrementAll(doubleArray41);
        double double44 = variance9.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double47 = variance46.getResult();
        long long48 = variance46.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double50 = secondMoment49.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance52.increment((-1.0d));
        variance52.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double60 = variance59.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double63 = variance62.getResult();
        double[] doubleArray66 = new double[] { 0L, (byte) 10 };
        double double67 = variance62.evaluate(doubleArray66);
        double double69 = variance59.evaluate(doubleArray66, (double) 10L);
        double double70 = variance57.evaluate(doubleArray66);
        double double71 = variance52.evaluate(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double74 = variance73.getResult();
        double[] doubleArray77 = new double[] { 0L, (byte) 10 };
        double double78 = variance73.evaluate(doubleArray77);
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray87 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double88 = variance80.evaluate(doubleArray87);
        double double89 = variance73.evaluate(doubleArray87);
        double double90 = variance52.evaluate(doubleArray87);
        double double91 = secondMoment49.evaluate(doubleArray87);
        variance46.incrementAll(doubleArray87);
        double double93 = variance9.evaluate(doubleArray87);
        double double96 = variance1.evaluate(doubleArray87, (int) (byte) 1, 1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2024039.120370371d + "'", double42 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2024039.120370371d + "'", double44 == 2024039.120370371d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 2136.8055555555557d + "'", double88 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 2564.166666666667d + "'", double89 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 2564.166666666667d + "'", double90 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 12820.833333333334d + "'", double91 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 2564.166666666667d + "'", double93 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d);
    }

    @Test
    public void test02021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02021");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        double double8 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment6);
        secondMoment6.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        double[] doubleArray16 = new double[] { 0L, (byte) 10 };
        double double17 = variance12.evaluate(doubleArray16);
        secondMoment6.incrementAll(doubleArray16);
        double double19 = variance4.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance21.increment((-1.0d));
        variance21.setBiasCorrected(false);
        boolean boolean26 = variance21.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean28 = variance21.equals((java.lang.Object) secondMoment27);
        secondMoment27.increment((double) (short) 0);
        secondMoment27.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray41 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double42 = variance34.evaluate(doubleArray41);
        double double43 = secondMoment27.evaluate(doubleArray41);
        double double45 = variance4.evaluate(doubleArray41, 0.0d);
        variance4.increment(12820.833333333334d);
        variance4.clear();
        variance4.clear();
        long long50 = variance4.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 25.0d + "'", double19 == 25.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2136.8055555555557d + "'", double42 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 12820.833333333334d + "'", double43 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2136.805555555555d + "'", double45 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
    }

    @Test
    public void test02022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02022");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double[] doubleArray6 = new double[] { 'a', (-1.0f), '4' };
        variance2.incrementAll(doubleArray6);
        boolean boolean8 = variance2.isBiasCorrected();
        variance2.increment(0.5d);
        variance2.increment(2282968.9911265434d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[97.0, -1.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test02023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02023");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        double double4 = variance1.getResult();
        variance1.clear();
        double double6 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance11.increment((-1.0d));
        variance11.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double22 = variance21.getResult();
        double[] doubleArray25 = new double[] { 0L, (byte) 10 };
        double double26 = variance21.evaluate(doubleArray25);
        double double28 = variance18.evaluate(doubleArray25, (double) 10L);
        double double29 = variance16.evaluate(doubleArray25);
        double double30 = variance11.evaluate(doubleArray25);
        variance9.incrementAll(doubleArray25);
        variance7.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        double[] doubleArray38 = new double[] { 0L, (byte) 10 };
        double double39 = variance34.evaluate(doubleArray38);
        boolean boolean40 = variance7.equals((java.lang.Object) double39);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance42.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        double[] doubleArray54 = new double[] { 0L, (byte) 10 };
        double double55 = variance50.evaluate(doubleArray54);
        double double57 = variance47.evaluate(doubleArray54, (double) 10L);
        double double58 = variance45.evaluate(doubleArray54);
        double double59 = variance42.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment61);
        double double63 = secondMoment61.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment61);
        secondMoment61.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance67.increment((-1.0d));
        variance67.setBiasCorrected(false);
        boolean boolean72 = variance67.isBiasCorrected();
        double[] doubleArray73 = new double[] {};
        double double74 = variance67.evaluate(doubleArray73);
        secondMoment61.incrementAll(doubleArray73);
        double double76 = variance42.evaluate(doubleArray73);
        double double78 = variance7.evaluate(doubleArray73, (-1.0d));
        variance1.incrementAll(doubleArray73);
        double double80 = variance1.getResult();
        java.lang.Class<?> wildcardClass81 = variance1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test02024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02024");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        long long8 = secondMoment6.getN();
        secondMoment6.clear();
        double double10 = secondMoment6.getResult();
        secondMoment6.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        double[] doubleArray14 = new double[] {};
        double double15 = secondMoment6.evaluate(doubleArray14);
        secondMoment0.incrementAll(doubleArray14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance17.setBiasCorrected(true);
        long long20 = variance17.getN();
        variance17.increment(0.5d);
        variance17.increment(2230.141025641026d);
        java.lang.Class<?> wildcardClass25 = variance17.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test02025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02025");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        double double12 = secondMoment7.getResult();
        long long13 = secondMoment7.getN();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        variance17.increment((double) (-1L));
        variance17.increment(50.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test02026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02026");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        double double8 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment6);
        secondMoment6.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        double[] doubleArray16 = new double[] { 0L, (byte) 10 };
        double double17 = variance12.evaluate(doubleArray16);
        secondMoment6.incrementAll(doubleArray16);
        double double19 = variance4.evaluate(doubleArray16);
        double double20 = variance4.getResult();
        variance4.increment(227.3d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        long long25 = secondMoment23.getN();
        secondMoment23.clear();
        double double27 = secondMoment23.getResult();
        secondMoment23.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance32.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        double[] doubleArray44 = new double[] { 0L, (byte) 10 };
        double double45 = variance40.evaluate(doubleArray44);
        double double47 = variance37.evaluate(doubleArray44, (double) 10L);
        double double48 = variance35.evaluate(doubleArray44);
        double double49 = variance32.evaluate(doubleArray44);
        variance30.incrementAll(doubleArray44);
        variance30.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double54 = variance53.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double57 = variance56.getResult();
        double[] doubleArray60 = new double[] { 0L, (byte) 10 };
        double double61 = variance56.evaluate(doubleArray60);
        double double63 = variance53.evaluate(doubleArray60, (double) 10L);
        variance30.incrementAll(doubleArray60);
        // The following exception was thrown during execution in test generation
        try {
            variance4.incrementAll(doubleArray60, 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 25.0d + "'", double19 == 25.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
    }

    @Test
    public void test02027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02027");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        double[] doubleArray11 = new double[] { 0L, (byte) 10 };
        double double12 = variance7.evaluate(doubleArray11);
        secondMoment1.incrementAll(doubleArray11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean18 = variance16.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.setBiasCorrected(false);
        boolean boolean25 = variance20.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean27 = variance20.equals((java.lang.Object) secondMoment26);
        double double28 = secondMoment26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        double[] doubleArray37 = new double[] { 0L, (byte) 10 };
        double double38 = variance33.evaluate(doubleArray37);
        double double40 = variance30.evaluate(doubleArray37, (double) 10L);
        double double43 = secondMoment26.evaluate(doubleArray37, (int) (short) 0, 1);
        double double44 = variance16.evaluate(doubleArray37);
        secondMoment1.incrementAll(doubleArray37);
        secondMoment1.clear();
        secondMoment1.increment((double) 'a');
        long long49 = secondMoment1.getN();
        double double50 = secondMoment1.getResult();
        double double51 = secondMoment1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
    }

    @Test
    public void test02028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02028");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        double double6 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        double double20 = variance10.evaluate(doubleArray17, (double) 10L);
        double double21 = variance8.evaluate(doubleArray17);
        double[] doubleArray25 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double26 = variance8.evaluate(doubleArray25);
        double double27 = secondMoment0.evaluate(doubleArray25);
        long long28 = secondMoment0.getN();
        long long29 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.clear();
        double double32 = secondMoment0.getResult();
        long long33 = secondMoment0.getN();
        java.lang.Class<?> wildcardClass34 = secondMoment0.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2024039.120370371d + "'", double26 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 4048078.240740742d + "'", double27 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 3L + "'", long28 == 3L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 3L + "'", long29 == 3L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test02029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02029");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        secondMoment8.incrementAll(doubleArray18);
        boolean boolean21 = variance1.equals((java.lang.Object) secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.setBiasCorrected(false);
        boolean boolean28 = variance23.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean30 = variance23.equals((java.lang.Object) secondMoment29);
        boolean boolean31 = secondMoment8.equals((java.lang.Object) boolean30);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance33.increment((-1.0d));
        variance33.setBiasCorrected(false);
        boolean boolean38 = variance33.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean40 = variance33.equals((java.lang.Object) secondMoment39);
        secondMoment39.increment((double) (short) 0);
        secondMoment39.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray53 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double54 = variance46.evaluate(doubleArray53);
        double double55 = secondMoment39.evaluate(doubleArray53);
        double double56 = secondMoment8.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance58.increment((-1.0d));
        variance58.setBiasCorrected(false);
        variance58.increment((double) 100L);
        boolean boolean65 = variance58.isBiasCorrected();
        variance58.clear();
        double double67 = variance58.getResult();
        boolean boolean68 = secondMoment8.equals((java.lang.Object) double67);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        variance69.increment((double) (short) -1);
        variance69.increment(1720.0703132629396d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2136.8055555555557d + "'", double54 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 12820.833333333334d + "'", double55 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 12820.833333333334d + "'", double56 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test02030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02030");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.clear();
        double[] doubleArray11 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double13 = variance1.evaluate(doubleArray11, 4684796.354166668d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2136.8055555555557d + "'", double9 == 2136.8055555555557d);
    }

    @Test
    public void test02031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02031");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        double double2 = secondMoment0.getResult();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment4 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment4);
        long long6 = secondMoment4.getN();
        secondMoment4.clear();
        secondMoment4.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment4);
        variance10.setBiasCorrected(false);
        double[] doubleArray18 = new double[] { 1L, '#', 0.0d, 6L, 0.0d };
        variance10.incrementAll(doubleArray18);
        double double20 = variance10.getResult();
        double double21 = variance10.getResult();
        variance10.increment((double) 1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double25 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        variance26.increment(2564.166666666667d);
        long long29 = variance26.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance31.clear();
        double double33 = variance31.getResult();
        variance31.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance36.increment((-1.0d));
        variance36.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double44 = variance43.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double47 = variance46.getResult();
        double[] doubleArray50 = new double[] { 0L, (byte) 10 };
        double double51 = variance46.evaluate(doubleArray50);
        double double53 = variance43.evaluate(doubleArray50, (double) 10L);
        double double54 = variance41.evaluate(doubleArray50);
        double double55 = variance36.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        double[] doubleArray61 = new double[] { 0L, (byte) 10 };
        double double62 = variance57.evaluate(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray71 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double72 = variance64.evaluate(doubleArray71);
        double double73 = variance57.evaluate(doubleArray71);
        double double74 = variance36.evaluate(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double79 = variance78.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double82 = variance81.getResult();
        double[] doubleArray85 = new double[] { 0L, (byte) 10 };
        double double86 = variance81.evaluate(doubleArray85);
        double double88 = variance78.evaluate(doubleArray85, (double) 10L);
        double double89 = variance76.evaluate(doubleArray85);
        variance36.incrementAll(doubleArray85, (int) (byte) 0, (int) (byte) 0);
        double double93 = variance31.evaluate(doubleArray85);
        double double95 = variance26.evaluate(doubleArray85, (double) (short) -1);
        double double96 = variance10.evaluate(doubleArray85);
        double double97 = secondMoment0.evaluate(doubleArray85);
        double double98 = secondMoment0.getResult();
        double double99 = secondMoment0.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 35.0, 0.0, 6.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2136.8055555555557d + "'", double72 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 2564.166666666667d + "'", double73 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 2564.166666666667d + "'", double74 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 50.0d + "'", double93 == 50.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 50.0d + "'", double95 == 50.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 25.0d + "'", double96 == 25.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 50.0d + "'", double97 == 50.0d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 50.0d + "'", double98 == 50.0d);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 50.0d + "'", double99 == 50.0d);
    }

    @Test
    public void test02032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02032");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        secondMoment2.increment((double) 2L);
        double double9 = secondMoment2.getResult();
        secondMoment2.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        double double13 = secondMoment2.getResult();
        double[] doubleArray14 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double17 = secondMoment2.evaluate(doubleArray14, (int) '#', (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1152.0d + "'", double13 == 1152.0d);
    }

    @Test
    public void test02033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02033");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.increment((double) 10L);
        variance1.increment((double) (short) 0);
        variance1.increment((double) 8L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        long long10 = secondMoment8.getN();
        secondMoment8.clear();
        double double12 = secondMoment8.getResult();
        secondMoment8.increment((double) (short) 0);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment17);
        long long19 = secondMoment17.getN();
        secondMoment17.clear();
        double double21 = secondMoment17.getResult();
        secondMoment17.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment17);
        secondMoment17.increment(2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance28.increment((-1.0d));
        variance28.setBiasCorrected(false);
        boolean boolean33 = variance28.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean35 = variance28.equals((java.lang.Object) secondMoment34);
        double double36 = secondMoment34.getResult();
        secondMoment34.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment34);
        secondMoment34.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance42.increment((-1.0d));
        variance42.setBiasCorrected(false);
        boolean boolean47 = variance42.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean49 = variance42.equals((java.lang.Object) secondMoment48);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        double[] doubleArray58 = new double[] { 0L, (byte) 10 };
        double double59 = variance54.evaluate(doubleArray58);
        double double61 = variance51.evaluate(doubleArray58, (double) 10L);
        double double65 = variance42.evaluate(doubleArray58, (double) (short) 0, 0, (int) (short) 0);
        double double68 = secondMoment34.evaluate(doubleArray58, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment69);
        long long71 = secondMoment69.getN();
        secondMoment69.clear();
        secondMoment69.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment69);
        variance75.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean81 = variance79.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray90 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double91 = variance83.evaluate(doubleArray90);
        double double92 = variance79.evaluate(doubleArray90);
        double double94 = variance75.evaluate(doubleArray90, (double) 1.0f);
        double double95 = secondMoment34.evaluate(doubleArray90);
        double double96 = secondMoment17.evaluate(doubleArray90);
        double double97 = variance16.evaluate(doubleArray90);
        variance1.incrementAll(doubleArray90);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 2136.8055555555557d + "'", double91 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 2564.166666666667d + "'", double92 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 2136.805555555555d + "'", double94 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 12820.833333333334d + "'", double95 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 12820.833333333334d + "'", double96 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 2564.166666666667d + "'", double97 == 2564.166666666667d);
    }

    @Test
    public void test02034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02034");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        boolean boolean9 = variance1.isBiasCorrected();
        long long10 = variance1.getN();
        variance1.increment(18.666666666666668d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean16 = variance14.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray25 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double26 = variance18.evaluate(doubleArray25);
        double double27 = variance14.evaluate(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance29.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        double[] doubleArray41 = new double[] { 0L, (byte) 10 };
        double double42 = variance37.evaluate(doubleArray41);
        double double44 = variance34.evaluate(doubleArray41, (double) 10L);
        double double45 = variance32.evaluate(doubleArray41);
        double double46 = variance29.evaluate(doubleArray41);
        double double47 = variance14.evaluate(doubleArray41);
        double double48 = variance1.evaluate(doubleArray41);
        java.lang.Class<?> wildcardClass49 = doubleArray41.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2136.8055555555557d + "'", double26 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 2564.166666666667d + "'", double27 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 25.0d + "'", double48 == 25.0d);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test02035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02035");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        boolean boolean12 = variance11.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance16.increment((-1.0d));
        variance16.setBiasCorrected(false);
        boolean boolean21 = variance16.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean23 = variance16.equals((java.lang.Object) secondMoment22);
        double double24 = secondMoment22.getResult();
        secondMoment22.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        secondMoment22.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance30.increment((-1.0d));
        variance30.setBiasCorrected(false);
        boolean boolean35 = variance30.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean37 = variance30.equals((java.lang.Object) secondMoment36);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        double[] doubleArray46 = new double[] { 0L, (byte) 10 };
        double double47 = variance42.evaluate(doubleArray46);
        double double49 = variance39.evaluate(doubleArray46, (double) 10L);
        double double53 = variance30.evaluate(doubleArray46, (double) (short) 0, 0, (int) (short) 0);
        double double56 = secondMoment22.evaluate(doubleArray46, 0, 0);
        variance14.incrementAll(doubleArray46);
        double double58 = variance11.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double63 = variance62.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double66 = variance65.getResult();
        double[] doubleArray69 = new double[] { 0L, (byte) 10 };
        double double70 = variance65.evaluate(doubleArray69);
        double double72 = variance62.evaluate(doubleArray69, (double) 10L);
        double double73 = variance60.evaluate(doubleArray69);
        double[] doubleArray77 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double78 = variance60.evaluate(doubleArray77);
        double double80 = variance11.evaluate(doubleArray77, (double) 100);
        variance11.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance85 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double86 = variance85.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance88 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double89 = variance88.getResult();
        double[] doubleArray92 = new double[] { 0L, (byte) 10 };
        double double93 = variance88.evaluate(doubleArray92);
        double double95 = variance85.evaluate(doubleArray92, (double) 10L);
        double double96 = variance83.evaluate(doubleArray92);
        variance11.incrementAll(doubleArray92);
        boolean boolean98 = variance11.isBiasCorrected();
        boolean boolean99 = variance11.isBiasCorrected();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2024039.120370371d + "'", double78 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 2024039.1203703708d + "'", double80 == 2024039.1203703708d);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 50.0d + "'", double93 == 50.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 50.0d + "'", double95 == 50.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 50.0d + "'", double96 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test02036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02036");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.clear();
        secondMoment0.increment(2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        boolean boolean13 = variance12.isBiasCorrected();
        double double14 = variance12.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        double double18 = secondMoment16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment16);
        secondMoment16.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double23 = secondMoment22.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        long long26 = secondMoment24.getN();
        secondMoment24.clear();
        secondMoment24.clear();
        secondMoment24.increment((double) (byte) 100);
        long long31 = secondMoment24.getN();
        double[] doubleArray33 = new double[] { 2024039.1203703713d };
        double double34 = secondMoment24.evaluate(doubleArray33);
        secondMoment22.incrementAll(doubleArray33);
        double double36 = secondMoment16.evaluate(doubleArray33);
        double double37 = variance12.evaluate(doubleArray33);
        java.lang.Class<?> wildcardClass38 = variance12.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test02037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02037");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.increment((double) (byte) 100);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        double double22 = variance12.evaluate(doubleArray19, (double) 10L);
        double double23 = variance10.evaluate(doubleArray19);
        long long24 = variance10.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance26.increment((-1.0d));
        variance26.setBiasCorrected(false);
        boolean boolean31 = variance26.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment33);
        double double35 = secondMoment33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment33);
        secondMoment33.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        double[] doubleArray43 = new double[] { 0L, (byte) 10 };
        double double44 = variance39.evaluate(doubleArray43);
        secondMoment33.incrementAll(doubleArray43);
        boolean boolean46 = variance26.equals((java.lang.Object) secondMoment33);
        variance26.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment49);
        double double51 = secondMoment49.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment49);
        secondMoment49.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double56 = variance55.getResult();
        double[] doubleArray59 = new double[] { 0L, (byte) 10 };
        double double60 = variance55.evaluate(doubleArray59);
        secondMoment49.incrementAll(doubleArray59);
        double double62 = variance26.evaluate(doubleArray59);
        variance26.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double68 = variance67.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double71 = variance70.getResult();
        double[] doubleArray74 = new double[] { 0L, (byte) 10 };
        double double75 = variance70.evaluate(doubleArray74);
        double double77 = variance67.evaluate(doubleArray74, (double) 10L);
        double double78 = variance65.evaluate(doubleArray74);
        double double79 = variance26.evaluate(doubleArray74);
        double double80 = variance10.evaluate(doubleArray74);
        double double81 = variance10.getResult();
        java.lang.Class<?> wildcardClass82 = variance10.getClass();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 25.0d + "'", double62 == 25.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 25.0d + "'", double79 == 25.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test02038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02038");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.clear();
        secondMoment0.increment(2024039.12109375d);
        secondMoment0.clear();
        secondMoment0.increment((double) 8L);
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment(2.731142747304003E12d);
        secondMoment0.increment(74.0d);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test02039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02039");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        double double10 = secondMoment8.getResult();
        secondMoment8.clear();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        long long16 = secondMoment14.getN();
        secondMoment14.clear();
        secondMoment14.clear();
        secondMoment14.increment((double) (byte) 100);
        secondMoment14.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment14);
        variance23.increment((double) 2L);
        double double26 = variance23.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        long long30 = secondMoment28.getN();
        secondMoment28.clear();
        double double32 = secondMoment28.getResult();
        secondMoment28.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        double[] doubleArray36 = new double[] {};
        double double37 = secondMoment28.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment28);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance40.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double50 = variance49.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double53 = variance52.getResult();
        double[] doubleArray56 = new double[] { 0L, (byte) 10 };
        double double57 = variance52.evaluate(doubleArray56);
        double double59 = variance49.evaluate(doubleArray56, (double) 10L);
        double double60 = variance47.evaluate(doubleArray56);
        double double61 = variance44.evaluate(doubleArray56);
        double double62 = variance40.evaluate(doubleArray56);
        double double63 = variance38.evaluate(doubleArray56);
        double double64 = variance23.evaluate(doubleArray56);
        double double65 = secondMoment8.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        long long67 = secondMoment8.getN();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 2L + "'", long67 == 2L);
    }

    @Test
    public void test02040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02040");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        double double12 = secondMoment7.getResult();
        long long13 = secondMoment7.getN();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double22 = variance21.getResult();
        double[] doubleArray25 = new double[] { 0L, (byte) 10 };
        double double26 = variance21.evaluate(doubleArray25);
        double double28 = variance18.evaluate(doubleArray25, (double) 10L);
        double double29 = variance16.evaluate(doubleArray25);
        double[] doubleArray33 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double34 = variance16.evaluate(doubleArray33);
        secondMoment7.incrementAll(doubleArray33);
        long long36 = secondMoment7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        double[] doubleArray45 = new double[] { 0L, (byte) 10 };
        double double46 = variance41.evaluate(doubleArray45);
        double double48 = variance38.evaluate(doubleArray45, (double) 10L);
        long long49 = variance38.getN();
        variance38.setBiasCorrected(false);
        boolean boolean52 = variance38.isBiasCorrected();
        double double53 = variance38.getResult();
        double double54 = variance38.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance56.increment((-1.0d));
        variance56.setBiasCorrected(false);
        boolean boolean61 = variance56.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean63 = variance56.equals((java.lang.Object) secondMoment62);
        double double64 = secondMoment62.getResult();
        secondMoment62.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double68 = variance67.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double71 = variance70.getResult();
        double[] doubleArray74 = new double[] { 0L, (byte) 10 };
        double double75 = variance70.evaluate(doubleArray74);
        double double77 = variance67.evaluate(doubleArray74, (double) 10L);
        long long78 = variance67.getN();
        variance67.increment((double) 0L);
        double[] doubleArray82 = new double[] { 10.0d };
        variance67.incrementAll(doubleArray82);
        secondMoment62.incrementAll(doubleArray82);
        variance38.incrementAll(doubleArray82);
        double double86 = secondMoment7.evaluate(doubleArray82);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2024039.120370371d + "'", double34 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 3L + "'", long36 == 3L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
    }

    @Test
    public void test02041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02041");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        variance17.setBiasCorrected(false);
        boolean boolean22 = variance17.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean24 = variance17.equals((java.lang.Object) secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        double[] doubleArray33 = new double[] { 0L, (byte) 10 };
        double double34 = variance29.evaluate(doubleArray33);
        double double36 = variance26.evaluate(doubleArray33, (double) 10L);
        double double40 = variance17.evaluate(doubleArray33, (double) (short) 0, 0, (int) (short) 0);
        double double41 = variance15.evaluate(doubleArray33);
        boolean boolean42 = variance15.isBiasCorrected();
        long long43 = variance15.getN();
        double double44 = variance15.getResult();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
    }

    @Test
    public void test02042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02042");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        double[] doubleArray12 = new double[] { 0L, (byte) 10 };
        double double13 = variance8.evaluate(doubleArray12);
        secondMoment2.incrementAll(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        long long16 = secondMoment2.getN();
        double double17 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        double double22 = secondMoment20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment20);
        secondMoment20.clear();
        secondMoment20.increment((double) 2L);
        double double27 = secondMoment20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance29.increment((-1.0d));
        long long32 = variance29.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance37.increment((-1.0d));
        variance37.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        double[] doubleArray51 = new double[] { 0L, (byte) 10 };
        double double52 = variance47.evaluate(doubleArray51);
        double double54 = variance44.evaluate(doubleArray51, (double) 10L);
        double double55 = variance42.evaluate(doubleArray51);
        double double56 = variance37.evaluate(doubleArray51);
        variance35.incrementAll(doubleArray51);
        variance33.incrementAll(doubleArray51);
        double double59 = variance29.evaluate(doubleArray51);
        boolean boolean60 = secondMoment20.equals((java.lang.Object) doubleArray51);
        // The following exception was thrown during execution in test generation
        try {
            double double63 = variance18.evaluate(doubleArray51, (int) (short) 100, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2L + "'", long16 == 2L);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test02043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02043");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.clear();
        variance3.increment((double) (short) -1);
        boolean boolean7 = variance3.isBiasCorrected();
        variance3.increment((double) 6L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance11.increment((-1.0d));
        variance11.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray24 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double25 = variance17.evaluate(doubleArray24);
        variance11.incrementAll(doubleArray24);
        variance3.incrementAll(doubleArray24);
        variance3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        variance30.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance35.increment((-1.0d));
        variance35.setBiasCorrected(false);
        boolean boolean40 = variance35.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean42 = variance35.equals((java.lang.Object) secondMoment41);
        double double43 = secondMoment41.getResult();
        secondMoment41.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        double double49 = secondMoment47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment47);
        secondMoment47.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance53.increment((-1.0d));
        variance53.setBiasCorrected(false);
        boolean boolean58 = variance53.isBiasCorrected();
        double[] doubleArray59 = new double[] {};
        double double60 = variance53.evaluate(doubleArray59);
        secondMoment47.incrementAll(doubleArray59);
        double double62 = variance45.evaluate(doubleArray59);
        double double63 = variance30.evaluate(doubleArray59);
        variance3.incrementAll(doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            double double68 = variance1.evaluate(doubleArray59, (double) 8L, (int) 'a', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2136.8055555555557d + "'", double25 == 2136.8055555555557d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
    }

    @Test
    public void test02044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02044");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance5.increment((-1.0d));
        variance5.setBiasCorrected(false);
        boolean boolean10 = variance5.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean12 = variance5.equals((java.lang.Object) secondMoment11);
        double double13 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        double[] doubleArray22 = new double[] { 0L, (byte) 10 };
        double double23 = variance18.evaluate(doubleArray22);
        double double25 = variance15.evaluate(doubleArray22, (double) 10L);
        double double28 = secondMoment11.evaluate(doubleArray22, (int) (short) 0, 1);
        double double29 = variance1.evaluate(doubleArray22);
        long long30 = variance1.getN();
        variance1.clear();
        long long32 = variance1.getN();
        long long33 = variance1.getN();
        long long34 = variance1.getN();
        double[] doubleArray35 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double36 = variance1.evaluate(doubleArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
    }

    @Test
    public void test02045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02045");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        boolean boolean8 = variance1.isBiasCorrected();
        variance1.clear();
        double double10 = variance1.getResult();
        double double11 = variance1.getResult();
        long long12 = variance1.getN();
        double[] doubleArray13 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double16 = variance1.evaluate(doubleArray13, (int) (short) 1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test02046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02046");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        secondMoment8.incrementAll(doubleArray18);
        boolean boolean21 = variance1.equals((java.lang.Object) secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.setBiasCorrected(false);
        boolean boolean28 = variance23.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean30 = variance23.equals((java.lang.Object) secondMoment29);
        boolean boolean31 = secondMoment8.equals((java.lang.Object) boolean30);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance33.increment((-1.0d));
        variance33.setBiasCorrected(false);
        boolean boolean38 = variance33.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean40 = variance33.equals((java.lang.Object) secondMoment39);
        secondMoment39.increment((double) (short) 0);
        secondMoment39.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray53 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double54 = variance46.evaluate(doubleArray53);
        double double55 = secondMoment39.evaluate(doubleArray53);
        double double56 = secondMoment8.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance58.increment((-1.0d));
        variance58.setBiasCorrected(false);
        variance58.increment((double) 100L);
        boolean boolean65 = variance58.isBiasCorrected();
        variance58.clear();
        double double67 = variance58.getResult();
        boolean boolean68 = secondMoment8.equals((java.lang.Object) double67);
        long long69 = secondMoment8.getN();
        secondMoment8.increment(32.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2136.8055555555557d + "'", double54 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 12820.833333333334d + "'", double55 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 12820.833333333334d + "'", double56 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 6L + "'", long69 == 6L);
    }

    @Test
    public void test02047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02047");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        long long4 = secondMoment1.getN();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance6.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance9.increment((-1.0d));
        variance9.setBiasCorrected(false);
        boolean boolean14 = variance9.isBiasCorrected();
        double double15 = variance9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        variance17.setBiasCorrected(false);
        boolean boolean22 = variance17.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        double[] doubleArray31 = new double[] { 0L, (byte) 10 };
        double double32 = variance27.evaluate(doubleArray31);
        double double34 = variance24.evaluate(doubleArray31, (double) 10L);
        double double35 = variance17.evaluate(doubleArray31);
        variance17.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray46 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double47 = variance39.evaluate(doubleArray46);
        double double48 = variance17.evaluate(doubleArray46);
        variance9.incrementAll(doubleArray46);
        // The following exception was thrown during execution in test generation
        try {
            double double52 = variance6.evaluate(doubleArray46, (int) (byte) 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 25.0d + "'", double35 == 25.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2136.8055555555557d + "'", double47 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2136.8055555555557d + "'", double48 == 2136.8055555555557d);
    }

    @Test
    public void test02048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02048");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        long long6 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double22 = variance9.evaluate(doubleArray18);
        variance9.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean28 = variance26.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        double[] doubleArray39 = new double[] { 0L, (byte) 10 };
        double double40 = variance35.evaluate(doubleArray39);
        double double42 = variance32.evaluate(doubleArray39, (double) 10L);
        double double43 = variance30.evaluate(doubleArray39);
        double[] doubleArray47 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double48 = variance30.evaluate(doubleArray47);
        double double50 = variance26.evaluate(doubleArray47, (double) (byte) 1);
        double double51 = variance9.evaluate(doubleArray47);
        double double53 = variance7.evaluate(doubleArray47, 0.0d);
        variance7.increment(60.666666666666664d);
        variance7.increment(16460.85714285714d);
        double[] doubleArray58 = null;
        // The following exception was thrown during execution in test generation
        try {
            variance7.incrementAll(doubleArray58, (int) 'a', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2024039.120370371d + "'", double48 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2024039.120370371d + "'", double50 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2024039.120370371d + "'", double51 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1349359.4135802472d + "'", double53 == 1349359.4135802472d);
    }

    @Test
    public void test02049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02049");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double11 = secondMoment10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance13.increment((-1.0d));
        variance13.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double24 = variance23.getResult();
        double[] doubleArray27 = new double[] { 0L, (byte) 10 };
        double double28 = variance23.evaluate(doubleArray27);
        double double30 = variance20.evaluate(doubleArray27, (double) 10L);
        double double31 = variance18.evaluate(doubleArray27);
        double double32 = variance13.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        double[] doubleArray38 = new double[] { 0L, (byte) 10 };
        double double39 = variance34.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray48 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double49 = variance41.evaluate(doubleArray48);
        double double50 = variance34.evaluate(doubleArray48);
        double double51 = variance13.evaluate(doubleArray48);
        double double52 = secondMoment10.evaluate(doubleArray48);
        double double53 = secondMoment0.evaluate(doubleArray48);
        long long54 = secondMoment0.getN();
        secondMoment0.increment((double) 100);
        long long57 = secondMoment0.getN();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 2136.8055555555557d + "'", double49 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2564.166666666667d + "'", double50 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2564.166666666667d + "'", double51 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 12820.833333333334d + "'", double52 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 12820.833333333334d + "'", double53 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 6L + "'", long54 == 6L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 7L + "'", long57 == 7L);
    }

    @Test
    public void test02050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02050");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        double double10 = secondMoment8.getResult();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        double[] doubleArray29 = new double[] { 0L, (byte) 10 };
        double double30 = variance25.evaluate(doubleArray29);
        double double32 = variance22.evaluate(doubleArray29, (double) 10L);
        double double33 = variance20.evaluate(doubleArray29);
        double double34 = variance15.evaluate(doubleArray29);
        variance13.incrementAll(doubleArray29);
        double double36 = secondMoment8.evaluate(doubleArray29);
        secondMoment8.clear();
        long long38 = secondMoment8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        boolean boolean40 = variance39.isBiasCorrected();
        java.lang.Class<?> wildcardClass41 = variance39.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test02051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02051");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.increment((double) (byte) 100);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        double double22 = variance12.evaluate(doubleArray19, (double) 10L);
        double double23 = variance10.evaluate(doubleArray19);
        long long24 = variance10.getN();
        double[] doubleArray25 = new double[] {};
        variance10.incrementAll(doubleArray25);
        long long27 = variance10.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance29.increment((-1.0d));
        variance29.setBiasCorrected(false);
        boolean boolean34 = variance29.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean36 = variance29.equals((java.lang.Object) secondMoment35);
        long long37 = secondMoment35.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance39.increment((-1.0d));
        variance39.setBiasCorrected(false);
        variance39.increment((double) 100L);
        boolean boolean46 = variance39.isBiasCorrected();
        boolean boolean47 = variance39.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray56 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double57 = variance49.evaluate(doubleArray56);
        double double59 = variance39.evaluate(doubleArray56, (double) (byte) 10);
        secondMoment35.incrementAll(doubleArray56);
        double double62 = variance10.evaluate(doubleArray56, (double) 'a');
        double double63 = variance10.getResult();
        boolean boolean64 = variance10.isBiasCorrected();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2136.8055555555557d + "'", double57 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2136.8055555555557d + "'", double59 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2564.1666666666665d + "'", double62 == 2564.1666666666665d);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test02052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02052");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        double double15 = secondMoment7.getResult();
        secondMoment7.increment(25.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        boolean boolean23 = variance20.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        long long26 = secondMoment24.getN();
        secondMoment24.clear();
        secondMoment24.increment(10.0d);
        double double30 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        double[] doubleArray41 = new double[] { 0L, (byte) 10 };
        double double42 = variance37.evaluate(doubleArray41);
        double double44 = variance34.evaluate(doubleArray41, (double) 10L);
        double double45 = variance32.evaluate(doubleArray41);
        double[] doubleArray49 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double50 = variance32.evaluate(doubleArray49);
        double double51 = secondMoment24.evaluate(doubleArray49);
        long long52 = secondMoment24.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance54.increment((-1.0d));
        long long57 = variance54.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance62.increment((-1.0d));
        variance62.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double70 = variance69.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double73 = variance72.getResult();
        double[] doubleArray76 = new double[] { 0L, (byte) 10 };
        double double77 = variance72.evaluate(doubleArray76);
        double double79 = variance69.evaluate(doubleArray76, (double) 10L);
        double double80 = variance67.evaluate(doubleArray76);
        double double81 = variance62.evaluate(doubleArray76);
        variance60.incrementAll(doubleArray76);
        variance58.incrementAll(doubleArray76);
        double double84 = variance54.evaluate(doubleArray76);
        double double87 = secondMoment24.evaluate(doubleArray76, (int) (byte) 0, 1);
        double double89 = variance20.evaluate(doubleArray76, (double) (short) 100);
        secondMoment7.incrementAll(doubleArray76);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.5d + "'", double15 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2024039.120370371d + "'", double50 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 4048078.240740742d + "'", double51 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 3L + "'", long52 == 3L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
    }

    @Test
    public void test02053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02053");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double22 = variance14.evaluate(doubleArray21);
        double double23 = secondMoment7.evaluate(doubleArray21);
        long long24 = secondMoment7.getN();
        secondMoment7.increment(2136.805555555555d);
        double double27 = secondMoment7.getResult();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2136.8055555555557d + "'", double22 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 12820.833333333334d + "'", double23 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 6L + "'", long24 == 6L);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 3799924.1673280406d + "'", double27 == 3799924.1673280406d);
    }

    @Test
    public void test02054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02054");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        variance1.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        double[] doubleArray21 = new double[] { 0L, (byte) 10 };
        double double22 = variance17.evaluate(doubleArray21);
        double double24 = variance14.evaluate(doubleArray21, (double) 10L);
        double double25 = variance12.evaluate(doubleArray21);
        variance12.increment((double) 0.0f);
        boolean boolean28 = variance12.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        long long31 = secondMoment29.getN();
        secondMoment29.clear();
        secondMoment29.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        variance35.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean41 = variance39.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray50 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double51 = variance43.evaluate(doubleArray50);
        double double52 = variance39.evaluate(doubleArray50);
        double double54 = variance35.evaluate(doubleArray50, (double) 1.0f);
        double double57 = variance12.evaluate(doubleArray50, (int) (byte) 0, 1);
        double double58 = variance1.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment59);
        long long61 = secondMoment59.getN();
        secondMoment59.clear();
        secondMoment59.clear();
        secondMoment59.increment((double) (byte) 100);
        boolean boolean66 = variance1.equals((java.lang.Object) (byte) 100);
        variance1.clear();
        double double68 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double73 = variance72.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        double[] doubleArray79 = new double[] { 0L, (byte) 10 };
        double double80 = variance75.evaluate(doubleArray79);
        double double82 = variance72.evaluate(doubleArray79, (double) 10L);
        double double83 = variance70.evaluate(doubleArray79);
        double[] doubleArray87 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double88 = variance70.evaluate(doubleArray87);
        double double89 = variance1.evaluate(doubleArray87);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2136.8055555555557d + "'", double51 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2564.166666666667d + "'", double52 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2136.805555555555d + "'", double54 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2136.8055555555557d + "'", double58 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 2024039.120370371d + "'", double88 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 1349359.4135802474d + "'", double89 == 1349359.4135802474d);
    }

    @Test
    public void test02055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02055");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double2 = secondMoment0.getResult();
        boolean boolean4 = secondMoment0.equals((java.lang.Object) 1.0d);
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long7 = secondMoment0.getN();
        double double8 = secondMoment0.getResult();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        long long13 = secondMoment11.getN();
        secondMoment11.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        double[] doubleArray22 = new double[] { 0L, (byte) 10 };
        double double23 = variance18.evaluate(doubleArray22);
        double double24 = variance18.getResult();
        variance18.increment(1349359.4135802474d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        long long30 = secondMoment28.getN();
        secondMoment28.clear();
        secondMoment28.clear();
        double double33 = secondMoment28.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment28);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance36.increment((-1.0d));
        variance36.setBiasCorrected(false);
        boolean boolean41 = variance36.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment43);
        double double45 = secondMoment43.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment43);
        secondMoment43.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double50 = variance49.getResult();
        double[] doubleArray53 = new double[] { 0L, (byte) 10 };
        double double54 = variance49.evaluate(doubleArray53);
        secondMoment43.incrementAll(doubleArray53);
        boolean boolean56 = variance36.equals((java.lang.Object) secondMoment43);
        variance36.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment59);
        double double61 = secondMoment59.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment59);
        secondMoment59.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double66 = variance65.getResult();
        double[] doubleArray69 = new double[] { 0L, (byte) 10 };
        double double70 = variance65.evaluate(doubleArray69);
        secondMoment59.incrementAll(doubleArray69);
        double double72 = variance36.evaluate(doubleArray69);
        double double73 = variance34.evaluate(doubleArray69);
        double double74 = variance18.evaluate(doubleArray69);
        double double75 = variance16.evaluate(doubleArray69);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray69, (-1), (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 25.0d + "'", double72 == 25.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 25.0d + "'", double75 == 25.0d);
    }

    @Test
    public void test02056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02056");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        double double2 = secondMoment0.getResult();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        secondMoment8.increment((double) 2L);
        double double15 = secondMoment8.getResult();
        secondMoment8.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        secondMoment8.increment((double) 10.0f);
        secondMoment8.increment(0.0d);
        secondMoment8.increment((double) 100.0f);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment26);
        long long28 = secondMoment26.getN();
        secondMoment26.clear();
        secondMoment26.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment26);
        variance32.setBiasCorrected(false);
        double double35 = variance32.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment36);
        long long38 = secondMoment36.getN();
        secondMoment36.clear();
        secondMoment36.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment36);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance43.increment((-1.0d));
        variance43.setBiasCorrected(false);
        boolean boolean48 = variance43.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean50 = variance43.equals((java.lang.Object) secondMoment49);
        variance43.increment((double) 100L);
        variance43.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double59 = variance58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        double[] doubleArray65 = new double[] { 0L, (byte) 10 };
        double double66 = variance61.evaluate(doubleArray65);
        double double68 = variance58.evaluate(doubleArray65, (double) 10L);
        double double69 = variance56.evaluate(doubleArray65);
        double[] doubleArray73 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double74 = variance56.evaluate(doubleArray73);
        variance43.incrementAll(doubleArray73);
        double double76 = variance41.evaluate(doubleArray73);
        variance32.incrementAll(doubleArray73);
        double double78 = secondMoment8.evaluate(doubleArray73);
        // The following exception was thrown during execution in test generation
        try {
            double double81 = secondMoment0.evaluate(doubleArray73, 10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 2024039.120370371d + "'", double74 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2024039.120370371d + "'", double76 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 4048078.240740742d + "'", double78 == 4048078.240740742d);
    }

    @Test
    public void test02057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02057");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment((double) 2L);
        double double8 = secondMoment1.getResult();
        secondMoment1.increment(24.5d);
        secondMoment1.increment(12820.833333333334d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        double double17 = secondMoment15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment15);
        secondMoment15.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double22 = variance21.getResult();
        double[] doubleArray25 = new double[] { 0L, (byte) 10 };
        double double26 = variance21.evaluate(doubleArray25);
        secondMoment15.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        secondMoment15.clear();
        secondMoment15.increment(Double.NaN);
        secondMoment15.increment(0.0d);
        secondMoment15.clear();
        long long35 = secondMoment15.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment15);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance40.increment((-1.0d));
        variance40.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        double[] doubleArray54 = new double[] { 0L, (byte) 10 };
        double double55 = variance50.evaluate(doubleArray54);
        double double57 = variance47.evaluate(doubleArray54, (double) 10L);
        double double58 = variance45.evaluate(doubleArray54);
        double double59 = variance40.evaluate(doubleArray54);
        variance38.incrementAll(doubleArray54);
        boolean boolean61 = variance36.equals((java.lang.Object) doubleArray54);
        // The following exception was thrown during execution in test generation
        try {
            double double64 = secondMoment1.evaluate(doubleArray54, (int) '#', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test02058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02058");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance8.increment((-1.0d));
        variance8.setBiasCorrected(false);
        boolean boolean13 = variance8.isBiasCorrected();
        double[] doubleArray14 = new double[] {};
        double double15 = variance8.evaluate(doubleArray14);
        secondMoment2.incrementAll(doubleArray14);
        double double17 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.increment(2564.166666666686d);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        long long23 = variance22.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean27 = variance25.equals((java.lang.Object) (short) 10);
        double double28 = variance25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance30.increment((-1.0d));
        variance30.setBiasCorrected(false);
        boolean boolean35 = variance30.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        double double39 = secondMoment37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment37);
        secondMoment37.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double44 = variance43.getResult();
        double[] doubleArray47 = new double[] { 0L, (byte) 10 };
        double double48 = variance43.evaluate(doubleArray47);
        secondMoment37.incrementAll(doubleArray47);
        boolean boolean50 = variance30.equals((java.lang.Object) secondMoment37);
        variance30.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment53);
        double double55 = secondMoment53.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment53);
        secondMoment53.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double60 = variance59.getResult();
        double[] doubleArray63 = new double[] { 0L, (byte) 10 };
        double double64 = variance59.evaluate(doubleArray63);
        secondMoment53.incrementAll(doubleArray63);
        double double66 = variance30.evaluate(doubleArray63);
        variance30.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double72 = variance71.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double75 = variance74.getResult();
        double[] doubleArray78 = new double[] { 0L, (byte) 10 };
        double double79 = variance74.evaluate(doubleArray78);
        double double81 = variance71.evaluate(doubleArray78, (double) 10L);
        double double82 = variance69.evaluate(doubleArray78);
        double double83 = variance30.evaluate(doubleArray78);
        double double84 = variance25.evaluate(doubleArray78);
        // The following exception was thrown during execution in test generation
        try {
            double double87 = variance22.evaluate(doubleArray78, (int) '4', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 25.0d + "'", double66 == 25.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 25.0d + "'", double83 == 25.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
    }

    @Test
    public void test02059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02059");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double[] doubleArray5 = new double[] { (byte) 100, 10 };
        double double8 = variance2.evaluate(doubleArray5, (int) (short) 1, 0);
        variance2.setBiasCorrected(false);
        variance2.increment((double) ' ');
        variance2.clear();
        variance2.increment((double) (short) -1);
        variance2.clear();
        variance2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.setBiasCorrected(false);
        boolean boolean25 = variance20.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean27 = variance20.equals((java.lang.Object) secondMoment26);
        secondMoment26.increment((double) (short) 0);
        secondMoment26.increment((double) 1.0f);
        double double32 = secondMoment26.getResult();
        secondMoment26.clear();
        double double34 = secondMoment26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance38.increment((-1.0d));
        variance38.setBiasCorrected(false);
        boolean boolean43 = variance38.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        double[] doubleArray52 = new double[] { 0L, (byte) 10 };
        double double53 = variance48.evaluate(doubleArray52);
        double double55 = variance45.evaluate(doubleArray52, (double) 10L);
        double double56 = variance38.evaluate(doubleArray52);
        variance38.increment((double) (byte) -1);
        variance38.increment(1557016.8402777782d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean64 = variance62.equals((java.lang.Object) (short) 10);
        double double65 = variance62.getResult();
        variance62.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double71 = variance70.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double74 = variance73.getResult();
        double[] doubleArray77 = new double[] { 0L, (byte) 10 };
        double double78 = variance73.evaluate(doubleArray77);
        double double80 = variance70.evaluate(doubleArray77, (double) 10L);
        double double81 = variance68.evaluate(doubleArray77);
        double[] doubleArray85 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double86 = variance68.evaluate(doubleArray85);
        double double89 = variance62.evaluate(doubleArray85, 0, (int) (short) 1);
        double double91 = variance38.evaluate(doubleArray85, 1652.4444444444443d);
        variance36.incrementAll(doubleArray85);
        // The following exception was thrown during execution in test generation
        try {
            double double95 = variance2.evaluate(doubleArray85, (-1), (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[100.0, 10.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.5d + "'", double32 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 25.0d + "'", double56 == 25.0d);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2024039.120370371d + "'", double86 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1349359.413580247d + "'", double91 == 1349359.413580247d);
    }

    @Test
    public void test02060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02060");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double[] doubleArray7 = new double[] {};
        double double8 = variance1.evaluate(doubleArray7);
        long long9 = variance1.getN();
        long long10 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance12.increment((-1.0d));
        boolean boolean15 = variance12.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment17);
        double double19 = secondMoment17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment17);
        secondMoment17.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.setBiasCorrected(false);
        boolean boolean28 = variance23.isBiasCorrected();
        double[] doubleArray29 = new double[] {};
        double double30 = variance23.evaluate(doubleArray29);
        secondMoment17.incrementAll(doubleArray29);
        double double32 = variance12.evaluate(doubleArray29);
        double double35 = variance1.evaluate(doubleArray29, 0, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        long long39 = secondMoment37.getN();
        secondMoment37.clear();
        secondMoment37.clear();
        long long42 = secondMoment37.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment37);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        double[] doubleArray54 = new double[] { 0L, (byte) 10 };
        double double55 = variance50.evaluate(doubleArray54);
        double double57 = variance47.evaluate(doubleArray54, (double) 10L);
        double double58 = variance45.evaluate(doubleArray54);
        variance45.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean64 = variance62.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double69 = variance68.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double72 = variance71.getResult();
        double[] doubleArray75 = new double[] { 0L, (byte) 10 };
        double double76 = variance71.evaluate(doubleArray75);
        double double78 = variance68.evaluate(doubleArray75, (double) 10L);
        double double79 = variance66.evaluate(doubleArray75);
        double[] doubleArray83 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double84 = variance66.evaluate(doubleArray83);
        double double86 = variance62.evaluate(doubleArray83, (double) (byte) 1);
        double double87 = variance45.evaluate(doubleArray83);
        double double89 = variance43.evaluate(doubleArray83, 0.0d);
        double double90 = variance1.evaluate(doubleArray83);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2024039.120370371d + "'", double84 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2024039.120370371d + "'", double86 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 2024039.120370371d + "'", double87 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 1349359.4135802472d + "'", double89 == 1349359.4135802472d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 1349359.4135802474d + "'", double90 == 1349359.4135802474d);
    }

    @Test
    public void test02061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02061");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = secondMoment8.evaluate(doubleArray22);
        long long25 = secondMoment8.getN();
        long long26 = secondMoment8.getN();
        secondMoment8.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance31.increment((-1.0d));
        variance31.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean39 = variance37.equals((java.lang.Object) (short) 10);
        boolean boolean40 = variance31.equals((java.lang.Object) variance37);
        long long41 = variance37.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean45 = variance43.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray54 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double55 = variance47.evaluate(doubleArray54);
        double double56 = variance43.evaluate(doubleArray54);
        double double57 = variance37.evaluate(doubleArray54);
        secondMoment8.incrementAll(doubleArray54);
        double[] doubleArray59 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double60 = secondMoment8.evaluate(doubleArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 12820.833333333334d + "'", double24 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2136.8055555555557d + "'", double55 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2564.166666666667d + "'", double56 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2564.166666666667d + "'", double57 == 2564.166666666667d);
    }

    @Test
    public void test02062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02062");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.increment((double) (byte) 100);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment(2024039.12109375d);
        secondMoment1.clear();
        secondMoment1.increment((double) 8L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        long long17 = variance16.getN();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
    }

    @Test
    public void test02063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02063");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance8.increment((-1.0d));
        variance8.setBiasCorrected(false);
        boolean boolean13 = variance8.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean15 = variance8.equals((java.lang.Object) secondMoment14);
        double double16 = secondMoment14.getResult();
        secondMoment14.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        double[] doubleArray34 = new double[] { 0L, (byte) 10 };
        double double35 = variance30.evaluate(doubleArray34);
        double double37 = variance27.evaluate(doubleArray34, (double) 10L);
        double double38 = variance25.evaluate(doubleArray34);
        double double39 = variance20.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        double[] doubleArray45 = new double[] { 0L, (byte) 10 };
        double double46 = variance41.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray55 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double56 = variance48.evaluate(doubleArray55);
        double double57 = variance41.evaluate(doubleArray55);
        double double58 = variance20.evaluate(doubleArray55);
        double double59 = variance18.evaluate(doubleArray55);
        variance5.incrementAll(doubleArray55);
        long long61 = variance5.getN();
        double[] doubleArray62 = null;
        // The following exception was thrown during execution in test generation
        try {
            variance5.incrementAll(doubleArray62, (int) (byte) 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2136.8055555555557d + "'", double56 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2564.166666666667d + "'", double57 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2564.166666666667d + "'", double58 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2136.8055555555557d + "'", double59 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
    }

    @Test
    public void test02064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02064");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        secondMoment7.clear();
        secondMoment7.increment((double) 0L);
        secondMoment7.increment(2564.166666666651d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test02065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02065");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        variance1.increment((double) (short) -1);
        long long5 = variance1.getN();
        variance1.setBiasCorrected(false);
        double double8 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance11.increment((-1.0d));
        variance11.setBiasCorrected(false);
        variance11.increment((double) 100L);
        boolean boolean18 = variance11.isBiasCorrected();
        variance11.clear();
        long long20 = variance11.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        double double24 = secondMoment22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment22);
        secondMoment22.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        double[] doubleArray32 = new double[] { 0L, (byte) 10 };
        double double33 = variance28.evaluate(doubleArray32);
        secondMoment22.incrementAll(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean39 = variance37.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance41.increment((-1.0d));
        variance41.setBiasCorrected(false);
        boolean boolean46 = variance41.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean48 = variance41.equals((java.lang.Object) secondMoment47);
        double double49 = secondMoment47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        double[] doubleArray58 = new double[] { 0L, (byte) 10 };
        double double59 = variance54.evaluate(doubleArray58);
        double double61 = variance51.evaluate(doubleArray58, (double) 10L);
        double double64 = secondMoment47.evaluate(doubleArray58, (int) (short) 0, 1);
        double double65 = variance37.evaluate(doubleArray58);
        secondMoment22.incrementAll(doubleArray58);
        double double67 = variance11.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance69.increment((-1.0d));
        variance69.setBiasCorrected(false);
        boolean boolean74 = variance69.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment75 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean76 = variance69.equals((java.lang.Object) secondMoment75);
        secondMoment75.increment((double) (short) 0);
        secondMoment75.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance82 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray89 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double90 = variance82.evaluate(doubleArray89);
        double double91 = secondMoment75.evaluate(doubleArray89);
        double double92 = variance11.evaluate(doubleArray89);
        double double93 = variance9.evaluate(doubleArray89);
        double double94 = variance1.evaluate(doubleArray89);
        double[] doubleArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 25.0d + "'", double67 == 25.0d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 2136.8055555555557d + "'", double90 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 12820.833333333334d + "'", double91 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 2136.8055555555557d + "'", double92 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 2564.166666666667d + "'", double93 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 2136.8055555555557d + "'", double94 == 2136.8055555555557d);
    }

    @Test
    public void test02066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02066");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance4.increment((-1.0d));
        variance4.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double22 = variance9.evaluate(doubleArray18);
        double double23 = variance4.evaluate(doubleArray18);
        variance2.incrementAll(doubleArray18);
        variance0.incrementAll(doubleArray18);
        variance0.clear();
        double double27 = variance0.getResult();
        variance0.increment((double) 100);
        variance0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance32.increment((-1.0d));
        variance32.setBiasCorrected(false);
        boolean boolean37 = variance32.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean39 = variance32.equals((java.lang.Object) secondMoment38);
        secondMoment38.increment((double) (short) 0);
        secondMoment38.increment((double) 1.0f);
        double double44 = secondMoment38.getResult();
        secondMoment38.clear();
        long long46 = secondMoment38.getN();
        secondMoment38.clear();
        secondMoment38.increment(1988.7755102040815d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance51.increment((-1.0d));
        variance51.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double59 = variance58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        double[] doubleArray65 = new double[] { 0L, (byte) 10 };
        double double66 = variance61.evaluate(doubleArray65);
        double double68 = variance58.evaluate(doubleArray65, (double) 10L);
        double double69 = variance56.evaluate(doubleArray65);
        double double70 = variance51.evaluate(doubleArray65);
        secondMoment38.incrementAll(doubleArray65, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double76 = variance0.evaluate(doubleArray65, (-1), (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.5d + "'", double44 == 0.5d);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
    }

    @Test
    public void test02067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02067");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        secondMoment8.incrementAll(doubleArray18);
        boolean boolean21 = variance1.equals((java.lang.Object) secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.setBiasCorrected(false);
        boolean boolean28 = variance23.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean30 = variance23.equals((java.lang.Object) secondMoment29);
        boolean boolean31 = secondMoment8.equals((java.lang.Object) boolean30);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance33.increment((-1.0d));
        variance33.setBiasCorrected(false);
        boolean boolean38 = variance33.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean40 = variance33.equals((java.lang.Object) secondMoment39);
        secondMoment39.increment((double) (short) 0);
        secondMoment39.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray53 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double54 = variance46.evaluate(doubleArray53);
        double double55 = secondMoment39.evaluate(doubleArray53);
        double double56 = secondMoment8.evaluate(doubleArray53);
        long long57 = secondMoment8.getN();
        double double58 = secondMoment8.getResult();
        secondMoment8.increment(2224.904761904762d);
        double double61 = secondMoment8.getResult();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2136.8055555555557d + "'", double54 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 12820.833333333334d + "'", double55 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 12820.833333333334d + "'", double56 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6L + "'", long57 == 6L);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 12820.833333333334d + "'", double58 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 4124031.858114674d + "'", double61 == 4124031.858114674d);
    }

    @Test
    public void test02068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02068");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        double[] doubleArray11 = new double[] { 0L, (byte) 10 };
        double double12 = variance7.evaluate(doubleArray11);
        secondMoment1.incrementAll(doubleArray11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        long long16 = secondMoment1.getN();
        double double17 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment((double) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double23 = secondMoment1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    }

    @Test
    public void test02069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02069");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double3 = variance2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double6 = variance5.getResult();
        double[] doubleArray9 = new double[] { 0L, (byte) 10 };
        double double10 = variance5.evaluate(doubleArray9);
        double double12 = variance2.evaluate(doubleArray9, (double) 10L);
        long long13 = variance2.getN();
        boolean boolean14 = secondMoment0.equals((java.lang.Object) long13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        long long18 = secondMoment16.getN();
        secondMoment16.clear();
        secondMoment16.increment((double) '4');
        long long22 = secondMoment16.getN();
        secondMoment16.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        variance26.increment((double) (short) -1);
        boolean boolean30 = variance26.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        double double34 = secondMoment32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment32);
        secondMoment32.clear();
        secondMoment32.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment38);
        long long40 = secondMoment38.getN();
        secondMoment38.clear();
        secondMoment38.clear();
        secondMoment38.increment((double) (byte) 100);
        secondMoment38.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double50 = variance49.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double53 = variance52.getResult();
        double[] doubleArray56 = new double[] { 0L, (byte) 10 };
        double double57 = variance52.evaluate(doubleArray56);
        double double59 = variance49.evaluate(doubleArray56, (double) 10L);
        double double60 = variance47.evaluate(doubleArray56);
        double[] doubleArray64 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double65 = variance47.evaluate(doubleArray64);
        double double66 = secondMoment38.evaluate(doubleArray64);
        double double69 = secondMoment32.evaluate(doubleArray64, 0, (int) (short) 1);
        double double71 = variance26.evaluate(doubleArray64, 651942.9897959187d);
        double double72 = secondMoment16.evaluate(doubleArray64);
        // The following exception was thrown during execution in test generation
        try {
            double double75 = variance15.evaluate(doubleArray64, 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 50.0d + "'", double10 == 50.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2024039.120370371d + "'", double65 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 4048078.240740742d + "'", double66 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2024039.1204833984d + "'", double71 == 2024039.1204833984d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 4048078.240740742d + "'", double72 == 4048078.240740742d);
    }

    @Test
    public void test02070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02070");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance6.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean12 = variance10.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double22 = variance14.evaluate(doubleArray21);
        double double23 = variance10.evaluate(doubleArray21);
        double double25 = variance6.evaluate(doubleArray21, (double) 1.0f);
        boolean boolean26 = variance6.isBiasCorrected();
        long long27 = variance6.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        double[] doubleArray38 = new double[] { 0L, (byte) 10 };
        double double39 = variance34.evaluate(doubleArray38);
        double double41 = variance31.evaluate(doubleArray38, (double) 10L);
        double double42 = variance29.evaluate(doubleArray38);
        variance29.increment((double) 0.0f);
        boolean boolean45 = variance29.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment46);
        long long48 = secondMoment46.getN();
        secondMoment46.clear();
        secondMoment46.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment46);
        variance52.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean58 = variance56.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray67 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double68 = variance60.evaluate(doubleArray67);
        double double69 = variance56.evaluate(doubleArray67);
        double double71 = variance52.evaluate(doubleArray67, (double) 1.0f);
        double double74 = variance29.evaluate(doubleArray67, (int) (byte) 0, 1);
        // The following exception was thrown during execution in test generation
        try {
            double double77 = variance6.evaluate(doubleArray67, (int) (byte) 1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2136.8055555555557d + "'", double22 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2564.166666666667d + "'", double23 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2136.805555555555d + "'", double25 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 2136.8055555555557d + "'", double68 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2564.166666666667d + "'", double69 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2136.805555555555d + "'", double71 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
    }

    @Test
    public void test02071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02071");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance1.clear();
        double double3 = variance1.getResult();
        variance1.increment(227.3d);
        variance1.setBiasCorrected(false);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
    }

    @Test
    public void test02072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02072");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        double double16 = secondMoment14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment14);
        secondMoment14.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        double[] doubleArray24 = new double[] { 0L, (byte) 10 };
        double double25 = variance20.evaluate(doubleArray24);
        secondMoment14.incrementAll(doubleArray24);
        long long27 = secondMoment14.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        boolean boolean30 = secondMoment7.equals((java.lang.Object) variance29);
        double[] doubleArray31 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double32 = variance29.evaluate(doubleArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2L + "'", long27 == 2L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test02073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02073");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = secondMoment8.evaluate(doubleArray22);
        long long25 = secondMoment8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        double[] doubleArray27 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double30 = variance26.evaluate(doubleArray27, 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 12820.833333333334d + "'", double24 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
    }

    @Test
    public void test02074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02074");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double[] doubleArray5 = new double[] { 0L, (byte) 10 };
        double double6 = variance1.evaluate(doubleArray5);
        double double7 = variance1.getResult();
        variance1.increment(1349359.4135802474d);
        variance1.setBiasCorrected(true);
        variance1.clear();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        long long16 = secondMoment14.getN();
        secondMoment14.clear();
        secondMoment14.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        long long21 = secondMoment14.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        double[] doubleArray32 = new double[] { 0L, (byte) 10 };
        double double33 = variance28.evaluate(doubleArray32);
        double double35 = variance25.evaluate(doubleArray32, (double) 10L);
        double double36 = variance23.evaluate(doubleArray32);
        variance23.increment((double) 0.0f);
        boolean boolean39 = variance23.isBiasCorrected();
        long long40 = variance23.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance42.increment((-1.0d));
        variance42.setBiasCorrected(false);
        boolean boolean47 = variance42.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean49 = variance42.equals((java.lang.Object) secondMoment48);
        secondMoment48.increment((double) (short) 0);
        secondMoment48.increment((double) 1.0f);
        double double54 = secondMoment48.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment48);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment48);
        boolean boolean57 = variance23.equals((java.lang.Object) variance56);
        double[] doubleArray58 = new double[] {};
        double double59 = variance56.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance61.increment((-1.0d));
        variance61.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean69 = variance67.equals((java.lang.Object) (short) 10);
        boolean boolean70 = variance61.equals((java.lang.Object) variance67);
        long long71 = variance67.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean75 = variance73.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray84 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double85 = variance77.evaluate(doubleArray84);
        double double86 = variance73.evaluate(doubleArray84);
        double double87 = variance67.evaluate(doubleArray84);
        double double88 = variance56.evaluate(doubleArray84);
        double double89 = secondMoment14.evaluate(doubleArray84);
        double double90 = variance1.evaluate(doubleArray84);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.0d + "'", double6 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.5d + "'", double54 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2136.8055555555557d + "'", double85 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2564.166666666667d + "'", double86 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 2564.166666666667d + "'", double87 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 2564.166666666667d + "'", double88 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 12820.833333333334d + "'", double89 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 2564.166666666667d + "'", double90 == 2564.166666666667d);
    }

    @Test
    public void test02075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02075");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        long long13 = secondMoment7.getN();
        double double14 = secondMoment7.getResult();
        secondMoment7.increment(4684796.354166668d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        double double20 = secondMoment18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment18);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        double double25 = secondMoment23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment23);
        secondMoment23.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        double[] doubleArray33 = new double[] { 0L, (byte) 10 };
        double double34 = variance29.evaluate(doubleArray33);
        secondMoment23.incrementAll(doubleArray33);
        double double36 = variance21.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance39.increment((-1.0d));
        variance39.setBiasCorrected(false);
        boolean boolean44 = variance39.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean46 = variance39.equals((java.lang.Object) secondMoment45);
        secondMoment45.increment((double) (short) 0);
        secondMoment45.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray59 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double60 = variance52.evaluate(doubleArray59);
        double double61 = secondMoment45.evaluate(doubleArray59);
        secondMoment37.incrementAll(doubleArray59);
        variance21.incrementAll(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment64 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment64);
        long long66 = secondMoment64.getN();
        secondMoment64.clear();
        secondMoment64.increment(10.0d);
        double double70 = secondMoment64.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double75 = variance74.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double78 = variance77.getResult();
        double[] doubleArray81 = new double[] { 0L, (byte) 10 };
        double double82 = variance77.evaluate(doubleArray81);
        double double84 = variance74.evaluate(doubleArray81, (double) 10L);
        double double85 = variance72.evaluate(doubleArray81);
        double[] doubleArray89 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double90 = variance72.evaluate(doubleArray89);
        double double91 = secondMoment64.evaluate(doubleArray89);
        double double93 = variance21.evaluate(doubleArray89, (double) (short) 100);
        boolean boolean94 = variance21.isBiasCorrected();
        double double95 = variance21.getResult();
        long long96 = variance21.getN();
        boolean boolean97 = secondMoment7.equals((java.lang.Object) long96);
        org.apache.commons.math.stat.descriptive.moment.Variance variance98 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2L + "'", long13 == 2L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 25.0d + "'", double36 == 25.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2136.8055555555557d + "'", double60 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 12820.833333333334d + "'", double61 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 2024039.120370371d + "'", double90 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 4048078.240740742d + "'", double91 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 1349359.4135802472d + "'", double93 == 1349359.4135802472d);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double95));
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 0L + "'", long96 == 0L);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test02076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02076");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.clear();
        double double3 = variance1.getResult();
        variance1.setBiasCorrected(true);
        long long6 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double11 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        secondMoment9.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean26 = variance24.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance28.increment((-1.0d));
        variance28.setBiasCorrected(false);
        boolean boolean33 = variance28.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean35 = variance28.equals((java.lang.Object) secondMoment34);
        double double36 = secondMoment34.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        double[] doubleArray45 = new double[] { 0L, (byte) 10 };
        double double46 = variance41.evaluate(doubleArray45);
        double double48 = variance38.evaluate(doubleArray45, (double) 10L);
        double double51 = secondMoment34.evaluate(doubleArray45, (int) (short) 0, 1);
        double double52 = variance24.evaluate(doubleArray45);
        secondMoment9.incrementAll(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        long long59 = variance57.getN();
        long long60 = variance57.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double63 = variance62.getResult();
        double[] doubleArray66 = new double[] { 0L, (byte) 10 };
        double double67 = variance62.evaluate(doubleArray66);
        double double69 = variance57.evaluate(doubleArray66, (double) (short) -1);
        double double70 = secondMoment9.evaluate(doubleArray66);
        // The following exception was thrown during execution in test generation
        try {
            double double73 = variance1.evaluate(doubleArray66, (int) ' ', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
    }

    @Test
    public void test02077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02077");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        double[] doubleArray5 = null;
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test02078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02078");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        long long6 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double22 = variance9.evaluate(doubleArray18);
        variance9.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean28 = variance26.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        double[] doubleArray39 = new double[] { 0L, (byte) 10 };
        double double40 = variance35.evaluate(doubleArray39);
        double double42 = variance32.evaluate(doubleArray39, (double) 10L);
        double double43 = variance30.evaluate(doubleArray39);
        double[] doubleArray47 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double48 = variance30.evaluate(doubleArray47);
        double double50 = variance26.evaluate(doubleArray47, (double) (byte) 1);
        double double51 = variance9.evaluate(doubleArray47);
        double double53 = variance7.evaluate(doubleArray47, 0.0d);
        double double54 = variance7.getResult();
        variance7.increment((double) 100);
        double double57 = variance7.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment59);
        long long61 = secondMoment59.getN();
        secondMoment59.clear();
        secondMoment59.clear();
        secondMoment59.increment((double) (byte) 100);
        secondMoment59.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment59);
        secondMoment59.clear();
        secondMoment59.increment(2024039.12109375d);
        secondMoment59.clear();
        secondMoment59.increment((double) 8L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment59);
        double double75 = variance74.getResult();
        variance74.setBiasCorrected(false);
        long long78 = variance74.getN();
        boolean boolean79 = variance7.equals((java.lang.Object) long78);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2024039.120370371d + "'", double48 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2024039.120370371d + "'", double50 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2024039.120370371d + "'", double51 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1349359.4135802472d + "'", double53 == 1349359.4135802472d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1L + "'", long78 == 1L);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test02079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02079");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        double double15 = secondMoment7.getResult();
        secondMoment7.increment(25.0d);
        long long18 = secondMoment7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        long long22 = secondMoment20.getN();
        secondMoment20.clear();
        secondMoment20.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance28.increment((-1.0d));
        variance28.setBiasCorrected(false);
        boolean boolean33 = variance28.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean35 = variance28.equals((java.lang.Object) secondMoment34);
        double double36 = secondMoment34.getResult();
        secondMoment34.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment34);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance40.increment((-1.0d));
        variance40.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        double[] doubleArray54 = new double[] { 0L, (byte) 10 };
        double double55 = variance50.evaluate(doubleArray54);
        double double57 = variance47.evaluate(doubleArray54, (double) 10L);
        double double58 = variance45.evaluate(doubleArray54);
        double double59 = variance40.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        double[] doubleArray65 = new double[] { 0L, (byte) 10 };
        double double66 = variance61.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray75 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double76 = variance68.evaluate(doubleArray75);
        double double77 = variance61.evaluate(doubleArray75);
        double double78 = variance40.evaluate(doubleArray75);
        double double79 = variance38.evaluate(doubleArray75);
        variance25.incrementAll(doubleArray75);
        // The following exception was thrown during execution in test generation
        try {
            double double84 = variance19.evaluate(doubleArray75, (double) 2L, (int) (byte) -1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.5d + "'", double15 == 0.5d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 3L + "'", long18 == 3L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2136.8055555555557d + "'", double76 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2564.166666666667d + "'", double77 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2564.166666666667d + "'", double78 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 2136.8055555555557d + "'", double79 == 2136.8055555555557d);
    }

    @Test
    public void test02080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02080");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        long long6 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double22 = variance9.evaluate(doubleArray18);
        variance9.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean28 = variance26.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        double[] doubleArray39 = new double[] { 0L, (byte) 10 };
        double double40 = variance35.evaluate(doubleArray39);
        double double42 = variance32.evaluate(doubleArray39, (double) 10L);
        double double43 = variance30.evaluate(doubleArray39);
        double[] doubleArray47 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double48 = variance30.evaluate(doubleArray47);
        double double50 = variance26.evaluate(doubleArray47, (double) (byte) 1);
        double double51 = variance9.evaluate(doubleArray47);
        double double53 = variance7.evaluate(doubleArray47, 0.0d);
        variance7.increment(60.666666666666664d);
        boolean boolean56 = variance7.isBiasCorrected();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2024039.120370371d + "'", double48 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2024039.120370371d + "'", double50 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2024039.120370371d + "'", double51 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1349359.4135802472d + "'", double53 == 1349359.4135802472d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test02081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02081");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        double[] doubleArray11 = new double[] { 0L, (byte) 10 };
        double double12 = variance7.evaluate(doubleArray11);
        secondMoment1.incrementAll(doubleArray11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean18 = variance16.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.setBiasCorrected(false);
        boolean boolean25 = variance20.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean27 = variance20.equals((java.lang.Object) secondMoment26);
        double double28 = secondMoment26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        double[] doubleArray37 = new double[] { 0L, (byte) 10 };
        double double38 = variance33.evaluate(doubleArray37);
        double double40 = variance30.evaluate(doubleArray37, (double) 10L);
        double double43 = secondMoment26.evaluate(doubleArray37, (int) (short) 0, 1);
        double double44 = variance16.evaluate(doubleArray37);
        secondMoment1.incrementAll(doubleArray37);
        secondMoment1.clear();
        secondMoment1.increment((double) 'a');
        secondMoment1.clear();
        secondMoment1.increment((double) 1.0f);
        double double52 = secondMoment1.getResult();
        long long53 = secondMoment1.getN();
        secondMoment1.increment(2136.8055555547276d);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
    }

    @Test
    public void test02082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02082");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        variance11.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        double double17 = secondMoment15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment15);
        secondMoment15.clear();
        secondMoment15.increment((double) 2L);
        double double22 = secondMoment15.getResult();
        secondMoment15.increment(50.0d);
        double double25 = secondMoment15.getResult();
        long long26 = secondMoment15.getN();
        long long27 = secondMoment15.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance29.increment((-1.0d));
        variance29.setBiasCorrected(false);
        boolean boolean34 = variance29.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean36 = variance29.equals((java.lang.Object) secondMoment35);
        secondMoment35.increment((double) (short) 0);
        secondMoment35.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray49 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double50 = variance42.evaluate(doubleArray49);
        double double51 = secondMoment35.evaluate(doubleArray49);
        double double52 = secondMoment15.evaluate(doubleArray49);
        double double54 = variance11.evaluate(doubleArray49, 547.0d);
        java.lang.Class<?> wildcardClass55 = doubleArray49.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1152.0d + "'", double25 == 1152.0d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 2L + "'", long26 == 2L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2L + "'", long27 == 2L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2136.8055555555557d + "'", double50 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 12820.833333333334d + "'", double51 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 12820.833333333334d + "'", double52 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2564.166666666651d + "'", double54 == 2564.166666666651d);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test02083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02083");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance4.increment((-1.0d));
        variance4.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double22 = variance9.evaluate(doubleArray18);
        double double23 = variance4.evaluate(doubleArray18);
        variance2.incrementAll(doubleArray18);
        variance0.incrementAll(doubleArray18);
        variance0.clear();
        long long27 = variance0.getN();
        long long28 = variance0.getN();
        variance0.setBiasCorrected(true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test02084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02084");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        double double5 = secondMoment1.getResult();
        secondMoment1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double[] doubleArray9 = new double[] {};
        double double10 = secondMoment1.evaluate(doubleArray9);
        double double11 = secondMoment1.getResult();
        secondMoment1.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance18.increment((-1.0d));
        variance18.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        double[] doubleArray32 = new double[] { 0L, (byte) 10 };
        double double33 = variance28.evaluate(doubleArray32);
        double double35 = variance25.evaluate(doubleArray32, (double) 10L);
        double double36 = variance23.evaluate(doubleArray32);
        double double37 = variance18.evaluate(doubleArray32);
        variance16.incrementAll(doubleArray32);
        variance16.increment((double) 100.0f);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        long long43 = secondMoment41.getN();
        secondMoment41.clear();
        secondMoment41.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance48.increment((-1.0d));
        variance48.setBiasCorrected(false);
        boolean boolean53 = variance48.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean55 = variance48.equals((java.lang.Object) secondMoment54);
        variance48.increment((double) 100L);
        variance48.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double64 = variance63.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double67 = variance66.getResult();
        double[] doubleArray70 = new double[] { 0L, (byte) 10 };
        double double71 = variance66.evaluate(doubleArray70);
        double double73 = variance63.evaluate(doubleArray70, (double) 10L);
        double double74 = variance61.evaluate(doubleArray70);
        double[] doubleArray78 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double79 = variance61.evaluate(doubleArray78);
        variance48.incrementAll(doubleArray78);
        double double81 = variance46.evaluate(doubleArray78);
        double double83 = variance16.evaluate(doubleArray78, (double) 3L);
        // The following exception was thrown during execution in test generation
        try {
            double double86 = secondMoment1.evaluate(doubleArray78, 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 2024039.120370371d + "'", double79 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 2024039.120370371d + "'", double81 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2024039.1203703708d + "'", double83 == 2024039.1203703708d);
    }

    @Test
    public void test02085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02085");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double4 = variance3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        double[] doubleArray10 = new double[] { 0L, (byte) 10 };
        double double11 = variance6.evaluate(doubleArray10);
        double double13 = variance3.evaluate(doubleArray10, (double) 10L);
        long long14 = variance3.getN();
        boolean boolean15 = secondMoment1.equals((java.lang.Object) long14);
        secondMoment1.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance19.increment((-1.0d));
        variance19.setBiasCorrected(false);
        variance19.increment(2136.8055555555557d);
        variance19.setBiasCorrected(false);
        java.lang.Class<?> wildcardClass28 = variance19.getClass();
        boolean boolean29 = secondMoment1.equals((java.lang.Object) variance19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.increment(2058.591715976331d);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test02086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02086");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.increment((double) 10L);
        boolean boolean4 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        long long8 = secondMoment6.getN();
        secondMoment6.clear();
        secondMoment6.clear();
        double double11 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment6);
        variance12.increment((double) (byte) -1);
        long long15 = variance12.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        long long18 = secondMoment16.getN();
        secondMoment16.clear();
        secondMoment16.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        long long24 = secondMoment22.getN();
        secondMoment22.clear();
        double double26 = secondMoment22.getResult();
        secondMoment22.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        double[] doubleArray30 = new double[] {};
        double double31 = secondMoment22.evaluate(doubleArray30);
        secondMoment16.incrementAll(doubleArray30);
        double double33 = variance12.evaluate(doubleArray30);
        double double35 = variance1.evaluate(doubleArray30, 227.3d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance37.increment((-1.0d));
        variance37.setBiasCorrected(false);
        boolean boolean42 = variance37.isBiasCorrected();
        double[] doubleArray43 = new double[] {};
        double double44 = variance37.evaluate(doubleArray43);
        variance37.increment((double) 1.0f);
        variance37.increment((double) 10);
        variance37.increment(50.0009765625d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance52.increment((-1.0d));
        variance52.setBiasCorrected(false);
        variance52.increment((double) 100L);
        boolean boolean59 = variance52.isBiasCorrected();
        variance52.clear();
        variance52.clear();
        variance52.increment(2550.25d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double66 = variance65.getResult();
        double[] doubleArray69 = new double[] { 0L, (byte) 10 };
        double double70 = variance65.evaluate(doubleArray69);
        double double71 = variance65.getResult();
        variance65.increment(1349359.4135802474d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray82 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double83 = variance75.evaluate(doubleArray82);
        double double84 = variance65.evaluate(doubleArray82);
        double double85 = variance52.evaluate(doubleArray82);
        double double87 = variance37.evaluate(doubleArray82, 16460.85714285714d);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray82, (int) ' ', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2136.8055555555557d + "'", double83 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2564.166666666667d + "'", double84 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2136.8055555555557d + "'", double85 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 2136.8055555423102d + "'", double87 == 2136.8055555423102d);
    }

    @Test
    public void test02087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02087");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double2 = secondMoment1.getResult();
        double double3 = secondMoment1.getResult();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.increment(9.536988751020409E7d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double10 = secondMoment8.getResult();
        boolean boolean12 = secondMoment8.equals((java.lang.Object) 1.0d);
        double double13 = secondMoment8.getResult();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        long long17 = secondMoment15.getN();
        secondMoment15.clear();
        secondMoment15.clear();
        secondMoment15.increment((double) (byte) 100);
        secondMoment15.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        secondMoment15.increment(2136.805555555555d);
        secondMoment15.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance28.increment((-1.0d));
        variance28.setBiasCorrected(false);
        variance28.increment((double) 100L);
        boolean boolean35 = variance28.isBiasCorrected();
        boolean boolean36 = variance28.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double46 = variance38.evaluate(doubleArray45);
        double double48 = variance28.evaluate(doubleArray45, (double) (byte) 10);
        secondMoment15.incrementAll(doubleArray45);
        double double50 = secondMoment8.evaluate(doubleArray45);
        double double51 = secondMoment8.getResult();
        secondMoment8.increment(0.0d);
        long long54 = secondMoment8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double57 = variance56.getResult();
        double[] doubleArray60 = new double[] { 0L, (byte) 10 };
        double double61 = variance56.evaluate(doubleArray60);
        double double62 = variance56.getResult();
        double double63 = variance56.getResult();
        double double64 = variance56.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance66.increment((-1.0d));
        variance66.setBiasCorrected(false);
        boolean boolean71 = variance66.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean73 = variance66.equals((java.lang.Object) secondMoment72);
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double79 = variance78.getResult();
        double[] doubleArray82 = new double[] { 0L, (byte) 10 };
        double double83 = variance78.evaluate(doubleArray82);
        double double85 = variance75.evaluate(doubleArray82, (double) 10L);
        double double89 = variance66.evaluate(doubleArray82, (double) (short) 0, 0, (int) (short) 0);
        double double90 = variance56.evaluate(doubleArray82);
        double double91 = secondMoment8.evaluate(doubleArray82);
        // The following exception was thrown during execution in test generation
        try {
            double double94 = secondMoment1.evaluate(doubleArray82, (int) (short) 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2136.8055555555557d + "'", double46 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2136.8055555555557d + "'", double48 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 12820.833333333334d + "'", double50 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 12820.833333333334d + "'", double51 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 7L + "'", long54 == 7L);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
    }

    @Test
    public void test02088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02088");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance6.clear();
        variance6.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        long long11 = secondMoment9.getN();
        secondMoment9.clear();
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        variance17.setBiasCorrected(false);
        boolean boolean22 = variance17.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean24 = variance17.equals((java.lang.Object) secondMoment23);
        double double25 = secondMoment23.getResult();
        secondMoment23.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance29.increment((-1.0d));
        variance29.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        double[] doubleArray43 = new double[] { 0L, (byte) 10 };
        double double44 = variance39.evaluate(doubleArray43);
        double double46 = variance36.evaluate(doubleArray43, (double) 10L);
        double double47 = variance34.evaluate(doubleArray43);
        double double48 = variance29.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        double[] doubleArray54 = new double[] { 0L, (byte) 10 };
        double double55 = variance50.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray64 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double65 = variance57.evaluate(doubleArray64);
        double double66 = variance50.evaluate(doubleArray64);
        double double67 = variance29.evaluate(doubleArray64);
        double double68 = variance27.evaluate(doubleArray64);
        variance14.incrementAll(doubleArray64);
        double double70 = variance6.evaluate(doubleArray64);
        double double71 = variance6.getResult();
        variance6.clear();
        variance6.increment((double) (short) 0);
        double double75 = variance6.getResult();
        double double76 = variance6.getResult();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2136.8055555555557d + "'", double65 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 2564.166666666667d + "'", double66 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2564.166666666667d + "'", double67 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 2136.8055555555557d + "'", double68 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2564.166666666667d + "'", double70 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
    }

    @Test
    public void test02089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02089");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        double[] doubleArray11 = new double[] { 0L, (byte) 10 };
        double double12 = variance7.evaluate(doubleArray11);
        secondMoment1.incrementAll(doubleArray11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean18 = variance16.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.setBiasCorrected(false);
        boolean boolean25 = variance20.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean27 = variance20.equals((java.lang.Object) secondMoment26);
        double double28 = secondMoment26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        double[] doubleArray37 = new double[] { 0L, (byte) 10 };
        double double38 = variance33.evaluate(doubleArray37);
        double double40 = variance30.evaluate(doubleArray37, (double) 10L);
        double double43 = secondMoment26.evaluate(doubleArray37, (int) (short) 0, 1);
        double double44 = variance16.evaluate(doubleArray37);
        secondMoment1.incrementAll(doubleArray37);
        double double46 = secondMoment1.getResult();
        secondMoment1.increment(5.415271412037037E7d);
        secondMoment1.increment(0.0d);
        double double51 = secondMoment1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.0d + "'", double46 == 100.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2.443763344484173E15d + "'", double51 == 2.443763344484173E15d);
    }

    @Test
    public void test02090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02090");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double[] doubleArray6 = new double[] { 'a', (-1.0f), '4' };
        variance2.incrementAll(doubleArray6);
        variance2.increment((double) 10.0f);
        variance2.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = variance2.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[97.0, -1.0, 52.0]");
    }

    @Test
    public void test02091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02091");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double[] doubleArray5 = new double[] { 0L, (byte) 10 };
        double double6 = variance1.evaluate(doubleArray5);
        double double7 = variance1.getResult();
        variance1.increment(1349359.4135802474d);
        double double10 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        long long13 = secondMoment11.getN();
        secondMoment11.clear();
        secondMoment11.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        variance17.clear();
        variance17.clear();
        boolean boolean20 = variance17.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.setBiasCorrected(false);
        boolean boolean28 = variance23.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean30 = variance23.equals((java.lang.Object) secondMoment29);
        double double31 = secondMoment29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        double[] doubleArray40 = new double[] { 0L, (byte) 10 };
        double double41 = variance36.evaluate(doubleArray40);
        double double43 = variance33.evaluate(doubleArray40, (double) 10L);
        double double46 = secondMoment29.evaluate(doubleArray40, (int) (short) 0, 1);
        long long47 = secondMoment29.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment29);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean52 = variance50.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray61 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double62 = variance54.evaluate(doubleArray61);
        double double63 = variance50.evaluate(doubleArray61);
        java.lang.Class<?> wildcardClass64 = doubleArray61.getClass();
        boolean boolean65 = variance48.equals((java.lang.Object) wildcardClass64);
        variance48.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance69.increment((-1.0d));
        variance69.setBiasCorrected(false);
        boolean boolean74 = variance69.isBiasCorrected();
        double[] doubleArray75 = new double[] {};
        double double76 = variance69.evaluate(doubleArray75);
        variance69.setBiasCorrected(false);
        variance69.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment81 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance82 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment81);
        double double83 = secondMoment81.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance84 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment81);
        secondMoment81.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance87 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double88 = variance87.getResult();
        double[] doubleArray91 = new double[] { 0L, (byte) 10 };
        double double92 = variance87.evaluate(doubleArray91);
        secondMoment81.incrementAll(doubleArray91);
        variance69.incrementAll(doubleArray91);
        variance48.incrementAll(doubleArray91);
        double double96 = variance17.evaluate(doubleArray91);
        // The following exception was thrown during execution in test generation
        try {
            double double99 = variance1.evaluate(doubleArray91, 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.0d + "'", double6 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2136.8055555555557d + "'", double62 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2564.166666666667d + "'", double63 == 2564.166666666667d);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 50.0d + "'", double96 == 50.0d);
    }

    @Test
    public void test02092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02092");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        double double14 = secondMoment8.getResult();
        secondMoment8.clear();
        double double16 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        double[] doubleArray34 = new double[] { 0L, (byte) 10 };
        double double35 = variance30.evaluate(doubleArray34);
        double double37 = variance27.evaluate(doubleArray34, (double) 10L);
        double double38 = variance25.evaluate(doubleArray34);
        double double39 = variance20.evaluate(doubleArray34);
        // The following exception was thrown during execution in test generation
        try {
            double double43 = variance18.evaluate(doubleArray34, 50.0d, (int) '4', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
    }

    @Test
    public void test02093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02093");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        double double5 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        secondMoment3.clear();
        secondMoment3.increment((double) 2L);
        double double10 = secondMoment3.getResult();
        secondMoment3.increment(50.0d);
        double double13 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double17 = secondMoment16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        secondMoment16.increment(2024039.120370371d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        variance22.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance27.increment((-1.0d));
        variance27.setBiasCorrected(false);
        boolean boolean32 = variance27.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean34 = variance27.equals((java.lang.Object) secondMoment33);
        double double35 = secondMoment33.getResult();
        secondMoment33.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment33);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        double double41 = secondMoment39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment39);
        secondMoment39.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance45.increment((-1.0d));
        variance45.setBiasCorrected(false);
        boolean boolean50 = variance45.isBiasCorrected();
        double[] doubleArray51 = new double[] {};
        double double52 = variance45.evaluate(doubleArray51);
        secondMoment39.incrementAll(doubleArray51);
        double double54 = variance37.evaluate(doubleArray51);
        double double55 = variance22.evaluate(doubleArray51);
        secondMoment16.incrementAll(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance58.increment((-1.0d));
        variance58.setBiasCorrected(false);
        boolean boolean63 = variance58.isBiasCorrected();
        double[] doubleArray64 = new double[] {};
        double double65 = variance58.evaluate(doubleArray64);
        variance58.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray76 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double77 = variance69.evaluate(doubleArray76);
        double double78 = variance58.evaluate(doubleArray76);
        secondMoment16.incrementAll(doubleArray76);
        double double80 = variance15.evaluate(doubleArray76);
        java.lang.Class<?> wildcardClass81 = variance15.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1152.0d + "'", double13 == 1152.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2136.8055555555557d + "'", double77 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2136.8055555555557d + "'", double78 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 2564.166666666667d + "'", double80 == 2564.166666666667d);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test02094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02094");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        double double4 = variance1.getResult();
        variance1.clear();
        double double6 = variance1.getResult();
        double double7 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double11 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.setBiasCorrected(false);
        boolean boolean20 = variance15.isBiasCorrected();
        double[] doubleArray21 = new double[] {};
        double double22 = variance15.evaluate(doubleArray21);
        secondMoment9.incrementAll(doubleArray21);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        double[] doubleArray30 = new double[] { 0L, (byte) 10 };
        double double31 = variance26.evaluate(doubleArray30);
        secondMoment9.incrementAll(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment33);
        long long35 = secondMoment33.getN();
        secondMoment33.clear();
        secondMoment33.increment(10.0d);
        double double39 = secondMoment33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double44 = variance43.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double47 = variance46.getResult();
        double[] doubleArray50 = new double[] { 0L, (byte) 10 };
        double double51 = variance46.evaluate(doubleArray50);
        double double53 = variance43.evaluate(doubleArray50, (double) 10L);
        double double54 = variance41.evaluate(doubleArray50);
        double[] doubleArray58 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double59 = variance41.evaluate(doubleArray58);
        double double60 = secondMoment33.evaluate(doubleArray58);
        long long61 = secondMoment33.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment62);
        long long64 = secondMoment62.getN();
        secondMoment62.clear();
        double double66 = secondMoment62.getResult();
        secondMoment62.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment62);
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance71.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double77 = variance76.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double80 = variance79.getResult();
        double[] doubleArray83 = new double[] { 0L, (byte) 10 };
        double double84 = variance79.evaluate(doubleArray83);
        double double86 = variance76.evaluate(doubleArray83, (double) 10L);
        double double87 = variance74.evaluate(doubleArray83);
        double double88 = variance71.evaluate(doubleArray83);
        variance69.incrementAll(doubleArray83);
        secondMoment33.incrementAll(doubleArray83);
        secondMoment9.incrementAll(doubleArray83);
        double double93 = variance1.evaluate(doubleArray83, 2.443763344484173E15d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2024039.120370371d + "'", double59 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 4048078.240740742d + "'", double60 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 3L + "'", long61 == 3L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
    }

    @Test
    public void test02095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02095");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.increment((double) 10L);
        variance1.increment(1142553.1483410494d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        long long9 = secondMoment7.getN();
        secondMoment7.clear();
        secondMoment7.clear();
        double double12 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.setBiasCorrected(false);
        boolean boolean20 = variance15.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        double double24 = secondMoment22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment22);
        secondMoment22.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        double[] doubleArray32 = new double[] { 0L, (byte) 10 };
        double double33 = variance28.evaluate(doubleArray32);
        secondMoment22.incrementAll(doubleArray32);
        boolean boolean35 = variance15.equals((java.lang.Object) secondMoment22);
        variance15.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment38);
        double double40 = secondMoment38.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment38);
        secondMoment38.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        double[] doubleArray48 = new double[] { 0L, (byte) 10 };
        double double49 = variance44.evaluate(doubleArray48);
        secondMoment38.incrementAll(doubleArray48);
        double double51 = variance15.evaluate(doubleArray48);
        double double52 = variance13.evaluate(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance54.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double60 = variance59.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double63 = variance62.getResult();
        double[] doubleArray66 = new double[] { 0L, (byte) 10 };
        double double67 = variance62.evaluate(doubleArray66);
        double double69 = variance59.evaluate(doubleArray66, (double) 10L);
        double double70 = variance57.evaluate(doubleArray66);
        double double71 = variance54.evaluate(doubleArray66);
        double double73 = variance13.evaluate(doubleArray66, 2024039.1203703713d);
        // The following exception was thrown during execution in test generation
        try {
            double double77 = variance1.evaluate(doubleArray66, 0.0d, 100, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 25.0d + "'", double51 == 25.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0009765625d + "'", double73 == 50.0009765625d);
    }

    @Test
    public void test02096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02096");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance7.increment((-1.0d));
        variance7.setBiasCorrected(false);
        boolean boolean12 = variance7.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean14 = variance7.equals((java.lang.Object) secondMoment13);
        variance7.increment((double) 100L);
        variance7.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        double[] doubleArray29 = new double[] { 0L, (byte) 10 };
        double double30 = variance25.evaluate(doubleArray29);
        double double32 = variance22.evaluate(doubleArray29, (double) 10L);
        double double33 = variance20.evaluate(doubleArray29);
        double[] doubleArray37 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double38 = variance20.evaluate(doubleArray37);
        variance7.incrementAll(doubleArray37);
        double double40 = variance5.evaluate(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        long long44 = variance42.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double46 = secondMoment45.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance48.increment((-1.0d));
        variance48.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double56 = variance55.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double59 = variance58.getResult();
        double[] doubleArray62 = new double[] { 0L, (byte) 10 };
        double double63 = variance58.evaluate(doubleArray62);
        double double65 = variance55.evaluate(doubleArray62, (double) 10L);
        double double66 = variance53.evaluate(doubleArray62);
        double double67 = variance48.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double70 = variance69.getResult();
        double[] doubleArray73 = new double[] { 0L, (byte) 10 };
        double double74 = variance69.evaluate(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray83 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double84 = variance76.evaluate(doubleArray83);
        double double85 = variance69.evaluate(doubleArray83);
        double double86 = variance48.evaluate(doubleArray83);
        double double87 = secondMoment45.evaluate(doubleArray83);
        variance42.incrementAll(doubleArray83);
        double double89 = variance5.evaluate(doubleArray83);
        long long90 = variance5.getN();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2024039.120370371d + "'", double38 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2024039.120370371d + "'", double40 == 2024039.120370371d);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2136.8055555555557d + "'", double84 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2564.166666666667d + "'", double85 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2564.166666666667d + "'", double86 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 12820.833333333334d + "'", double87 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 2564.166666666667d + "'", double89 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
    }

    @Test
    public void test02097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02097");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        long long9 = secondMoment7.getN();
        double double10 = secondMoment7.getResult();
        secondMoment7.increment(24.666666666666668d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test02098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02098");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        double[] doubleArray12 = new double[] { 0L, (byte) 10 };
        double double13 = variance8.evaluate(doubleArray12);
        secondMoment2.incrementAll(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.clear();
        secondMoment2.increment(Double.NaN);
        secondMoment2.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.setBiasCorrected(false);
        boolean boolean28 = variance23.isBiasCorrected();
        double[] doubleArray29 = new double[] {};
        double double30 = variance23.evaluate(doubleArray29);
        variance23.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean41 = variance39.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        double[] doubleArray52 = new double[] { 0L, (byte) 10 };
        double double53 = variance48.evaluate(doubleArray52);
        double double55 = variance45.evaluate(doubleArray52, (double) 10L);
        double double56 = variance43.evaluate(doubleArray52);
        double[] doubleArray60 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double61 = variance43.evaluate(doubleArray60);
        double double63 = variance39.evaluate(doubleArray60, (double) (byte) 1);
        double double65 = variance34.evaluate(doubleArray60, 4048078.240740742d);
        double double66 = variance23.evaluate(doubleArray60);
        boolean boolean67 = secondMoment2.equals((java.lang.Object) variance23);
        long long68 = variance23.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double71 = variance70.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance75.increment((-1.0d));
        variance75.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance82 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double83 = variance82.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance85 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double86 = variance85.getResult();
        double[] doubleArray89 = new double[] { 0L, (byte) 10 };
        double double90 = variance85.evaluate(doubleArray89);
        double double92 = variance82.evaluate(doubleArray89, (double) 10L);
        double double93 = variance80.evaluate(doubleArray89);
        double double94 = variance75.evaluate(doubleArray89);
        variance73.incrementAll(doubleArray89);
        double double96 = variance70.evaluate(doubleArray89);
        double double97 = variance23.evaluate(doubleArray89);
        boolean boolean98 = variance23.isBiasCorrected();
        long long99 = variance23.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2024039.120370371d + "'", double61 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2024039.120370371d + "'", double63 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2024039.12109375d + "'", double65 == 2024039.12109375d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1349359.4135802474d + "'", double66 == 1349359.4135802474d);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 50.0d + "'", double93 == 50.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 50.0d + "'", double94 == 50.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 50.0d + "'", double96 == 50.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 25.0d + "'", double97 == 25.0d);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 0L + "'", long99 == 0L);
    }

    @Test
    public void test02099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02099");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        double double14 = secondMoment8.getResult();
        double double15 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        double double18 = secondMoment16.getResult();
        boolean boolean19 = secondMoment8.equals((java.lang.Object) double18);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        double double21 = variance20.getResult();
        double double22 = variance20.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        long long25 = secondMoment23.getN();
        secondMoment23.clear();
        secondMoment23.increment(10.0d);
        secondMoment23.increment(25.0d);
        secondMoment23.clear();
        secondMoment23.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        secondMoment23.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        double[] doubleArray46 = new double[] { 0L, (byte) 10 };
        double double47 = variance42.evaluate(doubleArray46);
        double double49 = variance39.evaluate(doubleArray46, (double) 10L);
        double double50 = variance37.evaluate(doubleArray46);
        variance37.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean56 = variance54.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray65 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double66 = variance58.evaluate(doubleArray65);
        double double67 = variance54.evaluate(doubleArray65);
        variance37.incrementAll(doubleArray65);
        double double69 = variance37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance71.increment((-1.0d));
        variance71.setBiasCorrected(false);
        boolean boolean76 = variance71.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment77 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean78 = variance71.equals((java.lang.Object) secondMoment77);
        secondMoment77.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment81 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance82 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment81);
        long long83 = secondMoment81.getN();
        secondMoment81.clear();
        double double85 = secondMoment81.getResult();
        secondMoment81.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance88 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment81);
        double[] doubleArray89 = new double[] {};
        double double90 = secondMoment81.evaluate(doubleArray89);
        double double91 = secondMoment77.evaluate(doubleArray89);
        double double92 = variance37.evaluate(doubleArray89);
        variance35.incrementAll(doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            double double96 = variance20.evaluate(doubleArray89, (int) (short) 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.5d + "'", double15 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.5d + "'", double21 == 0.5d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.5d + "'", double22 == 0.5d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 2136.8055555555557d + "'", double66 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2564.166666666667d + "'", double67 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2310.1428571428573d + "'", double69 == 2310.1428571428573d);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
    }

    @Test
    public void test02100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02100");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        long long4 = secondMoment2.getN();
        secondMoment2.clear();
        secondMoment2.increment(10.0d);
        double double8 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean14 = variance12.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double24 = variance16.evaluate(doubleArray23);
        double double25 = variance12.evaluate(doubleArray23);
        variance12.setBiasCorrected(false);
        variance12.increment((double) (byte) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance31.increment((-1.0d));
        variance31.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean39 = variance37.equals((java.lang.Object) (short) 10);
        boolean boolean40 = variance31.equals((java.lang.Object) variance37);
        long long41 = variance37.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean45 = variance43.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray54 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double55 = variance47.evaluate(doubleArray54);
        double double56 = variance43.evaluate(doubleArray54);
        double double57 = variance37.evaluate(doubleArray54);
        double double59 = variance12.evaluate(doubleArray54, 24.5d);
        // The following exception was thrown during execution in test generation
        try {
            double double63 = variance10.evaluate(doubleArray54, 2564.1666666030883d, 100, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2136.8055555555557d + "'", double24 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2564.166666666667d + "'", double25 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2136.8055555555557d + "'", double55 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2564.166666666667d + "'", double56 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2564.166666666667d + "'", double57 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2136.8055555555557d + "'", double59 == 2136.8055555555557d);
    }

    @Test
    public void test02101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02101");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance6.clear();
        double double8 = variance6.getResult();
        boolean boolean9 = variance6.isBiasCorrected();
        double double10 = variance6.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        long long14 = secondMoment12.getN();
        secondMoment12.clear();
        secondMoment12.clear();
        secondMoment12.increment((double) (byte) 100);
        long long19 = secondMoment12.getN();
        double[] doubleArray21 = new double[] { 2024039.1203703713d };
        double double22 = secondMoment12.evaluate(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        long long26 = secondMoment24.getN();
        secondMoment24.clear();
        secondMoment24.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        variance30.setBiasCorrected(false);
        boolean boolean33 = secondMoment12.equals((java.lang.Object) variance30);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment35);
        double double37 = secondMoment35.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment35);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment40);
        double double42 = secondMoment40.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment40);
        secondMoment40.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double47 = variance46.getResult();
        double[] doubleArray50 = new double[] { 0L, (byte) 10 };
        double double51 = variance46.evaluate(doubleArray50);
        secondMoment40.incrementAll(doubleArray50);
        double double53 = variance38.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance56.increment((-1.0d));
        variance56.setBiasCorrected(false);
        boolean boolean61 = variance56.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean63 = variance56.equals((java.lang.Object) secondMoment62);
        secondMoment62.increment((double) (short) 0);
        secondMoment62.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray76 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double77 = variance69.evaluate(doubleArray76);
        double double78 = secondMoment62.evaluate(doubleArray76);
        secondMoment54.incrementAll(doubleArray76);
        variance38.incrementAll(doubleArray76);
        variance38.increment(50.0009765625d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment84 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance85 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment84);
        double double86 = secondMoment84.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance87 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment84);
        secondMoment84.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance90 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double91 = variance90.getResult();
        double[] doubleArray94 = new double[] { 0L, (byte) 10 };
        double double95 = variance90.evaluate(doubleArray94);
        secondMoment84.incrementAll(doubleArray94);
        double double97 = variance38.evaluate(doubleArray94);
        variance30.incrementAll(doubleArray94);
        double double99 = variance6.evaluate(doubleArray94);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 25.0d + "'", double53 == 25.0d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2136.8055555555557d + "'", double77 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 12820.833333333334d + "'", double78 == 12820.833333333334d);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue(Double.isNaN(double91));
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 50.0d + "'", double95 == 50.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 25.0d + "'", double97 == 25.0d);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 50.0d + "'", double99 == 50.0d);
    }

    @Test
    public void test02102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02102");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        secondMoment1.increment(4048078.240740742d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double double7 = secondMoment1.getResult();
        double double8 = secondMoment1.getResult();
        double double9 = secondMoment1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test02103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02103");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        long long8 = secondMoment6.getN();
        secondMoment6.clear();
        double double10 = secondMoment6.getResult();
        secondMoment6.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        double[] doubleArray14 = new double[] {};
        double double15 = secondMoment6.evaluate(doubleArray14);
        secondMoment0.incrementAll(doubleArray14);
        long long17 = secondMoment0.getN();
        secondMoment0.increment(0.0d);
        secondMoment0.clear();
        long long21 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        double[] doubleArray32 = new double[] { 0L, (byte) 10 };
        double double33 = variance28.evaluate(doubleArray32);
        double double35 = variance25.evaluate(doubleArray32, (double) 10L);
        double double36 = variance23.evaluate(doubleArray32);
        double[] doubleArray40 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double41 = variance23.evaluate(doubleArray40);
        // The following exception was thrown during execution in test generation
        try {
            double double44 = secondMoment0.evaluate(doubleArray40, (int) (byte) 1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2024039.120370371d + "'", double41 == 2024039.120370371d);
    }

    @Test
    public void test02104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02104");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        long long2 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance4.increment((-1.0d));
        variance4.setBiasCorrected(false);
        boolean boolean9 = variance4.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean11 = variance4.equals((java.lang.Object) secondMoment10);
        secondMoment10.increment((double) (short) 0);
        secondMoment10.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray24 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double25 = variance17.evaluate(doubleArray24);
        double double26 = secondMoment10.evaluate(doubleArray24);
        long long27 = secondMoment10.getN();
        long long28 = secondMoment10.getN();
        secondMoment10.clear();
        double double30 = secondMoment10.getResult();
        secondMoment10.clear();
        boolean boolean32 = secondMoment0.equals((java.lang.Object) secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.setBiasCorrected(false);
        boolean boolean39 = variance34.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        double[] doubleArray48 = new double[] { 0L, (byte) 10 };
        double double49 = variance44.evaluate(doubleArray48);
        double double51 = variance41.evaluate(doubleArray48, (double) 10L);
        double double52 = variance34.evaluate(doubleArray48);
        variance34.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray63 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double64 = variance56.evaluate(doubleArray63);
        double double65 = variance34.evaluate(doubleArray63);
        java.lang.Class<?> wildcardClass66 = doubleArray63.getClass();
        boolean boolean67 = secondMoment10.equals((java.lang.Object) wildcardClass66);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        long long69 = variance68.getN();
        long long70 = variance68.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2136.8055555555557d + "'", double25 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 12820.833333333334d + "'", double26 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 6L + "'", long27 == 6L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 6L + "'", long28 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 25.0d + "'", double52 == 25.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2136.8055555555557d + "'", double64 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2136.8055555555557d + "'", double65 == 2136.8055555555557d);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
    }

    @Test
    public void test02105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02105");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double9 = variance8.getResult();
        double double10 = variance8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance12.increment((-1.0d));
        variance12.setBiasCorrected(false);
        boolean boolean17 = variance12.isBiasCorrected();
        double[] doubleArray18 = new double[] {};
        double double19 = variance12.evaluate(doubleArray18);
        variance12.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean31 = variance24.equals((java.lang.Object) secondMoment30);
        double double32 = secondMoment30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        double[] doubleArray41 = new double[] { 0L, (byte) 10 };
        double double42 = variance37.evaluate(doubleArray41);
        double double44 = variance34.evaluate(doubleArray41, (double) 10L);
        double double47 = secondMoment30.evaluate(doubleArray41, (int) (short) 0, 1);
        long long48 = secondMoment30.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment30);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        double[] doubleArray58 = new double[] { 0L, (byte) 10 };
        double double59 = variance54.evaluate(doubleArray58);
        double double61 = variance51.evaluate(doubleArray58, (double) 10L);
        long long62 = variance51.getN();
        variance51.increment((double) 0L);
        double[] doubleArray66 = new double[] { 10.0d };
        variance51.incrementAll(doubleArray66);
        double double68 = variance49.evaluate(doubleArray66);
        double double72 = variance12.evaluate(doubleArray66, (double) 1L, 0, (int) (byte) 1);
        double double73 = variance8.evaluate(doubleArray66);
        boolean boolean74 = variance8.isBiasCorrected();
        variance8.increment(1.4545805531418566E13d);
        double double77 = variance8.getResult();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
    }

    @Test
    public void test02106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02106");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.increment(50.0d);
        secondMoment1.clear();
        double double8 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        double double12 = secondMoment10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment10);
        secondMoment10.clear();
        secondMoment10.increment((double) 2L);
        double double17 = secondMoment10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance19.increment((-1.0d));
        long long22 = variance19.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance27.increment((-1.0d));
        variance27.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        double[] doubleArray41 = new double[] { 0L, (byte) 10 };
        double double42 = variance37.evaluate(doubleArray41);
        double double44 = variance34.evaluate(doubleArray41, (double) 10L);
        double double45 = variance32.evaluate(doubleArray41);
        double double46 = variance27.evaluate(doubleArray41);
        variance25.incrementAll(doubleArray41);
        variance23.incrementAll(doubleArray41);
        double double49 = variance19.evaluate(doubleArray41);
        boolean boolean50 = secondMoment10.equals((java.lang.Object) doubleArray41);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment1.incrementAll(doubleArray41, (int) (byte) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test02107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02107");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        long long8 = secondMoment6.getN();
        secondMoment6.clear();
        double double10 = secondMoment6.getResult();
        secondMoment6.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        double[] doubleArray14 = new double[] {};
        double double15 = secondMoment6.evaluate(doubleArray14);
        secondMoment0.incrementAll(doubleArray14);
        secondMoment0.increment((double) (-1L));
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.setBiasCorrected(false);
        boolean boolean25 = variance20.isBiasCorrected();
        double double26 = variance20.getResult();
        variance20.setBiasCorrected(true);
        double double29 = variance20.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment30);
        long long32 = secondMoment30.getN();
        secondMoment30.clear();
        double double34 = secondMoment30.getResult();
        secondMoment30.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment30);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance39.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        double[] doubleArray51 = new double[] { 0L, (byte) 10 };
        double double52 = variance47.evaluate(doubleArray51);
        double double54 = variance44.evaluate(doubleArray51, (double) 10L);
        double double55 = variance42.evaluate(doubleArray51);
        double double56 = variance39.evaluate(doubleArray51);
        variance37.incrementAll(doubleArray51);
        variance37.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance60.increment((-1.0d));
        variance60.setBiasCorrected(false);
        boolean boolean65 = variance60.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double68 = variance67.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double71 = variance70.getResult();
        double[] doubleArray74 = new double[] { 0L, (byte) 10 };
        double double75 = variance70.evaluate(doubleArray74);
        double double77 = variance67.evaluate(doubleArray74, (double) 10L);
        double double78 = variance60.evaluate(doubleArray74);
        double double80 = variance37.evaluate(doubleArray74, 2310.1428571428573d);
        variance20.incrementAll(doubleArray74, (int) (byte) 1, (int) (short) 1);
        double double84 = secondMoment0.evaluate(doubleArray74);
        double double85 = secondMoment0.getResult();
        double double86 = secondMoment0.getResult();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 25.0d + "'", double78 == 25.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
    }

    @Test
    public void test02108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02108");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        long long4 = secondMoment2.getN();
        secondMoment2.clear();
        double double6 = secondMoment2.getResult();
        secondMoment2.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double[] doubleArray10 = new double[] {};
        double double11 = secondMoment2.evaluate(doubleArray10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        double double15 = secondMoment2.getResult();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test02109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02109");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        double double6 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        double double20 = variance10.evaluate(doubleArray17, (double) 10L);
        double double21 = variance8.evaluate(doubleArray17);
        double[] doubleArray25 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double26 = variance8.evaluate(doubleArray25);
        double double27 = secondMoment0.evaluate(doubleArray25);
        long long28 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance30.increment((-1.0d));
        long long33 = variance30.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance38.increment((-1.0d));
        variance38.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        double[] doubleArray52 = new double[] { 0L, (byte) 10 };
        double double53 = variance48.evaluate(doubleArray52);
        double double55 = variance45.evaluate(doubleArray52, (double) 10L);
        double double56 = variance43.evaluate(doubleArray52);
        double double57 = variance38.evaluate(doubleArray52);
        variance36.incrementAll(doubleArray52);
        variance34.incrementAll(doubleArray52);
        double double60 = variance30.evaluate(doubleArray52);
        double double63 = secondMoment0.evaluate(doubleArray52, (int) (byte) 0, 1);
        double double64 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment66 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment66);
        long long68 = secondMoment66.getN();
        secondMoment66.clear();
        secondMoment66.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment72);
        long long74 = secondMoment72.getN();
        secondMoment72.clear();
        double double76 = secondMoment72.getResult();
        secondMoment72.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment72);
        double[] doubleArray80 = new double[] {};
        double double81 = secondMoment72.evaluate(doubleArray80);
        secondMoment66.incrementAll(doubleArray80);
        secondMoment66.increment((double) (-1L));
        org.apache.commons.math.stat.descriptive.moment.Variance variance85 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment66);
        boolean boolean86 = secondMoment0.equals((java.lang.Object) false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance87 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance87.increment((double) 2L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2024039.120370371d + "'", double26 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 4048078.240740742d + "'", double27 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 3L + "'", long28 == 3L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test02110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02110");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double9 = variance1.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray18 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double19 = variance11.evaluate(doubleArray18);
        double double21 = variance1.evaluate(doubleArray18, (double) '#');
        double double22 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        variance24.increment((double) 100L);
        boolean boolean31 = variance24.isBiasCorrected();
        variance24.clear();
        variance24.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment35);
        long long37 = secondMoment35.getN();
        secondMoment35.clear();
        secondMoment35.clear();
        secondMoment35.increment((double) (byte) 100);
        secondMoment35.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment35);
        secondMoment35.clear();
        secondMoment35.increment(2024039.12109375d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment35);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance49.increment((-1.0d));
        variance49.setBiasCorrected(false);
        boolean boolean54 = variance49.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean56 = variance49.equals((java.lang.Object) secondMoment55);
        variance49.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean62 = variance60.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray71 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double72 = variance64.evaluate(doubleArray71);
        double double73 = variance60.evaluate(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance75.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double81 = variance80.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double84 = variance83.getResult();
        double[] doubleArray87 = new double[] { 0L, (byte) 10 };
        double double88 = variance83.evaluate(doubleArray87);
        double double90 = variance80.evaluate(doubleArray87, (double) 10L);
        double double91 = variance78.evaluate(doubleArray87);
        double double92 = variance75.evaluate(doubleArray87);
        double double93 = variance60.evaluate(doubleArray87);
        double double95 = variance49.evaluate(doubleArray87, (double) 0L);
        double double96 = secondMoment35.evaluate(doubleArray87);
        double double97 = variance24.evaluate(doubleArray87);
        variance1.incrementAll(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2136.8055555555557d + "'", double9 == 2136.8055555555557d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2136.8055555555557d + "'", double19 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2136.8055555555557d + "'", double21 == 2136.8055555555557d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2136.8055555555557d + "'", double72 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 2564.166666666667d + "'", double73 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 50.0d + "'", double93 == 50.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 25.0d + "'", double95 == 25.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 50.0d + "'", double96 == 50.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 25.0d + "'", double97 == 25.0d);
    }

    @Test
    public void test02111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02111");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        double double8 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment6);
        secondMoment6.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        double[] doubleArray16 = new double[] { 0L, (byte) 10 };
        double double17 = variance12.evaluate(doubleArray16);
        secondMoment6.incrementAll(doubleArray16);
        double double19 = variance4.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance22.increment((-1.0d));
        variance22.setBiasCorrected(false);
        boolean boolean27 = variance22.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean29 = variance22.equals((java.lang.Object) secondMoment28);
        secondMoment28.increment((double) (short) 0);
        secondMoment28.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray42 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double43 = variance35.evaluate(doubleArray42);
        double double44 = secondMoment28.evaluate(doubleArray42);
        secondMoment20.incrementAll(doubleArray42);
        variance4.incrementAll(doubleArray42);
        variance4.increment(0.5d);
        boolean boolean49 = variance4.isBiasCorrected();
        boolean boolean50 = variance4.isBiasCorrected();
        variance4.increment(0.0d);
        java.lang.Class<?> wildcardClass53 = variance4.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 25.0d + "'", double19 == 25.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2136.8055555555557d + "'", double43 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 12820.833333333334d + "'", double44 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test02112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02112");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean8 = variance6.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        double double22 = variance12.evaluate(doubleArray19, (double) 10L);
        double double23 = variance10.evaluate(doubleArray19);
        double[] doubleArray27 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double28 = variance10.evaluate(doubleArray27);
        double double30 = variance6.evaluate(doubleArray27, (double) (byte) 1);
        double double32 = variance1.evaluate(doubleArray27, 4048078.240740742d);
        variance1.clear();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 2024039.120370371d + "'", double28 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2024039.120370371d + "'", double30 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2024039.12109375d + "'", double32 == 2024039.12109375d);
    }

    @Test
    public void test02113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02113");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double[] doubleArray7 = new double[] {};
        double double8 = variance1.evaluate(doubleArray7);
        variance1.increment((double) 1.0f);
        variance1.increment((double) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.setBiasCorrected(false);
        boolean boolean20 = variance15.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        double double24 = secondMoment22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment22);
        secondMoment22.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        double[] doubleArray32 = new double[] { 0L, (byte) 10 };
        double double33 = variance28.evaluate(doubleArray32);
        secondMoment22.incrementAll(doubleArray32);
        boolean boolean35 = variance15.equals((java.lang.Object) secondMoment22);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance37.increment((-1.0d));
        variance37.setBiasCorrected(false);
        boolean boolean42 = variance37.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean44 = variance37.equals((java.lang.Object) secondMoment43);
        boolean boolean45 = secondMoment22.equals((java.lang.Object) boolean44);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment22);
        variance46.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance50.increment((-1.0d));
        variance50.setBiasCorrected(false);
        boolean boolean55 = variance50.isBiasCorrected();
        double[] doubleArray56 = new double[] {};
        double double57 = variance50.evaluate(doubleArray56);
        variance50.setBiasCorrected(false);
        variance50.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment62);
        double double64 = secondMoment62.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment62);
        secondMoment62.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double69 = variance68.getResult();
        double[] doubleArray72 = new double[] { 0L, (byte) 10 };
        double double73 = variance68.evaluate(doubleArray72);
        secondMoment62.incrementAll(doubleArray72);
        variance50.incrementAll(doubleArray72);
        double[] doubleArray76 = new double[] {};
        double double77 = variance50.evaluate(doubleArray76);
        double double79 = variance46.evaluate(doubleArray76, 2564.166666666686d);
        double double82 = variance1.evaluate(doubleArray76, (int) (short) 0, (int) (short) 0);
        double[] doubleArray83 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double87 = variance1.evaluate(doubleArray83, (double) 3L, 10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue(Double.isNaN(double82));
    }

    @Test
    public void test02114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02114");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double2 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance5.increment((-1.0d));
        variance5.setBiasCorrected(false);
        boolean boolean10 = variance5.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean12 = variance5.equals((java.lang.Object) secondMoment11);
        variance5.increment((double) 100L);
        variance5.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double24 = variance23.getResult();
        double[] doubleArray27 = new double[] { 0L, (byte) 10 };
        double double28 = variance23.evaluate(doubleArray27);
        double double30 = variance20.evaluate(doubleArray27, (double) 10L);
        double double31 = variance18.evaluate(doubleArray27);
        double[] doubleArray35 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double36 = variance18.evaluate(doubleArray35);
        variance5.incrementAll(doubleArray35);
        variance3.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance43.increment((-1.0d));
        variance43.setBiasCorrected(false);
        boolean boolean48 = variance43.isBiasCorrected();
        double[] doubleArray49 = new double[] {};
        double double50 = variance43.evaluate(doubleArray49);
        variance43.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray61 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double62 = variance54.evaluate(doubleArray61);
        double double63 = variance43.evaluate(doubleArray61);
        double double67 = variance40.evaluate(doubleArray61, (double) (short) 100, (int) (byte) 0, (int) (byte) 1);
        variance3.incrementAll(doubleArray61, (int) (short) 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance72.increment((-1.0d));
        variance72.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray85 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double86 = variance78.evaluate(doubleArray85);
        variance72.incrementAll(doubleArray85);
        // The following exception was thrown during execution in test generation
        try {
            double double91 = variance3.evaluate(doubleArray85, (double) 4L, (int) (byte) 1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 2024039.120370371d + "'", double36 == 2024039.120370371d);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2136.8055555555557d + "'", double62 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2136.8055555555557d + "'", double63 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2136.8055555555557d + "'", double86 == 2136.8055555555557d);
    }

    @Test
    public void test02115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02115");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        boolean boolean8 = secondMoment2.equals((java.lang.Object) (byte) 0);
        double double9 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        double[] doubleArray16 = new double[] { 0L, (byte) 10 };
        double double17 = variance12.evaluate(doubleArray16);
        double double18 = variance12.getResult();
        double double19 = variance12.getResult();
        variance12.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment31);
        double double33 = secondMoment31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment31);
        secondMoment31.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        double[] doubleArray41 = new double[] { 0L, (byte) 10 };
        double double42 = variance37.evaluate(doubleArray41);
        secondMoment31.incrementAll(doubleArray41);
        boolean boolean44 = variance24.equals((java.lang.Object) secondMoment31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance46.increment((-1.0d));
        variance46.setBiasCorrected(false);
        boolean boolean51 = variance46.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean53 = variance46.equals((java.lang.Object) secondMoment52);
        boolean boolean54 = secondMoment31.equals((java.lang.Object) boolean53);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment31);
        variance55.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance59.increment((-1.0d));
        variance59.setBiasCorrected(false);
        boolean boolean64 = variance59.isBiasCorrected();
        double[] doubleArray65 = new double[] {};
        double double66 = variance59.evaluate(doubleArray65);
        variance59.setBiasCorrected(false);
        variance59.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment71 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment71);
        double double73 = secondMoment71.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment71);
        secondMoment71.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double78 = variance77.getResult();
        double[] doubleArray81 = new double[] { 0L, (byte) 10 };
        double double82 = variance77.evaluate(doubleArray81);
        secondMoment71.incrementAll(doubleArray81);
        variance59.incrementAll(doubleArray81);
        double[] doubleArray85 = new double[] {};
        double double86 = variance59.evaluate(doubleArray85);
        double double88 = variance55.evaluate(doubleArray85, 2564.166666666686d);
        double double89 = variance12.evaluate(doubleArray85);
        boolean boolean90 = variance10.equals((java.lang.Object) variance12);
        variance12.increment((double) (short) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test02116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02116");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double2 = secondMoment0.getResult();
        boolean boolean4 = secondMoment0.equals((java.lang.Object) 1.0d);
        double double5 = secondMoment0.getResult();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        long long9 = secondMoment7.getN();
        secondMoment7.clear();
        secondMoment7.clear();
        secondMoment7.increment((double) (byte) 100);
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        secondMoment7.increment(2136.805555555555d);
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.setBiasCorrected(false);
        variance20.increment((double) 100L);
        boolean boolean27 = variance20.isBiasCorrected();
        boolean boolean28 = variance20.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray37 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double38 = variance30.evaluate(doubleArray37);
        double double40 = variance20.evaluate(doubleArray37, (double) (byte) 10);
        secondMoment7.incrementAll(doubleArray37);
        double double42 = secondMoment0.evaluate(doubleArray37);
        double double43 = secondMoment0.getResult();
        secondMoment0.increment(1322.6666666666667d);
        long long46 = secondMoment0.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2136.8055555555557d + "'", double38 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2136.8055555555557d + "'", double40 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 12820.833333333334d + "'", double42 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 12820.833333333334d + "'", double43 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 7L + "'", long46 == 7L);
    }

    @Test
    public void test02117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02117");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.clear();
        secondMoment0.increment(2024039.12109375d);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance13.increment(1142553.1483410494d);
        variance13.increment(13860.857142857143d);
        variance13.increment((double) 1.0f);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test02118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02118");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double22 = variance14.evaluate(doubleArray21);
        double double23 = secondMoment7.evaluate(doubleArray21);
        long long24 = secondMoment7.getN();
        long long25 = secondMoment7.getN();
        long long26 = secondMoment7.getN();
        long long27 = secondMoment7.getN();
        long long28 = secondMoment7.getN();
        secondMoment7.clear();
        secondMoment7.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        long long34 = secondMoment32.getN();
        secondMoment32.clear();
        secondMoment32.clear();
        secondMoment32.increment((double) (byte) 100);
        secondMoment32.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        double double41 = variance40.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double43 = secondMoment42.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment42);
        variance44.increment(2564.166666666667d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        double[] doubleArray55 = new double[] { 0L, (byte) 10 };
        double double56 = variance51.evaluate(doubleArray55);
        double double58 = variance48.evaluate(doubleArray55, (double) 10L);
        long long59 = variance48.getN();
        variance48.increment((double) 0L);
        double[] doubleArray63 = new double[] { 10.0d };
        variance48.incrementAll(doubleArray63);
        double double66 = variance44.evaluate(doubleArray63, (double) 2L);
        double double67 = variance40.evaluate(doubleArray63);
        // The following exception was thrown during execution in test generation
        try {
            double double70 = secondMoment7.evaluate(doubleArray63, (-1), (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2136.8055555555557d + "'", double22 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 12820.833333333334d + "'", double23 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 6L + "'", long24 == 6L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 6L + "'", long27 == 6L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 6L + "'", long28 == 6L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
    }

    @Test
    public void test02119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02119");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray12 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double13 = variance5.evaluate(doubleArray12);
        double double14 = variance1.evaluate(doubleArray12);
        variance1.setBiasCorrected(false);
        variance1.increment((double) (byte) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean28 = variance26.equals((java.lang.Object) (short) 10);
        boolean boolean29 = variance20.equals((java.lang.Object) variance26);
        long long30 = variance26.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean34 = variance32.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray43 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double44 = variance36.evaluate(doubleArray43);
        double double45 = variance32.evaluate(doubleArray43);
        double double46 = variance26.evaluate(doubleArray43);
        double double48 = variance1.evaluate(doubleArray43, 24.5d);
        double[] doubleArray49 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double50 = variance1.evaluate(doubleArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 2136.8055555555557d + "'", double13 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2564.166666666667d + "'", double14 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2136.8055555555557d + "'", double44 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2564.166666666667d + "'", double45 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2564.166666666667d + "'", double46 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2136.8055555555557d + "'", double48 == 2136.8055555555557d);
    }

    @Test
    public void test02120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02120");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        secondMoment8.incrementAll(doubleArray18);
        boolean boolean21 = variance1.equals((java.lang.Object) secondMoment8);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        double double26 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment24);
        secondMoment24.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        double[] doubleArray34 = new double[] { 0L, (byte) 10 };
        double double35 = variance30.evaluate(doubleArray34);
        secondMoment24.incrementAll(doubleArray34);
        double double37 = variance1.evaluate(doubleArray34);
        variance1.setBiasCorrected(false);
        long long40 = variance1.getN();
        variance1.setBiasCorrected(false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 25.0d + "'", double37 == 25.0d);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
    }

    @Test
    public void test02121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02121");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double4 = variance3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        double[] doubleArray10 = new double[] { 0L, (byte) 10 };
        double double11 = variance6.evaluate(doubleArray10);
        double double13 = variance3.evaluate(doubleArray10, (double) 10L);
        double double14 = variance1.evaluate(doubleArray10);
        variance1.increment(10.0d);
        double double17 = variance1.getResult();
        long long18 = variance1.getN();
        variance1.increment(100.0d);
        boolean boolean21 = variance1.isBiasCorrected();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test02122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02122");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        boolean boolean12 = variance11.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance16.increment((-1.0d));
        variance16.setBiasCorrected(false);
        boolean boolean21 = variance16.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean23 = variance16.equals((java.lang.Object) secondMoment22);
        double double24 = secondMoment22.getResult();
        secondMoment22.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        secondMoment22.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance30.increment((-1.0d));
        variance30.setBiasCorrected(false);
        boolean boolean35 = variance30.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean37 = variance30.equals((java.lang.Object) secondMoment36);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        double[] doubleArray46 = new double[] { 0L, (byte) 10 };
        double double47 = variance42.evaluate(doubleArray46);
        double double49 = variance39.evaluate(doubleArray46, (double) 10L);
        double double53 = variance30.evaluate(doubleArray46, (double) (short) 0, 0, (int) (short) 0);
        double double56 = secondMoment22.evaluate(doubleArray46, 0, 0);
        variance14.incrementAll(doubleArray46);
        double double58 = variance11.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double63 = variance62.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double66 = variance65.getResult();
        double[] doubleArray69 = new double[] { 0L, (byte) 10 };
        double double70 = variance65.evaluate(doubleArray69);
        double double72 = variance62.evaluate(doubleArray69, (double) 10L);
        double double73 = variance60.evaluate(doubleArray69);
        double[] doubleArray77 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double78 = variance60.evaluate(doubleArray77);
        double double80 = variance11.evaluate(doubleArray77, (double) 100);
        variance11.clear();
        java.lang.Class<?> wildcardClass82 = variance11.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2024039.120370371d + "'", double78 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 2024039.1203703708d + "'", double80 == 2024039.1203703708d);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test02123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02123");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance4.increment((-1.0d));
        variance4.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double22 = variance9.evaluate(doubleArray18);
        double double23 = variance4.evaluate(doubleArray18);
        variance2.incrementAll(doubleArray18);
        variance0.incrementAll(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        double[] doubleArray31 = new double[] { 0L, (byte) 10 };
        double double32 = variance27.evaluate(doubleArray31);
        boolean boolean33 = variance0.equals((java.lang.Object) double32);
        variance0.clear();
        double double35 = variance0.getResult();
        double[] doubleArray36 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double40 = variance0.evaluate(doubleArray36, 0.0d, 10, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
    }

    @Test
    public void test02124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02124");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        variance1.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        double[] doubleArray21 = new double[] { 0L, (byte) 10 };
        double double22 = variance17.evaluate(doubleArray21);
        double double24 = variance14.evaluate(doubleArray21, (double) 10L);
        double double25 = variance12.evaluate(doubleArray21);
        variance12.increment((double) 0.0f);
        boolean boolean28 = variance12.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        long long31 = secondMoment29.getN();
        secondMoment29.clear();
        secondMoment29.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        variance35.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean41 = variance39.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray50 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double51 = variance43.evaluate(doubleArray50);
        double double52 = variance39.evaluate(doubleArray50);
        double double54 = variance35.evaluate(doubleArray50, (double) 1.0f);
        double double57 = variance12.evaluate(doubleArray50, (int) (byte) 0, 1);
        double double58 = variance1.evaluate(doubleArray50);
        double double59 = variance1.getResult();
        variance1.increment((double) (byte) 10);
        long long62 = variance1.getN();
        variance1.clear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2136.8055555555557d + "'", double51 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2564.166666666667d + "'", double52 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2136.805555555555d + "'", double54 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2136.8055555555557d + "'", double58 == 2136.8055555555557d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
    }

    @Test
    public void test02125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02125");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        long long9 = secondMoment7.getN();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance12.increment((-1.0d));
        variance12.setBiasCorrected(false);
        variance12.increment((double) 100L);
        boolean boolean19 = variance12.isBiasCorrected();
        variance12.clear();
        variance12.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        long long25 = secondMoment23.getN();
        secondMoment23.clear();
        secondMoment23.clear();
        secondMoment23.increment((double) (byte) 100);
        secondMoment23.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        secondMoment23.clear();
        secondMoment23.increment(2024039.12109375d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance37.increment((-1.0d));
        variance37.setBiasCorrected(false);
        boolean boolean42 = variance37.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean44 = variance37.equals((java.lang.Object) secondMoment43);
        variance37.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean50 = variance48.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray59 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double60 = variance52.evaluate(doubleArray59);
        double double61 = variance48.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance63.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double69 = variance68.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double72 = variance71.getResult();
        double[] doubleArray75 = new double[] { 0L, (byte) 10 };
        double double76 = variance71.evaluate(doubleArray75);
        double double78 = variance68.evaluate(doubleArray75, (double) 10L);
        double double79 = variance66.evaluate(doubleArray75);
        double double80 = variance63.evaluate(doubleArray75);
        double double81 = variance48.evaluate(doubleArray75);
        double double83 = variance37.evaluate(doubleArray75, (double) 0L);
        double double84 = secondMoment23.evaluate(doubleArray75);
        double double85 = variance12.evaluate(doubleArray75);
        double double88 = secondMoment7.evaluate(doubleArray75, (int) (short) 0, (int) (short) 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2136.8055555555557d + "'", double60 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2564.166666666667d + "'", double61 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 25.0d + "'", double83 == 25.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 25.0d + "'", double85 == 25.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double88));
    }

    @Test
    public void test02126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02126");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        double double20 = variance10.evaluate(doubleArray17, (double) 10L);
        double double21 = variance8.evaluate(doubleArray17);
        double double22 = variance3.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        double[] doubleArray28 = new double[] { 0L, (byte) 10 };
        double double29 = variance24.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double39 = variance31.evaluate(doubleArray38);
        double double40 = variance24.evaluate(doubleArray38);
        double double41 = variance3.evaluate(doubleArray38);
        double double42 = secondMoment0.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.increment((-1.0d));
        variance44.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        double[] doubleArray58 = new double[] { 0L, (byte) 10 };
        double double59 = variance54.evaluate(doubleArray58);
        double double61 = variance51.evaluate(doubleArray58, (double) 10L);
        double double62 = variance49.evaluate(doubleArray58);
        double double63 = variance44.evaluate(doubleArray58);
        double double64 = secondMoment0.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        java.lang.Class<?> wildcardClass66 = variance65.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2136.8055555555557d + "'", double39 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2564.166666666667d + "'", double40 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2564.166666666667d + "'", double41 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 12820.833333333334d + "'", double42 == 12820.833333333334d);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test02127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02127");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean9 = variance7.equals((java.lang.Object) (short) 10);
        boolean boolean10 = variance1.equals((java.lang.Object) variance7);
        long long11 = variance7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean15 = variance13.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray24 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double25 = variance17.evaluate(doubleArray24);
        double double26 = variance13.evaluate(doubleArray24);
        double double27 = variance7.evaluate(doubleArray24);
        variance7.increment(2282968.9911265434d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance31.increment((-1.0d));
        variance31.setBiasCorrected(false);
        boolean boolean36 = variance31.isBiasCorrected();
        double[] doubleArray37 = new double[] {};
        double double38 = variance31.evaluate(doubleArray37);
        long long39 = variance31.getN();
        long long40 = variance31.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance42.increment((-1.0d));
        long long45 = variance42.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance50.increment((-1.0d));
        variance50.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double61 = variance60.getResult();
        double[] doubleArray64 = new double[] { 0L, (byte) 10 };
        double double65 = variance60.evaluate(doubleArray64);
        double double67 = variance57.evaluate(doubleArray64, (double) 10L);
        double double68 = variance55.evaluate(doubleArray64);
        double double69 = variance50.evaluate(doubleArray64);
        variance48.incrementAll(doubleArray64);
        variance46.incrementAll(doubleArray64);
        double double72 = variance42.evaluate(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment74 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment74);
        double double76 = secondMoment74.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment74);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment79 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment79);
        double double81 = secondMoment79.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance82 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment79);
        secondMoment79.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance85 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double86 = variance85.getResult();
        double[] doubleArray89 = new double[] { 0L, (byte) 10 };
        double double90 = variance85.evaluate(doubleArray89);
        secondMoment79.incrementAll(doubleArray89);
        double double92 = variance77.evaluate(doubleArray89);
        double double93 = variance42.evaluate(doubleArray89);
        variance31.incrementAll(doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            double double97 = variance7.evaluate(doubleArray89, 1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2136.8055555555557d + "'", double25 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2564.166666666667d + "'", double26 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 2564.166666666667d + "'", double27 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 25.0d + "'", double92 == 25.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 50.0d + "'", double93 == 50.0d);
    }

    @Test
    public void test02128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02128");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance5.increment((-1.0d));
        variance5.setBiasCorrected(false);
        boolean boolean10 = variance5.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean12 = variance5.equals((java.lang.Object) secondMoment11);
        double double13 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        double[] doubleArray22 = new double[] { 0L, (byte) 10 };
        double double23 = variance18.evaluate(doubleArray22);
        double double25 = variance15.evaluate(doubleArray22, (double) 10L);
        double double28 = secondMoment11.evaluate(doubleArray22, (int) (short) 0, 1);
        double double29 = variance1.evaluate(doubleArray22);
        variance1.increment((double) (byte) 0);
        boolean boolean32 = variance1.isBiasCorrected();
        long long33 = variance1.getN();
        double double34 = variance1.getResult();
        double double35 = variance1.getResult();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    }

    @Test
    public void test02129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02129");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        double[] doubleArray13 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double14 = variance12.evaluate(doubleArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test02130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02130");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        long long13 = secondMoment11.getN();
        secondMoment11.clear();
        double double15 = secondMoment11.getResult();
        secondMoment11.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        double[] doubleArray19 = new double[] {};
        double double20 = secondMoment11.evaluate(doubleArray19);
        double double21 = secondMoment7.evaluate(doubleArray19);
        double double22 = secondMoment7.getResult();
        secondMoment7.increment(2136.8055555555557d);
        double double25 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        double[] doubleArray37 = new double[] { 0L, (byte) 10 };
        double double38 = variance33.evaluate(doubleArray37);
        double double40 = variance30.evaluate(doubleArray37, (double) 10L);
        double double41 = variance28.evaluate(doubleArray37);
        variance28.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean47 = variance45.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        double[] doubleArray58 = new double[] { 0L, (byte) 10 };
        double double59 = variance54.evaluate(doubleArray58);
        double double61 = variance51.evaluate(doubleArray58, (double) 10L);
        double double62 = variance49.evaluate(doubleArray58);
        double[] doubleArray66 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double67 = variance49.evaluate(doubleArray66);
        double double69 = variance45.evaluate(doubleArray66, (double) (byte) 1);
        double double70 = variance28.evaluate(doubleArray66);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment7.incrementAll(doubleArray66, 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2282968.9911265434d + "'", double25 == 2282968.9911265434d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2024039.120370371d + "'", double67 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2024039.120370371d + "'", double69 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2024039.120370371d + "'", double70 == 2024039.120370371d);
    }

    @Test
    public void test02131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02131");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        double double5 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        double[] doubleArray13 = new double[] { 0L, (byte) 10 };
        double double14 = variance9.evaluate(doubleArray13);
        secondMoment3.incrementAll(doubleArray13);
        long long16 = secondMoment3.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment3);
        double double20 = variance19.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2L + "'", long16 == 2L);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
    }

    @Test
    public void test02132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02132");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.setBiasCorrected(false);
        boolean boolean8 = variance3.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean10 = variance3.equals((java.lang.Object) secondMoment9);
        double double11 = secondMoment9.getResult();
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        secondMoment9.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        variance17.setBiasCorrected(false);
        boolean boolean22 = variance17.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean24 = variance17.equals((java.lang.Object) secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        double[] doubleArray33 = new double[] { 0L, (byte) 10 };
        double double34 = variance29.evaluate(doubleArray33);
        double double36 = variance26.evaluate(doubleArray33, (double) 10L);
        double double40 = variance17.evaluate(doubleArray33, (double) (short) 0, 0, (int) (short) 0);
        double double43 = secondMoment9.evaluate(doubleArray33, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment44);
        long long46 = secondMoment44.getN();
        secondMoment44.clear();
        secondMoment44.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment44);
        variance50.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean56 = variance54.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray65 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double66 = variance58.evaluate(doubleArray65);
        double double67 = variance54.evaluate(doubleArray65);
        double double69 = variance50.evaluate(doubleArray65, (double) 1.0f);
        double double70 = secondMoment9.evaluate(doubleArray65);
        double double71 = secondMoment0.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance72.setBiasCorrected(true);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 2136.8055555555557d + "'", double66 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2564.166666666667d + "'", double67 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2136.805555555555d + "'", double69 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 12820.833333333334d + "'", double70 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 12820.833333333334d + "'", double71 == 12820.833333333334d);
    }

    @Test
    public void test02133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02133");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        secondMoment8.incrementAll(doubleArray18);
        boolean boolean21 = variance1.equals((java.lang.Object) secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.setBiasCorrected(false);
        boolean boolean28 = variance23.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean30 = variance23.equals((java.lang.Object) secondMoment29);
        boolean boolean31 = secondMoment8.equals((java.lang.Object) boolean30);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        secondMoment8.increment(1720.0703132629396d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test02134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02134");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance6.clear();
        variance6.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        long long11 = secondMoment9.getN();
        secondMoment9.clear();
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        variance17.setBiasCorrected(false);
        boolean boolean22 = variance17.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean24 = variance17.equals((java.lang.Object) secondMoment23);
        double double25 = secondMoment23.getResult();
        secondMoment23.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance29.increment((-1.0d));
        variance29.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        double[] doubleArray43 = new double[] { 0L, (byte) 10 };
        double double44 = variance39.evaluate(doubleArray43);
        double double46 = variance36.evaluate(doubleArray43, (double) 10L);
        double double47 = variance34.evaluate(doubleArray43);
        double double48 = variance29.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        double[] doubleArray54 = new double[] { 0L, (byte) 10 };
        double double55 = variance50.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray64 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double65 = variance57.evaluate(doubleArray64);
        double double66 = variance50.evaluate(doubleArray64);
        double double67 = variance29.evaluate(doubleArray64);
        double double68 = variance27.evaluate(doubleArray64);
        variance14.incrementAll(doubleArray64);
        double double70 = variance6.evaluate(doubleArray64);
        double double71 = variance6.getResult();
        variance6.clear();
        variance6.increment((double) (short) 0);
        variance6.increment((double) (byte) 10);
        long long77 = variance6.getN();
        variance6.setBiasCorrected(true);
        long long80 = variance6.getN();
        boolean boolean81 = variance6.isBiasCorrected();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2136.8055555555557d + "'", double65 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 2564.166666666667d + "'", double66 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2564.166666666667d + "'", double67 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 2136.8055555555557d + "'", double68 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2564.166666666667d + "'", double70 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1L + "'", long80 == 1L);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test02135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02135");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        boolean boolean9 = variance1.isBiasCorrected();
        long long10 = variance1.getN();
        variance1.increment(18.666666666666668d);
        variance1.increment(9.536988751020409E7d);
        variance1.setBiasCorrected(false);
        variance1.increment(2224.904761904762d);
        java.lang.Class<?> wildcardClass19 = variance1.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test02136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02136");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        boolean boolean11 = variance10.isBiasCorrected();
        double double12 = variance10.getResult();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test02137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02137");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        long long9 = secondMoment7.getN();
        secondMoment7.clear();
        secondMoment7.clear();
        secondMoment7.increment((double) (byte) 100);
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double22 = variance21.getResult();
        double[] doubleArray25 = new double[] { 0L, (byte) 10 };
        double double26 = variance21.evaluate(doubleArray25);
        double double28 = variance18.evaluate(doubleArray25, (double) 10L);
        double double29 = variance16.evaluate(doubleArray25);
        double[] doubleArray33 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double34 = variance16.evaluate(doubleArray33);
        double double35 = secondMoment7.evaluate(doubleArray33);
        double double38 = secondMoment1.evaluate(doubleArray33, 0, (int) (short) 1);
        long long39 = secondMoment1.getN();
        secondMoment1.increment(2564.166666666667d);
        double double42 = secondMoment1.getResult();
        secondMoment1.clear();
        double double44 = secondMoment1.getResult();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        double double49 = secondMoment47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment47);
        secondMoment47.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double54 = variance53.getResult();
        double[] doubleArray57 = new double[] { 0L, (byte) 10 };
        double double58 = variance53.evaluate(doubleArray57);
        secondMoment47.incrementAll(doubleArray57);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment1.incrementAll(doubleArray57, 100, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2024039.120370371d + "'", double34 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 4048078.240740742d + "'", double35 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
    }

    @Test
    public void test02138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02138");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double2 = secondMoment0.getResult();
        boolean boolean4 = secondMoment0.equals((java.lang.Object) 1.0d);
        secondMoment0.increment((double) (-1L));
        double double7 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        variance9.increment((double) (short) -1);
        long long13 = variance9.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        double[] doubleArray24 = new double[] { 0L, (byte) 10 };
        double double25 = variance20.evaluate(doubleArray24);
        double double27 = variance17.evaluate(doubleArray24, (double) 10L);
        double double28 = variance15.evaluate(doubleArray24);
        variance15.increment((double) 0.0f);
        boolean boolean31 = variance15.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        long long34 = secondMoment32.getN();
        secondMoment32.clear();
        secondMoment32.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        variance38.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean44 = variance42.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray53 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double54 = variance46.evaluate(doubleArray53);
        double double55 = variance42.evaluate(doubleArray53);
        double double57 = variance38.evaluate(doubleArray53, (double) 1.0f);
        double double60 = variance15.evaluate(doubleArray53, (int) (byte) 0, 1);
        double double61 = variance9.evaluate(doubleArray53);
        // The following exception was thrown during execution in test generation
        try {
            double double64 = secondMoment0.evaluate(doubleArray53, 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2136.8055555555557d + "'", double54 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2564.166666666667d + "'", double55 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2136.805555555555d + "'", double57 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2564.166666666667d + "'", double61 == 2564.166666666667d);
    }

    @Test
    public void test02139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02139");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double[] doubleArray7 = new double[] {};
        double double8 = variance1.evaluate(doubleArray7);
        variance1.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray19 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double20 = variance12.evaluate(doubleArray19);
        double double21 = variance1.evaluate(doubleArray19);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment26);
        double double28 = secondMoment26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment26);
        secondMoment26.clear();
        secondMoment26.increment((double) 2L);
        double double33 = secondMoment26.getResult();
        secondMoment26.increment(50.0d);
        double double36 = secondMoment26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        variance40.increment((double) (short) -1);
        double double44 = variance40.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double47 = variance46.getResult();
        double[] doubleArray50 = new double[] { 0L, (byte) 10 };
        double double51 = variance46.evaluate(doubleArray50);
        double double52 = variance40.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance54.increment((-1.0d));
        variance54.setBiasCorrected(false);
        boolean boolean59 = variance54.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment60 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean61 = variance54.equals((java.lang.Object) secondMoment60);
        double double62 = secondMoment60.getResult();
        secondMoment60.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment60);
        secondMoment60.increment((double) 10.0f);
        secondMoment60.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment60);
        java.lang.Object obj69 = null;
        boolean boolean70 = variance68.equals(obj69);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment71 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double72 = secondMoment71.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment73 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment73);
        long long75 = secondMoment73.getN();
        secondMoment73.clear();
        secondMoment73.clear();
        secondMoment73.increment((double) (byte) 100);
        long long80 = secondMoment73.getN();
        double[] doubleArray82 = new double[] { 2024039.1203703713d };
        double double83 = secondMoment73.evaluate(doubleArray82);
        secondMoment71.incrementAll(doubleArray82);
        variance68.incrementAll(doubleArray82);
        variance40.incrementAll(doubleArray82);
        variance38.incrementAll(doubleArray82);
        // The following exception was thrown during execution in test generation
        try {
            double double90 = variance1.evaluate(doubleArray82, (int) (byte) -1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 2136.8055555555557d + "'", double20 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2136.8055555555557d + "'", double21 == 2136.8055555555557d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1152.0d + "'", double36 == 1152.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1L + "'", long80 == 1L);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
    }

    @Test
    public void test02140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02140");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance9.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance13.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double22 = variance21.getResult();
        double[] doubleArray25 = new double[] { 0L, (byte) 10 };
        double double26 = variance21.evaluate(doubleArray25);
        double double28 = variance18.evaluate(doubleArray25, (double) 10L);
        double double29 = variance16.evaluate(doubleArray25);
        double double30 = variance13.evaluate(doubleArray25);
        double double31 = variance9.evaluate(doubleArray25);
        long long32 = variance9.getN();
        variance9.increment(50.0d);
        long long35 = variance9.getN();
        variance9.increment(12820.833333333334d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment38);
        long long40 = secondMoment38.getN();
        secondMoment38.clear();
        double double42 = secondMoment38.getResult();
        secondMoment38.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment38);
        double[] doubleArray46 = new double[] {};
        double double47 = secondMoment38.evaluate(doubleArray46);
        double double48 = variance9.evaluate(doubleArray46);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray46, (int) (byte) 10, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
    }

    @Test
    public void test02141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02141");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.increment((double) 3L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        long long8 = secondMoment6.getN();
        secondMoment6.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment6);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        double double19 = variance13.getResult();
        variance13.increment(1349359.4135802474d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        long long25 = secondMoment23.getN();
        secondMoment23.clear();
        secondMoment23.clear();
        double double28 = secondMoment23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance31.increment((-1.0d));
        variance31.setBiasCorrected(false);
        boolean boolean36 = variance31.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment38);
        double double40 = secondMoment38.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment38);
        secondMoment38.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        double[] doubleArray48 = new double[] { 0L, (byte) 10 };
        double double49 = variance44.evaluate(doubleArray48);
        secondMoment38.incrementAll(doubleArray48);
        boolean boolean51 = variance31.equals((java.lang.Object) secondMoment38);
        variance31.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment54);
        double double56 = secondMoment54.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment54);
        secondMoment54.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double61 = variance60.getResult();
        double[] doubleArray64 = new double[] { 0L, (byte) 10 };
        double double65 = variance60.evaluate(doubleArray64);
        secondMoment54.incrementAll(doubleArray64);
        double double67 = variance31.evaluate(doubleArray64);
        double double68 = variance29.evaluate(doubleArray64);
        double double69 = variance13.evaluate(doubleArray64);
        double double70 = variance11.evaluate(doubleArray64);
        // The following exception was thrown during execution in test generation
        try {
            variance2.incrementAll(doubleArray64, (int) (short) 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 25.0d + "'", double67 == 25.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 25.0d + "'", double70 == 25.0d);
    }

    @Test
    public void test02142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02142");
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.setBiasCorrected(false);
        boolean boolean8 = variance3.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean10 = variance3.equals((java.lang.Object) secondMoment9);
        double double11 = secondMoment9.getResult();
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        double double14 = secondMoment9.getResult();
        double double15 = secondMoment9.getResult();
        double double16 = secondMoment9.getResult();
        double double17 = secondMoment9.getResult();
        double double18 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        double double24 = secondMoment22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment22);
        secondMoment22.clear();
        secondMoment22.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        long long30 = secondMoment28.getN();
        secondMoment28.clear();
        secondMoment28.clear();
        secondMoment28.increment((double) (byte) 100);
        secondMoment28.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        double[] doubleArray46 = new double[] { 0L, (byte) 10 };
        double double47 = variance42.evaluate(doubleArray46);
        double double49 = variance39.evaluate(doubleArray46, (double) 10L);
        double double50 = variance37.evaluate(doubleArray46);
        double[] doubleArray54 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double55 = variance37.evaluate(doubleArray54);
        double double56 = secondMoment28.evaluate(doubleArray54);
        double double59 = secondMoment22.evaluate(doubleArray54, 0, (int) (short) 1);
        long long60 = secondMoment22.getN();
        secondMoment22.increment(2564.166666666667d);
        double double63 = secondMoment22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment22);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance67.increment((-1.0d));
        long long70 = variance67.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance75.increment((-1.0d));
        variance75.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance82 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double83 = variance82.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance85 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double86 = variance85.getResult();
        double[] doubleArray89 = new double[] { 0L, (byte) 10 };
        double double90 = variance85.evaluate(doubleArray89);
        double double92 = variance82.evaluate(doubleArray89, (double) 10L);
        double double93 = variance80.evaluate(doubleArray89);
        double double94 = variance75.evaluate(doubleArray89);
        variance73.incrementAll(doubleArray89);
        variance71.incrementAll(doubleArray89);
        double double97 = variance67.evaluate(doubleArray89);
        secondMoment22.incrementAll(doubleArray89);
        double double99 = variance19.evaluate(doubleArray89);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2024039.120370371d + "'", double55 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 4048078.240740742d + "'", double56 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1L + "'", long70 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 50.0d + "'", double93 == 50.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 50.0d + "'", double94 == 50.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 50.0d + "'", double97 == 50.0d);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 25.0d + "'", double99 == 25.0d);
    }

    @Test
    public void test02143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02143");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        secondMoment1.clear();
        double double7 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        double double12 = secondMoment10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        double double17 = secondMoment15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment15);
        secondMoment15.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double22 = variance21.getResult();
        double[] doubleArray25 = new double[] { 0L, (byte) 10 };
        double double26 = variance21.evaluate(doubleArray25);
        secondMoment15.incrementAll(doubleArray25);
        double double28 = variance13.evaluate(doubleArray25);
        double double29 = variance13.getResult();
        variance13.increment(2564.1666666030883d);
        boolean boolean32 = secondMoment1.equals((java.lang.Object) variance13);
        variance13.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 25.0d + "'", double28 == 25.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test02144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02144");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        double[] doubleArray10 = new double[] { 0L, (byte) 10 };
        double double11 = variance6.evaluate(doubleArray10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double21 = variance13.evaluate(doubleArray20);
        double double22 = variance6.evaluate(doubleArray20);
        double double23 = secondMoment1.evaluate(doubleArray20);
        double double24 = secondMoment1.getResult();
        java.lang.Class<?> wildcardClass25 = secondMoment1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2136.8055555555557d + "'", double21 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2564.166666666667d + "'", double22 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 12820.833333333334d + "'", double23 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 12820.833333333334d + "'", double24 == 12820.833333333334d);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test02145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02145");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance7.increment((double) (byte) -1);
        long long10 = variance7.getN();
        long long11 = variance7.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        long long14 = secondMoment12.getN();
        secondMoment12.clear();
        secondMoment12.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        variance18.clear();
        variance18.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        long long23 = secondMoment21.getN();
        secondMoment21.clear();
        secondMoment21.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance29.increment((-1.0d));
        variance29.setBiasCorrected(false);
        boolean boolean34 = variance29.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean36 = variance29.equals((java.lang.Object) secondMoment35);
        double double37 = secondMoment35.getResult();
        secondMoment35.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment35);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance41.increment((-1.0d));
        variance41.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        double[] doubleArray55 = new double[] { 0L, (byte) 10 };
        double double56 = variance51.evaluate(doubleArray55);
        double double58 = variance48.evaluate(doubleArray55, (double) 10L);
        double double59 = variance46.evaluate(doubleArray55);
        double double60 = variance41.evaluate(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double63 = variance62.getResult();
        double[] doubleArray66 = new double[] { 0L, (byte) 10 };
        double double67 = variance62.evaluate(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray76 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double77 = variance69.evaluate(doubleArray76);
        double double78 = variance62.evaluate(doubleArray76);
        double double79 = variance41.evaluate(doubleArray76);
        double double80 = variance39.evaluate(doubleArray76);
        variance26.incrementAll(doubleArray76);
        double double82 = variance18.evaluate(doubleArray76);
        double double83 = variance7.evaluate(doubleArray76);
        variance7.setBiasCorrected(false);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2136.8055555555557d + "'", double77 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2564.166666666667d + "'", double78 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 2564.166666666667d + "'", double79 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 2136.8055555555557d + "'", double80 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 2564.166666666667d + "'", double82 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2564.166666666667d + "'", double83 == 2564.166666666667d);
    }

    @Test
    public void test02146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02146");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double4 = variance3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        double[] doubleArray10 = new double[] { 0L, (byte) 10 };
        double double11 = variance6.evaluate(doubleArray10);
        double double13 = variance3.evaluate(doubleArray10, (double) 10L);
        double double14 = variance1.evaluate(doubleArray10);
        variance1.increment(10.0d);
        double double17 = variance1.getResult();
        long long18 = variance1.getN();
        variance1.increment(100.0d);
        java.lang.Class<?> wildcardClass21 = variance1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test02147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02147");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        long long13 = secondMoment7.getN();
        double double14 = secondMoment7.getResult();
        double double15 = secondMoment7.getResult();
        double double16 = secondMoment7.getResult();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2L + "'", long13 == 2L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.5d + "'", double15 == 0.5d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.5d + "'", double16 == 0.5d);
    }

    @Test
    public void test02148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02148");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        double[] doubleArray8 = new double[] { 0L, (byte) 10 };
        double double9 = variance4.evaluate(doubleArray8);
        double double11 = variance1.evaluate(doubleArray8, (double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance14.increment((-1.0d));
        variance14.setBiasCorrected(false);
        boolean boolean19 = variance14.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean21 = variance14.equals((java.lang.Object) secondMoment20);
        secondMoment20.increment((double) (short) 0);
        secondMoment20.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray34 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double35 = variance27.evaluate(doubleArray34);
        double double36 = secondMoment20.evaluate(doubleArray34);
        long long37 = secondMoment20.getN();
        long long38 = secondMoment20.getN();
        secondMoment20.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment20);
        double double42 = variance41.getResult();
        variance41.increment((double) 1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance46.increment((-1.0d));
        variance46.setBiasCorrected(false);
        boolean boolean51 = variance46.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean53 = variance46.equals((java.lang.Object) secondMoment52);
        long long54 = secondMoment52.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance56.increment((-1.0d));
        variance56.setBiasCorrected(false);
        variance56.increment((double) 100L);
        boolean boolean63 = variance56.isBiasCorrected();
        boolean boolean64 = variance56.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray73 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double74 = variance66.evaluate(doubleArray73);
        double double76 = variance56.evaluate(doubleArray73, (double) (byte) 10);
        secondMoment52.incrementAll(doubleArray73);
        double double78 = variance41.evaluate(doubleArray73);
        // The following exception was thrown during execution in test generation
        try {
            double double81 = variance1.evaluate(doubleArray73, (int) '4', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.0d + "'", double9 == 50.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 2136.8055555555557d + "'", double35 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 12820.833333333334d + "'", double36 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 6L + "'", long37 == 6L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 6L + "'", long38 == 6L);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1980.1224489795918d + "'", double42 == 1980.1224489795918d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 2136.8055555555557d + "'", double74 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2136.8055555555557d + "'", double76 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2136.8055555555557d + "'", double78 == 2136.8055555555557d);
    }

    @Test
    public void test02149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02149");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double4 = variance3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        double[] doubleArray10 = new double[] { 0L, (byte) 10 };
        double double11 = variance6.evaluate(doubleArray10);
        double double13 = variance3.evaluate(doubleArray10, (double) 10L);
        double double14 = variance1.evaluate(doubleArray10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean18 = variance16.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        double[] doubleArray29 = new double[] { 0L, (byte) 10 };
        double double30 = variance25.evaluate(doubleArray29);
        double double32 = variance22.evaluate(doubleArray29, (double) 10L);
        double double33 = variance20.evaluate(doubleArray29);
        double[] doubleArray37 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double38 = variance20.evaluate(doubleArray37);
        double double40 = variance16.evaluate(doubleArray37, (double) (byte) 1);
        double double41 = variance1.evaluate(doubleArray37);
        variance1.increment((double) (-1));
        long long44 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment45);
        long long47 = secondMoment45.getN();
        secondMoment45.clear();
        secondMoment45.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment45);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance52.increment((-1.0d));
        variance52.setBiasCorrected(false);
        boolean boolean57 = variance52.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean59 = variance52.equals((java.lang.Object) secondMoment58);
        variance52.increment((double) 100L);
        variance52.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double68 = variance67.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double71 = variance70.getResult();
        double[] doubleArray74 = new double[] { 0L, (byte) 10 };
        double double75 = variance70.evaluate(doubleArray74);
        double double77 = variance67.evaluate(doubleArray74, (double) 10L);
        double double78 = variance65.evaluate(doubleArray74);
        double[] doubleArray82 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double83 = variance65.evaluate(doubleArray82);
        variance52.incrementAll(doubleArray82);
        double double85 = variance50.evaluate(doubleArray82);
        double double86 = variance1.evaluate(doubleArray82);
        variance1.clear();
        long long88 = variance1.getN();
        variance1.setBiasCorrected(false);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2024039.120370371d + "'", double38 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2024039.120370371d + "'", double40 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2024039.120370371d + "'", double41 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2024039.120370371d + "'", double83 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2024039.120370371d + "'", double85 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2024039.120370371d + "'", double86 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
    }

    @Test
    public void test02150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02150");
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.setBiasCorrected(false);
        boolean boolean8 = variance3.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean10 = variance3.equals((java.lang.Object) secondMoment9);
        secondMoment9.increment((double) (short) 0);
        secondMoment9.increment((double) 1.0f);
        double double15 = secondMoment9.getResult();
        double double16 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance18.increment((-1.0d));
        variance18.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        double[] doubleArray32 = new double[] { 0L, (byte) 10 };
        double double33 = variance28.evaluate(doubleArray32);
        double double35 = variance25.evaluate(doubleArray32, (double) 10L);
        double double36 = variance23.evaluate(doubleArray32);
        double double37 = variance18.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        double[] doubleArray43 = new double[] { 0L, (byte) 10 };
        double double44 = variance39.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray53 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double54 = variance46.evaluate(doubleArray53);
        double double55 = variance39.evaluate(doubleArray53);
        double double56 = variance18.evaluate(doubleArray53);
        double double57 = secondMoment9.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        long long59 = secondMoment9.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.5d + "'", double15 == 0.5d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.5d + "'", double16 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2136.8055555555557d + "'", double54 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2564.166666666667d + "'", double55 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2564.166666666667d + "'", double56 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 12820.833333333334d + "'", double57 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 6L + "'", long59 == 6L);
    }

    @Test
    public void test02151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02151");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        double double20 = variance10.evaluate(doubleArray17, (double) 10L);
        double double21 = variance8.evaluate(doubleArray17);
        double double22 = variance3.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        double[] doubleArray28 = new double[] { 0L, (byte) 10 };
        double double29 = variance24.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double39 = variance31.evaluate(doubleArray38);
        double double40 = variance24.evaluate(doubleArray38);
        double double41 = variance3.evaluate(doubleArray38);
        double double42 = secondMoment0.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long44 = secondMoment0.getN();
        double double45 = secondMoment0.getResult();
        long long46 = secondMoment0.getN();
        double double47 = secondMoment0.getResult();
        double double48 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double50 = secondMoment49.getResult();
        long long51 = secondMoment49.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance53.increment((-1.0d));
        variance53.setBiasCorrected(false);
        boolean boolean58 = variance53.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean60 = variance53.equals((java.lang.Object) secondMoment59);
        secondMoment59.increment((double) (short) 0);
        secondMoment59.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray73 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double74 = variance66.evaluate(doubleArray73);
        double double75 = secondMoment59.evaluate(doubleArray73);
        long long76 = secondMoment59.getN();
        long long77 = secondMoment59.getN();
        secondMoment59.clear();
        double double79 = secondMoment59.getResult();
        secondMoment59.clear();
        boolean boolean81 = secondMoment49.equals((java.lang.Object) secondMoment59);
        double double82 = secondMoment59.getResult();
        double double83 = secondMoment59.getResult();
        boolean boolean84 = secondMoment0.equals((java.lang.Object) secondMoment59);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2136.8055555555557d + "'", double39 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2564.166666666667d + "'", double40 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2564.166666666667d + "'", double41 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 12820.833333333334d + "'", double42 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 6L + "'", long44 == 6L);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 12820.833333333334d + "'", double45 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 6L + "'", long46 == 6L);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 12820.833333333334d + "'", double47 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 12820.833333333334d + "'", double48 == 12820.833333333334d);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 2136.8055555555557d + "'", double74 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 12820.833333333334d + "'", double75 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 6L + "'", long76 == 6L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 6L + "'", long77 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test02152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02152");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        double double5 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        double[] doubleArray13 = new double[] { 0L, (byte) 10 };
        double double14 = variance9.evaluate(doubleArray13);
        secondMoment3.incrementAll(doubleArray13);
        long long16 = secondMoment3.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment3);
        secondMoment3.clear();
        secondMoment3.increment(0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2L + "'", long16 == 2L);
    }

    @Test
    public void test02153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02153");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        double[] doubleArray21 = new double[] { 0L, (byte) 10 };
        double double22 = variance17.evaluate(doubleArray21);
        double double24 = variance14.evaluate(doubleArray21, (double) 10L);
        double double25 = variance12.evaluate(doubleArray21);
        double double26 = variance9.evaluate(doubleArray21);
        variance7.incrementAll(doubleArray21);
        variance7.clear();
        long long29 = variance7.getN();
        long long30 = variance7.getN();
        long long31 = variance7.getN();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
    }

    @Test
    public void test02154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02154");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        secondMoment8.incrementAll(doubleArray18);
        boolean boolean21 = variance1.equals((java.lang.Object) secondMoment8);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        double double26 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment24);
        secondMoment24.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        double[] doubleArray34 = new double[] { 0L, (byte) 10 };
        double double35 = variance30.evaluate(doubleArray34);
        secondMoment24.incrementAll(doubleArray34);
        double double37 = variance1.evaluate(doubleArray34);
        variance1.setBiasCorrected(false);
        long long40 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean44 = variance42.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance46.increment((-1.0d));
        variance46.setBiasCorrected(false);
        boolean boolean51 = variance46.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean53 = variance46.equals((java.lang.Object) secondMoment52);
        double double54 = secondMoment52.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double57 = variance56.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double60 = variance59.getResult();
        double[] doubleArray63 = new double[] { 0L, (byte) 10 };
        double double64 = variance59.evaluate(doubleArray63);
        double double66 = variance56.evaluate(doubleArray63, (double) 10L);
        double double69 = secondMoment52.evaluate(doubleArray63, (int) (short) 0, 1);
        double double70 = variance42.evaluate(doubleArray63);
        double double71 = variance1.evaluate(doubleArray63);
        double double72 = variance1.getResult();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 25.0d + "'", double37 == 25.0d);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 25.0d + "'", double71 == 25.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
    }

    @Test
    public void test02155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02155");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        double[] doubleArray14 = new double[] { 0L, (byte) 10 };
        double double15 = variance10.evaluate(doubleArray14);
        double double17 = variance7.evaluate(doubleArray14, (double) 10L);
        double double18 = variance5.evaluate(doubleArray14);
        double[] doubleArray22 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double23 = variance5.evaluate(doubleArray22);
        double double25 = variance1.evaluate(doubleArray22, (double) (byte) 1);
        variance1.increment(10.0d);
        long long28 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        long long31 = secondMoment29.getN();
        secondMoment29.clear();
        secondMoment29.clear();
        secondMoment29.increment((double) (byte) 100);
        secondMoment29.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        secondMoment29.clear();
        secondMoment29.increment(2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        boolean boolean42 = variance41.isBiasCorrected();
        double double43 = variance41.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment45);
        double double47 = secondMoment45.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment45);
        secondMoment45.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double52 = secondMoment51.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment53);
        long long55 = secondMoment53.getN();
        secondMoment53.clear();
        secondMoment53.clear();
        secondMoment53.increment((double) (byte) 100);
        long long60 = secondMoment53.getN();
        double[] doubleArray62 = new double[] { 2024039.1203703713d };
        double double63 = secondMoment53.evaluate(doubleArray62);
        secondMoment51.incrementAll(doubleArray62);
        double double65 = secondMoment45.evaluate(doubleArray62);
        double double66 = variance41.evaluate(doubleArray62);
        // The following exception was thrown during execution in test generation
        try {
            double double70 = variance1.evaluate(doubleArray62, 2.0432086265156394E12d, (int) (byte) 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 50.0d + "'", double15 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2024039.120370371d + "'", double23 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2024039.120370371d + "'", double25 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
    }

    @Test
    public void test02156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02156");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.clear();
        double double3 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        long long7 = secondMoment5.getN();
        secondMoment5.clear();
        double double9 = secondMoment5.getResult();
        secondMoment5.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        secondMoment5.increment((double) (byte) 0);
        long long15 = secondMoment5.getN();
        boolean boolean16 = variance1.equals((java.lang.Object) long15);
        variance1.setBiasCorrected(true);
        long long19 = variance1.getN();
        variance1.increment(Double.NaN);
        long long22 = variance1.getN();
        variance1.setBiasCorrected(false);
        java.lang.Class<?> wildcardClass25 = variance1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test02157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02157");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double[] doubleArray8 = new double[] {};
        double double9 = secondMoment0.evaluate(doubleArray8);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        variance11.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        double double16 = secondMoment14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment14);
        secondMoment14.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        double[] doubleArray24 = new double[] { 0L, (byte) 10 };
        double double25 = variance20.evaluate(doubleArray24);
        secondMoment14.incrementAll(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean31 = variance29.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance33.increment((-1.0d));
        variance33.setBiasCorrected(false);
        boolean boolean38 = variance33.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean40 = variance33.equals((java.lang.Object) secondMoment39);
        double double41 = secondMoment39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double44 = variance43.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double47 = variance46.getResult();
        double[] doubleArray50 = new double[] { 0L, (byte) 10 };
        double double51 = variance46.evaluate(doubleArray50);
        double double53 = variance43.evaluate(doubleArray50, (double) 10L);
        double double56 = secondMoment39.evaluate(doubleArray50, (int) (short) 0, 1);
        double double57 = variance29.evaluate(doubleArray50);
        secondMoment14.incrementAll(doubleArray50);
        variance11.incrementAll(doubleArray50);
        double double60 = secondMoment0.evaluate(doubleArray50);
        secondMoment0.increment(2310.1428571428573d);
        java.lang.Class<?> wildcardClass63 = secondMoment0.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test02158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02158");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance4.increment((-1.0d));
        variance4.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double22 = variance9.evaluate(doubleArray18);
        double double23 = variance4.evaluate(doubleArray18);
        variance2.incrementAll(doubleArray18);
        variance0.incrementAll(doubleArray18);
        variance0.clear();
        boolean boolean27 = variance0.isBiasCorrected();
        variance0.clear();
        long long29 = variance0.getN();
        variance0.increment(227.30000000000018d);
        boolean boolean32 = variance0.isBiasCorrected();
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test02159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02159");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.increment((double) (byte) 100);
        long long8 = secondMoment1.getN();
        double[] doubleArray10 = new double[] { 2024039.1203703713d };
        double double11 = secondMoment1.evaluate(doubleArray10);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double double14 = variance13.getResult();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test02160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02160");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long6 = variance5.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean10 = variance8.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        double[] doubleArray21 = new double[] { 0L, (byte) 10 };
        double double22 = variance17.evaluate(doubleArray21);
        double double24 = variance14.evaluate(doubleArray21, (double) 10L);
        double double25 = variance12.evaluate(doubleArray21);
        double[] doubleArray29 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double30 = variance12.evaluate(doubleArray29);
        double double32 = variance8.evaluate(doubleArray29, (double) (byte) 1);
        variance8.clear();
        double double34 = variance8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        double[] doubleArray43 = new double[] { 0L, (byte) 10 };
        double double44 = variance39.evaluate(doubleArray43);
        double double46 = variance36.evaluate(doubleArray43, (double) 10L);
        long long47 = variance36.getN();
        variance36.increment((double) 0L);
        double[] doubleArray51 = new double[] { 10.0d };
        variance36.incrementAll(doubleArray51);
        double double53 = variance8.evaluate(doubleArray51);
        variance5.incrementAll(doubleArray51);
        double double55 = variance5.getResult();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2024039.120370371d + "'", double30 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2024039.120370371d + "'", double32 == 2024039.120370371d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
    }

    @Test
    public void test02161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02161");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.increment(10.0d);
        double double7 = secondMoment1.getResult();
        double double8 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        variance11.increment((double) (short) -1);
        long long15 = variance11.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double20 = variance19.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        double[] doubleArray26 = new double[] { 0L, (byte) 10 };
        double double27 = variance22.evaluate(doubleArray26);
        double double29 = variance19.evaluate(doubleArray26, (double) 10L);
        double double30 = variance17.evaluate(doubleArray26);
        variance17.increment((double) 0.0f);
        boolean boolean33 = variance17.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment34);
        long long36 = secondMoment34.getN();
        secondMoment34.clear();
        secondMoment34.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment34);
        variance40.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean46 = variance44.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray55 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double56 = variance48.evaluate(doubleArray55);
        double double57 = variance44.evaluate(doubleArray55);
        double double59 = variance40.evaluate(doubleArray55, (double) 1.0f);
        double double62 = variance17.evaluate(doubleArray55, (int) (byte) 0, 1);
        double double63 = variance11.evaluate(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance65.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double71 = variance70.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double74 = variance73.getResult();
        double[] doubleArray77 = new double[] { 0L, (byte) 10 };
        double double78 = variance73.evaluate(doubleArray77);
        double double80 = variance70.evaluate(doubleArray77, (double) 10L);
        double double81 = variance68.evaluate(doubleArray77);
        double double82 = variance65.evaluate(doubleArray77);
        variance11.incrementAll(doubleArray77, (int) (short) 0, (int) (short) 0);
        double double86 = variance9.evaluate(doubleArray77);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2136.8055555555557d + "'", double56 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2564.166666666667d + "'", double57 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2136.805555555555d + "'", double59 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2564.166666666667d + "'", double63 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
    }

    @Test
    public void test02162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02162");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        double[] doubleArray13 = new double[] { 0L, (byte) 10 };
        double double14 = variance9.evaluate(doubleArray13);
        double double16 = variance6.evaluate(doubleArray13, (double) 10L);
        double double17 = variance4.evaluate(doubleArray13);
        double double18 = variance1.evaluate(doubleArray13);
        boolean boolean19 = variance1.isBiasCorrected();
        double double20 = variance1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test02163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02163");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance7.setBiasCorrected(true);
        variance7.increment(1152.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        variance13.clear();
        boolean boolean20 = variance13.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean24 = variance22.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance26.increment((-1.0d));
        variance26.setBiasCorrected(false);
        boolean boolean31 = variance26.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean33 = variance26.equals((java.lang.Object) secondMoment32);
        double double34 = secondMoment32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        double[] doubleArray43 = new double[] { 0L, (byte) 10 };
        double double44 = variance39.evaluate(doubleArray43);
        double double46 = variance36.evaluate(doubleArray43, (double) 10L);
        double double49 = secondMoment32.evaluate(doubleArray43, (int) (short) 0, 1);
        double double50 = variance22.evaluate(doubleArray43);
        double double51 = variance13.evaluate(doubleArray43);
        double double54 = variance7.evaluate(doubleArray43, (int) (short) 1, 0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
    }

    @Test
    public void test02164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02164");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double4 = variance3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        double[] doubleArray10 = new double[] { 0L, (byte) 10 };
        double double11 = variance6.evaluate(doubleArray10);
        double double13 = variance3.evaluate(doubleArray10, (double) 10L);
        double double14 = variance1.evaluate(doubleArray10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean18 = variance16.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        double[] doubleArray29 = new double[] { 0L, (byte) 10 };
        double double30 = variance25.evaluate(doubleArray29);
        double double32 = variance22.evaluate(doubleArray29, (double) 10L);
        double double33 = variance20.evaluate(doubleArray29);
        double[] doubleArray37 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double38 = variance20.evaluate(doubleArray37);
        double double40 = variance16.evaluate(doubleArray37, (double) (byte) 1);
        double double41 = variance1.evaluate(doubleArray37);
        variance1.clear();
        variance1.increment((double) ' ');
        double double45 = variance1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2024039.120370371d + "'", double38 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2024039.120370371d + "'", double40 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2024039.120370371d + "'", double41 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
    }

    @Test
    public void test02165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02165");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        secondMoment2.increment((double) 2L);
        double double9 = secondMoment2.getResult();
        secondMoment2.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        double double13 = secondMoment2.getResult();
        long long14 = secondMoment2.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double16 = variance15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        long long20 = variance18.getN();
        long long21 = variance18.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment26);
        double double28 = secondMoment26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment26);
        secondMoment26.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        double[] doubleArray36 = new double[] { 0L, (byte) 10 };
        double double37 = variance32.evaluate(doubleArray36);
        secondMoment26.incrementAll(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment26);
        secondMoment26.clear();
        secondMoment26.increment(Double.NaN);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment26);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double47 = secondMoment46.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment46);
        secondMoment46.increment(2024039.120370371d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double53 = variance52.getResult();
        variance52.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance57.increment((-1.0d));
        variance57.setBiasCorrected(false);
        boolean boolean62 = variance57.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment63 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean64 = variance57.equals((java.lang.Object) secondMoment63);
        double double65 = secondMoment63.getResult();
        secondMoment63.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment63);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment69);
        double double71 = secondMoment69.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment69);
        secondMoment69.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance75.increment((-1.0d));
        variance75.setBiasCorrected(false);
        boolean boolean80 = variance75.isBiasCorrected();
        double[] doubleArray81 = new double[] {};
        double double82 = variance75.evaluate(doubleArray81);
        secondMoment69.incrementAll(doubleArray81);
        double double84 = variance67.evaluate(doubleArray81);
        double double85 = variance52.evaluate(doubleArray81);
        secondMoment46.incrementAll(doubleArray81);
        double double87 = secondMoment26.evaluate(doubleArray81);
        double double90 = variance18.evaluate(doubleArray81, 0, 0);
        variance15.incrementAll(doubleArray81);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1152.0d + "'", double13 == 1152.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2L + "'", long14 == 2L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1152.0d + "'", double16 == 1152.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertTrue(Double.isNaN(double90));
    }

    @Test
    public void test02166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02166");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        double double10 = secondMoment8.getResult();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        secondMoment8.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance16.increment((-1.0d));
        variance16.setBiasCorrected(false);
        boolean boolean21 = variance16.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean23 = variance16.equals((java.lang.Object) secondMoment22);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        double[] doubleArray32 = new double[] { 0L, (byte) 10 };
        double double33 = variance28.evaluate(doubleArray32);
        double double35 = variance25.evaluate(doubleArray32, (double) 10L);
        double double39 = variance16.evaluate(doubleArray32, (double) (short) 0, 0, (int) (short) 0);
        double double42 = secondMoment8.evaluate(doubleArray32, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.increment(60.666666666666664d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double50 = variance49.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double53 = variance52.getResult();
        double[] doubleArray56 = new double[] { 0L, (byte) 10 };
        double double57 = variance52.evaluate(doubleArray56);
        double double59 = variance49.evaluate(doubleArray56, (double) 10L);
        double double60 = variance47.evaluate(doubleArray56);
        variance47.increment((double) 0.0f);
        boolean boolean63 = variance47.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment65 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment65);
        double double67 = secondMoment65.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment65);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double71 = variance70.getResult();
        double[] doubleArray74 = new double[] { 0L, (byte) 10 };
        double double75 = variance70.evaluate(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray84 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double85 = variance77.evaluate(doubleArray84);
        double double86 = variance70.evaluate(doubleArray84);
        double double87 = secondMoment65.evaluate(doubleArray84);
        double double88 = variance47.evaluate(doubleArray84);
        secondMoment8.incrementAll(doubleArray84);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2136.8055555555557d + "'", double85 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2564.166666666667d + "'", double86 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 12820.833333333334d + "'", double87 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 2564.166666666667d + "'", double88 == 2564.166666666667d);
    }

    @Test
    public void test02167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02167");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = secondMoment8.evaluate(doubleArray22);
        long long25 = secondMoment8.getN();
        long long26 = secondMoment8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        secondMoment8.clear();
        secondMoment8.increment(0.0d);
        secondMoment8.increment((double) 'a');
        secondMoment8.clear();
        secondMoment8.clear();
        secondMoment8.clear();
        long long36 = secondMoment8.getN();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 12820.833333333334d + "'", double24 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
    }

    @Test
    public void test02168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02168");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance7.increment((-1.0d));
        variance7.setBiasCorrected(false);
        boolean boolean12 = variance7.isBiasCorrected();
        double[] doubleArray13 = new double[] {};
        double double14 = variance7.evaluate(doubleArray13);
        secondMoment1.incrementAll(doubleArray13);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double18 = secondMoment17.getResult();
        double double19 = secondMoment17.getResult();
        secondMoment17.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        double[] doubleArray38 = new double[] { 0L, (byte) 10 };
        double double39 = variance34.evaluate(doubleArray38);
        double double41 = variance31.evaluate(doubleArray38, (double) 10L);
        double double42 = variance29.evaluate(doubleArray38);
        double double43 = variance24.evaluate(doubleArray38);
        variance22.incrementAll(doubleArray38);
        variance22.increment((double) 100.0f);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        long long49 = secondMoment47.getN();
        secondMoment47.clear();
        secondMoment47.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance54.increment((-1.0d));
        variance54.setBiasCorrected(false);
        boolean boolean59 = variance54.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment60 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean61 = variance54.equals((java.lang.Object) secondMoment60);
        variance54.increment((double) 100L);
        variance54.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double70 = variance69.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double73 = variance72.getResult();
        double[] doubleArray76 = new double[] { 0L, (byte) 10 };
        double double77 = variance72.evaluate(doubleArray76);
        double double79 = variance69.evaluate(doubleArray76, (double) 10L);
        double double80 = variance67.evaluate(doubleArray76);
        double[] doubleArray84 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double85 = variance67.evaluate(doubleArray84);
        variance54.incrementAll(doubleArray84);
        double double87 = variance52.evaluate(doubleArray84);
        double double89 = variance22.evaluate(doubleArray84, (double) 3L);
        double double90 = secondMoment17.evaluate(doubleArray84);
        double double91 = secondMoment1.evaluate(doubleArray84);
        org.apache.commons.math.stat.descriptive.moment.Variance variance92 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double93 = secondMoment1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2024039.120370371d + "'", double85 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 2024039.120370371d + "'", double87 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 2024039.1203703708d + "'", double89 == 2024039.1203703708d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 4048078.240740742d + "'", double90 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 4048078.240740742d + "'", double91 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 4048078.240740742d + "'", double93 == 4048078.240740742d);
    }

    @Test
    public void test02169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02169");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        long long15 = variance14.getN();
        long long16 = variance14.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance18.clear();
        double double20 = variance18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance22.increment((-1.0d));
        variance22.setBiasCorrected(false);
        variance22.increment((double) 100L);
        boolean boolean29 = variance22.isBiasCorrected();
        variance22.clear();
        long long31 = variance22.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment33);
        double double35 = secondMoment33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment33);
        secondMoment33.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        double[] doubleArray43 = new double[] { 0L, (byte) 10 };
        double double44 = variance39.evaluate(doubleArray43);
        secondMoment33.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment33);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean50 = variance48.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance52.increment((-1.0d));
        variance52.setBiasCorrected(false);
        boolean boolean57 = variance52.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean59 = variance52.equals((java.lang.Object) secondMoment58);
        double double60 = secondMoment58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double63 = variance62.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double66 = variance65.getResult();
        double[] doubleArray69 = new double[] { 0L, (byte) 10 };
        double double70 = variance65.evaluate(doubleArray69);
        double double72 = variance62.evaluate(doubleArray69, (double) 10L);
        double double75 = secondMoment58.evaluate(doubleArray69, (int) (short) 0, 1);
        double double76 = variance48.evaluate(doubleArray69);
        secondMoment33.incrementAll(doubleArray69);
        double double78 = variance22.evaluate(doubleArray69);
        variance18.incrementAll(doubleArray69);
        double double80 = variance14.evaluate(doubleArray69);
        long long81 = variance14.getN();
        boolean boolean82 = variance14.isBiasCorrected();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2L + "'", long16 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 25.0d + "'", double78 == 25.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 2L + "'", long81 == 2L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test02170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02170");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        double double14 = secondMoment8.getResult();
        secondMoment8.clear();
        double double16 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        variance17.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        long long22 = secondMoment20.getN();
        secondMoment20.clear();
        secondMoment20.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        variance26.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean32 = variance30.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray41 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double42 = variance34.evaluate(doubleArray41);
        double double43 = variance30.evaluate(doubleArray41);
        double double45 = variance26.evaluate(doubleArray41, (double) 1.0f);
        boolean boolean46 = variance26.isBiasCorrected();
        boolean boolean47 = variance26.isBiasCorrected();
        variance26.setBiasCorrected(false);
        boolean boolean50 = variance17.equals((java.lang.Object) false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2136.8055555555557d + "'", double42 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2564.166666666667d + "'", double43 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2136.805555555555d + "'", double45 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test02171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02171");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        secondMoment7.clear();
        secondMoment7.increment((double) 10.0f);
        double double14 = secondMoment7.getResult();
        long long15 = secondMoment7.getN();
        secondMoment7.increment((double) ' ');
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
    }

    @Test
    public void test02172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02172");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance5.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance8.increment((-1.0d));
        variance8.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean16 = variance14.equals((java.lang.Object) (short) 10);
        boolean boolean17 = variance8.equals((java.lang.Object) variance14);
        long long18 = variance14.getN();
        variance14.setBiasCorrected(false);
        variance14.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.setBiasCorrected(false);
        boolean boolean28 = variance23.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean30 = variance23.equals((java.lang.Object) secondMoment29);
        double double31 = secondMoment29.getResult();
        secondMoment29.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        boolean boolean34 = variance33.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance38.increment((-1.0d));
        variance38.setBiasCorrected(false);
        boolean boolean43 = variance38.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean45 = variance38.equals((java.lang.Object) secondMoment44);
        double double46 = secondMoment44.getResult();
        secondMoment44.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment44);
        secondMoment44.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance52.increment((-1.0d));
        variance52.setBiasCorrected(false);
        boolean boolean57 = variance52.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean59 = variance52.equals((java.lang.Object) secondMoment58);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double65 = variance64.getResult();
        double[] doubleArray68 = new double[] { 0L, (byte) 10 };
        double double69 = variance64.evaluate(doubleArray68);
        double double71 = variance61.evaluate(doubleArray68, (double) 10L);
        double double75 = variance52.evaluate(doubleArray68, (double) (short) 0, 0, (int) (short) 0);
        double double78 = secondMoment44.evaluate(doubleArray68, 0, 0);
        variance36.incrementAll(doubleArray68);
        double double80 = variance33.evaluate(doubleArray68);
        double double82 = variance14.evaluate(doubleArray68, 13349.428571428572d);
        variance5.incrementAll(doubleArray68);
        boolean boolean84 = variance5.isBiasCorrected();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 25.000000029802322d + "'", double82 == 25.000000029802322d);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test02173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02173");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.increment((double) (byte) 100);
        long long8 = secondMoment1.getN();
        double[] doubleArray10 = new double[] { 2024039.1203703713d };
        double double11 = secondMoment1.evaluate(doubleArray10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        long long15 = secondMoment13.getN();
        secondMoment13.clear();
        secondMoment13.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        variance19.setBiasCorrected(false);
        boolean boolean22 = secondMoment1.equals((java.lang.Object) variance19);
        double double23 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean27 = variance25.equals((java.lang.Object) (short) 10);
        double double28 = variance25.getResult();
        variance25.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance31.increment((-1.0d));
        variance31.setBiasCorrected(false);
        variance31.increment((double) 100L);
        boolean boolean38 = variance31.isBiasCorrected();
        variance31.clear();
        long long40 = variance31.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double42 = secondMoment41.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.increment((-1.0d));
        variance44.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        double[] doubleArray58 = new double[] { 0L, (byte) 10 };
        double double59 = variance54.evaluate(doubleArray58);
        double double61 = variance51.evaluate(doubleArray58, (double) 10L);
        double double62 = variance49.evaluate(doubleArray58);
        double double63 = variance44.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double66 = variance65.getResult();
        double[] doubleArray69 = new double[] { 0L, (byte) 10 };
        double double70 = variance65.evaluate(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray79 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double80 = variance72.evaluate(doubleArray79);
        double double81 = variance65.evaluate(doubleArray79);
        double double82 = variance44.evaluate(doubleArray79);
        double double83 = secondMoment41.evaluate(doubleArray79);
        double double84 = variance31.evaluate(doubleArray79);
        double double85 = variance25.evaluate(doubleArray79);
        secondMoment1.incrementAll(doubleArray79, (int) (byte) 1, (int) (short) 1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance90 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double91 = variance90.getResult();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 2136.8055555555557d + "'", double80 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 2564.166666666667d + "'", double81 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 2564.166666666667d + "'", double82 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 12820.833333333334d + "'", double83 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2136.8055555555557d + "'", double84 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2564.166666666667d + "'", double85 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double91));
    }

    @Test
    public void test02174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02174");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.clear();
        double double3 = variance1.getResult();
        variance1.setBiasCorrected(true);
        java.lang.Class<?> wildcardClass6 = variance1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test02175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02175");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.increment((double) (byte) 100);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        double double22 = variance12.evaluate(doubleArray19, (double) 10L);
        double double23 = variance10.evaluate(doubleArray19);
        long long24 = variance10.getN();
        double[] doubleArray25 = new double[] {};
        variance10.incrementAll(doubleArray25);
        long long27 = variance10.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance29.increment((-1.0d));
        variance29.setBiasCorrected(false);
        boolean boolean34 = variance29.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean36 = variance29.equals((java.lang.Object) secondMoment35);
        long long37 = secondMoment35.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance39.increment((-1.0d));
        variance39.setBiasCorrected(false);
        variance39.increment((double) 100L);
        boolean boolean46 = variance39.isBiasCorrected();
        boolean boolean47 = variance39.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray56 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double57 = variance49.evaluate(doubleArray56);
        double double59 = variance39.evaluate(doubleArray56, (double) (byte) 10);
        secondMoment35.incrementAll(doubleArray56);
        double double62 = variance10.evaluate(doubleArray56, (double) 'a');
        double[] doubleArray63 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double66 = variance10.evaluate(doubleArray63, (int) (byte) 10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2136.8055555555557d + "'", double57 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2136.8055555555557d + "'", double59 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2564.1666666666665d + "'", double62 == 2564.1666666666665d);
    }

    @Test
    public void test02176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02176");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double[] doubleArray7 = new double[] {};
        double double8 = variance1.evaluate(doubleArray7);
        variance1.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        double[] doubleArray21 = new double[] { 0L, (byte) 10 };
        double double22 = variance17.evaluate(doubleArray21);
        double double24 = variance14.evaluate(doubleArray21, (double) 10L);
        double double25 = variance12.evaluate(doubleArray21);
        variance1.incrementAll(doubleArray21);
        variance1.increment(4048078.240740742d);
        variance1.increment(0.5d);
        boolean boolean31 = variance1.isBiasCorrected();
        boolean boolean32 = variance1.isBiasCorrected();
        double double33 = variance1.getResult();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2.2759611724070415E12d + "'", double33 == 2.2759611724070415E12d);
    }

    @Test
    public void test02177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02177");
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.setBiasCorrected(false);
        boolean boolean8 = variance3.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        double double12 = secondMoment10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment10);
        secondMoment10.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double17 = variance16.getResult();
        double[] doubleArray20 = new double[] { 0L, (byte) 10 };
        double double21 = variance16.evaluate(doubleArray20);
        secondMoment10.incrementAll(doubleArray20);
        boolean boolean23 = variance3.equals((java.lang.Object) secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance25.increment((-1.0d));
        variance25.setBiasCorrected(false);
        boolean boolean30 = variance25.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean32 = variance25.equals((java.lang.Object) secondMoment31);
        boolean boolean33 = secondMoment10.equals((java.lang.Object) boolean32);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        double[] doubleArray43 = new double[] { 0L, (byte) 10 };
        double double44 = variance39.evaluate(doubleArray43);
        double double46 = variance36.evaluate(doubleArray43, (double) 10L);
        double double47 = secondMoment10.evaluate(doubleArray43);
        long long48 = secondMoment10.getN();
        double double49 = secondMoment10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance51.increment((-1.0d));
        variance51.setBiasCorrected(false);
        boolean boolean56 = variance51.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment58);
        double double60 = secondMoment58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment58);
        secondMoment58.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double65 = variance64.getResult();
        double[] doubleArray68 = new double[] { 0L, (byte) 10 };
        double double69 = variance64.evaluate(doubleArray68);
        secondMoment58.incrementAll(doubleArray68);
        boolean boolean71 = variance51.equals((java.lang.Object) secondMoment58);
        variance51.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment74 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment74);
        double double76 = secondMoment74.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment74);
        secondMoment74.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double81 = variance80.getResult();
        double[] doubleArray84 = new double[] { 0L, (byte) 10 };
        double double85 = variance80.evaluate(doubleArray84);
        secondMoment74.incrementAll(doubleArray84);
        double double87 = variance51.evaluate(doubleArray84);
        boolean boolean88 = secondMoment10.equals((java.lang.Object) double87);
        secondMoment10.increment((double) (short) 0);
        secondMoment10.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance92 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment10);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 2L + "'", long48 == 2L);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 25.0d + "'", double87 == 25.0d);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test02178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02178");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double2 = secondMoment0.getResult();
        secondMoment0.increment(1322.6666666666667d);
        secondMoment0.clear();
        double double6 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance8.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        double double14 = secondMoment12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment17);
        double double19 = secondMoment17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment17);
        secondMoment17.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double24 = variance23.getResult();
        double[] doubleArray27 = new double[] { 0L, (byte) 10 };
        double double28 = variance23.evaluate(doubleArray27);
        secondMoment17.incrementAll(doubleArray27);
        double double30 = variance15.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance33.increment((-1.0d));
        variance33.setBiasCorrected(false);
        boolean boolean38 = variance33.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean40 = variance33.equals((java.lang.Object) secondMoment39);
        secondMoment39.increment((double) (short) 0);
        secondMoment39.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray53 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double54 = variance46.evaluate(doubleArray53);
        double double55 = secondMoment39.evaluate(doubleArray53);
        secondMoment31.incrementAll(doubleArray53);
        variance15.incrementAll(doubleArray53);
        variance15.increment(0.5d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean63 = variance61.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance65.increment((-1.0d));
        variance65.setBiasCorrected(false);
        boolean boolean70 = variance65.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment71 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean72 = variance65.equals((java.lang.Object) secondMoment71);
        double double73 = secondMoment71.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double79 = variance78.getResult();
        double[] doubleArray82 = new double[] { 0L, (byte) 10 };
        double double83 = variance78.evaluate(doubleArray82);
        double double85 = variance75.evaluate(doubleArray82, (double) 10L);
        double double88 = secondMoment71.evaluate(doubleArray82, (int) (short) 0, 1);
        double double89 = variance61.evaluate(doubleArray82);
        variance15.incrementAll(doubleArray82);
        variance8.incrementAll(doubleArray82);
        double double92 = secondMoment0.evaluate(doubleArray82);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 25.0d + "'", double30 == 25.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2136.8055555555557d + "'", double54 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 12820.833333333334d + "'", double55 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
    }

    @Test
    public void test02179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02179");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        double[] doubleArray8 = new double[] { 0L, (byte) 10 };
        double double9 = variance4.evaluate(doubleArray8);
        double double11 = variance1.evaluate(doubleArray8, (double) 10L);
        long long12 = variance1.getN();
        variance1.increment((double) 0L);
        variance1.clear();
        double double16 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment19);
        long long21 = secondMoment19.getN();
        secondMoment19.clear();
        secondMoment19.clear();
        secondMoment19.increment((double) (byte) 100);
        secondMoment19.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        double[] doubleArray38 = new double[] { 0L, (byte) 10 };
        double double39 = variance34.evaluate(doubleArray38);
        double double41 = variance31.evaluate(doubleArray38, (double) 10L);
        long long42 = variance31.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.increment((-1.0d));
        variance44.setBiasCorrected(false);
        boolean boolean49 = variance44.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        double[] doubleArray58 = new double[] { 0L, (byte) 10 };
        double double59 = variance54.evaluate(doubleArray58);
        double double61 = variance51.evaluate(doubleArray58, (double) 10L);
        double double62 = variance44.evaluate(doubleArray58);
        variance31.incrementAll(doubleArray58, (int) (short) 0, (int) (byte) 1);
        secondMoment19.incrementAll(doubleArray58);
        // The following exception was thrown during execution in test generation
        try {
            double double69 = variance1.evaluate(doubleArray58, (int) (byte) 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.0d + "'", double9 == 50.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 25.0d + "'", double62 == 25.0d);
    }

    @Test
    public void test02180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02180");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.increment((double) (byte) 100);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance10.increment((double) 2L);
        double double13 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        long long17 = secondMoment15.getN();
        secondMoment15.clear();
        double double19 = secondMoment15.getResult();
        secondMoment15.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        double[] doubleArray23 = new double[] {};
        double double24 = secondMoment15.evaluate(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment15);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance27.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance31.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        double[] doubleArray43 = new double[] { 0L, (byte) 10 };
        double double44 = variance39.evaluate(doubleArray43);
        double double46 = variance36.evaluate(doubleArray43, (double) 10L);
        double double47 = variance34.evaluate(doubleArray43);
        double double48 = variance31.evaluate(doubleArray43);
        double double49 = variance27.evaluate(doubleArray43);
        double double50 = variance25.evaluate(doubleArray43);
        double double51 = variance10.evaluate(doubleArray43);
        variance10.setBiasCorrected(false);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
    }

    @Test
    public void test02181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02181");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        secondMoment7.clear();
        long long15 = secondMoment7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance18.increment((-1.0d));
        variance18.setBiasCorrected(false);
        boolean boolean23 = variance18.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean25 = variance18.equals((java.lang.Object) secondMoment24);
        secondMoment24.increment((double) (short) 0);
        secondMoment24.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double39 = variance31.evaluate(doubleArray38);
        double double40 = secondMoment24.evaluate(doubleArray38);
        long long41 = secondMoment24.getN();
        long long42 = secondMoment24.getN();
        secondMoment24.clear();
        double double44 = secondMoment24.getResult();
        secondMoment24.clear();
        boolean boolean46 = variance16.equals((java.lang.Object) secondMoment24);
        variance16.setBiasCorrected(true);
        variance16.increment(1652.4444444444443d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2136.8055555555557d + "'", double39 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 12820.833333333334d + "'", double40 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 6L + "'", long41 == 6L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 6L + "'", long42 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test02182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02182");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        long long14 = secondMoment12.getN();
        secondMoment12.clear();
        double double16 = secondMoment12.getResult();
        secondMoment12.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        double[] doubleArray20 = new double[] {};
        double double21 = secondMoment12.evaluate(doubleArray20);
        double double22 = secondMoment8.evaluate(doubleArray20);
        double double23 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        double[] doubleArray36 = new double[] { 0L, (byte) 10 };
        double double37 = variance32.evaluate(doubleArray36);
        double double39 = variance29.evaluate(doubleArray36, (double) 10L);
        double double40 = variance27.evaluate(doubleArray36);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment8.incrementAll(doubleArray36, (int) '#', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
    }

    @Test
    public void test02183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02183");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        secondMoment8.incrementAll(doubleArray18);
        boolean boolean21 = variance1.equals((java.lang.Object) secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.setBiasCorrected(false);
        boolean boolean28 = variance23.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment30);
        double double32 = secondMoment30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment30);
        secondMoment30.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        double[] doubleArray40 = new double[] { 0L, (byte) 10 };
        double double41 = variance36.evaluate(doubleArray40);
        secondMoment30.incrementAll(doubleArray40);
        boolean boolean43 = variance23.equals((java.lang.Object) secondMoment30);
        variance23.clear();
        variance23.setBiasCorrected(true);
        boolean boolean47 = variance1.equals((java.lang.Object) true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double50 = variance49.getResult();
        variance49.increment((double) (short) -1);
        boolean boolean53 = variance49.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment55);
        double double57 = secondMoment55.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment55);
        secondMoment55.clear();
        secondMoment55.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment61);
        long long63 = secondMoment61.getN();
        secondMoment61.clear();
        secondMoment61.clear();
        secondMoment61.increment((double) (byte) 100);
        secondMoment61.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double73 = variance72.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        double[] doubleArray79 = new double[] { 0L, (byte) 10 };
        double double80 = variance75.evaluate(doubleArray79);
        double double82 = variance72.evaluate(doubleArray79, (double) 10L);
        double double83 = variance70.evaluate(doubleArray79);
        double[] doubleArray87 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double88 = variance70.evaluate(doubleArray87);
        double double89 = secondMoment61.evaluate(doubleArray87);
        double double92 = secondMoment55.evaluate(doubleArray87, 0, (int) (short) 1);
        double double94 = variance49.evaluate(doubleArray87, 651942.9897959187d);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray87, 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 2024039.120370371d + "'", double88 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 4048078.240740742d + "'", double89 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 2024039.1204833984d + "'", double94 == 2024039.1204833984d);
    }

    @Test
    public void test02184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02184");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        double double5 = secondMoment1.getResult();
        secondMoment1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double[] doubleArray9 = new double[] {};
        double double10 = secondMoment1.evaluate(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        variance12.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        double double17 = secondMoment15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment15);
        secondMoment15.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double22 = variance21.getResult();
        double[] doubleArray25 = new double[] { 0L, (byte) 10 };
        double double26 = variance21.evaluate(doubleArray25);
        secondMoment15.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean32 = variance30.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.setBiasCorrected(false);
        boolean boolean39 = variance34.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean41 = variance34.equals((java.lang.Object) secondMoment40);
        double double42 = secondMoment40.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        double[] doubleArray51 = new double[] { 0L, (byte) 10 };
        double double52 = variance47.evaluate(doubleArray51);
        double double54 = variance44.evaluate(doubleArray51, (double) 10L);
        double double57 = secondMoment40.evaluate(doubleArray51, (int) (short) 0, 1);
        double double58 = variance30.evaluate(doubleArray51);
        secondMoment15.incrementAll(doubleArray51);
        variance12.incrementAll(doubleArray51);
        double double61 = secondMoment1.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
    }

    @Test
    public void test02185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02185");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment(2136.805555555555d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance13.increment((-1.0d));
        variance13.setBiasCorrected(false);
        boolean boolean18 = variance13.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean20 = variance13.equals((java.lang.Object) secondMoment19);
        double double21 = secondMoment19.getResult();
        secondMoment19.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        double[] doubleArray31 = new double[] { 0L, (byte) 10 };
        double double32 = variance27.evaluate(doubleArray31);
        double double34 = variance24.evaluate(doubleArray31, (double) 10L);
        long long35 = variance24.getN();
        variance24.increment((double) 0L);
        double[] doubleArray39 = new double[] { 10.0d };
        variance24.incrementAll(doubleArray39);
        secondMoment19.incrementAll(doubleArray39);
        // The following exception was thrown during execution in test generation
        try {
            double double44 = secondMoment0.evaluate(doubleArray39, (int) ' ', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0]");
    }

    @Test
    public void test02186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02186");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance14.increment((-1.0d));
        variance14.setBiasCorrected(false);
        boolean boolean19 = variance14.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean21 = variance14.equals((java.lang.Object) secondMoment20);
        double double22 = secondMoment20.getResult();
        secondMoment20.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        secondMoment20.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance28.increment((-1.0d));
        variance28.setBiasCorrected(false);
        boolean boolean33 = variance28.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean35 = variance28.equals((java.lang.Object) secondMoment34);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        double[] doubleArray44 = new double[] { 0L, (byte) 10 };
        double double45 = variance40.evaluate(doubleArray44);
        double double47 = variance37.evaluate(doubleArray44, (double) 10L);
        double double51 = variance28.evaluate(doubleArray44, (double) (short) 0, 0, (int) (short) 0);
        double double54 = secondMoment20.evaluate(doubleArray44, 0, 0);
        variance12.incrementAll(doubleArray44);
        variance10.incrementAll(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment57 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment57);
        long long59 = secondMoment57.getN();
        secondMoment57.clear();
        double double61 = secondMoment57.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance63.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double69 = variance68.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double72 = variance71.getResult();
        double[] doubleArray75 = new double[] { 0L, (byte) 10 };
        double double76 = variance71.evaluate(doubleArray75);
        double double78 = variance68.evaluate(doubleArray75, (double) 10L);
        double double79 = variance66.evaluate(doubleArray75);
        double double80 = variance63.evaluate(doubleArray75);
        secondMoment57.incrementAll(doubleArray75, 1, (int) (byte) 0);
        double double84 = variance10.evaluate(doubleArray75);
        double double85 = variance7.evaluate(doubleArray75);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
    }

    @Test
    public void test02187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02187");
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.setBiasCorrected(false);
        boolean boolean8 = variance3.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean10 = variance3.equals((java.lang.Object) secondMoment9);
        secondMoment9.increment((double) (short) 0);
        secondMoment9.increment((double) 1.0f);
        double double15 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        secondMoment9.increment(Double.NaN);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.increment((double) (byte) 0);
        double double22 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment25);
        long long27 = secondMoment25.getN();
        secondMoment25.clear();
        secondMoment25.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment25);
        variance31.setBiasCorrected(false);
        double[] doubleArray39 = new double[] { 1L, '#', 0.0d, 6L, 0.0d };
        variance31.incrementAll(doubleArray39);
        double double41 = variance31.getResult();
        variance31.increment((double) 100);
        variance31.increment(2136.8055555559695d);
        double double46 = variance31.getResult();
        boolean boolean47 = secondMoment9.equals((java.lang.Object) variance31);
        secondMoment9.clear();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.5d + "'", double15 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 35.0, 0.0, 6.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test02188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02188");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance6.increment((-1.0d));
        variance6.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double17 = variance16.getResult();
        double[] doubleArray20 = new double[] { 0L, (byte) 10 };
        double double21 = variance16.evaluate(doubleArray20);
        double double23 = variance13.evaluate(doubleArray20, (double) 10L);
        double double24 = variance11.evaluate(doubleArray20);
        double double25 = variance6.evaluate(doubleArray20);
        variance4.incrementAll(doubleArray20);
        double double27 = variance1.evaluate(doubleArray20);
        java.lang.Class<?> wildcardClass28 = doubleArray20.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test02189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02189");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        double double5 = secondMoment1.getResult();
        double double6 = secondMoment1.getResult();
        secondMoment1.increment(14205.875d);
        double double9 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        java.lang.Class<?> wildcardClass11 = variance10.getClass();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test02190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02190");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        double double15 = secondMoment13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment13);
        secondMoment13.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double20 = variance19.getResult();
        double[] doubleArray23 = new double[] { 0L, (byte) 10 };
        double double24 = variance19.evaluate(doubleArray23);
        secondMoment13.incrementAll(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        secondMoment13.clear();
        secondMoment13.increment(Double.NaN);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment13);
        secondMoment13.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance33.clear();
        variance33.increment((double) (short) -1);
        boolean boolean37 = variance33.isBiasCorrected();
        variance33.increment((double) 6L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance41.increment((-1.0d));
        variance41.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray54 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double55 = variance47.evaluate(doubleArray54);
        variance41.incrementAll(doubleArray54);
        variance33.incrementAll(doubleArray54);
        boolean boolean58 = secondMoment13.equals((java.lang.Object) doubleArray54);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray54, 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2136.8055555555557d + "'", double9 == 2136.8055555555557d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2136.8055555555557d + "'", double55 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test02191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02191");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double3 = variance2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double6 = variance5.getResult();
        double[] doubleArray9 = new double[] { 0L, (byte) 10 };
        double double10 = variance5.evaluate(doubleArray9);
        double double12 = variance2.evaluate(doubleArray9, (double) 10L);
        long long13 = variance2.getN();
        boolean boolean14 = secondMoment0.equals((java.lang.Object) long13);
        secondMoment0.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance18.increment((-1.0d));
        variance18.setBiasCorrected(false);
        variance18.increment(2136.8055555555557d);
        variance18.setBiasCorrected(false);
        java.lang.Class<?> wildcardClass27 = variance18.getClass();
        boolean boolean28 = secondMoment0.equals((java.lang.Object) variance18);
        secondMoment0.clear();
        secondMoment0.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 50.0d + "'", double10 == 50.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test02192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02192");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        double double5 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        double double22 = variance12.evaluate(doubleArray19, (double) 10L);
        double double23 = variance10.evaluate(doubleArray19);
        double double24 = variance7.evaluate(doubleArray19);
        secondMoment1.incrementAll(doubleArray19, 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean32 = variance30.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray41 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double42 = variance34.evaluate(doubleArray41);
        double double43 = variance30.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance45.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double54 = variance53.getResult();
        double[] doubleArray57 = new double[] { 0L, (byte) 10 };
        double double58 = variance53.evaluate(doubleArray57);
        double double60 = variance50.evaluate(doubleArray57, (double) 10L);
        double double61 = variance48.evaluate(doubleArray57);
        double double62 = variance45.evaluate(doubleArray57);
        double double63 = variance30.evaluate(doubleArray57);
        double double64 = secondMoment1.evaluate(doubleArray57);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2136.8055555555557d + "'", double42 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2564.166666666667d + "'", double43 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
    }

    @Test
    public void test02193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02193");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment((double) '4');
        long long6 = secondMoment0.getN();
        secondMoment0.clear();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
    }

    @Test
    public void test02194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02194");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double[] doubleArray5 = new double[] { 0L, (byte) 10 };
        double double6 = variance1.evaluate(doubleArray5);
        long long7 = variance1.getN();
        variance1.setBiasCorrected(true);
        variance1.increment((double) 3L);
        double double12 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        long long16 = secondMoment14.getN();
        secondMoment14.clear();
        double double18 = secondMoment14.getResult();
        secondMoment14.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        double[] doubleArray22 = new double[] {};
        double double23 = secondMoment14.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance26.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance30.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        double[] doubleArray42 = new double[] { 0L, (byte) 10 };
        double double43 = variance38.evaluate(doubleArray42);
        double double45 = variance35.evaluate(doubleArray42, (double) 10L);
        double double46 = variance33.evaluate(doubleArray42);
        double double47 = variance30.evaluate(doubleArray42);
        double double48 = variance26.evaluate(doubleArray42);
        double double49 = variance24.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance51.increment((-1.0d));
        variance51.setBiasCorrected(false);
        boolean boolean56 = variance51.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment57 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean58 = variance51.equals((java.lang.Object) secondMoment57);
        double double59 = secondMoment57.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double65 = variance64.getResult();
        double[] doubleArray68 = new double[] { 0L, (byte) 10 };
        double double69 = variance64.evaluate(doubleArray68);
        double double71 = variance61.evaluate(doubleArray68, (double) 10L);
        double double74 = secondMoment57.evaluate(doubleArray68, (int) (short) 0, 1);
        double double75 = variance24.evaluate(doubleArray68);
        double double78 = variance1.evaluate(doubleArray68, (int) (byte) 0, (int) (byte) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.0d + "'", double6 == 50.0d);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
    }

    @Test
    public void test02195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02195");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double[] doubleArray5 = new double[] { 0L, (byte) 10 };
        double double6 = variance1.evaluate(doubleArray5);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance9.increment((-1.0d));
        variance9.setBiasCorrected(false);
        boolean boolean14 = variance9.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        double double18 = secondMoment16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment16);
        secondMoment16.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        double[] doubleArray26 = new double[] { 0L, (byte) 10 };
        double double27 = variance22.evaluate(doubleArray26);
        secondMoment16.incrementAll(doubleArray26);
        boolean boolean29 = variance9.equals((java.lang.Object) secondMoment16);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance31.increment((-1.0d));
        variance31.setBiasCorrected(false);
        boolean boolean36 = variance31.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean38 = variance31.equals((java.lang.Object) secondMoment37);
        boolean boolean39 = secondMoment16.equals((java.lang.Object) boolean38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment16);
        variance40.increment((double) (short) 0);
        boolean boolean43 = variance40.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double45 = secondMoment44.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment46);
        long long48 = secondMoment46.getN();
        secondMoment46.clear();
        secondMoment46.clear();
        secondMoment46.increment((double) (byte) 100);
        long long53 = secondMoment46.getN();
        double[] doubleArray55 = new double[] { 2024039.1203703713d };
        double double56 = secondMoment46.evaluate(doubleArray55);
        secondMoment44.incrementAll(doubleArray55);
        double double59 = variance40.evaluate(doubleArray55, 651942.9897959187d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment60 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment60);
        long long62 = secondMoment60.getN();
        secondMoment60.clear();
        secondMoment60.clear();
        secondMoment60.increment((double) (byte) 100);
        secondMoment60.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment60);
        secondMoment60.increment(2136.805555555555d);
        secondMoment60.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance73.increment((-1.0d));
        variance73.setBiasCorrected(false);
        variance73.increment((double) 100L);
        boolean boolean80 = variance73.isBiasCorrected();
        boolean boolean81 = variance73.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray90 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double91 = variance83.evaluate(doubleArray90);
        double double93 = variance73.evaluate(doubleArray90, (double) (byte) 10);
        secondMoment60.incrementAll(doubleArray90);
        double double95 = variance40.evaluate(doubleArray90);
        double double96 = variance1.evaluate(doubleArray90);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.0d + "'", double6 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 2136.8055555555557d + "'", double91 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 2136.8055555555557d + "'", double93 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 2564.166666666667d + "'", double95 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 2564.166666666667d + "'", double96 == 2564.166666666667d);
    }

    @Test
    public void test02196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02196");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        double double2 = secondMoment0.getResult();
        secondMoment0.clear();
        java.lang.Class<?> wildcardClass4 = secondMoment0.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test02197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02197");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double[] doubleArray5 = new double[] { 0L, (byte) 10 };
        double double6 = variance1.evaluate(doubleArray5);
        variance1.clear();
        variance1.clear();
        long long9 = variance1.getN();
        variance1.setBiasCorrected(false);
        double double12 = variance1.getResult();
        variance1.increment(1142553.1483410494d);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.0d + "'", double6 == 50.0d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test02198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02198");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double[] doubleArray5 = new double[] { 0L, (byte) 10 };
        double double6 = variance1.evaluate(doubleArray5);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean10 = variance8.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        double[] doubleArray21 = new double[] { 0L, (byte) 10 };
        double double22 = variance17.evaluate(doubleArray21);
        double double24 = variance14.evaluate(doubleArray21, (double) 10L);
        double double25 = variance12.evaluate(doubleArray21);
        double[] doubleArray29 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double30 = variance12.evaluate(doubleArray29);
        double double32 = variance8.evaluate(doubleArray29, (double) (byte) 1);
        variance8.clear();
        variance8.increment((double) 100.0f);
        variance8.increment(2136.805555555555d);
        boolean boolean38 = variance1.equals((java.lang.Object) 2136.805555555555d);
        double double39 = variance1.getResult();
        variance1.increment(25.0d);
        long long42 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double45 = secondMoment44.getResult();
        double double46 = secondMoment44.getResult();
        secondMoment44.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment44);
        variance48.clear();
        double double50 = variance48.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance52.increment((-1.0d));
        variance52.setBiasCorrected(false);
        boolean boolean57 = variance52.isBiasCorrected();
        double[] doubleArray58 = new double[] {};
        double double59 = variance52.evaluate(doubleArray58);
        variance52.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double66 = variance65.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double69 = variance68.getResult();
        double[] doubleArray72 = new double[] { 0L, (byte) 10 };
        double double73 = variance68.evaluate(doubleArray72);
        double double75 = variance65.evaluate(doubleArray72, (double) 10L);
        double double76 = variance63.evaluate(doubleArray72);
        variance52.incrementAll(doubleArray72);
        double double78 = variance48.evaluate(doubleArray72);
        variance1.incrementAll(doubleArray72);
        variance1.increment(12820.833333333334d);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.0d + "'", double6 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2024039.120370371d + "'", double30 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2024039.120370371d + "'", double32 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 25.0d + "'", double78 == 25.0d);
    }

    @Test
    public void test02199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02199");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        secondMoment0.increment(25.0d);
        secondMoment0.clear();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance12.clear();
        double double14 = variance12.getResult();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test02200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02200");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        secondMoment2.increment((double) 2L);
        double double9 = secondMoment2.getResult();
        secondMoment2.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        double double13 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.increment(1349359.4135802984d);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1152.0d + "'", double13 == 1152.0d);
    }

    @Test
    public void test02201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02201");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        double double12 = secondMoment7.getResult();
        long long13 = secondMoment7.getN();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        variance15.increment(26761.69230769231d);
        java.lang.Class<?> wildcardClass18 = variance15.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test02202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02202");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance6.setBiasCorrected(false);
        double double9 = variance6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance12.increment((-1.0d));
        variance12.setBiasCorrected(false);
        boolean boolean17 = variance12.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean19 = variance12.equals((java.lang.Object) secondMoment18);
        secondMoment18.increment((double) (short) 0);
        secondMoment18.increment((double) 1.0f);
        double double24 = secondMoment18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        secondMoment18.increment(Double.NaN);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment18);
        variance28.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance33.increment((-1.0d));
        variance33.setBiasCorrected(false);
        boolean boolean38 = variance33.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean40 = variance33.equals((java.lang.Object) secondMoment39);
        double double41 = secondMoment39.getResult();
        secondMoment39.clear();
        secondMoment39.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment39);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance46.increment((-1.0d));
        variance46.setBiasCorrected(false);
        boolean boolean51 = variance46.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double54 = variance53.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double57 = variance56.getResult();
        double[] doubleArray60 = new double[] { 0L, (byte) 10 };
        double double61 = variance56.evaluate(doubleArray60);
        double double63 = variance53.evaluate(doubleArray60, (double) 10L);
        double double64 = variance46.evaluate(doubleArray60);
        long long65 = variance46.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance67.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double73 = variance72.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        double[] doubleArray79 = new double[] { 0L, (byte) 10 };
        double double80 = variance75.evaluate(doubleArray79);
        double double82 = variance72.evaluate(doubleArray79, (double) 10L);
        double double83 = variance70.evaluate(doubleArray79);
        double double84 = variance67.evaluate(doubleArray79);
        double double85 = variance46.evaluate(doubleArray79);
        double double86 = variance44.evaluate(doubleArray79);
        double double90 = variance28.evaluate(doubleArray79, (double) (byte) 10, (int) (byte) 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            variance6.incrementAll(doubleArray79, (int) ' ', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.5d + "'", double24 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 25.0d + "'", double64 == 25.0d);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 25.0d + "'", double85 == 25.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 25.0d + "'", double86 == 25.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double90));
    }

    @Test
    public void test02203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02203");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        boolean boolean8 = variance1.isBiasCorrected();
        variance1.clear();
        long long10 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        double double14 = secondMoment12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment12);
        secondMoment12.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        double[] doubleArray22 = new double[] { 0L, (byte) 10 };
        double double23 = variance18.evaluate(doubleArray22);
        secondMoment12.incrementAll(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean29 = variance27.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance31.increment((-1.0d));
        variance31.setBiasCorrected(false);
        boolean boolean36 = variance31.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean38 = variance31.equals((java.lang.Object) secondMoment37);
        double double39 = secondMoment37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        double[] doubleArray48 = new double[] { 0L, (byte) 10 };
        double double49 = variance44.evaluate(doubleArray48);
        double double51 = variance41.evaluate(doubleArray48, (double) 10L);
        double double54 = secondMoment37.evaluate(doubleArray48, (int) (short) 0, 1);
        double double55 = variance27.evaluate(doubleArray48);
        secondMoment12.incrementAll(doubleArray48);
        double double57 = variance1.evaluate(doubleArray48);
        variance1.setBiasCorrected(false);
        variance1.clear();
        variance1.clear();
        double[] doubleArray62 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double63 = variance1.evaluate(doubleArray62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 25.0d + "'", double57 == 25.0d);
    }

    @Test
    public void test02204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02204");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        long long9 = secondMoment7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance11.increment((-1.0d));
        variance11.setBiasCorrected(false);
        variance11.increment((double) 100L);
        boolean boolean18 = variance11.isBiasCorrected();
        boolean boolean19 = variance11.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray28 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double29 = variance21.evaluate(doubleArray28);
        double double31 = variance11.evaluate(doubleArray28, (double) (byte) 10);
        secondMoment7.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment33);
        long long35 = secondMoment33.getN();
        secondMoment33.clear();
        double double37 = secondMoment33.getResult();
        secondMoment33.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment33);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance42.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        double[] doubleArray54 = new double[] { 0L, (byte) 10 };
        double double55 = variance50.evaluate(doubleArray54);
        double double57 = variance47.evaluate(doubleArray54, (double) 10L);
        double double58 = variance45.evaluate(doubleArray54);
        double double59 = variance42.evaluate(doubleArray54);
        variance40.incrementAll(doubleArray54);
        variance40.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double64 = variance63.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double67 = variance66.getResult();
        double[] doubleArray70 = new double[] { 0L, (byte) 10 };
        double double71 = variance66.evaluate(doubleArray70);
        double double73 = variance63.evaluate(doubleArray70, (double) 10L);
        variance40.incrementAll(doubleArray70);
        secondMoment7.incrementAll(doubleArray70);
        double double76 = secondMoment7.getResult();
        long long77 = secondMoment7.getN();
        double double78 = secondMoment7.getResult();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2136.8055555555557d + "'", double29 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2136.8055555555557d + "'", double31 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 14205.875d + "'", double76 == 14205.875d);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 8L + "'", long77 == 8L);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 14205.875d + "'", double78 == 14205.875d);
    }

    @Test
    public void test02205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02205");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean12 = variance10.equals((java.lang.Object) (short) 10);
        double double13 = variance10.getResult();
        variance10.clear();
        boolean boolean15 = variance10.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        variance17.setBiasCorrected(false);
        boolean boolean22 = variance17.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean24 = variance17.equals((java.lang.Object) secondMoment23);
        secondMoment23.increment((double) (short) 0);
        secondMoment23.increment((double) 1.0f);
        double double29 = secondMoment23.getResult();
        double double30 = secondMoment23.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment31);
        double double33 = secondMoment31.getResult();
        boolean boolean34 = secondMoment23.equals((java.lang.Object) double33);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment35);
        long long37 = secondMoment35.getN();
        secondMoment35.clear();
        secondMoment35.clear();
        secondMoment35.increment((double) (byte) 100);
        long long42 = secondMoment35.getN();
        double[] doubleArray44 = new double[] { 2024039.1203703713d };
        double double45 = secondMoment35.evaluate(doubleArray44);
        double double46 = secondMoment23.evaluate(doubleArray44);
        double double47 = variance10.evaluate(doubleArray44);
        // The following exception was thrown during execution in test generation
        try {
            double double50 = variance7.evaluate(doubleArray44, (int) (short) 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.5d + "'", double29 == 0.5d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.5d + "'", double30 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
    }

    @Test
    public void test02206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02206");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        secondMoment8.incrementAll(doubleArray18);
        boolean boolean21 = variance1.equals((java.lang.Object) secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.setBiasCorrected(false);
        boolean boolean28 = variance23.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean30 = variance23.equals((java.lang.Object) secondMoment29);
        boolean boolean31 = secondMoment8.equals((java.lang.Object) boolean30);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance33.increment((-1.0d));
        variance33.setBiasCorrected(false);
        boolean boolean38 = variance33.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean40 = variance33.equals((java.lang.Object) secondMoment39);
        secondMoment39.increment((double) (short) 0);
        secondMoment39.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray53 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double54 = variance46.evaluate(doubleArray53);
        double double55 = secondMoment39.evaluate(doubleArray53);
        double double56 = secondMoment8.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance58.increment((-1.0d));
        variance58.setBiasCorrected(false);
        variance58.increment((double) 100L);
        boolean boolean65 = variance58.isBiasCorrected();
        variance58.clear();
        double double67 = variance58.getResult();
        boolean boolean68 = secondMoment8.equals((java.lang.Object) double67);
        double double69 = secondMoment8.getResult();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2136.8055555555557d + "'", double54 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 12820.833333333334d + "'", double55 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 12820.833333333334d + "'", double56 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 12820.833333333334d + "'", double69 == 12820.833333333334d);
    }

    @Test
    public void test02207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02207");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        secondMoment2.increment((double) 2L);
        double double9 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance11.increment((-1.0d));
        long long14 = variance11.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance19.increment((-1.0d));
        variance19.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        double[] doubleArray33 = new double[] { 0L, (byte) 10 };
        double double34 = variance29.evaluate(doubleArray33);
        double double36 = variance26.evaluate(doubleArray33, (double) 10L);
        double double37 = variance24.evaluate(doubleArray33);
        double double38 = variance19.evaluate(doubleArray33);
        variance17.incrementAll(doubleArray33);
        variance15.incrementAll(doubleArray33);
        double double41 = variance11.evaluate(doubleArray33);
        boolean boolean42 = secondMoment2.equals((java.lang.Object) doubleArray33);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment46);
        long long48 = secondMoment46.getN();
        secondMoment46.clear();
        double double50 = secondMoment46.getResult();
        secondMoment46.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment46);
        double[] doubleArray54 = new double[] {};
        double double55 = secondMoment46.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment46);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment46);
        double double58 = secondMoment46.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment59);
        long long61 = secondMoment59.getN();
        secondMoment59.clear();
        secondMoment59.increment(10.0d);
        double double65 = secondMoment59.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double70 = variance69.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double73 = variance72.getResult();
        double[] doubleArray76 = new double[] { 0L, (byte) 10 };
        double double77 = variance72.evaluate(doubleArray76);
        double double79 = variance69.evaluate(doubleArray76, (double) 10L);
        double double80 = variance67.evaluate(doubleArray76);
        double[] doubleArray84 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double85 = variance67.evaluate(doubleArray84);
        double double86 = secondMoment59.evaluate(doubleArray84);
        secondMoment46.incrementAll(doubleArray84);
        boolean boolean88 = secondMoment2.equals((java.lang.Object) secondMoment46);
        org.apache.commons.math.stat.descriptive.moment.Variance variance89 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment46);
        long long90 = variance89.getN();
        java.lang.Class<?> wildcardClass91 = variance89.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2024039.120370371d + "'", double85 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 4048078.240740742d + "'", double86 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 4L + "'", long90 == 4L);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test02208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02208");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance7.increment((-1.0d));
        variance7.setBiasCorrected(false);
        boolean boolean12 = variance7.isBiasCorrected();
        double[] doubleArray13 = new double[] {};
        double double14 = variance7.evaluate(doubleArray13);
        secondMoment1.incrementAll(doubleArray13);
        long long16 = secondMoment1.getN();
        long long17 = secondMoment1.getN();
        secondMoment1.increment(2564.1666666030883d);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test02209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02209");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) 6L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance10.increment(227.30000000000018d);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test02210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02210");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        long long14 = secondMoment7.getN();
        long long15 = secondMoment7.getN();
        double double16 = secondMoment7.getResult();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2L + "'", long14 == 2L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.5d + "'", double16 == 0.5d);
    }

    @Test
    public void test02211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02211");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        double double6 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        double double20 = variance10.evaluate(doubleArray17, (double) 10L);
        double double21 = variance8.evaluate(doubleArray17);
        double[] doubleArray25 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double26 = variance8.evaluate(doubleArray25);
        double double27 = secondMoment0.evaluate(doubleArray25);
        long long28 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance30.increment((-1.0d));
        long long33 = variance30.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance38.increment((-1.0d));
        variance38.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        double[] doubleArray52 = new double[] { 0L, (byte) 10 };
        double double53 = variance48.evaluate(doubleArray52);
        double double55 = variance45.evaluate(doubleArray52, (double) 10L);
        double double56 = variance43.evaluate(doubleArray52);
        double double57 = variance38.evaluate(doubleArray52);
        variance36.incrementAll(doubleArray52);
        variance34.incrementAll(doubleArray52);
        double double60 = variance30.evaluate(doubleArray52);
        double double63 = secondMoment0.evaluate(doubleArray52, (int) (byte) 0, 1);
        double double64 = secondMoment0.getResult();
        secondMoment0.clear();
        secondMoment0.increment(227.2998046875d);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2024039.120370371d + "'", double26 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 4048078.240740742d + "'", double27 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 3L + "'", long28 == 3L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
    }

    @Test
    public void test02212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02212");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        long long11 = secondMoment9.getN();
        secondMoment9.clear();
        double double13 = secondMoment9.getResult();
        secondMoment9.increment((double) (short) 0);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        boolean boolean18 = variance1.equals((java.lang.Object) secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double24 = variance23.getResult();
        double[] doubleArray27 = new double[] { 0L, (byte) 10 };
        double double28 = variance23.evaluate(doubleArray27);
        double double30 = variance20.evaluate(doubleArray27, (double) 10L);
        long long31 = variance20.getN();
        variance20.setBiasCorrected(false);
        boolean boolean34 = variance20.isBiasCorrected();
        long long35 = variance20.getN();
        long long36 = variance20.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        variance38.increment((double) (short) -1);
        double double42 = variance38.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        double[] doubleArray48 = new double[] { 0L, (byte) 10 };
        double double49 = variance44.evaluate(doubleArray48);
        double double50 = variance38.evaluate(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance52.increment((-1.0d));
        variance52.setBiasCorrected(false);
        boolean boolean57 = variance52.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean59 = variance52.equals((java.lang.Object) secondMoment58);
        double double60 = secondMoment58.getResult();
        secondMoment58.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment58);
        secondMoment58.increment((double) 10.0f);
        secondMoment58.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment58);
        java.lang.Object obj67 = null;
        boolean boolean68 = variance66.equals(obj67);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double70 = secondMoment69.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment71 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment71);
        long long73 = secondMoment71.getN();
        secondMoment71.clear();
        secondMoment71.clear();
        secondMoment71.increment((double) (byte) 100);
        long long78 = secondMoment71.getN();
        double[] doubleArray80 = new double[] { 2024039.1203703713d };
        double double81 = secondMoment71.evaluate(doubleArray80);
        secondMoment69.incrementAll(doubleArray80);
        variance66.incrementAll(doubleArray80);
        variance38.incrementAll(doubleArray80);
        double double85 = variance20.evaluate(doubleArray80);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray80, (int) (byte) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1L + "'", long78 == 1L);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
    }

    @Test
    public void test02213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02213");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        long long7 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean11 = variance9.equals((java.lang.Object) (short) 10);
        double double12 = variance9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        double[] doubleArray21 = new double[] { 0L, (byte) 10 };
        double double22 = variance17.evaluate(doubleArray21);
        double double24 = variance14.evaluate(doubleArray21, (double) 10L);
        double double25 = variance9.evaluate(doubleArray21);
        double double26 = variance9.getResult();
        double double27 = variance9.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        long long30 = secondMoment28.getN();
        secondMoment28.clear();
        secondMoment28.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        variance34.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment36);
        long long38 = secondMoment36.getN();
        secondMoment36.clear();
        secondMoment36.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment36);
        variance42.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean48 = variance46.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray57 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double58 = variance50.evaluate(doubleArray57);
        double double59 = variance46.evaluate(doubleArray57);
        double double61 = variance42.evaluate(doubleArray57, (double) 1.0f);
        double double62 = variance34.evaluate(doubleArray57);
        variance9.incrementAll(doubleArray57);
        double double64 = variance9.getResult();
        boolean boolean65 = secondMoment0.equals((java.lang.Object) double64);
        secondMoment0.clear();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2136.8055555555557d + "'", double58 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2564.166666666667d + "'", double59 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2136.805555555555d + "'", double61 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2564.166666666667d + "'", double62 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2564.166666666667d + "'", double64 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test02214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02214");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.increment((double) (byte) 100);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment(2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance19.increment((-1.0d));
        variance19.setBiasCorrected(false);
        boolean boolean24 = variance19.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean26 = variance19.equals((java.lang.Object) secondMoment25);
        double double27 = secondMoment25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        double[] doubleArray36 = new double[] { 0L, (byte) 10 };
        double double37 = variance32.evaluate(doubleArray36);
        double double39 = variance29.evaluate(doubleArray36, (double) 10L);
        double double42 = secondMoment25.evaluate(doubleArray36, (int) (short) 0, 1);
        double double43 = variance15.evaluate(doubleArray36);
        double double44 = variance13.evaluate(doubleArray36);
        variance13.clear();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
    }

    @Test
    public void test02215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02215");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        double[] doubleArray15 = new double[] { 0L, (byte) 10 };
        double double16 = variance11.evaluate(doubleArray15);
        double double18 = variance8.evaluate(doubleArray15, (double) 10L);
        double double19 = variance6.evaluate(doubleArray15);
        double double20 = variance1.evaluate(doubleArray15);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        double[] doubleArray26 = new double[] { 0L, (byte) 10 };
        double double27 = variance22.evaluate(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray36 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double37 = variance29.evaluate(doubleArray36);
        double double38 = variance22.evaluate(doubleArray36);
        double double39 = variance1.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double44 = variance43.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double47 = variance46.getResult();
        double[] doubleArray50 = new double[] { 0L, (byte) 10 };
        double double51 = variance46.evaluate(doubleArray50);
        double double53 = variance43.evaluate(doubleArray50, (double) 10L);
        double double54 = variance41.evaluate(doubleArray50);
        variance1.incrementAll(doubleArray50, (int) (byte) 0, (int) (byte) 0);
        variance1.clear();
        double double59 = variance1.getResult();
        long long60 = variance1.getN();
        double double61 = variance1.getResult();
        variance1.increment(10.0d);
        double double64 = variance1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2136.8055555555557d + "'", double37 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2564.166666666667d + "'", double38 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2564.166666666667d + "'", double39 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
    }

    @Test
    public void test02216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02216");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        long long9 = secondMoment7.getN();
        secondMoment7.clear();
        double double11 = secondMoment7.getResult();
        secondMoment7.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        double[] doubleArray15 = new double[] {};
        double double16 = secondMoment7.evaluate(doubleArray15);
        secondMoment1.incrementAll(doubleArray15);
        secondMoment1.increment((double) (-1L));
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance20.increment(1840.2222222222222d);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test02217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02217");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double[] doubleArray8 = new double[] {};
        double double9 = secondMoment0.evaluate(doubleArray8);
        double double10 = secondMoment0.getResult();
        secondMoment0.clear();
        double double12 = secondMoment0.getResult();
        secondMoment0.clear();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double17 = variance16.getResult();
        double[] doubleArray20 = new double[] { 0L, (byte) 10 };
        double double21 = variance16.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean25 = variance23.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        double[] doubleArray36 = new double[] { 0L, (byte) 10 };
        double double37 = variance32.evaluate(doubleArray36);
        double double39 = variance29.evaluate(doubleArray36, (double) 10L);
        double double40 = variance27.evaluate(doubleArray36);
        double[] doubleArray44 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double45 = variance27.evaluate(doubleArray44);
        double double47 = variance23.evaluate(doubleArray44, (double) (byte) 1);
        variance23.clear();
        variance23.increment((double) 100.0f);
        variance23.increment(2136.805555555555d);
        boolean boolean53 = variance16.equals((java.lang.Object) 2136.805555555555d);
        double double54 = variance16.getResult();
        variance16.increment(25.0d);
        long long57 = variance16.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double60 = secondMoment59.getResult();
        double double61 = secondMoment59.getResult();
        secondMoment59.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment59);
        variance63.clear();
        double double65 = variance63.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance67.increment((-1.0d));
        variance67.setBiasCorrected(false);
        boolean boolean72 = variance67.isBiasCorrected();
        double[] doubleArray73 = new double[] {};
        double double74 = variance67.evaluate(doubleArray73);
        variance67.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double81 = variance80.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double84 = variance83.getResult();
        double[] doubleArray87 = new double[] { 0L, (byte) 10 };
        double double88 = variance83.evaluate(doubleArray87);
        double double90 = variance80.evaluate(doubleArray87, (double) 10L);
        double double91 = variance78.evaluate(doubleArray87);
        variance67.incrementAll(doubleArray87);
        double double93 = variance63.evaluate(doubleArray87);
        variance16.incrementAll(doubleArray87);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray87, (int) 'a', (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2024039.120370371d + "'", double45 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2024039.120370371d + "'", double47 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 25.0d + "'", double93 == 25.0d);
    }

    @Test
    public void test02218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02218");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        double double14 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        double double17 = secondMoment15.getResult();
        boolean boolean18 = secondMoment7.equals((java.lang.Object) double17);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment19);
        long long21 = secondMoment19.getN();
        secondMoment19.clear();
        secondMoment19.clear();
        secondMoment19.increment((double) (byte) 100);
        long long26 = secondMoment19.getN();
        double[] doubleArray28 = new double[] { 2024039.1203703713d };
        double double29 = secondMoment19.evaluate(doubleArray28);
        double double30 = secondMoment7.evaluate(doubleArray28);
        secondMoment7.increment((double) 100L);
        secondMoment7.increment(2024039.12109375d);
        long long35 = secondMoment7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        double double37 = secondMoment7.getResult();
        secondMoment7.clear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 3L + "'", long35 == 3L);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2.7308863762864443E12d + "'", double37 == 2.7308863762864443E12d);
    }

    @Test
    public void test02219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02219");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        boolean boolean8 = variance1.isBiasCorrected();
        variance1.clear();
        long long10 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        double double14 = secondMoment12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment12);
        secondMoment12.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        double[] doubleArray22 = new double[] { 0L, (byte) 10 };
        double double23 = variance18.evaluate(doubleArray22);
        secondMoment12.incrementAll(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean29 = variance27.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance31.increment((-1.0d));
        variance31.setBiasCorrected(false);
        boolean boolean36 = variance31.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean38 = variance31.equals((java.lang.Object) secondMoment37);
        double double39 = secondMoment37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        double[] doubleArray48 = new double[] { 0L, (byte) 10 };
        double double49 = variance44.evaluate(doubleArray48);
        double double51 = variance41.evaluate(doubleArray48, (double) 10L);
        double double54 = secondMoment37.evaluate(doubleArray48, (int) (short) 0, 1);
        double double55 = variance27.evaluate(doubleArray48);
        secondMoment12.incrementAll(doubleArray48);
        double double57 = variance1.evaluate(doubleArray48);
        variance1.setBiasCorrected(false);
        variance1.clear();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment62);
        long long64 = secondMoment62.getN();
        secondMoment62.clear();
        secondMoment62.clear();
        secondMoment62.increment((double) (byte) 100);
        secondMoment62.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment62);
        secondMoment62.clear();
        secondMoment62.increment(2024039.12109375d);
        secondMoment62.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double77 = variance76.getResult();
        double[] doubleArray80 = new double[] { 0L, (byte) 10 };
        double double81 = variance76.evaluate(doubleArray80);
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray90 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double91 = variance83.evaluate(doubleArray90);
        double double92 = variance76.evaluate(doubleArray90);
        double double93 = secondMoment62.evaluate(doubleArray90);
        // The following exception was thrown during execution in test generation
        try {
            double double96 = variance1.evaluate(doubleArray90, (int) (byte) -1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 25.0d + "'", double57 == 25.0d);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 2136.8055555555557d + "'", double91 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 2564.166666666667d + "'", double92 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 12820.833333333334d + "'", double93 == 12820.833333333334d);
    }

    @Test
    public void test02220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02220");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        secondMoment7.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.setBiasCorrected(false);
        boolean boolean20 = variance15.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean22 = variance15.equals((java.lang.Object) secondMoment21);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        double[] doubleArray31 = new double[] { 0L, (byte) 10 };
        double double32 = variance27.evaluate(doubleArray31);
        double double34 = variance24.evaluate(doubleArray31, (double) 10L);
        double double38 = variance15.evaluate(doubleArray31, (double) (short) 0, 0, (int) (short) 0);
        double double41 = secondMoment7.evaluate(doubleArray31, 0, 0);
        long long42 = secondMoment7.getN();
        long long43 = secondMoment7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance46.increment((-1.0d));
        variance46.setBiasCorrected(false);
        boolean boolean51 = variance46.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment53);
        double double55 = secondMoment53.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment53);
        secondMoment53.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double60 = variance59.getResult();
        double[] doubleArray63 = new double[] { 0L, (byte) 10 };
        double double64 = variance59.evaluate(doubleArray63);
        secondMoment53.incrementAll(doubleArray63);
        boolean boolean66 = variance46.equals((java.lang.Object) secondMoment53);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance68.increment((-1.0d));
        variance68.setBiasCorrected(false);
        boolean boolean73 = variance68.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment74 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean75 = variance68.equals((java.lang.Object) secondMoment74);
        boolean boolean76 = secondMoment53.equals((java.lang.Object) boolean75);
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment53);
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double80 = variance79.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance82 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double83 = variance82.getResult();
        double[] doubleArray86 = new double[] { 0L, (byte) 10 };
        double double87 = variance82.evaluate(doubleArray86);
        double double89 = variance79.evaluate(doubleArray86, (double) 10L);
        double double90 = secondMoment53.evaluate(doubleArray86);
        long long91 = secondMoment53.getN();
        double double92 = secondMoment53.getResult();
        secondMoment53.clear();
        boolean boolean94 = secondMoment7.equals((java.lang.Object) secondMoment53);
        secondMoment7.increment(14589.499999999998d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance97 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 2L + "'", long91 == 2L);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test02221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02221");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double[] doubleArray5 = new double[] { 0L, (byte) 10 };
        double double6 = variance1.evaluate(doubleArray5);
        double double7 = variance1.getResult();
        double double8 = variance1.getResult();
        variance1.setBiasCorrected(false);
        double double11 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        long long14 = secondMoment12.getN();
        secondMoment12.clear();
        secondMoment12.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        variance17.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean28 = variance26.equals((java.lang.Object) (short) 10);
        boolean boolean29 = variance20.equals((java.lang.Object) variance26);
        long long30 = variance26.getN();
        variance26.setBiasCorrected(false);
        variance26.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance35.increment((-1.0d));
        variance35.setBiasCorrected(false);
        boolean boolean40 = variance35.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean42 = variance35.equals((java.lang.Object) secondMoment41);
        double double43 = secondMoment41.getResult();
        secondMoment41.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        boolean boolean46 = variance45.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance50.increment((-1.0d));
        variance50.setBiasCorrected(false);
        boolean boolean55 = variance50.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean57 = variance50.equals((java.lang.Object) secondMoment56);
        double double58 = secondMoment56.getResult();
        secondMoment56.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment56);
        secondMoment56.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance64.increment((-1.0d));
        variance64.setBiasCorrected(false);
        boolean boolean69 = variance64.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment70 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean71 = variance64.equals((java.lang.Object) secondMoment70);
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double74 = variance73.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double77 = variance76.getResult();
        double[] doubleArray80 = new double[] { 0L, (byte) 10 };
        double double81 = variance76.evaluate(doubleArray80);
        double double83 = variance73.evaluate(doubleArray80, (double) 10L);
        double double87 = variance64.evaluate(doubleArray80, (double) (short) 0, 0, (int) (short) 0);
        double double90 = secondMoment56.evaluate(doubleArray80, 0, 0);
        variance48.incrementAll(doubleArray80);
        double double92 = variance45.evaluate(doubleArray80);
        double double94 = variance26.evaluate(doubleArray80, 13349.428571428572d);
        variance17.incrementAll(doubleArray80);
        double double97 = variance1.evaluate(doubleArray80, Double.NaN);
        variance1.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.0d + "'", double6 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 25.000000029802322d + "'", double94 == 25.000000029802322d);
        org.junit.Assert.assertTrue(Double.isNaN(double97));
    }

    @Test
    public void test02222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02222");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        secondMoment2.increment((double) 2L);
        double double9 = secondMoment2.getResult();
        secondMoment2.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        variance16.clear();
        double double18 = variance16.getResult();
        double[] doubleArray19 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double22 = variance16.evaluate(doubleArray19, 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 661.3333333333334d + "'", double18 == 661.3333333333334d);
    }

    @Test
    public void test02223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02223");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean9 = variance7.equals((java.lang.Object) (short) 10);
        boolean boolean10 = variance1.equals((java.lang.Object) variance7);
        long long11 = variance7.getN();
        variance7.setBiasCorrected(false);
        variance7.increment(2310.1428571428573d);
        double double16 = variance7.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        double double20 = secondMoment18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment18);
        long long22 = variance21.getN();
        variance21.increment((double) '#');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment27);
        double double29 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment27);
        secondMoment27.increment(50.0d);
        secondMoment27.clear();
        double double34 = secondMoment27.getResult();
        double double35 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment27);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double38 = secondMoment37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance40.increment((-1.0d));
        variance40.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        double[] doubleArray54 = new double[] { 0L, (byte) 10 };
        double double55 = variance50.evaluate(doubleArray54);
        double double57 = variance47.evaluate(doubleArray54, (double) 10L);
        double double58 = variance45.evaluate(doubleArray54);
        double double59 = variance40.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        double[] doubleArray65 = new double[] { 0L, (byte) 10 };
        double double66 = variance61.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray75 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double76 = variance68.evaluate(doubleArray75);
        double double77 = variance61.evaluate(doubleArray75);
        double double78 = variance40.evaluate(doubleArray75);
        double double79 = secondMoment37.evaluate(doubleArray75);
        double double80 = secondMoment27.evaluate(doubleArray75);
        variance21.incrementAll(doubleArray75, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double87 = variance7.evaluate(doubleArray75, 2.731142746998975E12d, 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2136.8055555555557d + "'", double76 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2564.166666666667d + "'", double77 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2564.166666666667d + "'", double78 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 12820.833333333334d + "'", double79 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 12820.833333333334d + "'", double80 == 12820.833333333334d);
    }

    @Test
    public void test02224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02224");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        variance1.clear();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        long long7 = secondMoment5.getN();
        secondMoment5.clear();
        secondMoment5.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        double[] doubleArray21 = new double[] { 0L, (byte) 10 };
        double double22 = variance17.evaluate(doubleArray21);
        double double24 = variance14.evaluate(doubleArray21, (double) 10L);
        double double25 = variance12.evaluate(doubleArray21);
        variance12.increment((double) 0.0f);
        boolean boolean28 = variance12.isBiasCorrected();
        long long29 = variance12.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance31.increment((-1.0d));
        variance31.setBiasCorrected(false);
        boolean boolean36 = variance31.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean38 = variance31.equals((java.lang.Object) secondMoment37);
        secondMoment37.increment((double) (short) 0);
        secondMoment37.increment((double) 1.0f);
        double double43 = secondMoment37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        boolean boolean46 = variance12.equals((java.lang.Object) variance45);
        double[] doubleArray47 = new double[] {};
        double double48 = variance45.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance50.increment((-1.0d));
        variance50.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean58 = variance56.equals((java.lang.Object) (short) 10);
        boolean boolean59 = variance50.equals((java.lang.Object) variance56);
        long long60 = variance56.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean64 = variance62.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray73 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double74 = variance66.evaluate(doubleArray73);
        double double75 = variance62.evaluate(doubleArray73);
        double double76 = variance56.evaluate(doubleArray73);
        double double77 = variance45.evaluate(doubleArray73);
        secondMoment5.incrementAll(doubleArray73);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray73, (int) (byte) 100, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.5d + "'", double43 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 2136.8055555555557d + "'", double74 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 2564.166666666667d + "'", double75 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2564.166666666667d + "'", double76 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2564.166666666667d + "'", double77 == 2564.166666666667d);
    }

    @Test
    public void test02225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02225");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        double double5 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        double[] doubleArray13 = new double[] { 0L, (byte) 10 };
        double double14 = variance9.evaluate(doubleArray13);
        secondMoment3.incrementAll(doubleArray13);
        long long16 = secondMoment3.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance21.increment((-1.0d));
        variance21.setBiasCorrected(false);
        boolean boolean26 = variance21.isBiasCorrected();
        double[] doubleArray27 = new double[] {};
        double double28 = variance21.evaluate(doubleArray27);
        variance21.setBiasCorrected(false);
        variance21.clear();
        variance21.increment(227.3d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance35.increment((-1.0d));
        variance35.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean43 = variance41.equals((java.lang.Object) (short) 10);
        boolean boolean44 = variance35.equals((java.lang.Object) variance41);
        long long45 = variance41.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean49 = variance47.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray58 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double59 = variance51.evaluate(doubleArray58);
        double double60 = variance47.evaluate(doubleArray58);
        double double61 = variance41.evaluate(doubleArray58);
        double double62 = variance21.evaluate(doubleArray58);
        // The following exception was thrown during execution in test generation
        try {
            double double65 = secondMoment3.evaluate(doubleArray58, (int) (short) -1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2L + "'", long16 == 2L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2136.8055555555557d + "'", double59 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2564.166666666667d + "'", double60 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2564.166666666667d + "'", double61 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2136.8055555555557d + "'", double62 == 2136.8055555555557d);
    }

    @Test
    public void test02226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02226");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        double double4 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        long long8 = secondMoment6.getN();
        secondMoment6.clear();
        secondMoment6.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        variance11.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance14.increment((-1.0d));
        variance14.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean22 = variance20.equals((java.lang.Object) (short) 10);
        boolean boolean23 = variance14.equals((java.lang.Object) variance20);
        long long24 = variance20.getN();
        variance20.setBiasCorrected(false);
        variance20.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance29.increment((-1.0d));
        variance29.setBiasCorrected(false);
        boolean boolean34 = variance29.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean36 = variance29.equals((java.lang.Object) secondMoment35);
        double double37 = secondMoment35.getResult();
        secondMoment35.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment35);
        boolean boolean40 = variance39.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.increment((-1.0d));
        variance44.setBiasCorrected(false);
        boolean boolean49 = variance44.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean51 = variance44.equals((java.lang.Object) secondMoment50);
        double double52 = secondMoment50.getResult();
        secondMoment50.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment50);
        secondMoment50.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance58.increment((-1.0d));
        variance58.setBiasCorrected(false);
        boolean boolean63 = variance58.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment64 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean65 = variance58.equals((java.lang.Object) secondMoment64);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double68 = variance67.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double71 = variance70.getResult();
        double[] doubleArray74 = new double[] { 0L, (byte) 10 };
        double double75 = variance70.evaluate(doubleArray74);
        double double77 = variance67.evaluate(doubleArray74, (double) 10L);
        double double81 = variance58.evaluate(doubleArray74, (double) (short) 0, 0, (int) (short) 0);
        double double84 = secondMoment50.evaluate(doubleArray74, 0, 0);
        variance42.incrementAll(doubleArray74);
        double double86 = variance39.evaluate(doubleArray74);
        double double88 = variance20.evaluate(doubleArray74, 13349.428571428572d);
        variance11.incrementAll(doubleArray74);
        double double90 = variance5.evaluate(doubleArray74);
        boolean boolean91 = variance5.isBiasCorrected();
        double double92 = variance5.getResult();
        variance5.increment(1720.0703132629396d);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 25.000000029802322d + "'", double88 == 25.000000029802322d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
    }

    @Test
    public void test02227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02227");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.clear();
        variance1.increment((double) (short) -1);
        boolean boolean5 = variance1.isBiasCorrected();
        variance1.increment((double) 6L);
        double double8 = variance1.getResult();
        long long9 = variance1.getN();
        long long10 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        double double14 = secondMoment12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment12);
        secondMoment12.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        double[] doubleArray22 = new double[] { 0L, (byte) 10 };
        double double23 = variance18.evaluate(doubleArray22);
        secondMoment12.incrementAll(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean29 = variance27.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance31.increment((-1.0d));
        variance31.setBiasCorrected(false);
        boolean boolean36 = variance31.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean38 = variance31.equals((java.lang.Object) secondMoment37);
        double double39 = secondMoment37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        double[] doubleArray48 = new double[] { 0L, (byte) 10 };
        double double49 = variance44.evaluate(doubleArray48);
        double double51 = variance41.evaluate(doubleArray48, (double) 10L);
        double double54 = secondMoment37.evaluate(doubleArray48, (int) (short) 0, 1);
        double double55 = variance27.evaluate(doubleArray48);
        secondMoment12.incrementAll(doubleArray48);
        secondMoment12.clear();
        secondMoment12.clear();
        boolean boolean59 = variance1.equals((java.lang.Object) secondMoment12);
        double double60 = secondMoment12.getResult();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 24.5d + "'", double8 == 24.5d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2L + "'", long9 == 2L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2L + "'", long10 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
    }

    @Test
    public void test02228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02228");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double4 = variance3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        double[] doubleArray10 = new double[] { 0L, (byte) 10 };
        double double11 = variance6.evaluate(doubleArray10);
        double double13 = variance3.evaluate(doubleArray10, (double) 10L);
        double double14 = variance1.evaluate(doubleArray10);
        variance1.increment((double) 0.0f);
        boolean boolean17 = variance1.isBiasCorrected();
        long long18 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.setBiasCorrected(false);
        boolean boolean25 = variance20.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean27 = variance20.equals((java.lang.Object) secondMoment26);
        secondMoment26.increment((double) (short) 0);
        secondMoment26.increment((double) 1.0f);
        double double32 = secondMoment26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment26);
        boolean boolean35 = variance1.equals((java.lang.Object) variance34);
        double[] doubleArray36 = new double[] {};
        double double37 = variance34.evaluate(doubleArray36);
        variance34.setBiasCorrected(false);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.5d + "'", double32 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
    }

    @Test
    public void test02229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02229");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double3 = variance2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double6 = variance5.getResult();
        double[] doubleArray9 = new double[] { 0L, (byte) 10 };
        double double10 = variance5.evaluate(doubleArray9);
        double double12 = variance2.evaluate(doubleArray9, (double) 10L);
        long long13 = variance2.getN();
        boolean boolean14 = secondMoment0.equals((java.lang.Object) long13);
        secondMoment0.increment(50.0d);
        secondMoment0.clear();
        long long18 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance19.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        variance22.increment((double) (short) -1);
        long long26 = variance22.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        double[] doubleArray37 = new double[] { 0L, (byte) 10 };
        double double38 = variance33.evaluate(doubleArray37);
        double double40 = variance30.evaluate(doubleArray37, (double) 10L);
        double double41 = variance28.evaluate(doubleArray37);
        variance28.increment((double) 0.0f);
        boolean boolean44 = variance28.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment45);
        long long47 = secondMoment45.getN();
        secondMoment45.clear();
        secondMoment45.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment45);
        variance51.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean57 = variance55.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray66 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double67 = variance59.evaluate(doubleArray66);
        double double68 = variance55.evaluate(doubleArray66);
        double double70 = variance51.evaluate(doubleArray66, (double) 1.0f);
        double double73 = variance28.evaluate(doubleArray66, (int) (byte) 0, 1);
        double double74 = variance22.evaluate(doubleArray66);
        variance19.incrementAll(doubleArray66, (int) (short) 1, (int) (short) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 50.0d + "'", double10 == 50.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2136.8055555555557d + "'", double67 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 2564.166666666667d + "'", double68 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2136.805555555555d + "'", double70 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 2564.166666666667d + "'", double74 == 2564.166666666667d);
    }

    @Test
    public void test02230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02230");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        double double20 = variance10.evaluate(doubleArray17, (double) 10L);
        double double21 = variance8.evaluate(doubleArray17);
        double double22 = variance3.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        double[] doubleArray28 = new double[] { 0L, (byte) 10 };
        double double29 = variance24.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double39 = variance31.evaluate(doubleArray38);
        double double40 = variance24.evaluate(doubleArray38);
        double double41 = variance3.evaluate(doubleArray38);
        double double42 = secondMoment0.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long44 = secondMoment0.getN();
        double double45 = secondMoment0.getResult();
        long long46 = secondMoment0.getN();
        double double47 = secondMoment0.getResult();
        double double48 = secondMoment0.getResult();
        secondMoment0.increment(25.000000029802322d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment53);
        double double55 = secondMoment53.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment53);
        secondMoment53.clear();
        secondMoment53.increment((double) 2L);
        double double60 = secondMoment53.getResult();
        secondMoment53.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment53);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment64 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment64);
        long long66 = secondMoment64.getN();
        secondMoment64.clear();
        secondMoment64.increment(10.0d);
        double double70 = secondMoment64.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double75 = variance74.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double78 = variance77.getResult();
        double[] doubleArray81 = new double[] { 0L, (byte) 10 };
        double double82 = variance77.evaluate(doubleArray81);
        double double84 = variance74.evaluate(doubleArray81, (double) 10L);
        double double85 = variance72.evaluate(doubleArray81);
        double[] doubleArray89 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double90 = variance72.evaluate(doubleArray89);
        double double91 = secondMoment64.evaluate(doubleArray89);
        double double93 = variance63.evaluate(doubleArray89, 2024039.1203703713d);
        secondMoment0.incrementAll(doubleArray89);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2136.8055555555557d + "'", double39 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2564.166666666667d + "'", double40 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2564.166666666667d + "'", double41 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 12820.833333333334d + "'", double42 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 6L + "'", long44 == 6L);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 12820.833333333334d + "'", double45 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 6L + "'", long46 == 6L);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 12820.833333333334d + "'", double47 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 12820.833333333334d + "'", double48 == 12820.833333333334d);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 2024039.120370371d + "'", double90 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 4048078.240740742d + "'", double91 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 1349359.4140625d + "'", double93 == 1349359.4140625d);
    }

    @Test
    public void test02231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02231");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        boolean boolean7 = secondMoment1.equals((java.lang.Object) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        boolean boolean9 = variance8.isBiasCorrected();
        variance8.setBiasCorrected(false);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test02232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02232");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double22 = variance14.evaluate(doubleArray21);
        double double23 = secondMoment7.evaluate(doubleArray21);
        long long24 = secondMoment7.getN();
        long long25 = secondMoment7.getN();
        secondMoment7.increment((double) (short) 0);
        double double28 = secondMoment7.getResult();
        java.lang.Class<?> wildcardClass29 = secondMoment7.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2136.8055555555557d + "'", double22 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 12820.833333333334d + "'", double23 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 6L + "'", long24 == 6L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 13860.857142857143d + "'", double28 == 13860.857142857143d);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test02233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02233");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double[] doubleArray5 = new double[] { 0L, (byte) 10 };
        double double6 = variance1.evaluate(doubleArray5);
        double double7 = variance1.getResult();
        variance1.increment(1349359.4135802474d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray18 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double19 = variance11.evaluate(doubleArray18);
        double double20 = variance1.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment31);
        double double33 = secondMoment31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment31);
        secondMoment31.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        double[] doubleArray41 = new double[] { 0L, (byte) 10 };
        double double42 = variance37.evaluate(doubleArray41);
        secondMoment31.incrementAll(doubleArray41);
        boolean boolean44 = variance24.equals((java.lang.Object) secondMoment31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance46.increment((-1.0d));
        variance46.setBiasCorrected(false);
        boolean boolean51 = variance46.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean53 = variance46.equals((java.lang.Object) secondMoment52);
        boolean boolean54 = secondMoment31.equals((java.lang.Object) boolean53);
        secondMoment31.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment31);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment58);
        long long60 = secondMoment58.getN();
        secondMoment58.clear();
        secondMoment58.increment(10.0d);
        double double64 = secondMoment58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double69 = variance68.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double72 = variance71.getResult();
        double[] doubleArray75 = new double[] { 0L, (byte) 10 };
        double double76 = variance71.evaluate(doubleArray75);
        double double78 = variance68.evaluate(doubleArray75, (double) 10L);
        double double79 = variance66.evaluate(doubleArray75);
        double[] doubleArray83 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double84 = variance66.evaluate(doubleArray83);
        double double85 = secondMoment58.evaluate(doubleArray83);
        secondMoment31.incrementAll(doubleArray83);
        double double87 = secondMoment31.getResult();
        boolean boolean88 = variance1.equals((java.lang.Object) double87);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.0d + "'", double6 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2136.8055555555557d + "'", double19 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 2564.166666666667d + "'", double20 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2024039.120370371d + "'", double84 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 4048078.240740742d + "'", double85 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 4048078.240740742d + "'", double87 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test02234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02234");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        double double10 = secondMoment8.getResult();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        secondMoment8.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance16.increment((-1.0d));
        variance16.setBiasCorrected(false);
        boolean boolean21 = variance16.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean23 = variance16.equals((java.lang.Object) secondMoment22);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        double[] doubleArray32 = new double[] { 0L, (byte) 10 };
        double double33 = variance28.evaluate(doubleArray32);
        double double35 = variance25.evaluate(doubleArray32, (double) 10L);
        double double39 = variance16.evaluate(doubleArray32, (double) (short) 0, 0, (int) (short) 0);
        double double42 = secondMoment8.evaluate(doubleArray32, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        variance43.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double47 = variance46.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance49.increment((-1.0d));
        variance49.setBiasCorrected(false);
        boolean boolean54 = variance49.isBiasCorrected();
        double[] doubleArray55 = new double[] {};
        double double56 = variance49.evaluate(doubleArray55);
        variance49.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray67 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double68 = variance60.evaluate(doubleArray67);
        double double69 = variance49.evaluate(doubleArray67);
        double double73 = variance46.evaluate(doubleArray67, (double) (short) 100, (int) (byte) 0, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double76 = variance43.evaluate(doubleArray67, (int) ' ', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 2136.8055555555557d + "'", double68 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2136.8055555555557d + "'", double69 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
    }

    @Test
    public void test02235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02235");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        double[] doubleArray8 = new double[] { 0L, (byte) 10 };
        double double9 = variance4.evaluate(doubleArray8);
        double double11 = variance1.evaluate(doubleArray8, (double) 10L);
        long long12 = variance1.getN();
        double double13 = variance1.getResult();
        variance1.setBiasCorrected(false);
        variance1.clear();
        boolean boolean17 = variance1.isBiasCorrected();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        double double23 = secondMoment21.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment21);
        secondMoment21.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        double[] doubleArray31 = new double[] { 0L, (byte) 10 };
        double double32 = variance27.evaluate(doubleArray31);
        secondMoment21.incrementAll(doubleArray31);
        long long34 = secondMoment21.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment21);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        variance37.increment((double) (short) -1);
        long long41 = variance37.getN();
        variance37.setBiasCorrected(false);
        double double44 = variance37.getResult();
        variance37.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment46);
        long long48 = secondMoment46.getN();
        secondMoment46.clear();
        secondMoment46.clear();
        secondMoment46.increment((double) (byte) 100);
        long long53 = secondMoment46.getN();
        double[] doubleArray55 = new double[] { 2024039.1203703713d };
        double double56 = secondMoment46.evaluate(doubleArray55);
        variance37.incrementAll(doubleArray55);
        double double58 = secondMoment21.evaluate(doubleArray55);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray55, (-1), (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.0d + "'", double9 == 50.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 2L + "'", long34 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
    }

    @Test
    public void test02236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02236");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        double[] doubleArray8 = new double[] { 0L, (byte) 10 };
        double double9 = variance4.evaluate(doubleArray8);
        double double11 = variance1.evaluate(doubleArray8, (double) 10L);
        long long12 = variance1.getN();
        double double13 = variance1.getResult();
        variance1.setBiasCorrected(false);
        variance1.clear();
        double double17 = variance1.getResult();
        variance1.setBiasCorrected(true);
        double[] doubleArray20 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double21 = variance1.evaluate(doubleArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.0d + "'", double9 == 50.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test02237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02237");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        long long4 = secondMoment2.getN();
        secondMoment2.clear();
        secondMoment2.clear();
        double double7 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        secondMoment2.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        variance17.clear();
        boolean boolean20 = variance15.equals((java.lang.Object) variance17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray29 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double30 = variance22.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray39 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double40 = variance32.evaluate(doubleArray39);
        double double42 = variance22.evaluate(doubleArray39, (double) '#');
        double double43 = variance22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance45.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double54 = variance53.getResult();
        double[] doubleArray57 = new double[] { 0L, (byte) 10 };
        double double58 = variance53.evaluate(doubleArray57);
        double double60 = variance50.evaluate(doubleArray57, (double) 10L);
        double double61 = variance48.evaluate(doubleArray57);
        double double62 = variance45.evaluate(doubleArray57);
        variance22.incrementAll(doubleArray57);
        double double64 = variance15.evaluate(doubleArray57);
        double double65 = secondMoment2.evaluate(doubleArray57);
        secondMoment2.clear();
        secondMoment2.increment(2058.591715976331d);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2136.8055555555557d + "'", double30 == 2136.8055555555557d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2136.8055555555557d + "'", double40 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2136.8055555555557d + "'", double42 == 2136.8055555555557d);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
    }

    @Test
    public void test02238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02238");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.clear();
        double double8 = secondMoment0.getResult();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test02239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02239");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        double[] doubleArray13 = new double[] { 0L, (byte) 10 };
        double double14 = variance9.evaluate(doubleArray13);
        double double16 = variance6.evaluate(doubleArray13, (double) 10L);
        double double17 = variance4.evaluate(doubleArray13);
        double double18 = variance1.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        double double22 = secondMoment20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment20);
        secondMoment20.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance26.increment((-1.0d));
        variance26.setBiasCorrected(false);
        boolean boolean31 = variance26.isBiasCorrected();
        double[] doubleArray32 = new double[] {};
        double double33 = variance26.evaluate(doubleArray32);
        secondMoment20.incrementAll(doubleArray32);
        double double35 = variance1.evaluate(doubleArray32);
        double double36 = variance1.getResult();
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double40 = secondMoment39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        double double42 = secondMoment39.getResult();
        secondMoment39.clear();
        double double44 = secondMoment39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance46.increment((-1.0d));
        boolean boolean49 = variance46.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        long long53 = variance51.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment54);
        long long56 = secondMoment54.getN();
        secondMoment54.clear();
        secondMoment54.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment54);
        variance60.setBiasCorrected(false);
        double[] doubleArray68 = new double[] { 1L, '#', 0.0d, 6L, 0.0d };
        variance60.incrementAll(doubleArray68);
        double double71 = variance51.evaluate(doubleArray68, 1142553.1483410494d);
        variance46.incrementAll(doubleArray68);
        double double73 = secondMoment39.evaluate(doubleArray68);
        // The following exception was thrown during execution in test generation
        try {
            double double76 = variance1.evaluate(doubleArray68, (int) '#', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 35.0, 0.0, 6.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 227.2998046875d + "'", double71 == 227.2998046875d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 909.2d + "'", double73 == 909.2d);
    }

    @Test
    public void test02240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02240");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double4 = variance3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        double[] doubleArray10 = new double[] { 0L, (byte) 10 };
        double double11 = variance6.evaluate(doubleArray10);
        double double13 = variance3.evaluate(doubleArray10, (double) 10L);
        double double14 = variance1.evaluate(doubleArray10);
        double[] doubleArray18 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double19 = variance1.evaluate(doubleArray18);
        long long20 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        long long24 = secondMoment22.getN();
        secondMoment22.clear();
        secondMoment22.clear();
        secondMoment22.increment((double) (byte) 100);
        secondMoment22.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment22);
        variance31.increment((double) 2L);
        double double34 = variance31.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment36);
        long long38 = secondMoment36.getN();
        secondMoment36.clear();
        double double40 = secondMoment36.getResult();
        secondMoment36.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment36);
        double[] doubleArray44 = new double[] {};
        double double45 = secondMoment36.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment36);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance48.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance52.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double61 = variance60.getResult();
        double[] doubleArray64 = new double[] { 0L, (byte) 10 };
        double double65 = variance60.evaluate(doubleArray64);
        double double67 = variance57.evaluate(doubleArray64, (double) 10L);
        double double68 = variance55.evaluate(doubleArray64);
        double double69 = variance52.evaluate(doubleArray64);
        double double70 = variance48.evaluate(doubleArray64);
        double double71 = variance46.evaluate(doubleArray64);
        double double72 = variance31.evaluate(doubleArray64);
        double double73 = variance1.evaluate(doubleArray64);
        java.lang.Class<?> wildcardClass74 = doubleArray64.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2024039.120370371d + "'", double19 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test02241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02241");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance9.increment((-1.0d));
        variance9.setBiasCorrected(false);
        boolean boolean14 = variance9.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double17 = variance16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double20 = variance19.getResult();
        double[] doubleArray23 = new double[] { 0L, (byte) 10 };
        double double24 = variance19.evaluate(doubleArray23);
        double double26 = variance16.evaluate(doubleArray23, (double) 10L);
        double double27 = variance9.evaluate(doubleArray23);
        long long28 = variance9.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance30.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        double[] doubleArray42 = new double[] { 0L, (byte) 10 };
        double double43 = variance38.evaluate(doubleArray42);
        double double45 = variance35.evaluate(doubleArray42, (double) 10L);
        double double46 = variance33.evaluate(doubleArray42);
        double double47 = variance30.evaluate(doubleArray42);
        double double48 = variance9.evaluate(doubleArray42);
        boolean boolean49 = variance9.isBiasCorrected();
        double double50 = variance9.getResult();
        boolean boolean51 = variance1.equals((java.lang.Object) double50);
        variance1.increment(2024039.1203703713d);
        double double54 = variance1.getResult();
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 25.0d + "'", double27 == 25.0d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 25.0d + "'", double48 == 25.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 9.103408868928331E11d + "'", double54 == 9.103408868928331E11d);
    }

    @Test
    public void test02242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02242");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        long long5 = secondMoment3.getN();
        secondMoment3.clear();
        secondMoment3.clear();
        secondMoment3.increment((double) (byte) 100);
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        double[] doubleArray22 = new double[] { 0L, (byte) 10 };
        double double23 = variance18.evaluate(doubleArray22);
        double double25 = variance15.evaluate(doubleArray22, (double) 10L);
        long long26 = variance15.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance28.increment((-1.0d));
        variance28.setBiasCorrected(false);
        boolean boolean33 = variance28.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        double[] doubleArray42 = new double[] { 0L, (byte) 10 };
        double double43 = variance38.evaluate(doubleArray42);
        double double45 = variance35.evaluate(doubleArray42, (double) 10L);
        double double46 = variance28.evaluate(doubleArray42);
        variance15.incrementAll(doubleArray42, (int) (short) 0, (int) (byte) 1);
        secondMoment3.incrementAll(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        variance51.increment(1.3655713734911543E12d);
        double double54 = variance51.getResult();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 25.0d + "'", double46 == 25.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 25.0d + "'", double54 == 25.0d);
    }

    @Test
    public void test02243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02243");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        double double15 = secondMoment7.getResult();
        secondMoment7.increment(25.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.clear();
        long long22 = variance20.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        long long26 = secondMoment24.getN();
        secondMoment24.clear();
        secondMoment24.clear();
        double double29 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment24);
        variance30.increment((double) (byte) -1);
        long long33 = variance30.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment34);
        long long36 = secondMoment34.getN();
        secondMoment34.clear();
        secondMoment34.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment40);
        long long42 = secondMoment40.getN();
        secondMoment40.clear();
        double double44 = secondMoment40.getResult();
        secondMoment40.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment40);
        double[] doubleArray48 = new double[] {};
        double double49 = secondMoment40.evaluate(doubleArray48);
        secondMoment34.incrementAll(doubleArray48);
        double double51 = variance30.evaluate(doubleArray48);
        double double52 = variance20.evaluate(doubleArray48);
        variance18.incrementAll(doubleArray48);
        variance18.increment(14205.875d);
        double double56 = variance18.getResult();
        variance18.clear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.5d + "'", double15 == 0.5d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 200.33333333333331d + "'", double56 == 200.33333333333331d);
    }

    @Test
    public void test02244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02244");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        long long6 = variance1.getN();
        double double7 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double22 = variance9.evaluate(doubleArray18);
        variance9.increment((double) 0.0f);
        boolean boolean25 = variance9.isBiasCorrected();
        long long26 = variance9.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance28.increment((-1.0d));
        variance28.setBiasCorrected(false);
        boolean boolean33 = variance28.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean35 = variance28.equals((java.lang.Object) secondMoment34);
        secondMoment34.increment((double) (short) 0);
        secondMoment34.increment((double) 1.0f);
        double double40 = secondMoment34.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment34);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment34);
        boolean boolean43 = variance9.equals((java.lang.Object) variance42);
        double[] doubleArray44 = new double[] {};
        double double45 = variance42.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance47.increment((-1.0d));
        variance47.setBiasCorrected(false);
        boolean boolean52 = variance47.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean54 = variance47.equals((java.lang.Object) secondMoment53);
        variance47.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean60 = variance58.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray69 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double70 = variance62.evaluate(doubleArray69);
        double double71 = variance58.evaluate(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance73.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double79 = variance78.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double82 = variance81.getResult();
        double[] doubleArray85 = new double[] { 0L, (byte) 10 };
        double double86 = variance81.evaluate(doubleArray85);
        double double88 = variance78.evaluate(doubleArray85, (double) 10L);
        double double89 = variance76.evaluate(doubleArray85);
        double double90 = variance73.evaluate(doubleArray85);
        double double91 = variance58.evaluate(doubleArray85);
        double double93 = variance47.evaluate(doubleArray85, (double) 0L);
        double double97 = variance42.evaluate(doubleArray85, 58606.246913580246d, (int) (short) 1, 0);
        variance1.incrementAll(doubleArray85);
        double double99 = variance1.getResult();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.5d + "'", double40 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2136.8055555555557d + "'", double70 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2564.166666666667d + "'", double71 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 25.0d + "'", double93 == 25.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double97));
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 24.666666666666668d + "'", double99 == 24.666666666666668d);
    }

    @Test
    public void test02245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02245");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance5.increment((-1.0d));
        variance5.setBiasCorrected(false);
        boolean boolean10 = variance5.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean12 = variance5.equals((java.lang.Object) secondMoment11);
        double double13 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        double[] doubleArray22 = new double[] { 0L, (byte) 10 };
        double double23 = variance18.evaluate(doubleArray22);
        double double25 = variance15.evaluate(doubleArray22, (double) 10L);
        double double28 = secondMoment11.evaluate(doubleArray22, (int) (short) 0, 1);
        double double29 = variance1.evaluate(doubleArray22);
        variance1.increment((double) (byte) 0);
        boolean boolean32 = variance1.isBiasCorrected();
        long long33 = variance1.getN();
        variance1.clear();
        long long35 = variance1.getN();
        double double36 = variance1.getResult();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
    }

    @Test
    public void test02246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02246");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        secondMoment8.incrementAll(doubleArray18);
        boolean boolean21 = variance1.equals((java.lang.Object) secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.setBiasCorrected(false);
        boolean boolean28 = variance23.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean30 = variance23.equals((java.lang.Object) secondMoment29);
        boolean boolean31 = secondMoment8.equals((java.lang.Object) boolean30);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance33.increment((-1.0d));
        variance33.setBiasCorrected(false);
        boolean boolean38 = variance33.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean40 = variance33.equals((java.lang.Object) secondMoment39);
        secondMoment39.increment((double) (short) 0);
        secondMoment39.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray53 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double54 = variance46.evaluate(doubleArray53);
        double double55 = secondMoment39.evaluate(doubleArray53);
        double double56 = secondMoment8.evaluate(doubleArray53);
        secondMoment8.increment((double) 10.0f);
        double double59 = secondMoment8.getResult();
        secondMoment8.increment(4.551252412837283E11d);
        secondMoment8.clear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2136.8055555555557d + "'", double54 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 12820.833333333334d + "'", double55 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 12820.833333333334d + "'", double56 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 13349.428571428572d + "'", double59 == 13349.428571428572d);
    }

    @Test
    public void test02247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02247");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double2 = secondMoment0.getResult();
        secondMoment0.increment((double) 0.0f);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance7.increment((-1.0d));
        long long10 = variance7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        double[] doubleArray29 = new double[] { 0L, (byte) 10 };
        double double30 = variance25.evaluate(doubleArray29);
        double double32 = variance22.evaluate(doubleArray29, (double) 10L);
        double double33 = variance20.evaluate(doubleArray29);
        double double34 = variance15.evaluate(doubleArray29);
        variance13.incrementAll(doubleArray29);
        variance11.incrementAll(doubleArray29);
        double double37 = variance7.evaluate(doubleArray29);
        long long38 = variance7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance40.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.increment((-1.0d));
        variance44.setBiasCorrected(false);
        boolean boolean49 = variance44.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean51 = variance44.equals((java.lang.Object) secondMoment50);
        double double52 = secondMoment50.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        double[] doubleArray61 = new double[] { 0L, (byte) 10 };
        double double62 = variance57.evaluate(doubleArray61);
        double double64 = variance54.evaluate(doubleArray61, (double) 10L);
        double double67 = secondMoment50.evaluate(doubleArray61, (int) (short) 0, 1);
        double double68 = variance40.evaluate(doubleArray61);
        double double70 = variance7.evaluate(doubleArray61, (double) 2L);
        secondMoment0.incrementAll(doubleArray61, 1, (int) (short) 1);
        secondMoment0.increment(1.6460426758114373E13d);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
    }

    @Test
    public void test02248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02248");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double[] doubleArray7 = new double[] {};
        double double8 = variance1.evaluate(doubleArray7);
        long long9 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        variance11.increment((double) (short) -1);
        variance11.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        long long20 = secondMoment18.getN();
        secondMoment18.clear();
        double double22 = secondMoment18.getResult();
        secondMoment18.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        double[] doubleArray26 = new double[] {};
        double double27 = secondMoment18.evaluate(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment18);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance30.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        double[] doubleArray46 = new double[] { 0L, (byte) 10 };
        double double47 = variance42.evaluate(doubleArray46);
        double double49 = variance39.evaluate(doubleArray46, (double) 10L);
        double double50 = variance37.evaluate(doubleArray46);
        double double51 = variance34.evaluate(doubleArray46);
        double double52 = variance30.evaluate(doubleArray46);
        double double53 = variance28.evaluate(doubleArray46);
        variance11.incrementAll(doubleArray46);
        double double56 = variance1.evaluate(doubleArray46, 26761.69230769231d);
        boolean boolean57 = variance1.isBiasCorrected();
        boolean boolean58 = variance1.isBiasCorrected();
        variance1.setBiasCorrected(false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 25.00000011920929d + "'", double56 == 25.00000011920929d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test02249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02249");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double11 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        secondMoment9.increment((double) 2L);
        double double16 = secondMoment9.getResult();
        secondMoment9.increment(50.0d);
        double double19 = secondMoment9.getResult();
        long long20 = secondMoment9.getN();
        boolean boolean21 = variance7.equals((java.lang.Object) secondMoment9);
        double double22 = variance7.getResult();
        variance7.increment((double) 14L);
        long long25 = variance7.getN();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1152.0d + "'", double19 == 1152.0d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2L + "'", long20 == 2L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test02250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02250");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        double double15 = secondMoment13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment13);
        secondMoment13.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance19.increment((-1.0d));
        variance19.setBiasCorrected(false);
        boolean boolean24 = variance19.isBiasCorrected();
        double[] doubleArray25 = new double[] {};
        double double26 = variance19.evaluate(doubleArray25);
        secondMoment13.incrementAll(doubleArray25);
        double double28 = variance11.evaluate(doubleArray25);
        variance11.increment(50.0009765625d);
        double double31 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment34);
        double double36 = secondMoment34.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment34);
        secondMoment34.clear();
        secondMoment34.increment((double) 2L);
        double double41 = secondMoment34.getResult();
        secondMoment34.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment34);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment34);
        secondMoment34.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment34);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment51);
        long long53 = secondMoment51.getN();
        secondMoment51.clear();
        double double55 = secondMoment51.getResult();
        secondMoment51.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment51);
        double[] doubleArray59 = new double[] {};
        double double60 = secondMoment51.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment51);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment51);
        double double63 = secondMoment51.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment64 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment64);
        long long66 = secondMoment64.getN();
        secondMoment64.clear();
        secondMoment64.increment(10.0d);
        double double70 = secondMoment64.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double75 = variance74.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double78 = variance77.getResult();
        double[] doubleArray81 = new double[] { 0L, (byte) 10 };
        double double82 = variance77.evaluate(doubleArray81);
        double double84 = variance74.evaluate(doubleArray81, (double) 10L);
        double double85 = variance72.evaluate(doubleArray81);
        double[] doubleArray89 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double90 = variance72.evaluate(doubleArray89);
        double double91 = secondMoment64.evaluate(doubleArray89);
        secondMoment51.incrementAll(doubleArray89);
        double double93 = variance48.evaluate(doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            double double96 = variance11.evaluate(doubleArray89, (int) '4', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 2024039.120370371d + "'", double90 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 4048078.240740742d + "'", double91 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 2024039.120370371d + "'", double93 == 2024039.120370371d);
    }

    @Test
    public void test02251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02251");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double[] doubleArray7 = new double[] {};
        double double8 = variance1.evaluate(doubleArray7);
        variance1.setBiasCorrected(false);
        double double11 = variance1.getResult();
        double[] doubleArray12 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double14 = variance1.evaluate(doubleArray12, 1652.4444444444443d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test02252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02252");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.increment((double) (byte) 100);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance10.increment(2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double14 = secondMoment13.getResult();
        double double15 = secondMoment13.getResult();
        secondMoment13.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        long long18 = secondMoment13.getN();
        boolean boolean19 = variance10.equals((java.lang.Object) secondMoment13);
        secondMoment13.clear();
        double double21 = secondMoment13.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double23 = secondMoment22.getResult();
        double double24 = secondMoment22.getResult();
        secondMoment22.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance29.increment((-1.0d));
        variance29.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        double[] doubleArray43 = new double[] { 0L, (byte) 10 };
        double double44 = variance39.evaluate(doubleArray43);
        double double46 = variance36.evaluate(doubleArray43, (double) 10L);
        double double47 = variance34.evaluate(doubleArray43);
        double double48 = variance29.evaluate(doubleArray43);
        variance27.incrementAll(doubleArray43);
        variance27.increment((double) 100.0f);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment52);
        long long54 = secondMoment52.getN();
        secondMoment52.clear();
        secondMoment52.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment52);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance59.increment((-1.0d));
        variance59.setBiasCorrected(false);
        boolean boolean64 = variance59.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment65 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean66 = variance59.equals((java.lang.Object) secondMoment65);
        variance59.increment((double) 100L);
        variance59.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double75 = variance74.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double78 = variance77.getResult();
        double[] doubleArray81 = new double[] { 0L, (byte) 10 };
        double double82 = variance77.evaluate(doubleArray81);
        double double84 = variance74.evaluate(doubleArray81, (double) 10L);
        double double85 = variance72.evaluate(doubleArray81);
        double[] doubleArray89 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double90 = variance72.evaluate(doubleArray89);
        variance59.incrementAll(doubleArray89);
        double double92 = variance57.evaluate(doubleArray89);
        double double94 = variance27.evaluate(doubleArray89, (double) 3L);
        double double95 = secondMoment22.evaluate(doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            double double98 = secondMoment13.evaluate(doubleArray89, (int) (byte) 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 2024039.120370371d + "'", double90 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 2024039.120370371d + "'", double92 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 2024039.1203703708d + "'", double94 == 2024039.1203703708d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 4048078.240740742d + "'", double95 == 4048078.240740742d);
    }

    @Test
    public void test02253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02253");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        double double14 = secondMoment8.getResult();
        double double15 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        double double18 = secondMoment16.getResult();
        boolean boolean19 = secondMoment8.equals((java.lang.Object) double18);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean24 = variance22.equals((java.lang.Object) (short) 10);
        double double25 = variance22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        double[] doubleArray34 = new double[] { 0L, (byte) 10 };
        double double35 = variance30.evaluate(doubleArray34);
        double double37 = variance27.evaluate(doubleArray34, (double) 10L);
        double double38 = variance22.evaluate(doubleArray34);
        double double39 = variance22.getResult();
        double double40 = variance22.getResult();
        boolean boolean41 = variance20.equals((java.lang.Object) variance22);
        variance20.clear();
        long long43 = variance20.getN();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.5d + "'", double15 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 2L + "'", long43 == 2L);
    }

    @Test
    public void test02254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02254");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        double[] doubleArray14 = new double[] { 0L, (byte) 10 };
        double double15 = variance10.evaluate(doubleArray14);
        double double17 = variance7.evaluate(doubleArray14, (double) 10L);
        double double18 = variance5.evaluate(doubleArray14);
        double[] doubleArray22 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double23 = variance5.evaluate(doubleArray22);
        double double25 = variance1.evaluate(doubleArray22, (double) (byte) 1);
        variance1.increment(10.0d);
        variance1.setBiasCorrected(true);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.setBiasCorrected(false);
        boolean boolean39 = variance34.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean41 = variance34.equals((java.lang.Object) secondMoment40);
        double double42 = secondMoment40.getResult();
        secondMoment40.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment40);
        secondMoment40.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance48.increment((-1.0d));
        variance48.setBiasCorrected(false);
        boolean boolean53 = variance48.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean55 = variance48.equals((java.lang.Object) secondMoment54);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double61 = variance60.getResult();
        double[] doubleArray64 = new double[] { 0L, (byte) 10 };
        double double65 = variance60.evaluate(doubleArray64);
        double double67 = variance57.evaluate(doubleArray64, (double) 10L);
        double double71 = variance48.evaluate(doubleArray64, (double) (short) 0, 0, (int) (short) 0);
        double double74 = secondMoment40.evaluate(doubleArray64, 0, 0);
        variance32.incrementAll(doubleArray64);
        double double76 = variance1.evaluate(doubleArray64);
        double[] doubleArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double80 = variance1.evaluate(doubleArray77, 1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 50.0d + "'", double15 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2024039.120370371d + "'", double23 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2024039.120370371d + "'", double25 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
    }

    @Test
    public void test02255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02255");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double4 = variance3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        double[] doubleArray10 = new double[] { 0L, (byte) 10 };
        double double11 = variance6.evaluate(doubleArray10);
        double double13 = variance3.evaluate(doubleArray10, (double) 10L);
        double double14 = variance1.evaluate(doubleArray10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean18 = variance16.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        double[] doubleArray29 = new double[] { 0L, (byte) 10 };
        double double30 = variance25.evaluate(doubleArray29);
        double double32 = variance22.evaluate(doubleArray29, (double) 10L);
        double double33 = variance20.evaluate(doubleArray29);
        double[] doubleArray37 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double38 = variance20.evaluate(doubleArray37);
        double double40 = variance16.evaluate(doubleArray37, (double) (byte) 1);
        double double41 = variance1.evaluate(doubleArray37);
        variance1.clear();
        variance1.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2024039.120370371d + "'", double38 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2024039.120370371d + "'", double40 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2024039.120370371d + "'", double41 == 2024039.120370371d);
    }

    @Test
    public void test02256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02256");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance7.increment((-1.0d));
        variance7.setBiasCorrected(false);
        boolean boolean12 = variance7.isBiasCorrected();
        double[] doubleArray13 = new double[] {};
        double double14 = variance7.evaluate(doubleArray13);
        secondMoment1.incrementAll(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        variance16.clear();
        variance16.setBiasCorrected(true);
        variance16.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        long long24 = secondMoment22.getN();
        secondMoment22.clear();
        double double26 = secondMoment22.getResult();
        secondMoment22.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        double[] doubleArray38 = new double[] { 0L, (byte) 10 };
        double double39 = variance34.evaluate(doubleArray38);
        double double41 = variance31.evaluate(doubleArray38, (double) 10L);
        variance31.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance45.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double54 = variance53.getResult();
        double[] doubleArray57 = new double[] { 0L, (byte) 10 };
        double double58 = variance53.evaluate(doubleArray57);
        double double60 = variance50.evaluate(doubleArray57, (double) 10L);
        double double61 = variance48.evaluate(doubleArray57);
        double double62 = variance45.evaluate(doubleArray57);
        double double63 = variance31.evaluate(doubleArray57);
        double double64 = secondMoment22.evaluate(doubleArray57);
        // The following exception was thrown during execution in test generation
        try {
            variance16.incrementAll(doubleArray57, (int) (byte) 100, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
    }

    @Test
    public void test02257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02257");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double8 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        long long11 = secondMoment9.getN();
        secondMoment9.clear();
        secondMoment9.clear();
        secondMoment9.increment((double) (byte) 100);
        long long16 = secondMoment9.getN();
        double[] doubleArray18 = new double[] { 2024039.1203703713d };
        double double19 = secondMoment9.evaluate(doubleArray18);
        secondMoment7.incrementAll(doubleArray18);
        double double21 = secondMoment1.evaluate(doubleArray18);
        secondMoment1.increment((double) (short) -1);
        secondMoment1.increment(25.00000011920929d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance28.increment((-1.0d));
        variance28.setBiasCorrected(false);
        boolean boolean33 = variance28.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean35 = variance28.equals((java.lang.Object) secondMoment34);
        double double36 = secondMoment34.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        double[] doubleArray45 = new double[] { 0L, (byte) 10 };
        double double46 = variance41.evaluate(doubleArray45);
        double double48 = variance38.evaluate(doubleArray45, (double) 10L);
        double double51 = secondMoment34.evaluate(doubleArray45, (int) (short) 0, 1);
        secondMoment34.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance55.increment((-1.0d));
        variance55.setBiasCorrected(false);
        boolean boolean60 = variance55.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean62 = variance55.equals((java.lang.Object) secondMoment61);
        long long63 = secondMoment61.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance65.increment((-1.0d));
        variance65.setBiasCorrected(false);
        variance65.increment((double) 100L);
        boolean boolean72 = variance65.isBiasCorrected();
        boolean boolean73 = variance65.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray82 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double83 = variance75.evaluate(doubleArray82);
        double double85 = variance65.evaluate(doubleArray82, (double) (byte) 10);
        secondMoment61.incrementAll(doubleArray82);
        double double87 = secondMoment34.evaluate(doubleArray82);
        double double89 = variance26.evaluate(doubleArray82, 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2136.8055555555557d + "'", double83 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2136.8055555555557d + "'", double85 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 12820.833333333334d + "'", double87 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 2564.166666666667d + "'", double89 == 2564.166666666667d);
    }

    @Test
    public void test02258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02258");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance6.setBiasCorrected(false);
        double[] doubleArray14 = new double[] { 1L, '#', 0.0d, 6L, 0.0d };
        variance6.incrementAll(doubleArray14);
        double double16 = variance6.getResult();
        double double17 = variance6.getResult();
        variance6.increment((double) 1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance22.increment((-1.0d));
        variance22.setBiasCorrected(false);
        boolean boolean27 = variance22.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean29 = variance22.equals((java.lang.Object) secondMoment28);
        secondMoment28.increment((double) (short) 0);
        secondMoment28.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray42 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double43 = variance35.evaluate(doubleArray42);
        double double44 = secondMoment28.evaluate(doubleArray42);
        long long45 = secondMoment28.getN();
        long long46 = secondMoment28.getN();
        secondMoment28.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment28);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance51.increment((-1.0d));
        variance51.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean59 = variance57.equals((java.lang.Object) (short) 10);
        boolean boolean60 = variance51.equals((java.lang.Object) variance57);
        long long61 = variance57.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean65 = variance63.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray74 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double75 = variance67.evaluate(doubleArray74);
        double double76 = variance63.evaluate(doubleArray74);
        double double77 = variance57.evaluate(doubleArray74);
        secondMoment28.incrementAll(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment79 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment79);
        long long81 = secondMoment79.getN();
        secondMoment79.clear();
        secondMoment79.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment85 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance86 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment85);
        long long87 = secondMoment85.getN();
        secondMoment85.clear();
        double double89 = secondMoment85.getResult();
        secondMoment85.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance92 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment85);
        double[] doubleArray93 = new double[] {};
        double double94 = secondMoment85.evaluate(doubleArray93);
        secondMoment79.incrementAll(doubleArray93);
        double double96 = secondMoment28.evaluate(doubleArray93);
        // The following exception was thrown during execution in test generation
        try {
            double double99 = variance6.evaluate(doubleArray93, 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 35.0, 0.0, 6.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2136.8055555555557d + "'", double43 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 12820.833333333334d + "'", double44 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 6L + "'", long45 == 6L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 6L + "'", long46 == 6L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 2136.8055555555557d + "'", double75 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2564.166666666667d + "'", double76 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2564.166666666667d + "'", double77 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 26761.69230769231d + "'", double96 == 26761.69230769231d);
    }

    @Test
    public void test02259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02259");
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.setBiasCorrected(false);
        boolean boolean8 = variance3.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean10 = variance3.equals((java.lang.Object) secondMoment9);
        secondMoment9.increment((double) (short) 0);
        secondMoment9.increment((double) 1.0f);
        double double15 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        secondMoment9.increment(Double.NaN);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.increment((double) (byte) 0);
        double double22 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance25.increment((-1.0d));
        variance25.setBiasCorrected(false);
        boolean boolean30 = variance25.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        double double34 = secondMoment32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment32);
        secondMoment32.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        double[] doubleArray42 = new double[] { 0L, (byte) 10 };
        double double43 = variance38.evaluate(doubleArray42);
        secondMoment32.incrementAll(doubleArray42);
        boolean boolean45 = variance25.equals((java.lang.Object) secondMoment32);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance47.increment((-1.0d));
        variance47.setBiasCorrected(false);
        boolean boolean52 = variance47.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean54 = variance47.equals((java.lang.Object) secondMoment53);
        boolean boolean55 = secondMoment32.equals((java.lang.Object) boolean54);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance57.increment((-1.0d));
        variance57.setBiasCorrected(false);
        boolean boolean62 = variance57.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment63 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean64 = variance57.equals((java.lang.Object) secondMoment63);
        secondMoment63.increment((double) (short) 0);
        secondMoment63.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray77 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double78 = variance70.evaluate(doubleArray77);
        double double79 = secondMoment63.evaluate(doubleArray77);
        double double80 = secondMoment32.evaluate(doubleArray77);
        // The following exception was thrown during execution in test generation
        try {
            double double83 = variance23.evaluate(doubleArray77, 1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.5d + "'", double15 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2136.8055555555557d + "'", double78 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 12820.833333333334d + "'", double79 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 12820.833333333334d + "'", double80 == 12820.833333333334d);
    }

    @Test
    public void test02260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02260");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        boolean boolean8 = variance1.isBiasCorrected();
        variance1.clear();
        boolean boolean10 = variance1.isBiasCorrected();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        long long14 = secondMoment12.getN();
        secondMoment12.clear();
        secondMoment12.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        secondMoment12.increment(1.0d);
        secondMoment12.increment((double) 6L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        long long23 = variance22.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance28.increment((-1.0d));
        variance28.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        double[] doubleArray42 = new double[] { 0L, (byte) 10 };
        double double43 = variance38.evaluate(doubleArray42);
        double double45 = variance35.evaluate(doubleArray42, (double) 10L);
        double double46 = variance33.evaluate(doubleArray42);
        double double47 = variance28.evaluate(doubleArray42);
        variance26.incrementAll(doubleArray42);
        variance24.incrementAll(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance52.increment((-1.0d));
        variance52.setBiasCorrected(false);
        boolean boolean57 = variance52.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean59 = variance52.equals((java.lang.Object) secondMoment58);
        secondMoment58.increment((double) (short) 0);
        secondMoment58.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray72 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double73 = variance65.evaluate(doubleArray72);
        double double74 = secondMoment58.evaluate(doubleArray72);
        secondMoment50.incrementAll(doubleArray72);
        double double76 = variance24.evaluate(doubleArray72);
        double double78 = variance22.evaluate(doubleArray72, 1988.7755102040815d);
        // The following exception was thrown during execution in test generation
        try {
            double double82 = variance1.evaluate(doubleArray72, 1349359.4140625d, (int) ' ', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2L + "'", long23 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 2136.8055555555557d + "'", double73 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 12820.833333333334d + "'", double74 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2564.166666666667d + "'", double76 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2564.1666666679084d + "'", double78 == 2564.1666666679084d);
    }

    @Test
    public void test02261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02261");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance8.increment((-1.0d));
        variance8.setBiasCorrected(false);
        boolean boolean13 = variance8.isBiasCorrected();
        double[] doubleArray14 = new double[] {};
        double double15 = variance8.evaluate(doubleArray14);
        secondMoment2.incrementAll(doubleArray14);
        double double17 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        long long19 = variance18.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test02262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02262");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double11 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        secondMoment9.incrementAll(doubleArray19);
        boolean boolean22 = variance2.equals((java.lang.Object) secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean31 = variance24.equals((java.lang.Object) secondMoment30);
        boolean boolean32 = secondMoment9.equals((java.lang.Object) boolean31);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        boolean boolean35 = variance34.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance37.increment((-1.0d));
        variance37.setBiasCorrected(false);
        boolean boolean42 = variance37.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        double[] doubleArray51 = new double[] { 0L, (byte) 10 };
        double double52 = variance47.evaluate(doubleArray51);
        double double54 = variance44.evaluate(doubleArray51, (double) 10L);
        double double55 = variance37.evaluate(doubleArray51);
        variance37.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray66 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double67 = variance59.evaluate(doubleArray66);
        double double68 = variance37.evaluate(doubleArray66);
        double double69 = variance37.getResult();
        boolean boolean70 = variance34.equals((java.lang.Object) variance37);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance72.increment((-1.0d));
        variance72.setBiasCorrected(false);
        boolean boolean77 = variance72.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment78 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean79 = variance72.equals((java.lang.Object) secondMoment78);
        secondMoment78.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment82 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment82);
        long long84 = secondMoment82.getN();
        secondMoment82.clear();
        double double86 = secondMoment82.getResult();
        secondMoment82.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance89 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment82);
        double[] doubleArray90 = new double[] {};
        double double91 = secondMoment82.evaluate(doubleArray90);
        double double92 = secondMoment78.evaluate(doubleArray90);
        // The following exception was thrown during execution in test generation
        try {
            double double96 = variance37.evaluate(doubleArray90, 2564.1625d, (int) (byte) 100, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 25.0d + "'", double55 == 25.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2136.8055555555557d + "'", double67 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 2136.8055555555557d + "'", double68 == 2136.8055555555557d);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
    }

    @Test
    public void test02263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02263");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double9 = secondMoment1.getResult();
        long long10 = secondMoment1.getN();
        long long11 = secondMoment1.getN();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test02264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02264");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment((double) 2L);
        double double8 = secondMoment1.getResult();
        secondMoment1.increment(50.0d);
        secondMoment1.clear();
        secondMoment1.clear();
        long long13 = secondMoment1.getN();
        double double14 = secondMoment1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test02265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02265");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        boolean boolean5 = variance4.isBiasCorrected();
        long long6 = variance4.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test02266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02266");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.increment(10.0d);
        double double7 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance12.increment((-1.0d));
        variance12.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double20 = variance19.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        double[] doubleArray26 = new double[] { 0L, (byte) 10 };
        double double27 = variance22.evaluate(doubleArray26);
        double double29 = variance19.evaluate(doubleArray26, (double) 10L);
        double double30 = variance17.evaluate(doubleArray26);
        double double31 = variance12.evaluate(doubleArray26);
        variance10.incrementAll(doubleArray26);
        variance10.increment((double) 100.0f);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment35);
        long long37 = secondMoment35.getN();
        secondMoment35.clear();
        secondMoment35.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment35);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance42.increment((-1.0d));
        variance42.setBiasCorrected(false);
        boolean boolean47 = variance42.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean49 = variance42.equals((java.lang.Object) secondMoment48);
        variance42.increment((double) 100L);
        variance42.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double61 = variance60.getResult();
        double[] doubleArray64 = new double[] { 0L, (byte) 10 };
        double double65 = variance60.evaluate(doubleArray64);
        double double67 = variance57.evaluate(doubleArray64, (double) 10L);
        double double68 = variance55.evaluate(doubleArray64);
        double[] doubleArray72 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double73 = variance55.evaluate(doubleArray72);
        variance42.incrementAll(doubleArray72);
        double double75 = variance40.evaluate(doubleArray72);
        double double77 = variance10.evaluate(doubleArray72, (double) 3L);
        variance8.incrementAll(doubleArray72);
        variance8.clear();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 2024039.120370371d + "'", double73 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 2024039.120370371d + "'", double75 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2024039.1203703708d + "'", double77 == 2024039.1203703708d);
    }

    @Test
    public void test02267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02267");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.clear();
        variance2.increment((double) 1L);
        variance2.increment((double) 0L);
        variance2.increment(2024039.120370371d);
        variance2.increment(2550.25d);
        variance2.increment((double) 100L);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = variance2.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02268");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray12 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double13 = variance5.evaluate(doubleArray12);
        double double14 = variance1.evaluate(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance16.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double22 = variance21.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        double[] doubleArray28 = new double[] { 0L, (byte) 10 };
        double double29 = variance24.evaluate(doubleArray28);
        double double31 = variance21.evaluate(doubleArray28, (double) 10L);
        double double32 = variance19.evaluate(doubleArray28);
        double double33 = variance16.evaluate(doubleArray28);
        double double34 = variance1.evaluate(doubleArray28);
        variance1.increment((double) 0.0f);
        boolean boolean37 = variance1.isBiasCorrected();
        boolean boolean38 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        long long41 = secondMoment39.getN();
        secondMoment39.clear();
        double double43 = secondMoment39.getResult();
        secondMoment39.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance48.increment((-1.0d));
        variance48.setBiasCorrected(false);
        boolean boolean53 = variance48.isBiasCorrected();
        double[] doubleArray54 = new double[] {};
        double double55 = variance48.evaluate(doubleArray54);
        variance48.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double65 = variance64.getResult();
        double[] doubleArray68 = new double[] { 0L, (byte) 10 };
        double double69 = variance64.evaluate(doubleArray68);
        double double71 = variance61.evaluate(doubleArray68, (double) 10L);
        double double72 = variance59.evaluate(doubleArray68);
        variance48.incrementAll(doubleArray68);
        double double74 = variance46.evaluate(doubleArray68);
        variance1.incrementAll(doubleArray68);
        java.lang.Class<?> wildcardClass76 = doubleArray68.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 2136.8055555555557d + "'", double13 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2564.166666666667d + "'", double14 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test02269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02269");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        double double14 = secondMoment8.getResult();
        secondMoment8.clear();
        secondMoment8.clear();
        secondMoment8.increment((double) 13L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        double double20 = secondMoment8.getResult();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test02270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02270");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.clear();
        double double12 = secondMoment7.getResult();
        secondMoment7.increment(2024039.120370371d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double17 = variance16.getResult();
        double double18 = variance16.getResult();
        double double19 = variance16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance21.increment((-1.0d));
        variance21.setBiasCorrected(false);
        boolean boolean26 = variance21.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean28 = variance21.equals((java.lang.Object) secondMoment27);
        double double29 = secondMoment27.getResult();
        secondMoment27.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment27);
        secondMoment27.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance35.increment((-1.0d));
        variance35.setBiasCorrected(false);
        boolean boolean40 = variance35.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean42 = variance35.equals((java.lang.Object) secondMoment41);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        double[] doubleArray51 = new double[] { 0L, (byte) 10 };
        double double52 = variance47.evaluate(doubleArray51);
        double double54 = variance44.evaluate(doubleArray51, (double) 10L);
        double double58 = variance35.evaluate(doubleArray51, (double) (short) 0, 0, (int) (short) 0);
        double double61 = secondMoment27.evaluate(doubleArray51, 0, 0);
        variance16.incrementAll(doubleArray51);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment7.incrementAll(doubleArray51, (int) (byte) 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
    }

    @Test
    public void test02271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02271");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        double[] doubleArray15 = new double[] { 0L, (byte) 10 };
        double double16 = variance11.evaluate(doubleArray15);
        double double18 = variance8.evaluate(doubleArray15, (double) 10L);
        double double19 = variance6.evaluate(doubleArray15);
        double double20 = variance1.evaluate(doubleArray15);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        double[] doubleArray26 = new double[] { 0L, (byte) 10 };
        double double27 = variance22.evaluate(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray36 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double37 = variance29.evaluate(doubleArray36);
        double double38 = variance22.evaluate(doubleArray36);
        double double39 = variance1.evaluate(doubleArray36);
        variance1.clear();
        boolean boolean41 = variance1.isBiasCorrected();
        double double42 = variance1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2136.8055555555557d + "'", double37 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2564.166666666667d + "'", double38 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2564.166666666667d + "'", double39 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
    }

    @Test
    public void test02272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02272");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment((double) 2L);
        double double8 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance10.increment((-1.0d));
        long long13 = variance10.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance18.increment((-1.0d));
        variance18.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        double[] doubleArray32 = new double[] { 0L, (byte) 10 };
        double double33 = variance28.evaluate(doubleArray32);
        double double35 = variance25.evaluate(doubleArray32, (double) 10L);
        double double36 = variance23.evaluate(doubleArray32);
        double double37 = variance18.evaluate(doubleArray32);
        variance16.incrementAll(doubleArray32);
        variance14.incrementAll(doubleArray32);
        double double40 = variance10.evaluate(doubleArray32);
        boolean boolean41 = secondMoment1.equals((java.lang.Object) doubleArray32);
        double double42 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.increment((double) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
    }

    @Test
    public void test02273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02273");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        double double4 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        double[] doubleArray11 = new double[] { 0L, (byte) 10 };
        double double12 = variance7.evaluate(doubleArray11);
        long long13 = variance7.getN();
        variance7.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment17);
        double double19 = secondMoment17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment17);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        double double24 = secondMoment22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment22);
        secondMoment22.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        double[] doubleArray32 = new double[] { 0L, (byte) 10 };
        double double33 = variance28.evaluate(doubleArray32);
        secondMoment22.incrementAll(doubleArray32);
        double double35 = variance20.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance38.increment((-1.0d));
        variance38.setBiasCorrected(false);
        boolean boolean43 = variance38.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean45 = variance38.equals((java.lang.Object) secondMoment44);
        secondMoment44.increment((double) (short) 0);
        secondMoment44.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray58 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double59 = variance51.evaluate(doubleArray58);
        double double60 = secondMoment44.evaluate(doubleArray58);
        secondMoment36.incrementAll(doubleArray58);
        variance20.incrementAll(doubleArray58);
        variance20.increment(0.5d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double67 = variance66.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double70 = variance69.getResult();
        double[] doubleArray73 = new double[] { 0L, (byte) 10 };
        double double74 = variance69.evaluate(doubleArray73);
        double double76 = variance66.evaluate(doubleArray73, (double) 10L);
        long long77 = variance66.getN();
        variance66.increment((double) 0L);
        double[] doubleArray81 = new double[] { 10.0d };
        variance66.incrementAll(doubleArray81);
        double double84 = variance20.evaluate(doubleArray81, (double) (-1.0f));
        double double85 = variance7.evaluate(doubleArray81);
        double double86 = variance1.evaluate(doubleArray81);
        variance1.increment(74.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 25.0d + "'", double35 == 25.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2136.8055555555557d + "'", double59 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 12820.833333333334d + "'", double60 == 12820.833333333334d);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[10.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
    }

    @Test
    public void test02274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02274");
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.setBiasCorrected(false);
        boolean boolean8 = variance3.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        double double12 = secondMoment10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment10);
        secondMoment10.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double17 = variance16.getResult();
        double[] doubleArray20 = new double[] { 0L, (byte) 10 };
        double double21 = variance16.evaluate(doubleArray20);
        secondMoment10.incrementAll(doubleArray20);
        boolean boolean23 = variance3.equals((java.lang.Object) secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance25.increment((-1.0d));
        variance25.setBiasCorrected(false);
        boolean boolean30 = variance25.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean32 = variance25.equals((java.lang.Object) secondMoment31);
        boolean boolean33 = secondMoment10.equals((java.lang.Object) boolean32);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        double[] doubleArray43 = new double[] { 0L, (byte) 10 };
        double double44 = variance39.evaluate(doubleArray43);
        double double46 = variance36.evaluate(doubleArray43, (double) 10L);
        double double47 = secondMoment10.evaluate(doubleArray43);
        double double48 = secondMoment10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        double[] doubleArray58 = new double[] { 0L, (byte) 10 };
        double double59 = variance54.evaluate(doubleArray58);
        double double61 = variance51.evaluate(doubleArray58, (double) 10L);
        long long62 = variance51.getN();
        variance51.setBiasCorrected(false);
        boolean boolean65 = variance51.isBiasCorrected();
        long long66 = variance51.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double69 = variance68.getResult();
        double[] doubleArray72 = new double[] { 0L, (byte) 10 };
        double double73 = variance68.evaluate(doubleArray72);
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray82 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double83 = variance75.evaluate(doubleArray82);
        double double84 = variance68.evaluate(doubleArray82);
        double double86 = variance51.evaluate(doubleArray82, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double89 = variance49.evaluate(doubleArray82, 100, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2136.8055555555557d + "'", double83 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2564.166666666667d + "'", double84 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2136.805555555555d + "'", double86 == 2136.805555555555d);
    }

    @Test
    public void test02275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02275");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        double double15 = secondMoment7.getResult();
        secondMoment7.increment(25.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.clear();
        long long22 = variance20.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        long long26 = secondMoment24.getN();
        secondMoment24.clear();
        secondMoment24.clear();
        double double29 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment24);
        variance30.increment((double) (byte) -1);
        long long33 = variance30.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment34);
        long long36 = secondMoment34.getN();
        secondMoment34.clear();
        secondMoment34.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment40);
        long long42 = secondMoment40.getN();
        secondMoment40.clear();
        double double44 = secondMoment40.getResult();
        secondMoment40.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment40);
        double[] doubleArray48 = new double[] {};
        double double49 = secondMoment40.evaluate(doubleArray48);
        secondMoment34.incrementAll(doubleArray48);
        double double51 = variance30.evaluate(doubleArray48);
        double double52 = variance20.evaluate(doubleArray48);
        variance18.incrementAll(doubleArray48);
        variance18.increment(14205.875d);
        double double56 = variance18.getResult();
        long long57 = variance18.getN();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.5d + "'", double15 == 0.5d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 200.33333333333331d + "'", double56 == 200.33333333333331d);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 3L + "'", long57 == 3L);
    }

    @Test
    public void test02276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02276");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        secondMoment7.clear();
        secondMoment7.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance16.increment((-1.0d));
        variance16.setBiasCorrected(false);
        boolean boolean21 = variance16.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean23 = variance16.equals((java.lang.Object) secondMoment22);
        secondMoment22.increment((double) (short) 0);
        secondMoment22.increment((double) 1.0f);
        double double28 = secondMoment22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        variance29.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        long long34 = secondMoment32.getN();
        secondMoment32.clear();
        secondMoment32.clear();
        secondMoment32.increment((double) (byte) 100);
        secondMoment32.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment32);
        variance41.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance46.increment((-1.0d));
        variance46.setBiasCorrected(false);
        boolean boolean51 = variance46.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean53 = variance46.equals((java.lang.Object) secondMoment52);
        double double54 = secondMoment52.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double57 = variance56.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double60 = variance59.getResult();
        double[] doubleArray63 = new double[] { 0L, (byte) 10 };
        double double64 = variance59.evaluate(doubleArray63);
        double double66 = variance56.evaluate(doubleArray63, (double) 10L);
        double double69 = secondMoment52.evaluate(doubleArray63, (int) (short) 0, 1);
        long long70 = secondMoment52.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment52);
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double74 = variance73.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double77 = variance76.getResult();
        double[] doubleArray80 = new double[] { 0L, (byte) 10 };
        double double81 = variance76.evaluate(doubleArray80);
        double double83 = variance73.evaluate(doubleArray80, (double) 10L);
        long long84 = variance73.getN();
        variance73.increment((double) 0L);
        double[] doubleArray88 = new double[] { 10.0d };
        variance73.incrementAll(doubleArray88);
        double double90 = variance71.evaluate(doubleArray88);
        variance41.incrementAll(doubleArray88);
        double double94 = variance29.evaluate(doubleArray88, (int) (byte) 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            variance14.incrementAll(doubleArray88, (int) (short) 1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.5d + "'", double28 == 0.5d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1L + "'", long70 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[10.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double94));
    }

    @Test
    public void test02277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02277");
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.setBiasCorrected(false);
        boolean boolean8 = variance3.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        double double12 = secondMoment10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment10);
        secondMoment10.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double17 = variance16.getResult();
        double[] doubleArray20 = new double[] { 0L, (byte) 10 };
        double double21 = variance16.evaluate(doubleArray20);
        secondMoment10.incrementAll(doubleArray20);
        boolean boolean23 = variance3.equals((java.lang.Object) secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance25.increment((-1.0d));
        variance25.setBiasCorrected(false);
        boolean boolean30 = variance25.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean32 = variance25.equals((java.lang.Object) secondMoment31);
        boolean boolean33 = secondMoment10.equals((java.lang.Object) boolean32);
        secondMoment10.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        long long39 = secondMoment37.getN();
        secondMoment37.clear();
        secondMoment37.increment(10.0d);
        double double43 = secondMoment37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        double[] doubleArray54 = new double[] { 0L, (byte) 10 };
        double double55 = variance50.evaluate(doubleArray54);
        double double57 = variance47.evaluate(doubleArray54, (double) 10L);
        double double58 = variance45.evaluate(doubleArray54);
        double[] doubleArray62 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double63 = variance45.evaluate(doubleArray62);
        double double64 = secondMoment37.evaluate(doubleArray62);
        secondMoment10.incrementAll(doubleArray62);
        double double66 = secondMoment10.getResult();
        double double67 = secondMoment10.getResult();
        secondMoment10.clear();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2024039.120370371d + "'", double63 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 4048078.240740742d + "'", double64 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 4048078.240740742d + "'", double66 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 4048078.240740742d + "'", double67 == 4048078.240740742d);
    }

    @Test
    public void test02278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02278");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        double[] doubleArray8 = new double[] { 0L, (byte) 10 };
        double double9 = variance4.evaluate(doubleArray8);
        double double11 = variance1.evaluate(doubleArray8, (double) 10L);
        long long12 = variance1.getN();
        double double13 = variance1.getResult();
        variance1.setBiasCorrected(false);
        variance1.clear();
        double[] doubleArray17 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double20 = variance1.evaluate(doubleArray17, (int) (byte) 1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.0d + "'", double9 == 50.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test02279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02279");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double11 = secondMoment10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance13.increment((-1.0d));
        variance13.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double24 = variance23.getResult();
        double[] doubleArray27 = new double[] { 0L, (byte) 10 };
        double double28 = variance23.evaluate(doubleArray27);
        double double30 = variance20.evaluate(doubleArray27, (double) 10L);
        double double31 = variance18.evaluate(doubleArray27);
        double double32 = variance13.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        double[] doubleArray38 = new double[] { 0L, (byte) 10 };
        double double39 = variance34.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray48 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double49 = variance41.evaluate(doubleArray48);
        double double50 = variance34.evaluate(doubleArray48);
        double double51 = variance13.evaluate(doubleArray48);
        double double52 = secondMoment10.evaluate(doubleArray48);
        double double53 = secondMoment0.evaluate(doubleArray48);
        long long54 = secondMoment0.getN();
        secondMoment0.increment((double) 10L);
        double double57 = secondMoment0.getResult();
        secondMoment0.increment(0.0d);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 2136.8055555555557d + "'", double49 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2564.166666666667d + "'", double50 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2564.166666666667d + "'", double51 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 12820.833333333334d + "'", double52 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 12820.833333333334d + "'", double53 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 6L + "'", long54 == 6L);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 13349.428571428572d + "'", double57 == 13349.428571428572d);
    }

    @Test
    public void test02280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02280");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.clear();
        long long12 = secondMoment7.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        double double16 = secondMoment14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment14);
        secondMoment14.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        double[] doubleArray24 = new double[] { 0L, (byte) 10 };
        double double25 = variance20.evaluate(doubleArray24);
        secondMoment14.incrementAll(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        long long28 = secondMoment14.getN();
        double double29 = secondMoment14.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment30);
        variance31.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment34);
        double double36 = secondMoment34.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment34);
        secondMoment34.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        double[] doubleArray44 = new double[] { 0L, (byte) 10 };
        double double45 = variance40.evaluate(doubleArray44);
        secondMoment34.incrementAll(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment34);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean51 = variance49.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance53.increment((-1.0d));
        variance53.setBiasCorrected(false);
        boolean boolean58 = variance53.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean60 = variance53.equals((java.lang.Object) secondMoment59);
        double double61 = secondMoment59.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double64 = variance63.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double67 = variance66.getResult();
        double[] doubleArray70 = new double[] { 0L, (byte) 10 };
        double double71 = variance66.evaluate(doubleArray70);
        double double73 = variance63.evaluate(doubleArray70, (double) 10L);
        double double76 = secondMoment59.evaluate(doubleArray70, (int) (short) 0, 1);
        double double77 = variance49.evaluate(doubleArray70);
        secondMoment34.incrementAll(doubleArray70);
        variance31.incrementAll(doubleArray70);
        double double80 = secondMoment14.evaluate(doubleArray70);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment7.incrementAll(doubleArray70, (int) (short) 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 2L + "'", long28 == 2L);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
    }

    @Test
    public void test02281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02281");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double3 = variance2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double6 = variance5.getResult();
        double[] doubleArray9 = new double[] { 0L, (byte) 10 };
        double double10 = variance5.evaluate(doubleArray9);
        double double12 = variance2.evaluate(doubleArray9, (double) 10L);
        long long13 = variance2.getN();
        boolean boolean14 = secondMoment0.equals((java.lang.Object) long13);
        secondMoment0.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance18.increment((-1.0d));
        variance18.setBiasCorrected(false);
        variance18.increment(2136.8055555555557d);
        variance18.setBiasCorrected(false);
        java.lang.Class<?> wildcardClass27 = variance18.getClass();
        boolean boolean28 = secondMoment0.equals((java.lang.Object) variance18);
        double double29 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance30.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.setBiasCorrected(false);
        boolean boolean39 = variance34.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean41 = variance34.equals((java.lang.Object) secondMoment40);
        secondMoment40.increment((double) (short) 0);
        secondMoment40.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray54 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double55 = variance47.evaluate(doubleArray54);
        double double56 = secondMoment40.evaluate(doubleArray54);
        long long57 = secondMoment40.getN();
        long long58 = secondMoment40.getN();
        secondMoment40.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment40);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance63.increment((-1.0d));
        boolean boolean66 = variance63.isBiasCorrected();
        double double67 = variance63.getResult();
        variance63.clear();
        variance63.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance72.increment((-1.0d));
        variance72.setBiasCorrected(false);
        boolean boolean77 = variance72.isBiasCorrected();
        double[] doubleArray78 = new double[] {};
        double double79 = variance72.evaluate(doubleArray78);
        variance72.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray90 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double91 = variance83.evaluate(doubleArray90);
        double double92 = variance72.evaluate(doubleArray90);
        variance63.incrementAll(doubleArray90);
        variance61.incrementAll(doubleArray90, 0, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double99 = variance30.evaluate(doubleArray90, (int) '4', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 50.0d + "'", double10 == 50.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2136.8055555555557d + "'", double55 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 12820.833333333334d + "'", double56 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6L + "'", long57 == 6L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 6L + "'", long58 == 6L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 2136.8055555555557d + "'", double91 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 2136.8055555555557d + "'", double92 == 2136.8055555555557d);
    }

    @Test
    public void test02282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02282");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        variance1.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean14 = variance12.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double24 = variance16.evaluate(doubleArray23);
        double double25 = variance12.evaluate(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance27.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        double[] doubleArray39 = new double[] { 0L, (byte) 10 };
        double double40 = variance35.evaluate(doubleArray39);
        double double42 = variance32.evaluate(doubleArray39, (double) 10L);
        double double43 = variance30.evaluate(doubleArray39);
        double double44 = variance27.evaluate(doubleArray39);
        double double45 = variance12.evaluate(doubleArray39);
        double double47 = variance1.evaluate(doubleArray39, (double) 0L);
        double double48 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment50);
        long long52 = secondMoment50.getN();
        secondMoment50.clear();
        secondMoment50.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment50);
        secondMoment50.increment(1.0d);
        secondMoment50.increment((double) 6L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment50);
        long long61 = variance60.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance63.increment((-1.0d));
        variance63.setBiasCorrected(false);
        boolean boolean68 = variance63.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double71 = variance70.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double74 = variance73.getResult();
        double[] doubleArray77 = new double[] { 0L, (byte) 10 };
        double double78 = variance73.evaluate(doubleArray77);
        double double80 = variance70.evaluate(doubleArray77, (double) 10L);
        double double81 = variance63.evaluate(doubleArray77);
        variance63.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance85 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray92 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double93 = variance85.evaluate(doubleArray92);
        double double94 = variance63.evaluate(doubleArray92);
        double double95 = variance60.evaluate(doubleArray92);
        double double96 = variance1.evaluate(doubleArray92);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2136.8055555555557d + "'", double24 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2564.166666666667d + "'", double25 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 25.0d + "'", double47 == 25.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2550.25d + "'", double48 == 2550.25d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 2L + "'", long61 == 2L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 25.0d + "'", double81 == 25.0d);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 2136.8055555555557d + "'", double93 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 2136.8055555555557d + "'", double94 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 2564.166666666667d + "'", double95 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 2136.8055555555557d + "'", double96 == 2136.8055555555557d);
    }

    @Test
    public void test02283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02283");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        double double14 = secondMoment8.getResult();
        double double15 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        double double18 = secondMoment16.getResult();
        boolean boolean19 = secondMoment8.equals((java.lang.Object) double18);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        double double21 = variance20.getResult();
        variance20.clear();
        variance20.increment(14205.875d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.5d + "'", double15 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.5d + "'", double21 == 0.5d);
    }

    @Test
    public void test02284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02284");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        double[] doubleArray12 = new double[] { 0L, (byte) 10 };
        double double13 = variance8.evaluate(doubleArray12);
        secondMoment2.incrementAll(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.clear();
        long long17 = secondMoment2.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        long long19 = secondMoment2.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance21.increment((-1.0d));
        variance21.setBiasCorrected(false);
        variance21.increment((double) 100L);
        boolean boolean28 = variance21.isBiasCorrected();
        variance21.clear();
        long long30 = variance21.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        double double34 = secondMoment32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment32);
        secondMoment32.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        double[] doubleArray42 = new double[] { 0L, (byte) 10 };
        double double43 = variance38.evaluate(doubleArray42);
        secondMoment32.incrementAll(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean49 = variance47.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance51.increment((-1.0d));
        variance51.setBiasCorrected(false);
        boolean boolean56 = variance51.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment57 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean58 = variance51.equals((java.lang.Object) secondMoment57);
        double double59 = secondMoment57.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double65 = variance64.getResult();
        double[] doubleArray68 = new double[] { 0L, (byte) 10 };
        double double69 = variance64.evaluate(doubleArray68);
        double double71 = variance61.evaluate(doubleArray68, (double) 10L);
        double double74 = secondMoment57.evaluate(doubleArray68, (int) (short) 0, 1);
        double double75 = variance47.evaluate(doubleArray68);
        secondMoment32.incrementAll(doubleArray68);
        double double77 = variance21.evaluate(doubleArray68);
        double double80 = secondMoment2.evaluate(doubleArray68, (int) (byte) 0, (int) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        long long82 = secondMoment2.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 25.0d + "'", double77 == 25.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
    }

    @Test
    public void test02285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02285");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.increment((double) 10L);
        variance1.increment(1142553.1483410494d);
        double double6 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance8.increment((-1.0d));
        variance8.setBiasCorrected(false);
        boolean boolean13 = variance8.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean15 = variance8.equals((java.lang.Object) secondMoment14);
        secondMoment14.increment((double) (short) 0);
        secondMoment14.increment((double) 1.0f);
        double double20 = secondMoment14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        double[] doubleArray31 = new double[] { 0L, (byte) 10 };
        double double32 = variance27.evaluate(doubleArray31);
        double double34 = variance24.evaluate(doubleArray31, (double) 10L);
        long long35 = variance24.getN();
        variance24.increment((double) 0L);
        long long38 = variance24.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance41.increment((-1.0d));
        variance41.setBiasCorrected(false);
        boolean boolean46 = variance41.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean48 = variance41.equals((java.lang.Object) secondMoment47);
        double double49 = secondMoment47.getResult();
        secondMoment47.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment47);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance53.increment((-1.0d));
        variance53.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double61 = variance60.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double64 = variance63.getResult();
        double[] doubleArray67 = new double[] { 0L, (byte) 10 };
        double double68 = variance63.evaluate(doubleArray67);
        double double70 = variance60.evaluate(doubleArray67, (double) 10L);
        double double71 = variance58.evaluate(doubleArray67);
        double double72 = variance53.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double75 = variance74.getResult();
        double[] doubleArray78 = new double[] { 0L, (byte) 10 };
        double double79 = variance74.evaluate(doubleArray78);
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray88 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double89 = variance81.evaluate(doubleArray88);
        double double90 = variance74.evaluate(doubleArray88);
        double double91 = variance53.evaluate(doubleArray88);
        double double92 = variance51.evaluate(doubleArray88);
        double double94 = variance24.evaluate(doubleArray88, (double) (byte) 1);
        double double95 = secondMoment14.evaluate(doubleArray88);
        variance1.incrementAll(doubleArray88);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 3.2635121145526935E11d + "'", double6 == 3.2635121145526935E11d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.5d + "'", double20 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 2136.8055555555557d + "'", double89 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 2564.166666666667d + "'", double90 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 2564.166666666667d + "'", double91 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 2136.8055555555557d + "'", double92 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 2564.1666666666665d + "'", double94 == 2564.1666666666665d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 12820.833333333334d + "'", double95 == 12820.833333333334d);
    }

    @Test
    public void test02286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02286");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        variance13.increment((double) (short) -1);
        variance13.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean22 = variance20.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean31 = variance24.equals((java.lang.Object) secondMoment30);
        double double32 = secondMoment30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        double[] doubleArray41 = new double[] { 0L, (byte) 10 };
        double double42 = variance37.evaluate(doubleArray41);
        double double44 = variance34.evaluate(doubleArray41, (double) 10L);
        double double47 = secondMoment30.evaluate(doubleArray41, (int) (short) 0, 1);
        double double48 = variance20.evaluate(doubleArray41);
        variance20.increment((double) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance52.increment((-1.0d));
        variance52.setBiasCorrected(false);
        boolean boolean57 = variance52.isBiasCorrected();
        double double58 = variance52.getResult();
        variance52.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance62.increment((-1.0d));
        variance62.setBiasCorrected(false);
        boolean boolean67 = variance62.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment68 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean69 = variance62.equals((java.lang.Object) secondMoment68);
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double72 = variance71.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double75 = variance74.getResult();
        double[] doubleArray78 = new double[] { 0L, (byte) 10 };
        double double79 = variance74.evaluate(doubleArray78);
        double double81 = variance71.evaluate(doubleArray78, (double) 10L);
        double double85 = variance62.evaluate(doubleArray78, (double) (short) 0, 0, (int) (short) 0);
        double double86 = variance52.evaluate(doubleArray78);
        double double87 = variance20.evaluate(doubleArray78);
        double double91 = variance13.evaluate(doubleArray78, 60.666666666666664d, 1, 1);
        double double92 = variance11.evaluate(doubleArray78);
        double double93 = variance11.getResult();
        double double94 = variance11.getResult();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double93));
        org.junit.Assert.assertTrue(Double.isNaN(double94));
    }

    @Test
    public void test02287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02287");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean9 = variance7.equals((java.lang.Object) (short) 10);
        boolean boolean10 = variance1.equals((java.lang.Object) variance7);
        long long11 = variance7.getN();
        variance7.setBiasCorrected(false);
        variance7.increment(227.2998046875d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        variance17.setBiasCorrected(false);
        boolean boolean22 = variance17.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean24 = variance17.equals((java.lang.Object) secondMoment23);
        secondMoment23.increment((double) (short) 0);
        secondMoment23.increment((double) 1.0f);
        double double29 = secondMoment23.getResult();
        secondMoment23.clear();
        long long31 = secondMoment23.getN();
        secondMoment23.clear();
        secondMoment23.increment(1988.7755102040815d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance36.increment((-1.0d));
        variance36.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double44 = variance43.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double47 = variance46.getResult();
        double[] doubleArray50 = new double[] { 0L, (byte) 10 };
        double double51 = variance46.evaluate(doubleArray50);
        double double53 = variance43.evaluate(doubleArray50, (double) 10L);
        double double54 = variance41.evaluate(doubleArray50);
        double double55 = variance36.evaluate(doubleArray50);
        secondMoment23.incrementAll(doubleArray50, 0, 0);
        variance7.incrementAll(doubleArray50, 0, (int) (short) 1);
        variance7.increment(1349359.413580247d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.5d + "'", double29 == 0.5d);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
    }

    @Test
    public void test02288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02288");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance5.increment((-1.0d));
        variance5.setBiasCorrected(false);
        boolean boolean10 = variance5.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean12 = variance5.equals((java.lang.Object) secondMoment11);
        double double13 = secondMoment11.getResult();
        secondMoment11.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        secondMoment11.increment((double) 10.0f);
        secondMoment11.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        java.lang.Object obj20 = null;
        boolean boolean21 = variance19.equals(obj20);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double23 = secondMoment22.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        long long26 = secondMoment24.getN();
        secondMoment24.clear();
        secondMoment24.clear();
        secondMoment24.increment((double) (byte) 100);
        long long31 = secondMoment24.getN();
        double[] doubleArray33 = new double[] { 2024039.1203703713d };
        double double34 = secondMoment24.evaluate(doubleArray33);
        secondMoment22.incrementAll(doubleArray33);
        variance19.incrementAll(doubleArray33);
        boolean boolean37 = variance19.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        long long41 = secondMoment39.getN();
        secondMoment39.clear();
        secondMoment39.clear();
        secondMoment39.increment((double) (byte) 100);
        secondMoment39.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        secondMoment39.clear();
        secondMoment39.increment(2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment39);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance53.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance57.increment((-1.0d));
        variance57.setBiasCorrected(false);
        boolean boolean62 = variance57.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment63 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean64 = variance57.equals((java.lang.Object) secondMoment63);
        double double65 = secondMoment63.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double68 = variance67.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double71 = variance70.getResult();
        double[] doubleArray74 = new double[] { 0L, (byte) 10 };
        double double75 = variance70.evaluate(doubleArray74);
        double double77 = variance67.evaluate(doubleArray74, (double) 10L);
        double double80 = secondMoment63.evaluate(doubleArray74, (int) (short) 0, 1);
        double double81 = variance53.evaluate(doubleArray74);
        double double82 = variance51.evaluate(doubleArray74);
        double double84 = variance19.evaluate(doubleArray74, (double) (byte) 1);
        double double85 = secondMoment0.evaluate(doubleArray74);
        secondMoment0.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
    }

    @Test
    public void test02289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02289");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        double double10 = secondMoment8.getResult();
        secondMoment8.clear();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.increment(1980.1224489795918d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance18.increment((-1.0d));
        variance18.setBiasCorrected(false);
        boolean boolean23 = variance18.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment25);
        double double27 = secondMoment25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment25);
        secondMoment25.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        double[] doubleArray35 = new double[] { 0L, (byte) 10 };
        double double36 = variance31.evaluate(doubleArray35);
        secondMoment25.incrementAll(doubleArray35);
        boolean boolean38 = variance18.equals((java.lang.Object) secondMoment25);
        variance18.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        double double43 = secondMoment41.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment41);
        secondMoment41.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        double[] doubleArray51 = new double[] { 0L, (byte) 10 };
        double double52 = variance47.evaluate(doubleArray51);
        secondMoment41.incrementAll(doubleArray51);
        double double54 = variance18.evaluate(doubleArray51);
        variance18.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double60 = variance59.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double63 = variance62.getResult();
        double[] doubleArray66 = new double[] { 0L, (byte) 10 };
        double double67 = variance62.evaluate(doubleArray66);
        double double69 = variance59.evaluate(doubleArray66, (double) 10L);
        double double70 = variance57.evaluate(doubleArray66);
        double double71 = variance18.evaluate(doubleArray66);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment8.incrementAll(doubleArray66, (int) (byte) 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 25.0d + "'", double54 == 25.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 25.0d + "'", double71 == 25.0d);
    }

    @Test
    public void test02290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02290");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment((double) 2L);
        double double8 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance10.increment((-1.0d));
        long long13 = variance10.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance18.increment((-1.0d));
        variance18.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        double[] doubleArray32 = new double[] { 0L, (byte) 10 };
        double double33 = variance28.evaluate(doubleArray32);
        double double35 = variance25.evaluate(doubleArray32, (double) 10L);
        double double36 = variance23.evaluate(doubleArray32);
        double double37 = variance18.evaluate(doubleArray32);
        variance16.incrementAll(doubleArray32);
        variance14.incrementAll(doubleArray32);
        double double40 = variance10.evaluate(doubleArray32);
        boolean boolean41 = secondMoment1.equals((java.lang.Object) doubleArray32);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment45);
        long long47 = secondMoment45.getN();
        secondMoment45.clear();
        double double49 = secondMoment45.getResult();
        secondMoment45.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment45);
        double[] doubleArray53 = new double[] {};
        double double54 = secondMoment45.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment45);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment45);
        double double57 = secondMoment45.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment58);
        long long60 = secondMoment58.getN();
        secondMoment58.clear();
        secondMoment58.increment(10.0d);
        double double64 = secondMoment58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double69 = variance68.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double72 = variance71.getResult();
        double[] doubleArray75 = new double[] { 0L, (byte) 10 };
        double double76 = variance71.evaluate(doubleArray75);
        double double78 = variance68.evaluate(doubleArray75, (double) 10L);
        double double79 = variance66.evaluate(doubleArray75);
        double[] doubleArray83 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double84 = variance66.evaluate(doubleArray83);
        double double85 = secondMoment58.evaluate(doubleArray83);
        secondMoment45.incrementAll(doubleArray83);
        boolean boolean87 = secondMoment1.equals((java.lang.Object) secondMoment45);
        secondMoment45.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2024039.120370371d + "'", double84 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 4048078.240740742d + "'", double85 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test02291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02291");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        boolean boolean8 = variance1.isBiasCorrected();
        variance1.clear();
        double double10 = variance1.getResult();
        variance1.clear();
        variance1.clear();
        variance1.setBiasCorrected(true);
        variance1.increment(2.0432086265156394E12d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test02292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02292");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        double[] doubleArray15 = new double[] { 0L, (byte) 10 };
        double double16 = variance11.evaluate(doubleArray15);
        double double18 = variance8.evaluate(doubleArray15, (double) 10L);
        double double19 = variance6.evaluate(doubleArray15);
        double double20 = variance1.evaluate(doubleArray15);
        boolean boolean21 = variance1.isBiasCorrected();
        variance1.increment((double) (short) 10);
        long long24 = variance1.getN();
        variance1.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
    }

    @Test
    public void test02293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02293");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance8.increment((-1.0d));
        variance8.setBiasCorrected(false);
        variance8.increment((double) 100L);
        boolean boolean15 = variance8.isBiasCorrected();
        boolean boolean16 = variance8.isBiasCorrected();
        boolean boolean17 = secondMoment1.equals((java.lang.Object) boolean16);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double double19 = variance18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance21.increment((-1.0d));
        variance21.setBiasCorrected(false);
        boolean boolean26 = variance21.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean28 = variance21.equals((java.lang.Object) secondMoment27);
        secondMoment27.increment((double) (short) 0);
        secondMoment27.increment((double) 1.0f);
        double double33 = secondMoment27.getResult();
        long long34 = secondMoment27.getN();
        secondMoment27.clear();
        double double36 = secondMoment27.getResult();
        boolean boolean37 = variance18.equals((java.lang.Object) double36);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.5d + "'", double33 == 0.5d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 2L + "'", long34 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test02294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02294");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        double double5 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        double[] doubleArray13 = new double[] { 0L, (byte) 10 };
        double double14 = variance9.evaluate(doubleArray13);
        secondMoment3.incrementAll(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        long long17 = secondMoment3.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        double double19 = secondMoment3.getResult();
        long long20 = secondMoment3.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment3);
        variance21.increment(60.666666666666664d);
        variance21.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance27.increment((-1.0d));
        variance27.setBiasCorrected(false);
        boolean boolean32 = variance27.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean34 = variance27.equals((java.lang.Object) secondMoment33);
        secondMoment33.increment((double) (short) 0);
        secondMoment33.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray47 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double48 = variance40.evaluate(doubleArray47);
        double double49 = secondMoment33.evaluate(doubleArray47);
        long long50 = secondMoment33.getN();
        long long51 = secondMoment33.getN();
        secondMoment33.increment((double) (short) 0);
        long long54 = secondMoment33.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance56.increment((-1.0d));
        variance56.setBiasCorrected(false);
        boolean boolean61 = variance56.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double64 = variance63.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double67 = variance66.getResult();
        double[] doubleArray70 = new double[] { 0L, (byte) 10 };
        double double71 = variance66.evaluate(doubleArray70);
        double double73 = variance63.evaluate(doubleArray70, (double) 10L);
        double double74 = variance56.evaluate(doubleArray70);
        double double75 = secondMoment33.evaluate(doubleArray70);
        // The following exception was thrown during execution in test generation
        try {
            double double78 = variance21.evaluate(doubleArray70, (int) (short) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2L + "'", long20 == 2L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2136.8055555555557d + "'", double48 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 12820.833333333334d + "'", double49 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 6L + "'", long50 == 6L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 6L + "'", long51 == 6L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 7L + "'", long54 == 7L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 25.0d + "'", double74 == 25.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
    }

    @Test
    public void test02295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02295");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance8.increment((-1.0d));
        variance8.setBiasCorrected(false);
        variance8.increment((double) 100L);
        boolean boolean15 = variance8.isBiasCorrected();
        boolean boolean16 = variance8.isBiasCorrected();
        boolean boolean17 = secondMoment1.equals((java.lang.Object) boolean16);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double double19 = variance18.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        double double24 = secondMoment22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment22);
        secondMoment22.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        double[] doubleArray32 = new double[] { 0L, (byte) 10 };
        double double33 = variance28.evaluate(doubleArray32);
        secondMoment22.incrementAll(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean39 = variance37.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance41.increment((-1.0d));
        variance41.setBiasCorrected(false);
        boolean boolean46 = variance41.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean48 = variance41.equals((java.lang.Object) secondMoment47);
        double double49 = secondMoment47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        double[] doubleArray58 = new double[] { 0L, (byte) 10 };
        double double59 = variance54.evaluate(doubleArray58);
        double double61 = variance51.evaluate(doubleArray58, (double) 10L);
        double double64 = secondMoment47.evaluate(doubleArray58, (int) (short) 0, 1);
        double double65 = variance37.evaluate(doubleArray58);
        secondMoment22.incrementAll(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment22);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double71 = variance70.getResult();
        long long72 = variance70.getN();
        long long73 = variance70.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        double[] doubleArray79 = new double[] { 0L, (byte) 10 };
        double double80 = variance75.evaluate(doubleArray79);
        double double82 = variance70.evaluate(doubleArray79, (double) (short) -1);
        double double83 = secondMoment22.evaluate(doubleArray79);
        variance18.incrementAll(doubleArray79, (int) (byte) 0, (int) (short) 1);
        variance18.clear();
        long long88 = variance18.getN();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 1L + "'", long88 == 1L);
    }

    @Test
    public void test02296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02296");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        double double22 = variance12.evaluate(doubleArray19, (double) 10L);
        double double23 = variance10.evaluate(doubleArray19);
        variance10.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean29 = variance27.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double39 = variance31.evaluate(doubleArray38);
        double double40 = variance27.evaluate(doubleArray38);
        variance10.incrementAll(doubleArray38);
        double double42 = variance10.getResult();
        variance10.increment(2310.1428571428573d);
        boolean boolean45 = variance8.equals((java.lang.Object) 2310.1428571428573d);
        long long46 = variance8.getN();
        boolean boolean47 = variance8.isBiasCorrected();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2136.8055555555557d + "'", double39 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2564.166666666667d + "'", double40 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2310.1428571428573d + "'", double42 == 2310.1428571428573d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test02297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02297");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double9 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        java.lang.Class<?> wildcardClass11 = secondMoment0.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test02298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02298");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        long long4 = variance1.getN();
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        double[] doubleArray12 = new double[] { 0L, (byte) 10 };
        double double13 = variance8.evaluate(doubleArray12);
        double double14 = variance8.getResult();
        variance8.increment(1349359.4135802474d);
        variance8.setBiasCorrected(true);
        variance8.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        long long22 = secondMoment20.getN();
        secondMoment20.clear();
        secondMoment20.increment(10.0d);
        double double26 = secondMoment20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        double[] doubleArray37 = new double[] { 0L, (byte) 10 };
        double double38 = variance33.evaluate(doubleArray37);
        double double40 = variance30.evaluate(doubleArray37, (double) 10L);
        double double41 = variance28.evaluate(doubleArray37);
        double[] doubleArray45 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double46 = variance28.evaluate(doubleArray45);
        double double47 = secondMoment20.evaluate(doubleArray45);
        double double48 = variance8.evaluate(doubleArray45);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray45, (int) (byte) 1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2024039.120370371d + "'", double46 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 4048078.240740742d + "'", double47 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2024039.120370371d + "'", double48 == 2024039.120370371d);
    }

    @Test
    public void test02299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02299");
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.setBiasCorrected(false);
        boolean boolean8 = variance3.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean10 = variance3.equals((java.lang.Object) secondMoment9);
        secondMoment9.increment((double) (short) 0);
        secondMoment9.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double24 = variance16.evaluate(doubleArray23);
        double double25 = secondMoment9.evaluate(doubleArray23);
        long long26 = secondMoment9.getN();
        long long27 = secondMoment9.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        variance30.increment(26761.69230769231d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.setBiasCorrected(false);
        boolean boolean39 = variance34.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean41 = variance34.equals((java.lang.Object) secondMoment40);
        secondMoment40.increment((double) (short) 0);
        secondMoment40.increment((double) 1.0f);
        double double46 = secondMoment40.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment40);
        double double48 = secondMoment40.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment40);
        long long50 = variance49.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double53 = variance52.getResult();
        long long54 = variance52.getN();
        variance52.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance58.increment((-1.0d));
        variance58.setBiasCorrected(false);
        boolean boolean63 = variance58.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double66 = variance65.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double69 = variance68.getResult();
        double[] doubleArray72 = new double[] { 0L, (byte) 10 };
        double double73 = variance68.evaluate(doubleArray72);
        double double75 = variance65.evaluate(doubleArray72, (double) 10L);
        double double76 = variance58.evaluate(doubleArray72);
        variance52.incrementAll(doubleArray72);
        variance49.incrementAll(doubleArray72);
        // The following exception was thrown during execution in test generation
        try {
            variance30.incrementAll(doubleArray72, 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2136.8055555555557d + "'", double24 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 12820.833333333334d + "'", double25 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 6L + "'", long27 == 6L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.5d + "'", double46 == 0.5d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.5d + "'", double48 == 0.5d);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 2L + "'", long50 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 25.0d + "'", double76 == 25.0d);
    }

    @Test
    public void test02300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02300");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance4.increment((-1.0d));
        variance4.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double22 = variance9.evaluate(doubleArray18);
        double double23 = variance4.evaluate(doubleArray18);
        variance2.incrementAll(doubleArray18);
        variance0.incrementAll(doubleArray18);
        variance0.clear();
        boolean boolean27 = variance0.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        long long30 = secondMoment28.getN();
        secondMoment28.clear();
        double double32 = secondMoment28.getResult();
        secondMoment28.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        double[] doubleArray36 = new double[] {};
        double double37 = secondMoment28.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment38);
        variance39.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment42);
        double double44 = secondMoment42.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment42);
        secondMoment42.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        double[] doubleArray52 = new double[] { 0L, (byte) 10 };
        double double53 = variance48.evaluate(doubleArray52);
        secondMoment42.incrementAll(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment42);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean59 = variance57.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance61.increment((-1.0d));
        variance61.setBiasCorrected(false);
        boolean boolean66 = variance61.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment67 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean68 = variance61.equals((java.lang.Object) secondMoment67);
        double double69 = secondMoment67.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double72 = variance71.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double75 = variance74.getResult();
        double[] doubleArray78 = new double[] { 0L, (byte) 10 };
        double double79 = variance74.evaluate(doubleArray78);
        double double81 = variance71.evaluate(doubleArray78, (double) 10L);
        double double84 = secondMoment67.evaluate(doubleArray78, (int) (short) 0, 1);
        double double85 = variance57.evaluate(doubleArray78);
        secondMoment42.incrementAll(doubleArray78);
        variance39.incrementAll(doubleArray78);
        double double88 = secondMoment28.evaluate(doubleArray78);
        // The following exception was thrown during execution in test generation
        try {
            double double91 = variance0.evaluate(doubleArray78, (int) (short) -1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
    }

    @Test
    public void test02301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02301");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double[] doubleArray7 = new double[] {};
        double double8 = variance1.evaluate(doubleArray7);
        variance1.setBiasCorrected(false);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        double double15 = secondMoment13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment13);
        secondMoment13.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double20 = variance19.getResult();
        double[] doubleArray23 = new double[] { 0L, (byte) 10 };
        double double24 = variance19.evaluate(doubleArray23);
        secondMoment13.incrementAll(doubleArray23);
        variance1.incrementAll(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        variance28.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance33.increment((-1.0d));
        variance33.setBiasCorrected(false);
        boolean boolean38 = variance33.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean40 = variance33.equals((java.lang.Object) secondMoment39);
        double double41 = secondMoment39.getResult();
        secondMoment39.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment45);
        double double47 = secondMoment45.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment45);
        secondMoment45.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance51.increment((-1.0d));
        variance51.setBiasCorrected(false);
        boolean boolean56 = variance51.isBiasCorrected();
        double[] doubleArray57 = new double[] {};
        double double58 = variance51.evaluate(doubleArray57);
        secondMoment45.incrementAll(doubleArray57);
        double double60 = variance43.evaluate(doubleArray57);
        double double61 = variance28.evaluate(doubleArray57);
        double double62 = variance1.evaluate(doubleArray57);
        variance1.increment((double) 4L);
        long long65 = variance1.getN();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 3L + "'", long65 == 3L);
    }

    @Test
    public void test02302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02302");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        variance1.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean14 = variance12.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double24 = variance16.evaluate(doubleArray23);
        double double25 = variance12.evaluate(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance27.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        double[] doubleArray39 = new double[] { 0L, (byte) 10 };
        double double40 = variance35.evaluate(doubleArray39);
        double double42 = variance32.evaluate(doubleArray39, (double) 10L);
        double double43 = variance30.evaluate(doubleArray39);
        double double44 = variance27.evaluate(doubleArray39);
        double double45 = variance12.evaluate(doubleArray39);
        double double47 = variance1.evaluate(doubleArray39, (double) 0L);
        variance1.clear();
        variance1.increment(2136.8055555555557d);
        double double51 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance53.increment((-1.0d));
        boolean boolean56 = variance53.isBiasCorrected();
        double double57 = variance53.getResult();
        variance53.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance60.increment((-1.0d));
        variance60.setBiasCorrected(false);
        boolean boolean65 = variance60.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment66 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean67 = variance60.equals((java.lang.Object) secondMoment66);
        double double68 = secondMoment66.getResult();
        secondMoment66.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance73.increment((-1.0d));
        variance73.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double81 = variance80.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double84 = variance83.getResult();
        double[] doubleArray87 = new double[] { 0L, (byte) 10 };
        double double88 = variance83.evaluate(doubleArray87);
        double double90 = variance80.evaluate(doubleArray87, (double) 10L);
        double double91 = variance78.evaluate(doubleArray87);
        double double92 = variance73.evaluate(doubleArray87);
        variance71.incrementAll(doubleArray87);
        double double94 = secondMoment66.evaluate(doubleArray87);
        double double95 = variance53.evaluate(doubleArray87);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray87, 1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2136.8055555555557d + "'", double24 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2564.166666666667d + "'", double25 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 25.0d + "'", double47 == 25.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 50.0d + "'", double94 == 50.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 50.0d + "'", double95 == 50.0d);
    }

    @Test
    public void test02303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02303");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        boolean boolean5 = secondMoment1.equals((java.lang.Object) 1.0d);
        secondMoment1.increment((double) (-1L));
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        secondMoment1.increment(4048078.240740742d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test02304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02304");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        double[] doubleArray21 = new double[] { 0L, (byte) 10 };
        double double22 = variance17.evaluate(doubleArray21);
        double double24 = variance14.evaluate(doubleArray21, (double) 10L);
        double double25 = variance12.evaluate(doubleArray21);
        double double26 = variance9.evaluate(doubleArray21);
        variance7.incrementAll(doubleArray21);
        double double28 = variance7.getResult();
        variance7.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        variance32.increment((double) (short) -1);
        variance32.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        long long41 = secondMoment39.getN();
        secondMoment39.clear();
        double double43 = secondMoment39.getResult();
        secondMoment39.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        double[] doubleArray47 = new double[] {};
        double double48 = secondMoment39.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment39);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance51.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance55.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double61 = variance60.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double64 = variance63.getResult();
        double[] doubleArray67 = new double[] { 0L, (byte) 10 };
        double double68 = variance63.evaluate(doubleArray67);
        double double70 = variance60.evaluate(doubleArray67, (double) 10L);
        double double71 = variance58.evaluate(doubleArray67);
        double double72 = variance55.evaluate(doubleArray67);
        double double73 = variance51.evaluate(doubleArray67);
        double double74 = variance49.evaluate(doubleArray67);
        variance32.incrementAll(doubleArray67);
        // The following exception was thrown during execution in test generation
        try {
            double double78 = variance7.evaluate(doubleArray67, (int) (short) 10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
    }

    @Test
    public void test02305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02305");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance4.increment((-1.0d));
        variance4.setBiasCorrected(false);
        boolean boolean9 = variance4.isBiasCorrected();
        double[] doubleArray10 = new double[] {};
        double double11 = variance4.evaluate(doubleArray10);
        variance4.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = variance4.evaluate(doubleArray22);
        double double28 = variance1.evaluate(doubleArray22, (double) (short) 100, (int) (byte) 0, (int) (byte) 1);
        variance1.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2136.8055555555557d + "'", double24 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
    }

    @Test
    public void test02306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02306");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        double double12 = secondMoment7.getResult();
        secondMoment7.increment(2310.1428571428573d);
        secondMoment7.increment(1.2798990144217688E8d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test02307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02307");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        double[] doubleArray12 = new double[] { 0L, (byte) 10 };
        double double13 = variance8.evaluate(doubleArray12);
        secondMoment2.incrementAll(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.clear();
        secondMoment2.increment(Double.NaN);
        secondMoment2.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.setBiasCorrected(false);
        boolean boolean28 = variance23.isBiasCorrected();
        double[] doubleArray29 = new double[] {};
        double double30 = variance23.evaluate(doubleArray29);
        variance23.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean41 = variance39.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        double[] doubleArray52 = new double[] { 0L, (byte) 10 };
        double double53 = variance48.evaluate(doubleArray52);
        double double55 = variance45.evaluate(doubleArray52, (double) 10L);
        double double56 = variance43.evaluate(doubleArray52);
        double[] doubleArray60 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double61 = variance43.evaluate(doubleArray60);
        double double63 = variance39.evaluate(doubleArray60, (double) (byte) 1);
        double double65 = variance34.evaluate(doubleArray60, 4048078.240740742d);
        double double66 = variance23.evaluate(doubleArray60);
        boolean boolean67 = secondMoment2.equals((java.lang.Object) variance23);
        variance23.setBiasCorrected(false);
        variance23.increment(14589.499999999998d);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2024039.120370371d + "'", double61 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2024039.120370371d + "'", double63 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2024039.12109375d + "'", double65 == 2024039.12109375d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1349359.4135802474d + "'", double66 == 1349359.4135802474d);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test02308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02308");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double22 = variance14.evaluate(doubleArray21);
        double double23 = secondMoment7.evaluate(doubleArray21);
        long long24 = secondMoment7.getN();
        secondMoment7.increment(2136.805555555555d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        double[] doubleArray35 = new double[] { 0L, (byte) 10 };
        double double36 = variance31.evaluate(doubleArray35);
        double double38 = variance28.evaluate(doubleArray35, (double) 10L);
        long long39 = variance28.getN();
        variance28.setBiasCorrected(false);
        boolean boolean42 = variance28.isBiasCorrected();
        long long43 = variance28.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        double[] doubleArray49 = new double[] { 0L, (byte) 10 };
        double double50 = variance45.evaluate(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray59 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double60 = variance52.evaluate(doubleArray59);
        double double61 = variance45.evaluate(doubleArray59);
        double double63 = variance28.evaluate(doubleArray59, 0.0d);
        secondMoment7.incrementAll(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        variance65.increment(1142553.1483410494d);
        double double68 = variance65.getResult();
        variance65.increment(2282968.9911265434d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2136.8055555555557d + "'", double22 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 12820.833333333334d + "'", double23 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 6L + "'", long24 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2136.8055555555557d + "'", double60 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2564.166666666667d + "'", double61 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2136.805555555555d + "'", double63 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 342005.0534781575d + "'", double68 == 342005.0534781575d);
    }

    @Test
    public void test02309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02309");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        double double3 = secondMoment0.getResult();
        secondMoment0.increment(2024039.120370371d);
        double double6 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean10 = variance8.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray19 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double20 = variance12.evaluate(doubleArray19);
        double double21 = variance8.evaluate(doubleArray19);
        variance8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean26 = variance24.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray35 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double36 = variance28.evaluate(doubleArray35);
        double double37 = variance24.evaluate(doubleArray35);
        variance8.incrementAll(doubleArray35);
        variance8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance41.increment((-1.0d));
        variance41.setBiasCorrected(false);
        variance41.increment((double) 100L);
        boolean boolean48 = variance41.isBiasCorrected();
        variance41.clear();
        long long50 = variance41.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment52);
        double double54 = secondMoment52.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment52);
        secondMoment52.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double59 = variance58.getResult();
        double[] doubleArray62 = new double[] { 0L, (byte) 10 };
        double double63 = variance58.evaluate(doubleArray62);
        secondMoment52.incrementAll(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment52);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean69 = variance67.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance71.increment((-1.0d));
        variance71.setBiasCorrected(false);
        boolean boolean76 = variance71.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment77 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean78 = variance71.equals((java.lang.Object) secondMoment77);
        double double79 = secondMoment77.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double82 = variance81.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance84 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double85 = variance84.getResult();
        double[] doubleArray88 = new double[] { 0L, (byte) 10 };
        double double89 = variance84.evaluate(doubleArray88);
        double double91 = variance81.evaluate(doubleArray88, (double) 10L);
        double double94 = secondMoment77.evaluate(doubleArray88, (int) (short) 0, 1);
        double double95 = variance67.evaluate(doubleArray88);
        secondMoment52.incrementAll(doubleArray88);
        double double97 = variance41.evaluate(doubleArray88);
        double double98 = variance8.evaluate(doubleArray88);
        double double99 = secondMoment0.evaluate(doubleArray88);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 2136.8055555555557d + "'", double20 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2564.166666666667d + "'", double21 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 2136.8055555555557d + "'", double36 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2564.166666666667d + "'", double37 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 50.0d + "'", double95 == 50.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 25.0d + "'", double97 == 25.0d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 50.0d + "'", double98 == 50.0d);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 50.0d + "'", double99 == 50.0d);
    }

    @Test
    public void test02310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02310");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        double double10 = secondMoment8.getResult();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        secondMoment8.increment((double) 10.0f);
        secondMoment8.clear();
        secondMoment8.increment(0.5d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.setBiasCorrected(false);
        boolean boolean25 = variance20.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean27 = variance20.equals((java.lang.Object) secondMoment26);
        double double28 = secondMoment26.getResult();
        secondMoment26.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment26);
        double double31 = secondMoment26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.setBiasCorrected(false);
        boolean boolean39 = variance34.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean41 = variance34.equals((java.lang.Object) secondMoment40);
        double double42 = secondMoment40.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        double[] doubleArray51 = new double[] { 0L, (byte) 10 };
        double double52 = variance47.evaluate(doubleArray51);
        double double54 = variance44.evaluate(doubleArray51, (double) 10L);
        double double57 = secondMoment40.evaluate(doubleArray51, (int) (short) 0, 1);
        long long58 = secondMoment40.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment60 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment60);
        double double62 = secondMoment60.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment60);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double66 = variance65.getResult();
        double[] doubleArray69 = new double[] { 0L, (byte) 10 };
        double double70 = variance65.evaluate(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray79 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double80 = variance72.evaluate(doubleArray79);
        double double81 = variance65.evaluate(doubleArray79);
        double double82 = secondMoment60.evaluate(doubleArray79);
        double double83 = secondMoment40.evaluate(doubleArray79);
        double double84 = variance32.evaluate(doubleArray79);
        // The following exception was thrown during execution in test generation
        try {
            double double87 = variance18.evaluate(doubleArray79, 10, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 2136.8055555555557d + "'", double80 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 2564.166666666667d + "'", double81 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 12820.833333333334d + "'", double82 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 12820.833333333334d + "'", double83 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2564.166666666667d + "'", double84 == 2564.166666666667d);
    }

    @Test
    public void test02311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02311");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        secondMoment7.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.setBiasCorrected(false);
        boolean boolean20 = variance15.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean22 = variance15.equals((java.lang.Object) secondMoment21);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        double[] doubleArray31 = new double[] { 0L, (byte) 10 };
        double double32 = variance27.evaluate(doubleArray31);
        double double34 = variance24.evaluate(doubleArray31, (double) 10L);
        double double38 = variance15.evaluate(doubleArray31, (double) (short) 0, 0, (int) (short) 0);
        double double41 = secondMoment7.evaluate(doubleArray31, 0, 0);
        long long42 = secondMoment7.getN();
        long long43 = secondMoment7.getN();
        double double44 = secondMoment7.getResult();
        secondMoment7.increment(2564.1666666667907d);
        double double47 = secondMoment7.getResult();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 3261883.680555872d + "'", double47 == 3261883.680555872d);
    }

    @Test
    public void test02312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02312");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        double double5 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        double double22 = variance12.evaluate(doubleArray19, (double) 10L);
        double double23 = variance10.evaluate(doubleArray19);
        double double24 = variance7.evaluate(doubleArray19);
        secondMoment1.incrementAll(doubleArray19, 1, (int) (byte) 0);
        secondMoment1.clear();
        double double29 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double[] doubleArray32 = null;
        // The following exception was thrown during execution in test generation
        try {
            variance31.incrementAll(doubleArray32, 1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
    }

    @Test
    public void test02313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02313");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        double double8 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment6);
        secondMoment6.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        double[] doubleArray16 = new double[] { 0L, (byte) 10 };
        double double17 = variance12.evaluate(doubleArray16);
        secondMoment6.incrementAll(doubleArray16);
        double double19 = variance4.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance22.increment((-1.0d));
        variance22.setBiasCorrected(false);
        boolean boolean27 = variance22.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean29 = variance22.equals((java.lang.Object) secondMoment28);
        secondMoment28.increment((double) (short) 0);
        secondMoment28.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray42 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double43 = variance35.evaluate(doubleArray42);
        double double44 = secondMoment28.evaluate(doubleArray42);
        secondMoment20.incrementAll(doubleArray42);
        variance4.incrementAll(doubleArray42);
        variance4.increment(0.5d);
        variance4.increment((double) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance52.increment((-1.0d));
        variance52.setBiasCorrected(false);
        boolean boolean57 = variance52.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean59 = variance52.equals((java.lang.Object) secondMoment58);
        double double60 = secondMoment58.getResult();
        secondMoment58.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance65.increment((-1.0d));
        variance65.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double73 = variance72.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        double[] doubleArray79 = new double[] { 0L, (byte) 10 };
        double double80 = variance75.evaluate(doubleArray79);
        double double82 = variance72.evaluate(doubleArray79, (double) 10L);
        double double83 = variance70.evaluate(doubleArray79);
        double double84 = variance65.evaluate(doubleArray79);
        variance63.incrementAll(doubleArray79);
        double double86 = secondMoment58.evaluate(doubleArray79);
        double double87 = variance4.evaluate(doubleArray79);
        long long88 = variance4.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 25.0d + "'", double19 == 25.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2136.8055555555557d + "'", double43 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 12820.833333333334d + "'", double44 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 25.0d + "'", double87 == 25.0d);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
    }

    @Test
    public void test02314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02314");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        secondMoment7.clear();
        secondMoment7.increment((double) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        variance14.increment(2550.25d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test02315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02315");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        variance11.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        double double17 = secondMoment15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment15);
        secondMoment15.clear();
        secondMoment15.increment((double) 2L);
        double double22 = secondMoment15.getResult();
        secondMoment15.increment(50.0d);
        double double25 = secondMoment15.getResult();
        long long26 = secondMoment15.getN();
        long long27 = secondMoment15.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance29.increment((-1.0d));
        variance29.setBiasCorrected(false);
        boolean boolean34 = variance29.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean36 = variance29.equals((java.lang.Object) secondMoment35);
        secondMoment35.increment((double) (short) 0);
        secondMoment35.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray49 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double50 = variance42.evaluate(doubleArray49);
        double double51 = secondMoment35.evaluate(doubleArray49);
        double double52 = secondMoment15.evaluate(doubleArray49);
        double double54 = variance11.evaluate(doubleArray49, 547.0d);
        long long55 = variance11.getN();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1152.0d + "'", double25 == 1152.0d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 2L + "'", long26 == 2L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2L + "'", long27 == 2L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2136.8055555555557d + "'", double50 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 12820.833333333334d + "'", double51 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 12820.833333333334d + "'", double52 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2564.166666666651d + "'", double54 == 2564.166666666651d);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
    }

    @Test
    public void test02316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02316");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance5.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        double double20 = variance10.evaluate(doubleArray17, (double) 10L);
        double double21 = variance8.evaluate(doubleArray17);
        double double22 = variance5.evaluate(doubleArray17);
        double double23 = variance1.evaluate(doubleArray17);
        long long24 = variance1.getN();
        variance1.increment(50.0d);
        boolean boolean27 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        double double31 = secondMoment29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment29);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        double[] doubleArray38 = new double[] { 0L, (byte) 10 };
        double double39 = variance34.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray48 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double49 = variance41.evaluate(doubleArray48);
        double double50 = variance34.evaluate(doubleArray48);
        double double51 = secondMoment29.evaluate(doubleArray48);
        double double53 = variance1.evaluate(doubleArray48, 2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment54);
        double double56 = secondMoment54.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment54);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance59.increment((-1.0d));
        variance59.setBiasCorrected(false);
        boolean boolean64 = variance59.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment65 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean66 = variance59.equals((java.lang.Object) secondMoment65);
        variance59.increment((double) 100L);
        variance59.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double75 = variance74.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double78 = variance77.getResult();
        double[] doubleArray81 = new double[] { 0L, (byte) 10 };
        double double82 = variance77.evaluate(doubleArray81);
        double double84 = variance74.evaluate(doubleArray81, (double) 10L);
        double double85 = variance72.evaluate(doubleArray81);
        double[] doubleArray89 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double90 = variance72.evaluate(doubleArray89);
        variance59.incrementAll(doubleArray89);
        variance57.incrementAll(doubleArray89);
        double double94 = variance1.evaluate(doubleArray89, (double) '#');
        variance1.clear();
        variance1.setBiasCorrected(true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 2136.8055555555557d + "'", double49 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2564.166666666667d + "'", double50 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 12820.833333333334d + "'", double51 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2564.1666666679084d + "'", double53 == 2564.1666666679084d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 2024039.120370371d + "'", double90 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 2024039.1203703706d + "'", double94 == 2024039.1203703706d);
    }

    @Test
    public void test02317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02317");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance7.increment((-1.0d));
        variance7.setBiasCorrected(false);
        boolean boolean12 = variance7.isBiasCorrected();
        double[] doubleArray13 = new double[] {};
        double double14 = variance7.evaluate(doubleArray13);
        secondMoment1.incrementAll(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        double double20 = secondMoment18.getResult();
        boolean boolean22 = secondMoment18.equals((java.lang.Object) 1.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment18);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment25);
        long long27 = secondMoment25.getN();
        secondMoment25.clear();
        secondMoment25.clear();
        secondMoment25.increment((double) (byte) 100);
        secondMoment25.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment25);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment25);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        double[] doubleArray43 = new double[] { 0L, (byte) 10 };
        double double44 = variance39.evaluate(doubleArray43);
        double double46 = variance36.evaluate(doubleArray43, (double) 10L);
        double double47 = variance34.evaluate(doubleArray43);
        long long48 = variance34.getN();
        double[] doubleArray49 = new double[] {};
        variance34.incrementAll(doubleArray49);
        double double52 = variance23.evaluate(doubleArray49, (-1.0d));
        double double53 = variance16.evaluate(doubleArray49);
        variance16.increment(1.5524847101785716E8d);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
    }

    @Test
    public void test02318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02318");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance5.increment((-1.0d));
        variance5.setBiasCorrected(false);
        boolean boolean10 = variance5.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean12 = variance5.equals((java.lang.Object) secondMoment11);
        double double13 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        double[] doubleArray22 = new double[] { 0L, (byte) 10 };
        double double23 = variance18.evaluate(doubleArray22);
        double double25 = variance15.evaluate(doubleArray22, (double) 10L);
        double double28 = secondMoment11.evaluate(doubleArray22, (int) (short) 0, 1);
        double double29 = variance1.evaluate(doubleArray22);
        double double30 = variance1.getResult();
        double[] doubleArray31 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double32 = variance1.evaluate(doubleArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test02319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02319");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double2 = secondMoment0.getResult();
        boolean boolean4 = secondMoment0.equals((java.lang.Object) 1.0d);
        double double5 = secondMoment0.getResult();
        long long6 = secondMoment0.getN();
        double double7 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double9 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        variance10.increment(2564.166666666667d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        double[] doubleArray21 = new double[] { 0L, (byte) 10 };
        double double22 = variance17.evaluate(doubleArray21);
        double double24 = variance14.evaluate(doubleArray21, (double) 10L);
        long long25 = variance14.getN();
        variance14.increment((double) 0L);
        double[] doubleArray29 = new double[] { 10.0d };
        variance14.incrementAll(doubleArray29);
        double double32 = variance10.evaluate(doubleArray29, (double) 2L);
        double double33 = secondMoment0.evaluate(doubleArray29);
        double double34 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance36.clear();
        double double38 = variance36.getResult();
        variance36.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment40);
        long long42 = secondMoment40.getN();
        secondMoment40.clear();
        double double44 = secondMoment40.getResult();
        secondMoment40.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment40);
        secondMoment40.increment((double) (byte) 0);
        long long50 = secondMoment40.getN();
        boolean boolean51 = variance36.equals((java.lang.Object) long50);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance53.clear();
        long long55 = variance53.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment57 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment57);
        long long59 = secondMoment57.getN();
        secondMoment57.clear();
        secondMoment57.clear();
        double double62 = secondMoment57.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment57);
        variance63.increment((double) (byte) -1);
        long long66 = variance63.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment67 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment67);
        long long69 = secondMoment67.getN();
        secondMoment67.clear();
        secondMoment67.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment73 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment73);
        long long75 = secondMoment73.getN();
        secondMoment73.clear();
        double double77 = secondMoment73.getResult();
        secondMoment73.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment73);
        double[] doubleArray81 = new double[] {};
        double double82 = secondMoment73.evaluate(doubleArray81);
        secondMoment67.incrementAll(doubleArray81);
        double double84 = variance63.evaluate(doubleArray81);
        double double85 = variance53.evaluate(doubleArray81);
        double double87 = variance36.evaluate(doubleArray81, 26761.69230769231d);
        variance36.setBiasCorrected(false);
        double double90 = variance36.getResult();
        variance36.clear();
        boolean boolean92 = secondMoment0.equals((java.lang.Object) variance36);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 2L + "'", long50 == 2L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test02320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02320");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        secondMoment7.clear();
        secondMoment7.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        variance17.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean25 = variance23.equals((java.lang.Object) (short) 10);
        boolean boolean26 = variance17.equals((java.lang.Object) variance23);
        double double27 = variance17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance29.increment((-1.0d));
        variance29.setBiasCorrected(false);
        boolean boolean34 = variance29.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean36 = variance29.equals((java.lang.Object) secondMoment35);
        variance29.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        double[] doubleArray49 = new double[] { 0L, (byte) 10 };
        double double50 = variance45.evaluate(doubleArray49);
        double double52 = variance42.evaluate(doubleArray49, (double) 10L);
        double double53 = variance40.evaluate(doubleArray49);
        variance40.increment((double) 0.0f);
        boolean boolean56 = variance40.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment57 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment57);
        long long59 = secondMoment57.getN();
        secondMoment57.clear();
        secondMoment57.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment57);
        variance63.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean69 = variance67.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray78 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double79 = variance71.evaluate(doubleArray78);
        double double80 = variance67.evaluate(doubleArray78);
        double double82 = variance63.evaluate(doubleArray78, (double) 1.0f);
        double double85 = variance40.evaluate(doubleArray78, (int) (byte) 0, 1);
        double double86 = variance29.evaluate(doubleArray78);
        double double87 = variance17.evaluate(doubleArray78);
        double double88 = secondMoment7.evaluate(doubleArray78);
        java.lang.Class<?> wildcardClass89 = secondMoment7.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 2136.8055555555557d + "'", double79 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 2564.166666666667d + "'", double80 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 2136.805555555555d + "'", double82 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2136.8055555555557d + "'", double86 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 2136.8055555555557d + "'", double87 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 12820.833333333334d + "'", double88 == 12820.833333333334d);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test02321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02321");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        double[] doubleArray11 = new double[] { 0L, (byte) 10 };
        double double12 = variance7.evaluate(doubleArray11);
        secondMoment1.incrementAll(doubleArray11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        long long16 = secondMoment1.getN();
        double double17 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment(227.2998046875d);
        long long21 = secondMoment1.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
    }

    @Test
    public void test02322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02322");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double[] doubleArray5 = new double[] { 0L, (byte) 10 };
        double double6 = variance1.evaluate(doubleArray5);
        variance1.clear();
        variance1.clear();
        long long9 = variance1.getN();
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance13.increment((-1.0d));
        variance13.setBiasCorrected(false);
        boolean boolean18 = variance13.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean20 = variance13.equals((java.lang.Object) secondMoment19);
        secondMoment19.increment((double) (short) 0);
        secondMoment19.increment((double) 1.0f);
        double double25 = secondMoment19.getResult();
        secondMoment19.clear();
        secondMoment19.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        double[] doubleArray36 = new double[] { 0L, (byte) 10 };
        double double37 = variance32.evaluate(doubleArray36);
        double double39 = variance29.evaluate(doubleArray36, (double) 10L);
        long long40 = variance29.getN();
        variance29.increment((double) 0L);
        double[] doubleArray44 = new double[] { 10.0d };
        variance29.incrementAll(doubleArray44);
        variance29.clear();
        variance29.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double53 = variance52.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double56 = variance55.getResult();
        double[] doubleArray59 = new double[] { 0L, (byte) 10 };
        double double60 = variance55.evaluate(doubleArray59);
        double double62 = variance52.evaluate(doubleArray59, (double) 10L);
        double double63 = variance50.evaluate(doubleArray59);
        variance50.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment66 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance68.increment((-1.0d));
        variance68.setBiasCorrected(false);
        boolean boolean73 = variance68.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment74 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean75 = variance68.equals((java.lang.Object) secondMoment74);
        secondMoment74.increment((double) (short) 0);
        secondMoment74.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray88 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double89 = variance81.evaluate(doubleArray88);
        double double90 = secondMoment74.evaluate(doubleArray88);
        secondMoment66.incrementAll(doubleArray88);
        variance50.incrementAll(doubleArray88);
        double double94 = variance29.evaluate(doubleArray88, (double) (-1));
        secondMoment19.incrementAll(doubleArray88);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray88, 100, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.0d + "'", double6 == 50.0d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.5d + "'", double25 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 2136.8055555555557d + "'", double89 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 12820.833333333334d + "'", double90 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 2564.1666666666665d + "'", double94 == 2564.1666666666665d);
    }

    @Test
    public void test02323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02323");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray12 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double13 = variance5.evaluate(doubleArray12);
        double double14 = variance1.evaluate(doubleArray12);
        variance1.setBiasCorrected(false);
        variance1.increment((double) (-1L));
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        long long22 = secondMoment20.getN();
        secondMoment20.clear();
        secondMoment20.clear();
        secondMoment20.increment((double) (byte) 100);
        long long27 = secondMoment20.getN();
        double[] doubleArray29 = new double[] { 2024039.1203703713d };
        double double30 = secondMoment20.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment20);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        long long34 = secondMoment32.getN();
        secondMoment32.clear();
        secondMoment32.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        variance38.setBiasCorrected(false);
        boolean boolean41 = secondMoment20.equals((java.lang.Object) variance38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance43.clear();
        long long45 = variance43.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        long long49 = secondMoment47.getN();
        secondMoment47.clear();
        secondMoment47.clear();
        double double52 = secondMoment47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment47);
        variance53.increment((double) (byte) -1);
        long long56 = variance53.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment57 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment57);
        long long59 = secondMoment57.getN();
        secondMoment57.clear();
        secondMoment57.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment63 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment63);
        long long65 = secondMoment63.getN();
        secondMoment63.clear();
        double double67 = secondMoment63.getResult();
        secondMoment63.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment63);
        double[] doubleArray71 = new double[] {};
        double double72 = secondMoment63.evaluate(doubleArray71);
        secondMoment57.incrementAll(doubleArray71);
        double double74 = variance53.evaluate(doubleArray71);
        double double75 = variance43.evaluate(doubleArray71);
        double double76 = secondMoment20.evaluate(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray71, (int) (byte) 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 2136.8055555555557d + "'", double13 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2564.166666666667d + "'", double14 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
    }

    @Test
    public void test02324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02324");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        double double8 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment6);
        secondMoment6.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        double[] doubleArray16 = new double[] { 0L, (byte) 10 };
        double double17 = variance12.evaluate(doubleArray16);
        secondMoment6.incrementAll(doubleArray16);
        double double19 = variance4.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance22.increment((-1.0d));
        variance22.setBiasCorrected(false);
        boolean boolean27 = variance22.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean29 = variance22.equals((java.lang.Object) secondMoment28);
        secondMoment28.increment((double) (short) 0);
        secondMoment28.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray42 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double43 = variance35.evaluate(doubleArray42);
        double double44 = secondMoment28.evaluate(doubleArray42);
        secondMoment20.incrementAll(doubleArray42);
        variance4.incrementAll(doubleArray42);
        variance4.increment(50.0009765625d);
        variance4.setBiasCorrected(true);
        boolean boolean51 = variance4.isBiasCorrected();
        variance4.setBiasCorrected(true);
        variance4.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        long long59 = variance57.getN();
        variance57.clear();
        boolean boolean61 = variance57.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment62);
        long long64 = secondMoment62.getN();
        secondMoment62.clear();
        secondMoment62.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment62);
        variance68.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance71.increment((-1.0d));
        variance71.setBiasCorrected(false);
        boolean boolean76 = variance71.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment77 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean78 = variance71.equals((java.lang.Object) secondMoment77);
        secondMoment77.increment((double) (short) 0);
        secondMoment77.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance84 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray91 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double92 = variance84.evaluate(doubleArray91);
        double double93 = secondMoment77.evaluate(doubleArray91);
        variance68.incrementAll(doubleArray91);
        double double95 = variance57.evaluate(doubleArray91);
        // The following exception was thrown during execution in test generation
        try {
            double double98 = variance4.evaluate(doubleArray91, 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 25.0d + "'", double19 == 25.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2136.8055555555557d + "'", double43 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 12820.833333333334d + "'", double44 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 2136.8055555555557d + "'", double92 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 12820.833333333334d + "'", double93 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 2564.166666666667d + "'", double95 == 2564.166666666667d);
    }

    @Test
    public void test02325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02325");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = secondMoment8.evaluate(doubleArray22);
        long long25 = secondMoment8.getN();
        long long26 = secondMoment8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        secondMoment8.clear();
        secondMoment8.increment(0.0d);
        secondMoment8.increment((double) 'a');
        secondMoment8.clear();
        secondMoment8.clear();
        secondMoment8.clear();
        double[] doubleArray36 = null;
        // The following exception was thrown during execution in test generation
        try {
            secondMoment8.incrementAll(doubleArray36, 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 12820.833333333334d + "'", double24 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
    }

    @Test
    public void test02326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02326");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance5.increment((-1.0d));
        variance5.setBiasCorrected(false);
        boolean boolean10 = variance5.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean12 = variance5.equals((java.lang.Object) secondMoment11);
        long long13 = secondMoment11.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.setBiasCorrected(false);
        variance15.increment((double) 100L);
        boolean boolean22 = variance15.isBiasCorrected();
        boolean boolean23 = variance15.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double33 = variance25.evaluate(doubleArray32);
        double double35 = variance15.evaluate(doubleArray32, (double) (byte) 10);
        secondMoment11.incrementAll(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        long long39 = secondMoment37.getN();
        secondMoment37.clear();
        double double41 = secondMoment37.getResult();
        secondMoment37.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance46.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        double[] doubleArray58 = new double[] { 0L, (byte) 10 };
        double double59 = variance54.evaluate(doubleArray58);
        double double61 = variance51.evaluate(doubleArray58, (double) 10L);
        double double62 = variance49.evaluate(doubleArray58);
        double double63 = variance46.evaluate(doubleArray58);
        variance44.incrementAll(doubleArray58);
        variance44.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double68 = variance67.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double71 = variance70.getResult();
        double[] doubleArray74 = new double[] { 0L, (byte) 10 };
        double double75 = variance70.evaluate(doubleArray74);
        double double77 = variance67.evaluate(doubleArray74, (double) 10L);
        variance44.incrementAll(doubleArray74);
        secondMoment11.incrementAll(doubleArray74);
        double double80 = secondMoment11.getResult();
        boolean boolean81 = variance1.equals((java.lang.Object) secondMoment11);
        variance1.clear();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2136.8055555555557d + "'", double33 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 2136.8055555555557d + "'", double35 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 14205.875d + "'", double80 == 14205.875d);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test02327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02327");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        double[] doubleArray14 = new double[] { 0L, (byte) 10 };
        double double15 = variance10.evaluate(doubleArray14);
        double double17 = variance7.evaluate(doubleArray14, (double) 10L);
        double double18 = variance5.evaluate(doubleArray14);
        double[] doubleArray22 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double23 = variance5.evaluate(doubleArray22);
        double double25 = variance1.evaluate(doubleArray22, (double) (byte) 1);
        variance1.increment(10.0d);
        variance1.setBiasCorrected(true);
        boolean boolean30 = variance1.isBiasCorrected();
        boolean boolean31 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        double[] doubleArray40 = new double[] { 0L, (byte) 10 };
        double double41 = variance36.evaluate(doubleArray40);
        double double43 = variance33.evaluate(doubleArray40, (double) 10L);
        long long44 = variance33.getN();
        variance33.increment((double) 0L);
        variance33.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance49.increment((-1.0d));
        variance49.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double57 = variance56.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double60 = variance59.getResult();
        double[] doubleArray63 = new double[] { 0L, (byte) 10 };
        double double64 = variance59.evaluate(doubleArray63);
        double double66 = variance56.evaluate(doubleArray63, (double) 10L);
        double double67 = variance54.evaluate(doubleArray63);
        double double68 = variance49.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double71 = variance70.getResult();
        double[] doubleArray74 = new double[] { 0L, (byte) 10 };
        double double75 = variance70.evaluate(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray84 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double85 = variance77.evaluate(doubleArray84);
        double double86 = variance70.evaluate(doubleArray84);
        double double87 = variance49.evaluate(doubleArray84);
        double double89 = variance33.evaluate(doubleArray84, 227.3d);
        // The following exception was thrown during execution in test generation
        try {
            double double92 = variance1.evaluate(doubleArray84, (-1), (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 50.0d + "'", double15 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2024039.120370371d + "'", double23 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2024039.120370371d + "'", double25 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2136.8055555555557d + "'", double85 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2564.166666666667d + "'", double86 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 2564.166666666667d + "'", double87 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 2564.166666666686d + "'", double89 == 2564.166666666686d);
    }

    @Test
    public void test02328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02328");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        long long14 = secondMoment7.getN();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        secondMoment7.increment(13802.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2L + "'", long14 == 2L);
    }

    @Test
    public void test02329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02329");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        long long7 = variance1.getN();
        boolean boolean8 = variance1.isBiasCorrected();
        variance1.increment((double) (byte) 100);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance12.increment((-1.0d));
        variance12.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean20 = variance18.equals((java.lang.Object) (short) 10);
        boolean boolean21 = variance12.equals((java.lang.Object) variance18);
        long long22 = variance18.getN();
        variance18.setBiasCorrected(false);
        variance18.increment(2310.1428571428573d);
        double double27 = variance18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean31 = variance29.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray40 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double41 = variance33.evaluate(doubleArray40);
        double double42 = variance29.evaluate(doubleArray40);
        variance29.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean47 = variance45.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray56 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double57 = variance49.evaluate(doubleArray56);
        double double58 = variance45.evaluate(doubleArray56);
        variance29.incrementAll(doubleArray56);
        double double60 = variance18.evaluate(doubleArray56);
        // The following exception was thrown during execution in test generation
        try {
            double double63 = variance1.evaluate(doubleArray56, 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2136.8055555555557d + "'", double41 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2564.166666666667d + "'", double42 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2136.8055555555557d + "'", double57 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2564.166666666667d + "'", double58 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2136.8055555555557d + "'", double60 == 2136.8055555555557d);
    }

    @Test
    public void test02330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02330");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.increment((double) (byte) 100);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment(2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment(1.0d);
        long long17 = secondMoment1.getN();
        double double18 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        long long23 = secondMoment21.getN();
        secondMoment21.clear();
        secondMoment21.clear();
        secondMoment21.increment((double) (byte) 100);
        secondMoment21.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment21);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment21);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment35);
        double double37 = secondMoment35.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment35);
        secondMoment35.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        double[] doubleArray45 = new double[] { 0L, (byte) 10 };
        double double46 = variance41.evaluate(doubleArray45);
        secondMoment35.incrementAll(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment35);
        secondMoment35.clear();
        secondMoment35.increment(Double.NaN);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment35);
        secondMoment35.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance55.clear();
        variance55.increment((double) (short) -1);
        boolean boolean59 = variance55.isBiasCorrected();
        variance55.increment((double) 6L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance63.increment((-1.0d));
        variance63.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray76 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double77 = variance69.evaluate(doubleArray76);
        variance63.incrementAll(doubleArray76);
        variance55.incrementAll(doubleArray76);
        boolean boolean80 = secondMoment35.equals((java.lang.Object) doubleArray76);
        double double81 = variance32.evaluate(doubleArray76);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment1.incrementAll(doubleArray76, 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2136.8055555555557d + "'", double77 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 2564.166666666667d + "'", double81 == 2564.166666666667d);
    }

    @Test
    public void test02331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02331");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        long long4 = secondMoment2.getN();
        secondMoment2.clear();
        secondMoment2.clear();
        secondMoment2.increment((double) (byte) 100);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        variance12.increment((double) (short) 1);
        double double15 = variance12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        boolean boolean20 = variance17.isBiasCorrected();
        double double21 = variance17.getResult();
        variance17.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean31 = variance24.equals((java.lang.Object) secondMoment30);
        double double32 = secondMoment30.getResult();
        secondMoment30.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance37.increment((-1.0d));
        variance37.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        double[] doubleArray51 = new double[] { 0L, (byte) 10 };
        double double52 = variance47.evaluate(doubleArray51);
        double double54 = variance44.evaluate(doubleArray51, (double) 10L);
        double double55 = variance42.evaluate(doubleArray51);
        double double56 = variance37.evaluate(doubleArray51);
        variance35.incrementAll(doubleArray51);
        double double58 = secondMoment30.evaluate(doubleArray51);
        double double59 = variance17.evaluate(doubleArray51);
        // The following exception was thrown during execution in test generation
        try {
            double double62 = variance12.evaluate(doubleArray51, (int) (short) 100, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
    }

    @Test
    public void test02332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02332");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment(50.0009765625d);
        double double11 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        secondMoment7.clear();
        double double14 = secondMoment7.getResult();
        java.lang.Class<?> wildcardClass15 = secondMoment7.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test02333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02333");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        boolean boolean8 = variance1.isBiasCorrected();
        variance1.clear();
        long long10 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        double double14 = secondMoment12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment12);
        secondMoment12.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        double[] doubleArray22 = new double[] { 0L, (byte) 10 };
        double double23 = variance18.evaluate(doubleArray22);
        secondMoment12.incrementAll(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean29 = variance27.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance31.increment((-1.0d));
        variance31.setBiasCorrected(false);
        boolean boolean36 = variance31.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean38 = variance31.equals((java.lang.Object) secondMoment37);
        double double39 = secondMoment37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        double[] doubleArray48 = new double[] { 0L, (byte) 10 };
        double double49 = variance44.evaluate(doubleArray48);
        double double51 = variance41.evaluate(doubleArray48, (double) 10L);
        double double54 = secondMoment37.evaluate(doubleArray48, (int) (short) 0, 1);
        double double55 = variance27.evaluate(doubleArray48);
        secondMoment12.incrementAll(doubleArray48);
        double double57 = variance1.evaluate(doubleArray48);
        variance1.setBiasCorrected(false);
        variance1.clear();
        boolean boolean61 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double64 = variance63.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double67 = variance66.getResult();
        double[] doubleArray70 = new double[] { 0L, (byte) 10 };
        double double71 = variance66.evaluate(doubleArray70);
        double double73 = variance63.evaluate(doubleArray70, (double) 10L);
        long long74 = variance63.getN();
        double double75 = variance63.getResult();
        boolean boolean76 = variance1.equals((java.lang.Object) variance63);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment79 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment79);
        long long81 = secondMoment79.getN();
        secondMoment79.clear();
        double double83 = secondMoment79.getResult();
        secondMoment79.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance86 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment79);
        double[] doubleArray87 = new double[] {};
        double double88 = secondMoment79.evaluate(doubleArray87);
        org.apache.commons.math.stat.descriptive.moment.Variance variance89 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment79);
        org.apache.commons.math.stat.descriptive.moment.Variance variance90 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment79);
        double double91 = variance90.getResult();
        boolean boolean92 = variance1.equals((java.lang.Object) variance90);
        long long93 = variance1.getN();
        java.lang.Class<?> wildcardClass94 = variance1.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 25.0d + "'", double57 == 25.0d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test02334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02334");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        boolean boolean8 = variance1.isBiasCorrected();
        variance1.clear();
        long long10 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        long long13 = secondMoment11.getN();
        secondMoment11.clear();
        secondMoment11.clear();
        double double16 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        secondMoment11.increment(25.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance21.clear();
        double double23 = variance21.getResult();
        variance21.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance26.increment((-1.0d));
        variance26.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        double[] doubleArray40 = new double[] { 0L, (byte) 10 };
        double double41 = variance36.evaluate(doubleArray40);
        double double43 = variance33.evaluate(doubleArray40, (double) 10L);
        double double44 = variance31.evaluate(doubleArray40);
        double double45 = variance26.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        double[] doubleArray51 = new double[] { 0L, (byte) 10 };
        double double52 = variance47.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray61 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double62 = variance54.evaluate(doubleArray61);
        double double63 = variance47.evaluate(doubleArray61);
        double double64 = variance26.evaluate(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double69 = variance68.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double72 = variance71.getResult();
        double[] doubleArray75 = new double[] { 0L, (byte) 10 };
        double double76 = variance71.evaluate(doubleArray75);
        double double78 = variance68.evaluate(doubleArray75, (double) 10L);
        double double79 = variance66.evaluate(doubleArray75);
        variance26.incrementAll(doubleArray75, (int) (byte) 0, (int) (byte) 0);
        double double83 = variance21.evaluate(doubleArray75);
        secondMoment11.incrementAll(doubleArray75, (int) (short) 0, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double90 = variance1.evaluate(doubleArray75, 2668380.010204082d, 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2136.8055555555557d + "'", double62 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2564.166666666667d + "'", double63 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2564.166666666667d + "'", double64 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
    }

    @Test
    public void test02335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02335");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double[] doubleArray7 = new double[] {};
        double double8 = variance1.evaluate(doubleArray7);
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance12.increment((-1.0d));
        variance12.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean19 = variance17.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double24 = variance23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        double[] doubleArray30 = new double[] { 0L, (byte) 10 };
        double double31 = variance26.evaluate(doubleArray30);
        double double33 = variance23.evaluate(doubleArray30, (double) 10L);
        double double34 = variance21.evaluate(doubleArray30);
        double[] doubleArray38 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double39 = variance21.evaluate(doubleArray38);
        double double41 = variance17.evaluate(doubleArray38, (double) (byte) 1);
        double double43 = variance12.evaluate(doubleArray38, 4048078.240740742d);
        double double44 = variance1.evaluate(doubleArray38);
        double double45 = variance1.getResult();
        variance1.increment(58606.246913580246d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double50 = variance49.getResult();
        variance49.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance54.increment((-1.0d));
        variance54.setBiasCorrected(false);
        boolean boolean59 = variance54.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment60 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean61 = variance54.equals((java.lang.Object) secondMoment60);
        double double62 = secondMoment60.getResult();
        secondMoment60.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment60);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment66 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment66);
        double double68 = secondMoment66.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment66);
        secondMoment66.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance72.increment((-1.0d));
        variance72.setBiasCorrected(false);
        boolean boolean77 = variance72.isBiasCorrected();
        double[] doubleArray78 = new double[] {};
        double double79 = variance72.evaluate(doubleArray78);
        secondMoment66.incrementAll(doubleArray78);
        double double81 = variance64.evaluate(doubleArray78);
        double double82 = variance49.evaluate(doubleArray78);
        double double83 = variance1.evaluate(doubleArray78);
        double double84 = variance1.getResult();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2024039.120370371d + "'", double39 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2024039.120370371d + "'", double41 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2024039.12109375d + "'", double43 == 2024039.12109375d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1349359.4135802474d + "'", double44 == 1349359.4135802474d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
    }

    @Test
    public void test02336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02336");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        long long13 = secondMoment7.getN();
        double double14 = secondMoment7.getResult();
        secondMoment7.increment(4684796.354166668d);
        double double17 = secondMoment7.getResult();
        secondMoment7.increment((double) (-1L));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2L + "'", long13 == 2L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.4631541463478633E13d + "'", double17 == 1.4631541463478633E13d);
    }

    @Test
    public void test02337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02337");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double22 = variance14.evaluate(doubleArray21);
        double double23 = secondMoment7.evaluate(doubleArray21);
        long long24 = secondMoment7.getN();
        double double25 = secondMoment7.getResult();
        secondMoment7.increment((double) 2L);
        long long28 = secondMoment7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment31);
        double double33 = secondMoment31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment31);
        secondMoment31.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance37.increment((-1.0d));
        variance37.setBiasCorrected(false);
        boolean boolean42 = variance37.isBiasCorrected();
        double[] doubleArray43 = new double[] {};
        double double44 = variance37.evaluate(doubleArray43);
        secondMoment31.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment31);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment48);
        double double50 = secondMoment48.getResult();
        boolean boolean52 = secondMoment48.equals((java.lang.Object) 1.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment48);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment55);
        long long57 = secondMoment55.getN();
        secondMoment55.clear();
        secondMoment55.clear();
        secondMoment55.increment((double) (byte) 100);
        secondMoment55.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment55);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment55);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double67 = variance66.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double70 = variance69.getResult();
        double[] doubleArray73 = new double[] { 0L, (byte) 10 };
        double double74 = variance69.evaluate(doubleArray73);
        double double76 = variance66.evaluate(doubleArray73, (double) 10L);
        double double77 = variance64.evaluate(doubleArray73);
        long long78 = variance64.getN();
        double[] doubleArray79 = new double[] {};
        variance64.incrementAll(doubleArray79);
        double double82 = variance53.evaluate(doubleArray79, (-1.0d));
        double double83 = variance46.evaluate(doubleArray79);
        // The following exception was thrown during execution in test generation
        try {
            double double86 = variance29.evaluate(doubleArray79, (int) (byte) 1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2136.8055555555557d + "'", double22 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 12820.833333333334d + "'", double23 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 6L + "'", long24 == 6L);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 12820.833333333334d + "'", double25 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 7L + "'", long28 == 7L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue(Double.isNaN(double83));
    }

    @Test
    public void test02338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02338");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        boolean boolean8 = variance1.isBiasCorrected();
        variance1.clear();
        double double10 = variance1.getResult();
        boolean boolean11 = variance1.isBiasCorrected();
        long long12 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        long long15 = secondMoment13.getN();
        secondMoment13.clear();
        double double17 = secondMoment13.getResult();
        secondMoment13.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        variance20.setBiasCorrected(true);
        variance20.increment(1152.0d);
        boolean boolean25 = variance20.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        long long29 = variance27.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance31.clear();
        double double33 = variance31.getResult();
        variance31.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance36.increment((-1.0d));
        variance36.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double44 = variance43.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double47 = variance46.getResult();
        double[] doubleArray50 = new double[] { 0L, (byte) 10 };
        double double51 = variance46.evaluate(doubleArray50);
        double double53 = variance43.evaluate(doubleArray50, (double) 10L);
        double double54 = variance41.evaluate(doubleArray50);
        double double55 = variance36.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        double[] doubleArray61 = new double[] { 0L, (byte) 10 };
        double double62 = variance57.evaluate(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray71 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double72 = variance64.evaluate(doubleArray71);
        double double73 = variance57.evaluate(doubleArray71);
        double double74 = variance36.evaluate(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double79 = variance78.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double82 = variance81.getResult();
        double[] doubleArray85 = new double[] { 0L, (byte) 10 };
        double double86 = variance81.evaluate(doubleArray85);
        double double88 = variance78.evaluate(doubleArray85, (double) 10L);
        double double89 = variance76.evaluate(doubleArray85);
        variance36.incrementAll(doubleArray85, (int) (byte) 0, (int) (byte) 0);
        double double93 = variance31.evaluate(doubleArray85);
        double double94 = variance27.evaluate(doubleArray85);
        double double95 = variance20.evaluate(doubleArray85);
        // The following exception was thrown during execution in test generation
        try {
            double double98 = variance1.evaluate(doubleArray85, (int) '4', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2136.8055555555557d + "'", double72 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 2564.166666666667d + "'", double73 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 2564.166666666667d + "'", double74 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 50.0d + "'", double93 == 50.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 50.0d + "'", double94 == 50.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 50.0d + "'", double95 == 50.0d);
    }

    @Test
    public void test02339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02339");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        double[] doubleArray15 = new double[] { 0L, (byte) 10 };
        double double16 = variance11.evaluate(doubleArray15);
        double double18 = variance8.evaluate(doubleArray15, (double) 10L);
        double double19 = variance1.evaluate(doubleArray15);
        long long20 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance22.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        double[] doubleArray34 = new double[] { 0L, (byte) 10 };
        double double35 = variance30.evaluate(doubleArray34);
        double double37 = variance27.evaluate(doubleArray34, (double) 10L);
        double double38 = variance25.evaluate(doubleArray34);
        double double39 = variance22.evaluate(doubleArray34);
        double double40 = variance1.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        long long43 = secondMoment41.getN();
        secondMoment41.clear();
        secondMoment41.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        variance47.setBiasCorrected(false);
        double double50 = variance47.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment51);
        long long53 = secondMoment51.getN();
        secondMoment51.clear();
        secondMoment51.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment51);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance58.increment((-1.0d));
        variance58.setBiasCorrected(false);
        boolean boolean63 = variance58.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment64 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean65 = variance58.equals((java.lang.Object) secondMoment64);
        variance58.increment((double) 100L);
        variance58.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double74 = variance73.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double77 = variance76.getResult();
        double[] doubleArray80 = new double[] { 0L, (byte) 10 };
        double double81 = variance76.evaluate(doubleArray80);
        double double83 = variance73.evaluate(doubleArray80, (double) 10L);
        double double84 = variance71.evaluate(doubleArray80);
        double[] doubleArray88 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double89 = variance71.evaluate(doubleArray88);
        variance58.incrementAll(doubleArray88);
        double double91 = variance56.evaluate(doubleArray88);
        variance47.incrementAll(doubleArray88);
        double double93 = variance1.evaluate(doubleArray88);
        variance1.setBiasCorrected(true);
        variance1.increment(2564.1666666030883d);
        long long98 = variance1.getN();
        double double99 = variance1.getResult();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 25.0d + "'", double19 == 25.0d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 25.0d + "'", double40 == 25.0d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 2024039.120370371d + "'", double89 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 2024039.120370371d + "'", double91 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 1349359.4135802474d + "'", double93 == 1349359.4135802474d);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 1L + "'", long98 == 1L);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 0.0d + "'", double99 == 0.0d);
    }

    @Test
    public void test02340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02340");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double11 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        secondMoment9.incrementAll(doubleArray19);
        boolean boolean22 = variance2.equals((java.lang.Object) secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean31 = variance24.equals((java.lang.Object) secondMoment30);
        boolean boolean32 = secondMoment9.equals((java.lang.Object) boolean31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        double[] doubleArray42 = new double[] { 0L, (byte) 10 };
        double double43 = variance38.evaluate(doubleArray42);
        double double45 = variance35.evaluate(doubleArray42, (double) 10L);
        double double46 = secondMoment9.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance48.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance52.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double61 = variance60.getResult();
        double[] doubleArray64 = new double[] { 0L, (byte) 10 };
        double double65 = variance60.evaluate(doubleArray64);
        double double67 = variance57.evaluate(doubleArray64, (double) 10L);
        double double68 = variance55.evaluate(doubleArray64);
        double double69 = variance52.evaluate(doubleArray64);
        double double70 = variance48.evaluate(doubleArray64);
        boolean boolean71 = secondMoment9.equals((java.lang.Object) doubleArray64);
        secondMoment9.clear();
        long long73 = secondMoment9.getN();
        secondMoment9.increment(2136.8055555559695d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
    }

    @Test
    public void test02341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02341");
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.setBiasCorrected(false);
        boolean boolean8 = variance3.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean10 = variance3.equals((java.lang.Object) secondMoment9);
        secondMoment9.increment((double) (short) 0);
        secondMoment9.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double24 = variance16.evaluate(doubleArray23);
        double double25 = secondMoment9.evaluate(doubleArray23);
        long long26 = secondMoment9.getN();
        long long27 = secondMoment9.getN();
        secondMoment9.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        double[] doubleArray36 = new double[] { 0L, (byte) 10 };
        double double37 = variance32.evaluate(doubleArray36);
        secondMoment9.incrementAll(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        double double40 = variance39.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment42);
        double double44 = secondMoment42.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment42);
        secondMoment42.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        double[] doubleArray52 = new double[] { 0L, (byte) 10 };
        double double53 = variance48.evaluate(doubleArray52);
        secondMoment42.incrementAll(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment42);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean59 = variance57.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance61.increment((-1.0d));
        variance61.setBiasCorrected(false);
        boolean boolean66 = variance61.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment67 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean68 = variance61.equals((java.lang.Object) secondMoment67);
        double double69 = secondMoment67.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double72 = variance71.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double75 = variance74.getResult();
        double[] doubleArray78 = new double[] { 0L, (byte) 10 };
        double double79 = variance74.evaluate(doubleArray78);
        double double81 = variance71.evaluate(doubleArray78, (double) 10L);
        double double84 = secondMoment67.evaluate(doubleArray78, (int) (short) 0, 1);
        double double85 = variance57.evaluate(doubleArray78);
        secondMoment42.incrementAll(doubleArray78);
        double double88 = variance39.evaluate(doubleArray78, 2666070.367346939d);
        java.lang.Class<?> wildcardClass89 = variance39.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2136.8055555555557d + "'", double24 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 12820.833333333334d + "'", double25 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 6L + "'", long27 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1652.4444444444443d + "'", double40 == 1652.4444444444443d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 25.0d + "'", double88 == 25.0d);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test02342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02342");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double2 = secondMoment1.getResult();
        double double3 = secondMoment1.getResult();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double7 = secondMoment6.getResult();
        long long8 = secondMoment6.getN();
        secondMoment6.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        long long13 = secondMoment11.getN();
        secondMoment11.clear();
        secondMoment11.clear();
        secondMoment11.increment((double) (byte) 100);
        secondMoment11.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment11);
        variance20.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance25.increment((-1.0d));
        variance25.setBiasCorrected(false);
        boolean boolean30 = variance25.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean32 = variance25.equals((java.lang.Object) secondMoment31);
        double double33 = secondMoment31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        double[] doubleArray42 = new double[] { 0L, (byte) 10 };
        double double43 = variance38.evaluate(doubleArray42);
        double double45 = variance35.evaluate(doubleArray42, (double) 10L);
        double double48 = secondMoment31.evaluate(doubleArray42, (int) (short) 0, 1);
        long long49 = secondMoment31.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double53 = variance52.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double56 = variance55.getResult();
        double[] doubleArray59 = new double[] { 0L, (byte) 10 };
        double double60 = variance55.evaluate(doubleArray59);
        double double62 = variance52.evaluate(doubleArray59, (double) 10L);
        long long63 = variance52.getN();
        variance52.increment((double) 0L);
        double[] doubleArray67 = new double[] { 10.0d };
        variance52.incrementAll(doubleArray67);
        double double69 = variance50.evaluate(doubleArray67);
        variance20.incrementAll(doubleArray67);
        secondMoment6.incrementAll(doubleArray67);
        long long72 = secondMoment6.getN();
        long long73 = secondMoment6.getN();
        secondMoment6.clear();
        secondMoment6.increment(2024039.1204833984d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance78.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double84 = variance83.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance86 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double87 = variance86.getResult();
        double[] doubleArray90 = new double[] { 0L, (byte) 10 };
        double double91 = variance86.evaluate(doubleArray90);
        double double93 = variance83.evaluate(doubleArray90, (double) 10L);
        double double94 = variance81.evaluate(doubleArray90);
        double double95 = variance78.evaluate(doubleArray90);
        secondMoment6.incrementAll(doubleArray90);
        secondMoment1.incrementAll(doubleArray90);
        double double98 = secondMoment1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 50.0d + "'", double93 == 50.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 50.0d + "'", double94 == 50.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 50.0d + "'", double95 == 50.0d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 50.0d + "'", double98 == 50.0d);
    }

    @Test
    public void test02343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02343");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = secondMoment8.evaluate(doubleArray22);
        long long25 = secondMoment8.getN();
        long long26 = secondMoment8.getN();
        secondMoment8.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        double double30 = variance29.getResult();
        variance29.increment((double) 1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.setBiasCorrected(false);
        boolean boolean39 = variance34.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean41 = variance34.equals((java.lang.Object) secondMoment40);
        long long42 = secondMoment40.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.increment((-1.0d));
        variance44.setBiasCorrected(false);
        variance44.increment((double) 100L);
        boolean boolean51 = variance44.isBiasCorrected();
        boolean boolean52 = variance44.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray61 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double62 = variance54.evaluate(doubleArray61);
        double double64 = variance44.evaluate(doubleArray61, (double) (byte) 10);
        secondMoment40.incrementAll(doubleArray61);
        double double66 = variance29.evaluate(doubleArray61);
        double double67 = variance29.getResult();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 12820.833333333334d + "'", double24 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1980.1224489795918d + "'", double30 == 1980.1224489795918d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2136.8055555555557d + "'", double62 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2136.8055555555557d + "'", double64 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 2136.8055555555557d + "'", double66 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1980.1224489795918d + "'", double67 == 1980.1224489795918d);
    }

    @Test
    public void test02344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02344");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double2 = secondMoment1.getResult();
        double double3 = secondMoment1.getResult();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance5.increment(651942.9897959187d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance9.increment((-1.0d));
        variance9.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        variance9.incrementAll(doubleArray22);
        long long25 = variance9.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance28.increment((-1.0d));
        variance28.setBiasCorrected(false);
        boolean boolean33 = variance28.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean35 = variance28.equals((java.lang.Object) secondMoment34);
        secondMoment34.increment((double) (short) 0);
        secondMoment34.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray48 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double49 = variance41.evaluate(doubleArray48);
        double double50 = secondMoment34.evaluate(doubleArray48);
        long long51 = secondMoment34.getN();
        long long52 = secondMoment34.getN();
        secondMoment34.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment34);
        double double56 = variance55.getResult();
        variance55.increment((double) 1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance60.increment((-1.0d));
        variance60.setBiasCorrected(false);
        boolean boolean65 = variance60.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment66 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean67 = variance60.equals((java.lang.Object) secondMoment66);
        long long68 = secondMoment66.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance70.increment((-1.0d));
        variance70.setBiasCorrected(false);
        variance70.increment((double) 100L);
        boolean boolean77 = variance70.isBiasCorrected();
        boolean boolean78 = variance70.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray87 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double88 = variance80.evaluate(doubleArray87);
        double double90 = variance70.evaluate(doubleArray87, (double) (byte) 10);
        secondMoment66.incrementAll(doubleArray87);
        double double92 = variance55.evaluate(doubleArray87);
        double double94 = variance9.evaluate(doubleArray87, 2282968.9911265434d);
        // The following exception was thrown during execution in test generation
        try {
            double double97 = variance5.evaluate(doubleArray87, (-1), (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 7L + "'", long25 == 7L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 2136.8055555555557d + "'", double49 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 12820.833333333334d + "'", double50 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 6L + "'", long51 == 6L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 6L + "'", long52 == 6L);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1980.1224489795918d + "'", double56 == 1980.1224489795918d);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 2136.8055555555557d + "'", double88 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 2136.8055555555557d + "'", double90 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 2136.8055555555557d + "'", double92 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 2136.8059895833335d + "'", double94 == 2136.8059895833335d);
    }

    @Test
    public void test02345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02345");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment(4.551252412837283E11d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance13.increment((-1.0d));
        variance13.setBiasCorrected(false);
        boolean boolean18 = variance13.isBiasCorrected();
        double[] doubleArray19 = new double[] {};
        double double20 = variance13.evaluate(doubleArray19);
        variance13.setBiasCorrected(false);
        variance13.clear();
        variance13.increment(227.3d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance27.increment((-1.0d));
        variance27.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean35 = variance33.equals((java.lang.Object) (short) 10);
        boolean boolean36 = variance27.equals((java.lang.Object) variance33);
        long long37 = variance33.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean41 = variance39.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray50 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double51 = variance43.evaluate(doubleArray50);
        double double52 = variance39.evaluate(doubleArray50);
        double double53 = variance33.evaluate(doubleArray50);
        double double54 = variance13.evaluate(doubleArray50);
        // The following exception was thrown during execution in test generation
        try {
            double double57 = secondMoment0.evaluate(doubleArray50, (int) (byte) -1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2136.8055555555557d + "'", double51 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2564.166666666667d + "'", double52 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2564.166666666667d + "'", double53 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2136.8055555555557d + "'", double54 == 2136.8055555555557d);
    }

    @Test
    public void test02346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02346");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        double[] doubleArray15 = new double[] { 0L, (byte) 10 };
        double double16 = variance11.evaluate(doubleArray15);
        double double18 = variance8.evaluate(doubleArray15, (double) 10L);
        double double19 = variance1.evaluate(doubleArray15);
        variance1.clear();
        boolean boolean21 = variance1.isBiasCorrected();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 25.0d + "'", double19 == 25.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test02347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02347");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double[] doubleArray7 = new double[] {};
        double double8 = variance1.evaluate(doubleArray7);
        variance1.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        double[] doubleArray21 = new double[] { 0L, (byte) 10 };
        double double22 = variance17.evaluate(doubleArray21);
        double double24 = variance14.evaluate(doubleArray21, (double) 10L);
        double double25 = variance12.evaluate(doubleArray21);
        variance1.incrementAll(doubleArray21);
        variance1.increment(4048078.240740742d);
        variance1.increment(0.5d);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance33.increment((-1.0d));
        variance33.setBiasCorrected(false);
        variance33.setBiasCorrected(false);
        variance33.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment42);
        long long44 = secondMoment42.getN();
        secondMoment42.clear();
        double double46 = secondMoment42.getResult();
        secondMoment42.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment42);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance51.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double57 = variance56.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double60 = variance59.getResult();
        double[] doubleArray63 = new double[] { 0L, (byte) 10 };
        double double64 = variance59.evaluate(doubleArray63);
        double double66 = variance56.evaluate(doubleArray63, (double) 10L);
        double double67 = variance54.evaluate(doubleArray63);
        double double68 = variance51.evaluate(doubleArray63);
        variance49.incrementAll(doubleArray63);
        variance49.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance72.increment((-1.0d));
        variance72.setBiasCorrected(false);
        boolean boolean77 = variance72.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double80 = variance79.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance82 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double83 = variance82.getResult();
        double[] doubleArray86 = new double[] { 0L, (byte) 10 };
        double double87 = variance82.evaluate(doubleArray86);
        double double89 = variance79.evaluate(doubleArray86, (double) 10L);
        double double90 = variance72.evaluate(doubleArray86);
        double double92 = variance49.evaluate(doubleArray86, 2310.1428571428573d);
        double double93 = variance33.evaluate(doubleArray86);
        double double94 = variance1.evaluate(doubleArray86);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 25.0d + "'", double90 == 25.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 25.0d + "'", double93 == 25.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 25.0d + "'", double94 == 25.0d);
    }

    @Test
    public void test02348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02348");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance7.clear();
        variance7.increment(2024039.12109375d);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test02349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02349");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        long long6 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        long long8 = secondMoment1.getN();
        double double9 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        long long12 = secondMoment10.getN();
        secondMoment10.clear();
        double double14 = secondMoment10.getResult();
        secondMoment10.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        secondMoment10.increment((double) (byte) 0);
        long long20 = secondMoment10.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean24 = variance22.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray33 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double34 = variance26.evaluate(doubleArray33);
        double double35 = variance22.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance37.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        double[] doubleArray49 = new double[] { 0L, (byte) 10 };
        double double50 = variance45.evaluate(doubleArray49);
        double double52 = variance42.evaluate(doubleArray49, (double) 10L);
        double double53 = variance40.evaluate(doubleArray49);
        double double54 = variance37.evaluate(doubleArray49);
        double double55 = variance22.evaluate(doubleArray49);
        double double58 = secondMoment10.evaluate(doubleArray49, (int) (byte) 1, 0);
        boolean boolean59 = secondMoment1.equals((java.lang.Object) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance61.increment((-1.0d));
        variance61.setBiasCorrected(false);
        boolean boolean66 = variance61.isBiasCorrected();
        double[] doubleArray67 = new double[] {};
        double double68 = variance61.evaluate(doubleArray67);
        long long69 = variance61.getN();
        long long70 = variance61.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance72.increment((-1.0d));
        boolean boolean75 = variance72.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment77 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment77);
        double double79 = secondMoment77.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment77);
        secondMoment77.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance83.increment((-1.0d));
        variance83.setBiasCorrected(false);
        boolean boolean88 = variance83.isBiasCorrected();
        double[] doubleArray89 = new double[] {};
        double double90 = variance83.evaluate(doubleArray89);
        secondMoment77.incrementAll(doubleArray89);
        double double92 = variance72.evaluate(doubleArray89);
        double double95 = variance61.evaluate(doubleArray89, 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double98 = secondMoment1.evaluate(doubleArray89, (int) (short) 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2L + "'", long20 == 2L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2136.8055555555557d + "'", double34 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 2564.166666666667d + "'", double35 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1L + "'", long69 == 1L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1L + "'", long70 == 1L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertTrue(Double.isNaN(double95));
    }

    @Test
    public void test02350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02350");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        double[] doubleArray12 = new double[] { 0L, (byte) 10 };
        double double13 = variance8.evaluate(doubleArray12);
        secondMoment2.incrementAll(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean19 = variance17.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance21.increment((-1.0d));
        variance21.setBiasCorrected(false);
        boolean boolean26 = variance21.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean28 = variance21.equals((java.lang.Object) secondMoment27);
        double double29 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        double[] doubleArray38 = new double[] { 0L, (byte) 10 };
        double double39 = variance34.evaluate(doubleArray38);
        double double41 = variance31.evaluate(doubleArray38, (double) 10L);
        double double44 = secondMoment27.evaluate(doubleArray38, (int) (short) 0, 1);
        double double45 = variance17.evaluate(doubleArray38);
        secondMoment2.incrementAll(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        double double48 = secondMoment2.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 100.0d + "'", double48 == 100.0d);
    }

    @Test
    public void test02351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02351");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.setBiasCorrected(false);
        boolean boolean8 = variance3.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean10 = variance3.equals((java.lang.Object) secondMoment9);
        double double11 = secondMoment9.getResult();
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        secondMoment9.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        variance17.setBiasCorrected(false);
        boolean boolean22 = variance17.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean24 = variance17.equals((java.lang.Object) secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        double[] doubleArray33 = new double[] { 0L, (byte) 10 };
        double double34 = variance29.evaluate(doubleArray33);
        double double36 = variance26.evaluate(doubleArray33, (double) 10L);
        double double40 = variance17.evaluate(doubleArray33, (double) (short) 0, 0, (int) (short) 0);
        double double43 = secondMoment9.evaluate(doubleArray33, 0, 0);
        variance1.incrementAll(doubleArray33);
        variance1.increment((double) (-1));
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        long long50 = variance48.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double52 = secondMoment51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance54.increment((-1.0d));
        variance54.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double65 = variance64.getResult();
        double[] doubleArray68 = new double[] { 0L, (byte) 10 };
        double double69 = variance64.evaluate(doubleArray68);
        double double71 = variance61.evaluate(doubleArray68, (double) 10L);
        double double72 = variance59.evaluate(doubleArray68);
        double double73 = variance54.evaluate(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        double[] doubleArray79 = new double[] { 0L, (byte) 10 };
        double double80 = variance75.evaluate(doubleArray79);
        org.apache.commons.math.stat.descriptive.moment.Variance variance82 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray89 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double90 = variance82.evaluate(doubleArray89);
        double double91 = variance75.evaluate(doubleArray89);
        double double92 = variance54.evaluate(doubleArray89);
        double double93 = secondMoment51.evaluate(doubleArray89);
        variance48.incrementAll(doubleArray89);
        double double95 = variance1.evaluate(doubleArray89);
        variance1.clear();
        variance1.clear();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 2136.8055555555557d + "'", double90 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 2564.166666666667d + "'", double91 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 2564.166666666667d + "'", double92 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 12820.833333333334d + "'", double93 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 2136.8055555555557d + "'", double95 == 2136.8055555555557d);
    }

    @Test
    public void test02352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02352");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment4 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment4);
        double double6 = secondMoment4.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment4);
        secondMoment4.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        double[] doubleArray14 = new double[] { 0L, (byte) 10 };
        double double15 = variance10.evaluate(doubleArray14);
        secondMoment4.incrementAll(doubleArray14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment4);
        secondMoment4.clear();
        secondMoment4.increment(Double.NaN);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment4);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment4);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment4);
        variance23.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 50.0d + "'", double15 == 50.0d);
    }

    @Test
    public void test02353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02353");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        double double20 = variance10.evaluate(doubleArray17, (double) 10L);
        double double21 = variance8.evaluate(doubleArray17);
        double double22 = variance3.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        double[] doubleArray28 = new double[] { 0L, (byte) 10 };
        double double29 = variance24.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double39 = variance31.evaluate(doubleArray38);
        double double40 = variance24.evaluate(doubleArray38);
        double double41 = variance3.evaluate(doubleArray38);
        double double42 = secondMoment0.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long44 = secondMoment0.getN();
        double double45 = secondMoment0.getResult();
        secondMoment0.clear();
        secondMoment0.increment(0.0d);
        secondMoment0.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2136.8055555555557d + "'", double39 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2564.166666666667d + "'", double40 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2564.166666666667d + "'", double41 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 12820.833333333334d + "'", double42 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 6L + "'", long44 == 6L);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 12820.833333333334d + "'", double45 == 12820.833333333334d);
    }

    @Test
    public void test02354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02354");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double[] doubleArray5 = new double[] { 0L, (byte) 10 };
        double double6 = variance1.evaluate(doubleArray5);
        variance1.clear();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray17 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double18 = variance10.evaluate(doubleArray17);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = variance1.evaluate(doubleArray17, 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.0d + "'", double6 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 2136.8055555555557d + "'", double18 == 2136.8055555555557d);
    }

    @Test
    public void test02355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02355");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        double double5 = secondMoment1.getResult();
        secondMoment1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double[] doubleArray9 = new double[] {};
        double double10 = secondMoment1.evaluate(doubleArray9);
        double double11 = secondMoment1.getResult();
        secondMoment1.clear();
        double double13 = secondMoment1.getResult();
        long long14 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        secondMoment1.clear();
        double double17 = secondMoment1.getResult();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test02356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02356");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        variance1.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        double[] doubleArray21 = new double[] { 0L, (byte) 10 };
        double double22 = variance17.evaluate(doubleArray21);
        double double24 = variance14.evaluate(doubleArray21, (double) 10L);
        double double25 = variance12.evaluate(doubleArray21);
        variance12.increment((double) 0.0f);
        boolean boolean28 = variance12.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        long long31 = secondMoment29.getN();
        secondMoment29.clear();
        secondMoment29.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        variance35.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean41 = variance39.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray50 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double51 = variance43.evaluate(doubleArray50);
        double double52 = variance39.evaluate(doubleArray50);
        double double54 = variance35.evaluate(doubleArray50, (double) 1.0f);
        double double57 = variance12.evaluate(doubleArray50, (int) (byte) 0, 1);
        double double58 = variance1.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment59);
        long long61 = secondMoment59.getN();
        secondMoment59.clear();
        secondMoment59.clear();
        secondMoment59.increment((double) (byte) 100);
        boolean boolean66 = variance1.equals((java.lang.Object) (byte) 100);
        variance1.clear();
        double double68 = variance1.getResult();
        long long69 = variance1.getN();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2136.8055555555557d + "'", double51 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2564.166666666667d + "'", double52 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2136.805555555555d + "'", double54 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2136.8055555555557d + "'", double58 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
    }

    @Test
    public void test02357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02357");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        variance8.setBiasCorrected(false);
        variance8.setBiasCorrected(true);
        double double13 = variance8.getResult();
        variance8.clear();
        variance8.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test02358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02358");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        double double20 = variance10.evaluate(doubleArray17, (double) 10L);
        double double21 = variance8.evaluate(doubleArray17);
        double double22 = variance3.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        double[] doubleArray28 = new double[] { 0L, (byte) 10 };
        double double29 = variance24.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double39 = variance31.evaluate(doubleArray38);
        double double40 = variance24.evaluate(doubleArray38);
        double double41 = variance3.evaluate(doubleArray38);
        double double42 = secondMoment0.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long44 = secondMoment0.getN();
        double double45 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 10);
        secondMoment0.increment(1988.7755102040815d);
        long long50 = secondMoment0.getN();
        secondMoment0.increment(1349359.4140625d);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2136.8055555555557d + "'", double39 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2564.166666666667d + "'", double40 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2564.166666666667d + "'", double41 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 12820.833333333334d + "'", double42 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 6L + "'", long44 == 6L);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 12820.833333333334d + "'", double45 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 8L + "'", long50 == 8L);
    }

    @Test
    public void test02359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02359");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        secondMoment2.increment((double) 2L);
        double double9 = secondMoment2.getResult();
        secondMoment2.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        double double13 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        variance14.increment(1557016.8402777782d);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1152.0d + "'", double13 == 1152.0d);
    }

    @Test
    public void test02360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02360");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        double[] doubleArray12 = new double[] { 0L, (byte) 10 };
        double double13 = variance8.evaluate(doubleArray12);
        secondMoment2.incrementAll(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.clear();
        secondMoment2.increment(Double.NaN);
        secondMoment2.increment(0.0d);
        secondMoment2.clear();
        long long22 = secondMoment2.getN();
        long long23 = secondMoment2.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        variance24.clear();
        double double26 = variance24.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
    }

    @Test
    public void test02361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02361");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        long long3 = variance1.getN();
        variance1.clear();
        double[] doubleArray5 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double8 = variance1.evaluate(doubleArray5, (int) (short) 100, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test02362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02362");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double8 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        long long11 = secondMoment9.getN();
        secondMoment9.clear();
        secondMoment9.clear();
        secondMoment9.increment((double) (byte) 100);
        long long16 = secondMoment9.getN();
        double[] doubleArray18 = new double[] { 2024039.1203703713d };
        double double19 = secondMoment9.evaluate(doubleArray18);
        secondMoment7.incrementAll(doubleArray18);
        double double21 = secondMoment1.evaluate(doubleArray18);
        secondMoment1.increment((double) (short) -1);
        secondMoment1.increment(25.00000011920929d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        variance26.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test02363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02363");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double[] doubleArray8 = new double[] {};
        double double9 = secondMoment0.evaluate(doubleArray8);
        double double10 = secondMoment0.getResult();
        secondMoment0.clear();
        double double12 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance14.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance18.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double24 = variance23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        double[] doubleArray30 = new double[] { 0L, (byte) 10 };
        double double31 = variance26.evaluate(doubleArray30);
        double double33 = variance23.evaluate(doubleArray30, (double) 10L);
        double double34 = variance21.evaluate(doubleArray30);
        double double35 = variance18.evaluate(doubleArray30);
        double double36 = variance14.evaluate(doubleArray30);
        boolean boolean37 = secondMoment0.equals((java.lang.Object) double36);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance39.increment((-1.0d));
        variance39.setBiasCorrected(false);
        boolean boolean44 = variance39.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean46 = variance39.equals((java.lang.Object) secondMoment45);
        double double47 = secondMoment45.getResult();
        secondMoment45.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment45);
        variance49.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment53);
        double double55 = secondMoment53.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment53);
        secondMoment53.clear();
        secondMoment53.increment((double) 2L);
        double double60 = secondMoment53.getResult();
        secondMoment53.increment(50.0d);
        double double63 = secondMoment53.getResult();
        long long64 = secondMoment53.getN();
        long long65 = secondMoment53.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance67.increment((-1.0d));
        variance67.setBiasCorrected(false);
        boolean boolean72 = variance67.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment73 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean74 = variance67.equals((java.lang.Object) secondMoment73);
        secondMoment73.increment((double) (short) 0);
        secondMoment73.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray87 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double88 = variance80.evaluate(doubleArray87);
        double double89 = secondMoment73.evaluate(doubleArray87);
        double double90 = secondMoment53.evaluate(doubleArray87);
        double double92 = variance49.evaluate(doubleArray87, 547.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double95 = secondMoment0.evaluate(doubleArray87, (int) (short) 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1152.0d + "'", double63 == 1152.0d);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 2L + "'", long64 == 2L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 2L + "'", long65 == 2L);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 2136.8055555555557d + "'", double88 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 12820.833333333334d + "'", double89 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 12820.833333333334d + "'", double90 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 2564.166666666651d + "'", double92 == 2564.166666666651d);
    }

    @Test
    public void test02364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02364");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        double[] doubleArray11 = new double[] { 0L, (byte) 10 };
        double double12 = variance7.evaluate(doubleArray11);
        secondMoment1.incrementAll(doubleArray11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long15 = secondMoment1.getN();
        double double16 = secondMoment1.getResult();
        long long17 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        long long20 = secondMoment18.getN();
        secondMoment18.clear();
        secondMoment18.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance25.increment((-1.0d));
        variance25.setBiasCorrected(false);
        boolean boolean30 = variance25.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean32 = variance25.equals((java.lang.Object) secondMoment31);
        variance25.increment((double) 100L);
        variance25.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double44 = variance43.getResult();
        double[] doubleArray47 = new double[] { 0L, (byte) 10 };
        double double48 = variance43.evaluate(doubleArray47);
        double double50 = variance40.evaluate(doubleArray47, (double) 10L);
        double double51 = variance38.evaluate(doubleArray47);
        double[] doubleArray55 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double56 = variance38.evaluate(doubleArray55);
        variance25.incrementAll(doubleArray55);
        double double58 = variance23.evaluate(doubleArray55);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment1.incrementAll(doubleArray55, (int) (byte) 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2024039.120370371d + "'", double56 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2024039.120370371d + "'", double58 == 2024039.120370371d);
    }

    @Test
    public void test02365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02365");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean9 = variance7.equals((java.lang.Object) (short) 10);
        boolean boolean10 = variance1.equals((java.lang.Object) variance7);
        long long11 = variance7.getN();
        variance7.setBiasCorrected(false);
        variance7.increment(2310.1428571428573d);
        double double16 = variance7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean20 = variance18.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray29 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double30 = variance22.evaluate(doubleArray29);
        double double31 = variance18.evaluate(doubleArray29);
        variance18.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean36 = variance34.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double46 = variance38.evaluate(doubleArray45);
        double double47 = variance34.evaluate(doubleArray45);
        variance18.incrementAll(doubleArray45);
        double double49 = variance7.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment51);
        long long53 = secondMoment51.getN();
        secondMoment51.clear();
        secondMoment51.clear();
        secondMoment51.increment((double) (byte) 100);
        secondMoment51.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment51);
        secondMoment51.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment51);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment51);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance64.increment((-1.0d));
        variance64.setBiasCorrected(false);
        variance64.increment(2136.8055555555557d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance72.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double78 = variance77.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double81 = variance80.getResult();
        double[] doubleArray84 = new double[] { 0L, (byte) 10 };
        double double85 = variance80.evaluate(doubleArray84);
        double double87 = variance77.evaluate(doubleArray84, (double) 10L);
        double double88 = variance75.evaluate(doubleArray84);
        double double89 = variance72.evaluate(doubleArray84);
        variance64.incrementAll(doubleArray84);
        secondMoment51.incrementAll(doubleArray84, (int) (short) 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double96 = variance7.evaluate(doubleArray84, 1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2136.8055555555557d + "'", double30 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2564.166666666667d + "'", double31 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2136.8055555555557d + "'", double46 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2564.166666666667d + "'", double47 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 2136.8055555555557d + "'", double49 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
    }

    @Test
    public void test02366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02366");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        boolean boolean8 = variance1.isBiasCorrected();
        variance1.clear();
        java.lang.Class<?> wildcardClass10 = variance1.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test02367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02367");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        double[] doubleArray11 = new double[] { 0L, (byte) 10 };
        double double12 = variance7.evaluate(doubleArray11);
        secondMoment1.incrementAll(doubleArray11);
        double double14 = secondMoment1.getResult();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        variance17.setBiasCorrected(false);
        boolean boolean22 = variance17.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean24 = variance17.equals((java.lang.Object) secondMoment23);
        double double25 = secondMoment23.getResult();
        secondMoment23.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        boolean boolean28 = variance27.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance32.increment((-1.0d));
        variance32.setBiasCorrected(false);
        boolean boolean37 = variance32.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean39 = variance32.equals((java.lang.Object) secondMoment38);
        double double40 = secondMoment38.getResult();
        secondMoment38.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment38);
        secondMoment38.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance46.increment((-1.0d));
        variance46.setBiasCorrected(false);
        boolean boolean51 = variance46.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean53 = variance46.equals((java.lang.Object) secondMoment52);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double56 = variance55.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double59 = variance58.getResult();
        double[] doubleArray62 = new double[] { 0L, (byte) 10 };
        double double63 = variance58.evaluate(doubleArray62);
        double double65 = variance55.evaluate(doubleArray62, (double) 10L);
        double double69 = variance46.evaluate(doubleArray62, (double) (short) 0, 0, (int) (short) 0);
        double double72 = secondMoment38.evaluate(doubleArray62, 0, 0);
        variance30.incrementAll(doubleArray62);
        double double74 = variance27.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double79 = variance78.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double82 = variance81.getResult();
        double[] doubleArray85 = new double[] { 0L, (byte) 10 };
        double double86 = variance81.evaluate(doubleArray85);
        double double88 = variance78.evaluate(doubleArray85, (double) 10L);
        double double89 = variance76.evaluate(doubleArray85);
        double[] doubleArray93 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double94 = variance76.evaluate(doubleArray93);
        double double96 = variance27.evaluate(doubleArray93, (double) 100);
        // The following exception was thrown during execution in test generation
        try {
            double double99 = secondMoment1.evaluate(doubleArray93, 100, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 2024039.120370371d + "'", double94 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 2024039.1203703708d + "'", double96 == 2024039.1203703708d);
    }

    @Test
    public void test02368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02368");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        secondMoment7.increment((double) 10.0f);
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        java.lang.Object obj16 = null;
        boolean boolean17 = variance15.equals(obj16);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double22 = variance21.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        double[] doubleArray28 = new double[] { 0L, (byte) 10 };
        double double29 = variance24.evaluate(doubleArray28);
        double double31 = variance21.evaluate(doubleArray28, (double) 10L);
        double double32 = variance19.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        double[] doubleArray48 = new double[] { 0L, (byte) 10 };
        double double49 = variance44.evaluate(doubleArray48);
        double double51 = variance41.evaluate(doubleArray48, (double) 10L);
        double double52 = variance39.evaluate(doubleArray48);
        double double53 = variance34.evaluate(doubleArray48);
        double double54 = variance19.evaluate(doubleArray48);
        double double55 = variance15.evaluate(doubleArray48);
        variance15.increment((double) ' ');
        variance15.clear();
        variance15.increment(2024039.1203703706d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
    }

    @Test
    public void test02369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02369");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long7 = secondMoment0.getN();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
    }

    @Test
    public void test02370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02370");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance6.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean12 = variance10.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double22 = variance14.evaluate(doubleArray21);
        double double23 = variance10.evaluate(doubleArray21);
        double double25 = variance6.evaluate(doubleArray21, (double) 1.0f);
        boolean boolean27 = variance6.equals((java.lang.Object) 10.0d);
        variance6.increment((double) 1L);
        variance6.clear();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2136.8055555555557d + "'", double22 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2564.166666666667d + "'", double23 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2136.805555555555d + "'", double25 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test02371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02371");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        boolean boolean8 = variance1.isBiasCorrected();
        variance1.clear();
        double double10 = variance1.getResult();
        boolean boolean11 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray20 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double21 = variance13.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray30 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double31 = variance23.evaluate(doubleArray30);
        double double33 = variance13.evaluate(doubleArray30, (double) '#');
        variance1.incrementAll(doubleArray30);
        long long35 = variance1.getN();
        variance1.increment((double) 10.0f);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2136.8055555555557d + "'", double21 == 2136.8055555555557d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2136.8055555555557d + "'", double31 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2136.8055555555557d + "'", double33 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 6L + "'", long35 == 6L);
    }

    @Test
    public void test02372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02372");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment(50.0009765625d);
        long long11 = secondMoment7.getN();
        long long12 = secondMoment7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        long long14 = secondMoment7.getN();
        long long15 = secondMoment7.getN();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
    }

    @Test
    public void test02373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02373");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        secondMoment7.clear();
        secondMoment7.clear();
        secondMoment7.increment(2268035.8522376535d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
    }

    @Test
    public void test02374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02374");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double11 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        secondMoment9.incrementAll(doubleArray19);
        boolean boolean22 = variance2.equals((java.lang.Object) secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean31 = variance24.equals((java.lang.Object) secondMoment30);
        boolean boolean32 = secondMoment9.equals((java.lang.Object) boolean31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        double[] doubleArray42 = new double[] { 0L, (byte) 10 };
        double double43 = variance38.evaluate(doubleArray42);
        double double45 = variance35.evaluate(doubleArray42, (double) 10L);
        double double46 = secondMoment9.evaluate(doubleArray42);
        double double47 = secondMoment9.getResult();
        secondMoment9.increment(1.4545805531418566E13d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
    }

    @Test
    public void test02375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02375");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        double double5 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        double[] doubleArray13 = new double[] { 0L, (byte) 10 };
        double double14 = variance9.evaluate(doubleArray13);
        secondMoment3.incrementAll(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        long long17 = secondMoment3.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        double double19 = secondMoment3.getResult();
        long long20 = secondMoment3.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance25.increment((-1.0d));
        variance25.setBiasCorrected(false);
        boolean boolean30 = variance25.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        double double34 = secondMoment32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment32);
        secondMoment32.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        double[] doubleArray42 = new double[] { 0L, (byte) 10 };
        double double43 = variance38.evaluate(doubleArray42);
        secondMoment32.incrementAll(doubleArray42);
        boolean boolean45 = variance25.equals((java.lang.Object) secondMoment32);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance47.increment((-1.0d));
        variance47.setBiasCorrected(false);
        boolean boolean52 = variance47.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean54 = variance47.equals((java.lang.Object) secondMoment53);
        boolean boolean55 = secondMoment32.equals((java.lang.Object) boolean54);
        secondMoment32.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment32);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment32);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment59);
        long long61 = secondMoment59.getN();
        secondMoment59.clear();
        secondMoment59.increment(10.0d);
        double double65 = secondMoment59.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double70 = variance69.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double73 = variance72.getResult();
        double[] doubleArray76 = new double[] { 0L, (byte) 10 };
        double double77 = variance72.evaluate(doubleArray76);
        double double79 = variance69.evaluate(doubleArray76, (double) 10L);
        double double80 = variance67.evaluate(doubleArray76);
        double[] doubleArray84 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double85 = variance67.evaluate(doubleArray84);
        double double86 = secondMoment59.evaluate(doubleArray84);
        secondMoment32.incrementAll(doubleArray84);
        // The following exception was thrown during execution in test generation
        try {
            double double91 = variance21.evaluate(doubleArray84, 4232.0d, (int) (short) 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2L + "'", long20 == 2L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2024039.120370371d + "'", double85 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 4048078.240740742d + "'", double86 == 4048078.240740742d);
    }

    @Test
    public void test02376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02376");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        secondMoment0.increment(25.0d);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance10.increment((-1.0d));
        variance10.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        double[] doubleArray24 = new double[] { 0L, (byte) 10 };
        double double25 = variance20.evaluate(doubleArray24);
        double double27 = variance17.evaluate(doubleArray24, (double) 10L);
        double double28 = variance15.evaluate(doubleArray24);
        double double29 = variance10.evaluate(doubleArray24);
        double double30 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        variance32.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance37.increment((-1.0d));
        variance37.setBiasCorrected(false);
        boolean boolean42 = variance37.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean44 = variance37.equals((java.lang.Object) secondMoment43);
        double double45 = secondMoment43.getResult();
        secondMoment43.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment43);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment49);
        double double51 = secondMoment49.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment49);
        secondMoment49.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance55.increment((-1.0d));
        variance55.setBiasCorrected(false);
        boolean boolean60 = variance55.isBiasCorrected();
        double[] doubleArray61 = new double[] {};
        double double62 = variance55.evaluate(doubleArray61);
        secondMoment49.incrementAll(doubleArray61);
        double double64 = variance47.evaluate(doubleArray61);
        double double65 = variance32.evaluate(doubleArray61);
        double double66 = variance10.evaluate(doubleArray61);
        double double67 = secondMoment0.evaluate(doubleArray61);
        java.lang.Class<?> wildcardClass68 = secondMoment0.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test02377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02377");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        double[] doubleArray8 = new double[] { 0L, (byte) 10 };
        double double9 = variance4.evaluate(doubleArray8);
        double double11 = variance1.evaluate(doubleArray8, (double) 10L);
        long long12 = variance1.getN();
        variance1.increment((double) 0L);
        double[] doubleArray16 = new double[] { 10.0d };
        variance1.incrementAll(doubleArray16);
        variance1.clear();
        variance1.increment(4232.0d);
        double[] doubleArray21 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double24 = variance1.evaluate(doubleArray21, (int) (short) 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.0d + "'", double9 == 50.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0]");
    }

    @Test
    public void test02378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02378");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        long long4 = secondMoment1.getN();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance6.increment((double) 1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance11.increment((-1.0d));
        variance11.setBiasCorrected(false);
        boolean boolean16 = variance11.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean18 = variance11.equals((java.lang.Object) secondMoment17);
        double double19 = secondMoment17.getResult();
        secondMoment17.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        double[] doubleArray37 = new double[] { 0L, (byte) 10 };
        double double38 = variance33.evaluate(doubleArray37);
        double double40 = variance30.evaluate(doubleArray37, (double) 10L);
        double double41 = variance28.evaluate(doubleArray37);
        double double42 = variance23.evaluate(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        double[] doubleArray48 = new double[] { 0L, (byte) 10 };
        double double49 = variance44.evaluate(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray58 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double59 = variance51.evaluate(doubleArray58);
        double double60 = variance44.evaluate(doubleArray58);
        double double61 = variance23.evaluate(doubleArray58);
        double double62 = variance21.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance64.increment((-1.0d));
        variance64.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean71 = variance69.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double79 = variance78.getResult();
        double[] doubleArray82 = new double[] { 0L, (byte) 10 };
        double double83 = variance78.evaluate(doubleArray82);
        double double85 = variance75.evaluate(doubleArray82, (double) 10L);
        double double86 = variance73.evaluate(doubleArray82);
        double[] doubleArray90 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double91 = variance73.evaluate(doubleArray90);
        double double93 = variance69.evaluate(doubleArray90, (double) (byte) 1);
        double double95 = variance64.evaluate(doubleArray90, 4048078.240740742d);
        double double96 = variance21.evaluate(doubleArray90);
        double double97 = variance6.evaluate(doubleArray90);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2136.8055555555557d + "'", double59 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2564.166666666667d + "'", double60 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2564.166666666667d + "'", double61 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2136.8055555555557d + "'", double62 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 2024039.120370371d + "'", double91 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 2024039.120370371d + "'", double93 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 2024039.12109375d + "'", double95 == 2024039.12109375d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 1349359.4135802474d + "'", double96 == 1349359.4135802474d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 2024039.120370371d + "'", double97 == 2024039.120370371d);
    }

    @Test
    public void test02379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02379");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        double[] doubleArray12 = new double[] { 0L, (byte) 10 };
        double double13 = variance8.evaluate(doubleArray12);
        secondMoment2.incrementAll(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean19 = variance17.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance21.increment((-1.0d));
        variance21.setBiasCorrected(false);
        boolean boolean26 = variance21.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean28 = variance21.equals((java.lang.Object) secondMoment27);
        double double29 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        double[] doubleArray38 = new double[] { 0L, (byte) 10 };
        double double39 = variance34.evaluate(doubleArray38);
        double double41 = variance31.evaluate(doubleArray38, (double) 10L);
        double double44 = secondMoment27.evaluate(doubleArray38, (int) (short) 0, 1);
        double double45 = variance17.evaluate(doubleArray38);
        secondMoment2.incrementAll(doubleArray38);
        double double47 = secondMoment2.getResult();
        secondMoment2.increment(5.415271412037037E7d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        java.lang.Class<?> wildcardClass51 = variance50.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test02380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02380");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        secondMoment8.incrementAll(doubleArray18);
        boolean boolean21 = variance1.equals((java.lang.Object) secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.setBiasCorrected(false);
        boolean boolean28 = variance23.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean30 = variance23.equals((java.lang.Object) secondMoment29);
        boolean boolean31 = secondMoment8.equals((java.lang.Object) boolean30);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance33.increment((-1.0d));
        variance33.setBiasCorrected(false);
        boolean boolean38 = variance33.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean40 = variance33.equals((java.lang.Object) secondMoment39);
        secondMoment39.increment((double) (short) 0);
        secondMoment39.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray53 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double54 = variance46.evaluate(doubleArray53);
        double double55 = secondMoment39.evaluate(doubleArray53);
        double double56 = secondMoment8.evaluate(doubleArray53);
        secondMoment8.increment((double) 10.0f);
        secondMoment8.clear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2136.8055555555557d + "'", double54 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 12820.833333333334d + "'", double55 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 12820.833333333334d + "'", double56 == 12820.833333333334d);
    }

    @Test
    public void test02381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02381");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        double[] doubleArray14 = new double[] { 0L, (byte) 10 };
        double double15 = variance10.evaluate(doubleArray14);
        double double17 = variance7.evaluate(doubleArray14, (double) 10L);
        double double18 = variance5.evaluate(doubleArray14);
        double[] doubleArray22 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double23 = variance5.evaluate(doubleArray22);
        double double25 = variance1.evaluate(doubleArray22, (double) (byte) 1);
        variance1.increment(10.0d);
        variance1.setBiasCorrected(true);
        double double30 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        double double34 = secondMoment32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment32);
        secondMoment32.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        double[] doubleArray42 = new double[] { 0L, (byte) 10 };
        double double43 = variance38.evaluate(doubleArray42);
        secondMoment32.incrementAll(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        long long46 = secondMoment32.getN();
        double double47 = secondMoment32.getResult();
        boolean boolean48 = variance1.equals((java.lang.Object) double47);
        variance1.increment((double) 4L);
        variance1.increment(3.6415326583280566E12d);
        double[] doubleArray53 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double56 = variance1.evaluate(doubleArray53, (int) '#', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 50.0d + "'", double15 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2024039.120370371d + "'", double23 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2024039.120370371d + "'", double25 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 2L + "'", long46 == 2L);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test02382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02382");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        boolean boolean4 = variance1.isBiasCorrected();
        double double5 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance10.increment((-1.0d));
        variance10.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        double[] doubleArray24 = new double[] { 0L, (byte) 10 };
        double double25 = variance20.evaluate(doubleArray24);
        double double27 = variance17.evaluate(doubleArray24, (double) 10L);
        double double28 = variance15.evaluate(doubleArray24);
        double double29 = variance10.evaluate(doubleArray24);
        variance8.incrementAll(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        double[] doubleArray41 = new double[] { 0L, (byte) 10 };
        double double42 = variance37.evaluate(doubleArray41);
        double double44 = variance34.evaluate(doubleArray41, (double) 10L);
        double double45 = variance32.evaluate(doubleArray41);
        variance32.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance50.increment((-1.0d));
        variance50.setBiasCorrected(false);
        boolean boolean55 = variance50.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean57 = variance50.equals((java.lang.Object) secondMoment56);
        secondMoment56.increment((double) (short) 0);
        secondMoment56.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray70 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double71 = variance63.evaluate(doubleArray70);
        double double72 = secondMoment56.evaluate(doubleArray70);
        secondMoment48.incrementAll(doubleArray70);
        variance32.incrementAll(doubleArray70);
        variance8.incrementAll(doubleArray70);
        double double76 = variance1.evaluate(doubleArray70);
        java.lang.Class<?> wildcardClass77 = doubleArray70.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2136.8055555555557d + "'", double71 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 12820.833333333334d + "'", double72 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2564.166666666667d + "'", double76 == 2564.166666666667d);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test02383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02383");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        double double8 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment6);
        secondMoment6.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        double[] doubleArray16 = new double[] { 0L, (byte) 10 };
        double double17 = variance12.evaluate(doubleArray16);
        secondMoment6.incrementAll(doubleArray16);
        double double19 = variance4.evaluate(doubleArray16);
        variance4.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 25.0d + "'", double19 == 25.0d);
    }

    @Test
    public void test02384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02384");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double9 = variance8.getResult();
        variance8.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        long long13 = secondMoment11.getN();
        secondMoment11.clear();
        double double15 = secondMoment11.getResult();
        secondMoment11.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        double[] doubleArray19 = new double[] {};
        double double20 = secondMoment11.evaluate(doubleArray19);
        double double22 = variance8.evaluate(doubleArray19, 4048078.240740742d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        long long26 = secondMoment24.getN();
        secondMoment24.clear();
        secondMoment24.clear();
        double double29 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean34 = variance32.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        double[] doubleArray45 = new double[] { 0L, (byte) 10 };
        double double46 = variance41.evaluate(doubleArray45);
        double double48 = variance38.evaluate(doubleArray45, (double) 10L);
        double double49 = variance36.evaluate(doubleArray45);
        double[] doubleArray53 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double54 = variance36.evaluate(doubleArray53);
        double double56 = variance32.evaluate(doubleArray53, (double) (byte) 1);
        variance32.clear();
        double double58 = variance32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double61 = variance60.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double64 = variance63.getResult();
        double[] doubleArray67 = new double[] { 0L, (byte) 10 };
        double double68 = variance63.evaluate(doubleArray67);
        double double70 = variance60.evaluate(doubleArray67, (double) 10L);
        long long71 = variance60.getN();
        variance60.increment((double) 0L);
        double[] doubleArray75 = new double[] { 10.0d };
        variance60.incrementAll(doubleArray75);
        double double77 = variance32.evaluate(doubleArray75);
        variance30.incrementAll(doubleArray75);
        // The following exception was thrown during execution in test generation
        try {
            double double81 = variance8.evaluate(doubleArray75, 10, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2024039.120370371d + "'", double54 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2024039.120370371d + "'", double56 == 2024039.120370371d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
    }

    @Test
    public void test02385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02385");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance5.increment((-1.0d));
        variance5.setBiasCorrected(false);
        boolean boolean10 = variance5.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean12 = variance5.equals((java.lang.Object) secondMoment11);
        long long13 = secondMoment11.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.setBiasCorrected(false);
        variance15.increment((double) 100L);
        boolean boolean22 = variance15.isBiasCorrected();
        boolean boolean23 = variance15.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double33 = variance25.evaluate(doubleArray32);
        double double35 = variance15.evaluate(doubleArray32, (double) (byte) 10);
        secondMoment11.incrementAll(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        long long39 = secondMoment37.getN();
        secondMoment37.clear();
        double double41 = secondMoment37.getResult();
        secondMoment37.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance46.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        double[] doubleArray58 = new double[] { 0L, (byte) 10 };
        double double59 = variance54.evaluate(doubleArray58);
        double double61 = variance51.evaluate(doubleArray58, (double) 10L);
        double double62 = variance49.evaluate(doubleArray58);
        double double63 = variance46.evaluate(doubleArray58);
        variance44.incrementAll(doubleArray58);
        variance44.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double68 = variance67.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double71 = variance70.getResult();
        double[] doubleArray74 = new double[] { 0L, (byte) 10 };
        double double75 = variance70.evaluate(doubleArray74);
        double double77 = variance67.evaluate(doubleArray74, (double) 10L);
        variance44.incrementAll(doubleArray74);
        secondMoment11.incrementAll(doubleArray74);
        double double80 = secondMoment11.getResult();
        boolean boolean81 = variance1.equals((java.lang.Object) secondMoment11);
        boolean boolean82 = variance1.isBiasCorrected();
        long long83 = variance1.getN();
        variance1.increment(5.700796490291673E49d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2136.8055555555557d + "'", double33 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 2136.8055555555557d + "'", double35 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 14205.875d + "'", double80 == 14205.875d);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1L + "'", long83 == 1L);
    }

    @Test
    public void test02386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02386");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double4 = variance3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        double[] doubleArray10 = new double[] { 0L, (byte) 10 };
        double double11 = variance6.evaluate(doubleArray10);
        double double13 = variance3.evaluate(doubleArray10, (double) 10L);
        double double14 = variance1.evaluate(doubleArray10);
        variance1.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean20 = variance18.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray29 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double30 = variance22.evaluate(doubleArray29);
        double double31 = variance18.evaluate(doubleArray29);
        variance1.incrementAll(doubleArray29);
        double double33 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment35);
        long long37 = secondMoment35.getN();
        secondMoment35.clear();
        secondMoment35.clear();
        secondMoment35.increment((double) (byte) 100);
        secondMoment35.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment35);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment35);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double47 = variance46.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double50 = variance49.getResult();
        double[] doubleArray53 = new double[] { 0L, (byte) 10 };
        double double54 = variance49.evaluate(doubleArray53);
        double double56 = variance46.evaluate(doubleArray53, (double) 10L);
        double double57 = variance44.evaluate(doubleArray53);
        long long58 = variance44.getN();
        double[] doubleArray59 = new double[] {};
        variance44.incrementAll(doubleArray59);
        long long61 = variance44.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance63.increment((-1.0d));
        variance63.setBiasCorrected(false);
        boolean boolean68 = variance63.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean70 = variance63.equals((java.lang.Object) secondMoment69);
        long long71 = secondMoment69.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance73.increment((-1.0d));
        variance73.setBiasCorrected(false);
        variance73.increment((double) 100L);
        boolean boolean80 = variance73.isBiasCorrected();
        boolean boolean81 = variance73.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray90 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double91 = variance83.evaluate(doubleArray90);
        double double93 = variance73.evaluate(doubleArray90, (double) (byte) 10);
        secondMoment69.incrementAll(doubleArray90);
        double double96 = variance44.evaluate(doubleArray90, (double) 'a');
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray90, (int) (byte) 100, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2136.8055555555557d + "'", double30 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2564.166666666667d + "'", double31 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2310.1428571428573d + "'", double33 == 2310.1428571428573d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 2136.8055555555557d + "'", double91 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 2136.8055555555557d + "'", double93 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 2564.1666666666665d + "'", double96 == 2564.1666666666665d);
    }

    @Test
    public void test02387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02387");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        double double4 = variance1.getResult();
        variance1.setBiasCorrected(true);
        long long7 = variance1.getN();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        long long11 = secondMoment9.getN();
        secondMoment9.clear();
        double double13 = secondMoment9.getResult();
        secondMoment9.increment((double) (short) 0);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean21 = variance19.equals((java.lang.Object) (short) 10);
        double double22 = variance19.getResult();
        variance19.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        double[] doubleArray34 = new double[] { 0L, (byte) 10 };
        double double35 = variance30.evaluate(doubleArray34);
        double double37 = variance27.evaluate(doubleArray34, (double) 10L);
        double double38 = variance25.evaluate(doubleArray34);
        double[] doubleArray42 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double43 = variance25.evaluate(doubleArray42);
        double double46 = variance19.evaluate(doubleArray42, 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        long long49 = secondMoment47.getN();
        secondMoment47.clear();
        secondMoment47.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment54);
        long long56 = secondMoment54.getN();
        secondMoment54.clear();
        double double58 = secondMoment54.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance60.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double66 = variance65.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double69 = variance68.getResult();
        double[] doubleArray72 = new double[] { 0L, (byte) 10 };
        double double73 = variance68.evaluate(doubleArray72);
        double double75 = variance65.evaluate(doubleArray72, (double) 10L);
        double double76 = variance63.evaluate(doubleArray72);
        double double77 = variance60.evaluate(doubleArray72);
        secondMoment54.incrementAll(doubleArray72, 1, (int) (byte) 0);
        double double83 = variance53.evaluate(doubleArray72, (int) (byte) 1, (int) (short) 1);
        double double84 = variance19.evaluate(doubleArray72);
        double double85 = variance17.evaluate(doubleArray72);
        // The following exception was thrown during execution in test generation
        try {
            double double88 = variance1.evaluate(doubleArray72, (int) '4', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2024039.120370371d + "'", double43 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
    }

    @Test
    public void test02388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02388");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        variance4.increment((double) (short) -1);
        boolean boolean8 = variance4.isBiasCorrected();
        variance4.increment(1641.0d);
        long long11 = variance4.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance13.increment((-1.0d));
        variance13.setBiasCorrected(false);
        boolean boolean18 = variance13.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean20 = variance13.equals((java.lang.Object) secondMoment19);
        variance13.increment((double) 100L);
        double double23 = variance13.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double25 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance27.increment((-1.0d));
        variance27.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        double[] doubleArray41 = new double[] { 0L, (byte) 10 };
        double double42 = variance37.evaluate(doubleArray41);
        double double44 = variance34.evaluate(doubleArray41, (double) 10L);
        double double45 = variance32.evaluate(doubleArray41);
        double double46 = variance27.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        double[] doubleArray52 = new double[] { 0L, (byte) 10 };
        double double53 = variance48.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray62 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double63 = variance55.evaluate(doubleArray62);
        double double64 = variance48.evaluate(doubleArray62);
        double double65 = variance27.evaluate(doubleArray62);
        double double66 = secondMoment24.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance68.increment((-1.0d));
        variance68.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double79 = variance78.getResult();
        double[] doubleArray82 = new double[] { 0L, (byte) 10 };
        double double83 = variance78.evaluate(doubleArray82);
        double double85 = variance75.evaluate(doubleArray82, (double) 10L);
        double double86 = variance73.evaluate(doubleArray82);
        double double87 = variance68.evaluate(doubleArray82);
        double double88 = secondMoment24.evaluate(doubleArray82);
        double double89 = variance13.evaluate(doubleArray82);
        variance4.incrementAll(doubleArray82);
        double double91 = variance2.evaluate(doubleArray82);
        boolean boolean92 = variance2.isBiasCorrected();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2L + "'", long11 == 2L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2550.25d + "'", double23 == 2550.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2136.8055555555557d + "'", double63 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2564.166666666667d + "'", double64 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2564.166666666667d + "'", double65 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 12820.833333333334d + "'", double66 == 12820.833333333334d);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 25.0d + "'", double89 == 25.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test02389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02389");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        double double5 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        double double22 = variance12.evaluate(doubleArray19, (double) 10L);
        double double23 = variance10.evaluate(doubleArray19);
        double double24 = variance7.evaluate(doubleArray19);
        secondMoment1.incrementAll(doubleArray19, 1, (int) (byte) 0);
        secondMoment1.clear();
        double double29 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double double31 = secondMoment1.getResult();
        long long32 = secondMoment1.getN();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test02390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02390");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double[] doubleArray8 = new double[] {};
        double double9 = secondMoment0.evaluate(doubleArray8);
        double double10 = secondMoment0.getResult();
        secondMoment0.clear();
        double double12 = secondMoment0.getResult();
        double[] doubleArray13 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double14 = secondMoment0.evaluate(doubleArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test02391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02391");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        boolean boolean8 = variance1.isBiasCorrected();
        variance1.clear();
        long long10 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        double double14 = secondMoment12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment12);
        secondMoment12.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        double[] doubleArray22 = new double[] { 0L, (byte) 10 };
        double double23 = variance18.evaluate(doubleArray22);
        secondMoment12.incrementAll(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean29 = variance27.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance31.increment((-1.0d));
        variance31.setBiasCorrected(false);
        boolean boolean36 = variance31.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean38 = variance31.equals((java.lang.Object) secondMoment37);
        double double39 = secondMoment37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        double[] doubleArray48 = new double[] { 0L, (byte) 10 };
        double double49 = variance44.evaluate(doubleArray48);
        double double51 = variance41.evaluate(doubleArray48, (double) 10L);
        double double54 = secondMoment37.evaluate(doubleArray48, (int) (short) 0, 1);
        double double55 = variance27.evaluate(doubleArray48);
        secondMoment12.incrementAll(doubleArray48);
        double double57 = variance1.evaluate(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance59.increment((-1.0d));
        variance59.setBiasCorrected(false);
        boolean boolean64 = variance59.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment65 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean66 = variance59.equals((java.lang.Object) secondMoment65);
        secondMoment65.increment((double) (short) 0);
        secondMoment65.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray79 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double80 = variance72.evaluate(doubleArray79);
        double double81 = secondMoment65.evaluate(doubleArray79);
        double double82 = variance1.evaluate(doubleArray79);
        variance1.clear();
        variance1.increment((double) 100.0f);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 25.0d + "'", double57 == 25.0d);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 2136.8055555555557d + "'", double80 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 12820.833333333334d + "'", double81 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 2136.8055555555557d + "'", double82 == 2136.8055555555557d);
    }

    @Test
    public void test02392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02392");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        boolean boolean3 = variance2.isBiasCorrected();
        boolean boolean4 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        long long7 = secondMoment5.getN();
        secondMoment5.clear();
        secondMoment5.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        long long12 = secondMoment5.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double17 = variance16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double20 = variance19.getResult();
        double[] doubleArray23 = new double[] { 0L, (byte) 10 };
        double double24 = variance19.evaluate(doubleArray23);
        double double26 = variance16.evaluate(doubleArray23, (double) 10L);
        double double27 = variance14.evaluate(doubleArray23);
        variance14.increment((double) 0.0f);
        boolean boolean30 = variance14.isBiasCorrected();
        long long31 = variance14.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance33.increment((-1.0d));
        variance33.setBiasCorrected(false);
        boolean boolean38 = variance33.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean40 = variance33.equals((java.lang.Object) secondMoment39);
        secondMoment39.increment((double) (short) 0);
        secondMoment39.increment((double) 1.0f);
        double double45 = secondMoment39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        boolean boolean48 = variance14.equals((java.lang.Object) variance47);
        double[] doubleArray49 = new double[] {};
        double double50 = variance47.evaluate(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance52.increment((-1.0d));
        variance52.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean60 = variance58.equals((java.lang.Object) (short) 10);
        boolean boolean61 = variance52.equals((java.lang.Object) variance58);
        long long62 = variance58.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean66 = variance64.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray75 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double76 = variance68.evaluate(doubleArray75);
        double double77 = variance64.evaluate(doubleArray75);
        double double78 = variance58.evaluate(doubleArray75);
        double double79 = variance47.evaluate(doubleArray75);
        double double80 = secondMoment5.evaluate(doubleArray75);
        // The following exception was thrown during execution in test generation
        try {
            double double84 = variance2.evaluate(doubleArray75, 1652.4444444444443d, (int) (byte) 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.5d + "'", double45 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2136.8055555555557d + "'", double76 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2564.166666666667d + "'", double77 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2564.166666666667d + "'", double78 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 2564.166666666667d + "'", double79 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 12820.833333333334d + "'", double80 == 12820.833333333334d);
    }

    @Test
    public void test02393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02393");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        boolean boolean3 = variance2.isBiasCorrected();
        double[] doubleArray4 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double7 = variance2.evaluate(doubleArray4, (int) (short) 10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test02394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02394");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        double[] doubleArray15 = new double[] { 0L, (byte) 10 };
        double double16 = variance11.evaluate(doubleArray15);
        double double18 = variance8.evaluate(doubleArray15, (double) 10L);
        double double19 = variance6.evaluate(doubleArray15);
        double double20 = variance1.evaluate(doubleArray15);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        double[] doubleArray26 = new double[] { 0L, (byte) 10 };
        double double27 = variance22.evaluate(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray36 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double37 = variance29.evaluate(doubleArray36);
        double double38 = variance22.evaluate(doubleArray36);
        double double39 = variance1.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double44 = variance43.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double47 = variance46.getResult();
        double[] doubleArray50 = new double[] { 0L, (byte) 10 };
        double double51 = variance46.evaluate(doubleArray50);
        double double53 = variance43.evaluate(doubleArray50, (double) 10L);
        double double54 = variance41.evaluate(doubleArray50);
        variance1.incrementAll(doubleArray50, (int) (byte) 0, (int) (byte) 0);
        boolean boolean58 = variance1.isBiasCorrected();
        double double59 = variance1.getResult();
        long long60 = variance1.getN();
        variance1.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2136.8055555555557d + "'", double37 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2564.166666666667d + "'", double38 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2564.166666666667d + "'", double39 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
    }

    @Test
    public void test02395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02395");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance7.increment((-1.0d));
        variance7.setBiasCorrected(false);
        boolean boolean12 = variance7.isBiasCorrected();
        double[] doubleArray13 = new double[] {};
        double double14 = variance7.evaluate(doubleArray13);
        secondMoment1.incrementAll(doubleArray13);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double18 = secondMoment17.getResult();
        double double19 = secondMoment17.getResult();
        secondMoment17.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        double[] doubleArray38 = new double[] { 0L, (byte) 10 };
        double double39 = variance34.evaluate(doubleArray38);
        double double41 = variance31.evaluate(doubleArray38, (double) 10L);
        double double42 = variance29.evaluate(doubleArray38);
        double double43 = variance24.evaluate(doubleArray38);
        variance22.incrementAll(doubleArray38);
        variance22.increment((double) 100.0f);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        long long49 = secondMoment47.getN();
        secondMoment47.clear();
        secondMoment47.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance54.increment((-1.0d));
        variance54.setBiasCorrected(false);
        boolean boolean59 = variance54.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment60 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean61 = variance54.equals((java.lang.Object) secondMoment60);
        variance54.increment((double) 100L);
        variance54.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double70 = variance69.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double73 = variance72.getResult();
        double[] doubleArray76 = new double[] { 0L, (byte) 10 };
        double double77 = variance72.evaluate(doubleArray76);
        double double79 = variance69.evaluate(doubleArray76, (double) 10L);
        double double80 = variance67.evaluate(doubleArray76);
        double[] doubleArray84 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double85 = variance67.evaluate(doubleArray84);
        variance54.incrementAll(doubleArray84);
        double double87 = variance52.evaluate(doubleArray84);
        double double89 = variance22.evaluate(doubleArray84, (double) 3L);
        double double90 = secondMoment17.evaluate(doubleArray84);
        double double91 = secondMoment1.evaluate(doubleArray84);
        org.apache.commons.math.stat.descriptive.moment.Variance variance92 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double93 = variance92.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2024039.120370371d + "'", double85 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 2024039.120370371d + "'", double87 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 2024039.1203703708d + "'", double89 == 2024039.1203703708d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 4048078.240740742d + "'", double90 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 4048078.240740742d + "'", double91 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 2024039.120370371d + "'", double93 == 2024039.120370371d);
    }

    @Test
    public void test02396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02396");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance4.increment((-1.0d));
        variance4.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double22 = variance9.evaluate(doubleArray18);
        double double23 = variance4.evaluate(doubleArray18);
        variance2.incrementAll(doubleArray18);
        variance0.incrementAll(doubleArray18);
        variance0.clear();
        double double27 = variance0.getResult();
        variance0.increment((double) 100);
        variance0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance32.increment((-1.0d));
        variance32.setBiasCorrected(false);
        boolean boolean37 = variance32.isBiasCorrected();
        double[] doubleArray38 = new double[] {};
        double double39 = variance32.evaluate(doubleArray38);
        long long40 = variance32.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        variance42.increment((double) (short) -1);
        variance42.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment49);
        long long51 = secondMoment49.getN();
        secondMoment49.clear();
        double double53 = secondMoment49.getResult();
        secondMoment49.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment49);
        double[] doubleArray57 = new double[] {};
        double double58 = secondMoment49.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment49);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance61.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance65.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double71 = variance70.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double74 = variance73.getResult();
        double[] doubleArray77 = new double[] { 0L, (byte) 10 };
        double double78 = variance73.evaluate(doubleArray77);
        double double80 = variance70.evaluate(doubleArray77, (double) 10L);
        double double81 = variance68.evaluate(doubleArray77);
        double double82 = variance65.evaluate(doubleArray77);
        double double83 = variance61.evaluate(doubleArray77);
        double double84 = variance59.evaluate(doubleArray77);
        variance42.incrementAll(doubleArray77);
        double double87 = variance32.evaluate(doubleArray77, 26761.69230769231d);
        // The following exception was thrown during execution in test generation
        try {
            double double91 = variance0.evaluate(doubleArray77, 50.0009765625d, (int) ' ', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 25.00000011920929d + "'", double87 == 25.00000011920929d);
    }

    @Test
    public void test02397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02397");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        secondMoment8.incrementAll(doubleArray18);
        boolean boolean21 = variance1.equals((java.lang.Object) secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.setBiasCorrected(false);
        boolean boolean28 = variance23.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean30 = variance23.equals((java.lang.Object) secondMoment29);
        boolean boolean31 = secondMoment8.equals((java.lang.Object) boolean30);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance33.increment((-1.0d));
        variance33.setBiasCorrected(false);
        boolean boolean38 = variance33.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean40 = variance33.equals((java.lang.Object) secondMoment39);
        secondMoment39.increment((double) (short) 0);
        secondMoment39.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray53 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double54 = variance46.evaluate(doubleArray53);
        double double55 = secondMoment39.evaluate(doubleArray53);
        double double56 = secondMoment8.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance58.increment((-1.0d));
        variance58.setBiasCorrected(false);
        variance58.increment((double) 100L);
        boolean boolean65 = variance58.isBiasCorrected();
        variance58.clear();
        double double67 = variance58.getResult();
        boolean boolean68 = secondMoment8.equals((java.lang.Object) double67);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        variance69.clear();
        boolean boolean71 = variance69.isBiasCorrected();
        variance69.increment(120.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2136.8055555555557d + "'", double54 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 12820.833333333334d + "'", double55 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 12820.833333333334d + "'", double56 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test02398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02398");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        secondMoment1.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        long long8 = secondMoment6.getN();
        secondMoment6.clear();
        secondMoment6.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        variance12.clear();
        double double14 = variance12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance16.increment((-1.0d));
        variance16.setBiasCorrected(false);
        boolean boolean21 = variance16.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean23 = variance16.equals((java.lang.Object) secondMoment22);
        double double24 = secondMoment22.getResult();
        secondMoment22.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        double[] doubleArray34 = new double[] { 0L, (byte) 10 };
        double double35 = variance30.evaluate(doubleArray34);
        double double37 = variance27.evaluate(doubleArray34, (double) 10L);
        long long38 = variance27.getN();
        variance27.increment((double) 0L);
        double[] doubleArray42 = new double[] { 10.0d };
        variance27.incrementAll(doubleArray42);
        secondMoment22.incrementAll(doubleArray42);
        double double46 = variance12.evaluate(doubleArray42, (double) 100.0f);
        boolean boolean47 = secondMoment1.equals((java.lang.Object) 100.0f);
        secondMoment1.increment(Double.NaN);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance52.increment(2.0432086265156394E12d);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test02399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02399");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        double double15 = secondMoment7.getResult();
        secondMoment7.clear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.5d + "'", double15 == 0.5d);
    }

    @Test
    public void test02400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02400");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.setBiasCorrected(false);
        boolean boolean5 = variance2.isBiasCorrected();
        variance2.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double11 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        long long13 = variance12.getN();
        variance12.increment((double) '#');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        double double20 = secondMoment18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment18);
        secondMoment18.increment(50.0d);
        secondMoment18.clear();
        double double25 = secondMoment18.getResult();
        double double26 = secondMoment18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment18);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double29 = secondMoment28.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance31.increment((-1.0d));
        variance31.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        double[] doubleArray45 = new double[] { 0L, (byte) 10 };
        double double46 = variance41.evaluate(doubleArray45);
        double double48 = variance38.evaluate(doubleArray45, (double) 10L);
        double double49 = variance36.evaluate(doubleArray45);
        double double50 = variance31.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double53 = variance52.getResult();
        double[] doubleArray56 = new double[] { 0L, (byte) 10 };
        double double57 = variance52.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray66 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double67 = variance59.evaluate(doubleArray66);
        double double68 = variance52.evaluate(doubleArray66);
        double double69 = variance31.evaluate(doubleArray66);
        double double70 = secondMoment28.evaluate(doubleArray66);
        double double71 = secondMoment18.evaluate(doubleArray66);
        variance12.incrementAll(doubleArray66, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double77 = variance2.evaluate(doubleArray66, (int) 'a', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2136.8055555555557d + "'", double67 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 2564.166666666667d + "'", double68 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2564.166666666667d + "'", double69 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 12820.833333333334d + "'", double70 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 12820.833333333334d + "'", double71 == 12820.833333333334d);
    }

    @Test
    public void test02401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02401");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        double[] doubleArray15 = new double[] { 0L, (byte) 10 };
        double double16 = variance11.evaluate(doubleArray15);
        double double18 = variance8.evaluate(doubleArray15, (double) 10L);
        double double19 = variance6.evaluate(doubleArray15);
        double double20 = variance1.evaluate(doubleArray15);
        boolean boolean21 = variance1.isBiasCorrected();
        variance1.clear();
        variance1.increment((double) 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test02402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02402");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.clear();
        variance1.increment((double) (short) -1);
        boolean boolean5 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        secondMoment8.incrementAll(doubleArray18);
        long long21 = secondMoment8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double25 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance27.increment((-1.0d));
        variance27.setBiasCorrected(false);
        boolean boolean32 = variance27.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean34 = variance27.equals((java.lang.Object) secondMoment33);
        double double35 = secondMoment33.getResult();
        secondMoment33.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment33);
        secondMoment33.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance41.increment((-1.0d));
        variance41.setBiasCorrected(false);
        boolean boolean46 = variance41.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean48 = variance41.equals((java.lang.Object) secondMoment47);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double54 = variance53.getResult();
        double[] doubleArray57 = new double[] { 0L, (byte) 10 };
        double double58 = variance53.evaluate(doubleArray57);
        double double60 = variance50.evaluate(doubleArray57, (double) 10L);
        double double64 = variance41.evaluate(doubleArray57, (double) (short) 0, 0, (int) (short) 0);
        double double67 = secondMoment33.evaluate(doubleArray57, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment68 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment68);
        long long70 = secondMoment68.getN();
        secondMoment68.clear();
        secondMoment68.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment68);
        variance74.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean80 = variance78.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance82 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray89 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double90 = variance82.evaluate(doubleArray89);
        double double91 = variance78.evaluate(doubleArray89);
        double double93 = variance74.evaluate(doubleArray89, (double) 1.0f);
        double double94 = secondMoment33.evaluate(doubleArray89);
        double double95 = secondMoment24.evaluate(doubleArray89);
        variance23.incrementAll(doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            double double99 = variance1.evaluate(doubleArray89, 100, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2L + "'", long21 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 2136.8055555555557d + "'", double90 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 2564.166666666667d + "'", double91 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 2136.805555555555d + "'", double93 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 12820.833333333334d + "'", double94 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 12820.833333333334d + "'", double95 == 12820.833333333334d);
    }

    @Test
    public void test02403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02403");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        long long4 = secondMoment2.getN();
        secondMoment2.clear();
        secondMoment2.increment(10.0d);
        double double8 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        long long13 = secondMoment11.getN();
        secondMoment11.clear();
        double double15 = secondMoment11.getResult();
        secondMoment11.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        secondMoment11.increment((double) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double22 = secondMoment21.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        double[] doubleArray38 = new double[] { 0L, (byte) 10 };
        double double39 = variance34.evaluate(doubleArray38);
        double double41 = variance31.evaluate(doubleArray38, (double) 10L);
        double double42 = variance29.evaluate(doubleArray38);
        double double43 = variance24.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        double[] doubleArray49 = new double[] { 0L, (byte) 10 };
        double double50 = variance45.evaluate(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray59 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double60 = variance52.evaluate(doubleArray59);
        double double61 = variance45.evaluate(doubleArray59);
        double double62 = variance24.evaluate(doubleArray59);
        double double63 = secondMoment21.evaluate(doubleArray59);
        double double64 = secondMoment11.evaluate(doubleArray59);
        double double65 = variance10.evaluate(doubleArray59);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2136.8055555555557d + "'", double60 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2564.166666666667d + "'", double61 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2564.166666666667d + "'", double62 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 12820.833333333334d + "'", double63 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 12820.833333333334d + "'", double64 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2136.8055555555557d + "'", double65 == 2136.8055555555557d);
    }

    @Test
    public void test02404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02404");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        variance8.increment((double) 6L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        double[] doubleArray29 = new double[] { 0L, (byte) 10 };
        double double30 = variance25.evaluate(doubleArray29);
        double double32 = variance22.evaluate(doubleArray29, (double) 10L);
        double double33 = variance20.evaluate(doubleArray29);
        double double34 = variance15.evaluate(doubleArray29);
        variance13.incrementAll(doubleArray29);
        variance11.incrementAll(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        double[] doubleArray42 = new double[] { 0L, (byte) 10 };
        double double43 = variance38.evaluate(doubleArray42);
        boolean boolean44 = variance11.equals((java.lang.Object) double43);
        variance11.clear();
        variance11.increment(2024039.1204833984d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance49.increment((-1.0d));
        variance49.setBiasCorrected(false);
        variance49.increment((double) 100L);
        boolean boolean56 = variance49.isBiasCorrected();
        variance49.clear();
        double double58 = variance49.getResult();
        boolean boolean59 = variance49.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray68 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double69 = variance61.evaluate(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray78 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double79 = variance71.evaluate(doubleArray78);
        double double81 = variance61.evaluate(doubleArray78, (double) '#');
        variance49.incrementAll(doubleArray78);
        double double83 = variance11.evaluate(doubleArray78);
        // The following exception was thrown during execution in test generation
        try {
            variance8.incrementAll(doubleArray78, (int) 'a', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2136.8055555555557d + "'", double69 == 2136.8055555555557d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 2136.8055555555557d + "'", double79 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 2136.8055555555557d + "'", double81 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2564.166666666667d + "'", double83 == 2564.166666666667d);
    }

    @Test
    public void test02405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02405");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double[] doubleArray5 = new double[] { 0L, (byte) 10 };
        double double6 = variance1.evaluate(doubleArray5);
        variance1.clear();
        boolean boolean8 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        double double12 = secondMoment10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment10);
        secondMoment10.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double17 = variance16.getResult();
        double[] doubleArray20 = new double[] { 0L, (byte) 10 };
        double double21 = variance16.evaluate(doubleArray20);
        secondMoment10.incrementAll(doubleArray20);
        boolean boolean23 = variance1.equals((java.lang.Object) secondMoment10);
        secondMoment10.clear();
        double[] doubleArray25 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double26 = secondMoment10.evaluate(doubleArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.0d + "'", double6 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test02406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02406");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        double double5 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        long long7 = secondMoment2.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance11.increment((-1.0d));
        variance11.setBiasCorrected(false);
        boolean boolean16 = variance11.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean18 = variance11.equals((java.lang.Object) secondMoment17);
        secondMoment17.increment((double) (short) 0);
        secondMoment17.increment((double) 1.0f);
        double double23 = secondMoment17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment17);
        secondMoment17.increment(Double.NaN);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean31 = variance29.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray40 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double41 = variance33.evaluate(doubleArray40);
        double double42 = variance29.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double50 = variance49.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double53 = variance52.getResult();
        double[] doubleArray56 = new double[] { 0L, (byte) 10 };
        double double57 = variance52.evaluate(doubleArray56);
        double double59 = variance49.evaluate(doubleArray56, (double) 10L);
        double double60 = variance47.evaluate(doubleArray56);
        double double61 = variance44.evaluate(doubleArray56);
        double double62 = variance29.evaluate(doubleArray56);
        double double63 = variance27.evaluate(doubleArray56);
        // The following exception was thrown during execution in test generation
        try {
            double double66 = variance8.evaluate(doubleArray56, (int) (byte) 10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5d + "'", double23 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2136.8055555555557d + "'", double41 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2564.166666666667d + "'", double42 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 25.0d + "'", double63 == 25.0d);
    }

    @Test
    public void test02407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02407");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double4 = variance3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        double[] doubleArray10 = new double[] { 0L, (byte) 10 };
        double double11 = variance6.evaluate(doubleArray10);
        double double13 = variance3.evaluate(doubleArray10, (double) 10L);
        long long14 = variance3.getN();
        boolean boolean15 = secondMoment1.equals((java.lang.Object) long14);
        secondMoment1.increment(50.0d);
        double double18 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.increment((double) '4');
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test02408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02408");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        double[] doubleArray15 = new double[] { 0L, (byte) 10 };
        double double16 = variance11.evaluate(doubleArray15);
        double double18 = variance8.evaluate(doubleArray15, (double) 10L);
        double double19 = variance6.evaluate(doubleArray15);
        double double20 = variance1.evaluate(doubleArray15);
        boolean boolean21 = variance1.isBiasCorrected();
        double double22 = variance1.getResult();
        boolean boolean23 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean27 = variance25.equals((java.lang.Object) (short) 10);
        double double28 = variance25.getResult();
        variance25.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment30);
        long long32 = secondMoment30.getN();
        secondMoment30.clear();
        double double34 = secondMoment30.getResult();
        secondMoment30.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment30);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance39.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        double[] doubleArray51 = new double[] { 0L, (byte) 10 };
        double double52 = variance47.evaluate(doubleArray51);
        double double54 = variance44.evaluate(doubleArray51, (double) 10L);
        double double55 = variance42.evaluate(doubleArray51);
        double double56 = variance39.evaluate(doubleArray51);
        variance37.incrementAll(doubleArray51);
        variance37.clear();
        boolean boolean59 = variance37.isBiasCorrected();
        double double60 = variance37.getResult();
        double double61 = variance37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean65 = variance63.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double70 = variance69.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double73 = variance72.getResult();
        double[] doubleArray76 = new double[] { 0L, (byte) 10 };
        double double77 = variance72.evaluate(doubleArray76);
        double double79 = variance69.evaluate(doubleArray76, (double) 10L);
        double double80 = variance67.evaluate(doubleArray76);
        double[] doubleArray84 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double85 = variance67.evaluate(doubleArray84);
        double double87 = variance63.evaluate(doubleArray84, (double) (byte) 1);
        double double89 = variance37.evaluate(doubleArray84, 27.6875d);
        double double90 = variance25.evaluate(doubleArray84);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray84, (int) (byte) 1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2024039.120370371d + "'", double85 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 2024039.120370371d + "'", double87 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 2024039.1203703706d + "'", double89 == 2024039.1203703706d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 2024039.120370371d + "'", double90 == 2024039.120370371d);
    }

    @Test
    public void test02409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02409");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment(2136.8055555555557d);
        variance1.setBiasCorrected(false);
        variance1.increment((double) (short) -1);
        double double12 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        long long16 = secondMoment14.getN();
        secondMoment14.clear();
        secondMoment14.increment(10.0d);
        double double20 = secondMoment14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment14);
        double double22 = variance21.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean28 = variance26.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray37 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double38 = variance30.evaluate(doubleArray37);
        double double39 = variance26.evaluate(doubleArray37);
        variance26.setBiasCorrected(false);
        variance26.increment((double) (byte) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance45.increment((-1.0d));
        variance45.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean53 = variance51.equals((java.lang.Object) (short) 10);
        boolean boolean54 = variance45.equals((java.lang.Object) variance51);
        long long55 = variance51.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean59 = variance57.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray68 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double69 = variance61.evaluate(doubleArray68);
        double double70 = variance57.evaluate(doubleArray68);
        double double71 = variance51.evaluate(doubleArray68);
        double double73 = variance26.evaluate(doubleArray68, 24.5d);
        double double76 = variance24.evaluate(doubleArray68, 0, 1);
        double double77 = variance21.evaluate(doubleArray68);
        // The following exception was thrown during execution in test generation
        try {
            double double80 = variance1.evaluate(doubleArray68, (int) '#', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1015602.7985253773d + "'", double12 == 1015602.7985253773d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2136.8055555555557d + "'", double38 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2564.166666666667d + "'", double39 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2136.8055555555557d + "'", double69 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2564.166666666667d + "'", double70 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2564.166666666667d + "'", double71 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 2136.8055555555557d + "'", double73 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2136.8055555555557d + "'", double77 == 2136.8055555555557d);
    }

    @Test
    public void test02410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02410");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        double double6 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        double double20 = variance10.evaluate(doubleArray17, (double) 10L);
        double double21 = variance8.evaluate(doubleArray17);
        double[] doubleArray25 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double26 = variance8.evaluate(doubleArray25);
        double double27 = secondMoment0.evaluate(doubleArray25);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        long long31 = secondMoment29.getN();
        secondMoment29.increment((-1.0d));
        secondMoment29.increment(2668380.010204082d);
        secondMoment29.increment(2550.25d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance39.increment((-1.0d));
        variance39.setBiasCorrected(false);
        boolean boolean44 = variance39.isBiasCorrected();
        double[] doubleArray45 = new double[] {};
        double double46 = variance39.evaluate(doubleArray45);
        long long47 = variance39.getN();
        variance39.increment(2024039.120370371d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance51.increment((-1.0d));
        variance51.setBiasCorrected(false);
        boolean boolean56 = variance51.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment57 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean58 = variance51.equals((java.lang.Object) secondMoment57);
        double double59 = secondMoment57.getResult();
        secondMoment57.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment57);
        secondMoment57.increment((double) 10.0f);
        secondMoment57.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment57);
        java.lang.Object obj66 = null;
        boolean boolean67 = variance65.equals(obj66);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment68 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double69 = secondMoment68.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment70 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment70);
        long long72 = secondMoment70.getN();
        secondMoment70.clear();
        secondMoment70.clear();
        secondMoment70.increment((double) (byte) 100);
        long long77 = secondMoment70.getN();
        double[] doubleArray79 = new double[] { 2024039.1203703713d };
        double double80 = secondMoment70.evaluate(doubleArray79);
        secondMoment68.incrementAll(doubleArray79);
        variance65.incrementAll(doubleArray79);
        variance39.incrementAll(doubleArray79);
        secondMoment29.incrementAll(doubleArray79);
        // The following exception was thrown during execution in test generation
        try {
            double double87 = secondMoment0.evaluate(doubleArray79, 10, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2024039.120370371d + "'", double26 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 4048078.240740742d + "'", double27 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
    }

    @Test
    public void test02411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02411");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance5.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        double double20 = variance10.evaluate(doubleArray17, (double) 10L);
        double double21 = variance8.evaluate(doubleArray17);
        double double22 = variance5.evaluate(doubleArray17);
        double double23 = variance1.evaluate(doubleArray17);
        long long24 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance26.increment((-1.0d));
        boolean boolean29 = variance26.isBiasCorrected();
        double double30 = variance26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance32.increment((-1.0d));
        boolean boolean35 = variance32.isBiasCorrected();
        double double36 = variance32.getResult();
        variance32.clear();
        boolean boolean38 = variance32.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        variance40.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance45.increment((-1.0d));
        variance45.setBiasCorrected(false);
        boolean boolean50 = variance45.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean52 = variance45.equals((java.lang.Object) secondMoment51);
        double double53 = secondMoment51.getResult();
        secondMoment51.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment51);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment57 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment57);
        double double59 = secondMoment57.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment57);
        secondMoment57.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance63.increment((-1.0d));
        variance63.setBiasCorrected(false);
        boolean boolean68 = variance63.isBiasCorrected();
        double[] doubleArray69 = new double[] {};
        double double70 = variance63.evaluate(doubleArray69);
        secondMoment57.incrementAll(doubleArray69);
        double double72 = variance55.evaluate(doubleArray69);
        double double73 = variance40.evaluate(doubleArray69);
        double double74 = variance32.evaluate(doubleArray69);
        double double75 = variance26.evaluate(doubleArray69);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray69, (int) (byte) 1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double75));
    }

    @Test
    public void test02412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02412");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double22 = variance14.evaluate(doubleArray21);
        double double23 = secondMoment7.evaluate(doubleArray21);
        secondMoment7.increment((double) 8L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        java.lang.Class<?> wildcardClass29 = secondMoment7.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2136.8055555555557d + "'", double22 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 12820.833333333334d + "'", double23 == 12820.833333333334d);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test02413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02413");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double2 = secondMoment0.getResult();
        boolean boolean4 = secondMoment0.equals((java.lang.Object) 1.0d);
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long7 = secondMoment0.getN();
        secondMoment0.increment(2136.805555555504d);
        double double10 = secondMoment0.getResult();
        double double11 = secondMoment0.getResult();
        double double12 = secondMoment0.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test02414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02414");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        double double8 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment6);
        secondMoment6.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        double[] doubleArray16 = new double[] { 0L, (byte) 10 };
        double double17 = variance12.evaluate(doubleArray16);
        secondMoment6.incrementAll(doubleArray16);
        double double19 = variance4.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance22.increment((-1.0d));
        variance22.setBiasCorrected(false);
        boolean boolean27 = variance22.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean29 = variance22.equals((java.lang.Object) secondMoment28);
        secondMoment28.increment((double) (short) 0);
        secondMoment28.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray42 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double43 = variance35.evaluate(doubleArray42);
        double double44 = secondMoment28.evaluate(doubleArray42);
        secondMoment20.incrementAll(doubleArray42);
        variance4.incrementAll(doubleArray42);
        variance4.increment(0.5d);
        boolean boolean49 = variance4.isBiasCorrected();
        boolean boolean50 = variance4.isBiasCorrected();
        variance4.clear();
        long long52 = variance4.getN();
        variance4.increment(3.5113657447730967E12d);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 25.0d + "'", double19 == 25.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2136.8055555555557d + "'", double43 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 12820.833333333334d + "'", double44 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
    }

    @Test
    public void test02415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02415");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        variance1.increment((double) (short) -1);
        long long5 = variance1.getN();
        variance1.setBiasCorrected(false);
        double double8 = variance1.getResult();
        long long9 = variance1.getN();
        variance1.clear();
        variance1.clear();
        double[] doubleArray12 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double15 = variance1.evaluate(doubleArray12, (int) (byte) -1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
    }

    @Test
    public void test02416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02416");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double2 = secondMoment0.getResult();
        boolean boolean4 = secondMoment0.equals((java.lang.Object) 1.0d);
        double double5 = secondMoment0.getResult();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        long long9 = secondMoment7.getN();
        secondMoment7.clear();
        secondMoment7.clear();
        secondMoment7.increment((double) (byte) 100);
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        secondMoment7.increment(2136.805555555555d);
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.setBiasCorrected(false);
        variance20.increment((double) 100L);
        boolean boolean27 = variance20.isBiasCorrected();
        boolean boolean28 = variance20.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray37 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double38 = variance30.evaluate(doubleArray37);
        double double40 = variance20.evaluate(doubleArray37, (double) (byte) 10);
        secondMoment7.incrementAll(doubleArray37);
        double double42 = secondMoment0.evaluate(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment43);
        long long45 = secondMoment43.getN();
        secondMoment43.clear();
        double double47 = secondMoment43.getResult();
        secondMoment43.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment43);
        secondMoment43.increment((double) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double54 = secondMoment53.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance56.increment((-1.0d));
        variance56.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double64 = variance63.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double67 = variance66.getResult();
        double[] doubleArray70 = new double[] { 0L, (byte) 10 };
        double double71 = variance66.evaluate(doubleArray70);
        double double73 = variance63.evaluate(doubleArray70, (double) 10L);
        double double74 = variance61.evaluate(doubleArray70);
        double double75 = variance56.evaluate(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double78 = variance77.getResult();
        double[] doubleArray81 = new double[] { 0L, (byte) 10 };
        double double82 = variance77.evaluate(doubleArray81);
        org.apache.commons.math.stat.descriptive.moment.Variance variance84 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray91 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double92 = variance84.evaluate(doubleArray91);
        double double93 = variance77.evaluate(doubleArray91);
        double double94 = variance56.evaluate(doubleArray91);
        double double95 = secondMoment53.evaluate(doubleArray91);
        double double96 = secondMoment43.evaluate(doubleArray91);
        secondMoment0.incrementAll(doubleArray91);
        double double98 = secondMoment0.getResult();
        secondMoment0.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2136.8055555555557d + "'", double38 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2136.8055555555557d + "'", double40 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 12820.833333333334d + "'", double42 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 2136.8055555555557d + "'", double92 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 2564.166666666667d + "'", double93 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 2564.166666666667d + "'", double94 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 12820.833333333334d + "'", double95 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 12820.833333333334d + "'", double96 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 25641.666666666668d + "'", double98 == 25641.666666666668d);
    }

    @Test
    public void test02417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02417");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double4 = variance3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        double[] doubleArray10 = new double[] { 0L, (byte) 10 };
        double double11 = variance6.evaluate(doubleArray10);
        double double13 = variance3.evaluate(doubleArray10, (double) 10L);
        double double14 = variance1.evaluate(doubleArray10);
        variance1.increment(10.0d);
        long long17 = variance1.getN();
        long long18 = variance1.getN();
        long long19 = variance1.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
    }

    @Test
    public void test02418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02418");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        double double14 = secondMoment8.getResult();
        double double15 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        variance17.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        double[] doubleArray31 = new double[] { 0L, (byte) 10 };
        double double32 = variance27.evaluate(doubleArray31);
        double double34 = variance24.evaluate(doubleArray31, (double) 10L);
        double double35 = variance22.evaluate(doubleArray31);
        double double36 = variance17.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        double[] doubleArray42 = new double[] { 0L, (byte) 10 };
        double double43 = variance38.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray52 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double53 = variance45.evaluate(doubleArray52);
        double double54 = variance38.evaluate(doubleArray52);
        double double55 = variance17.evaluate(doubleArray52);
        double double56 = secondMoment8.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        secondMoment8.clear();
        secondMoment8.clear();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.5d + "'", double15 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2136.8055555555557d + "'", double53 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2564.166666666667d + "'", double54 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2564.166666666667d + "'", double55 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 12820.833333333334d + "'", double56 == 12820.833333333334d);
    }

    @Test
    public void test02419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02419");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean9 = variance7.equals((java.lang.Object) (short) 10);
        boolean boolean10 = variance1.equals((java.lang.Object) variance7);
        long long11 = variance7.getN();
        variance7.setBiasCorrected(false);
        double double14 = variance7.getResult();
        double double15 = variance7.getResult();
        variance7.increment(227.3d);
        variance7.clear();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test02420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02420");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        double[] doubleArray12 = new double[] { 0L, (byte) 10 };
        double double13 = variance8.evaluate(doubleArray12);
        secondMoment2.incrementAll(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.clear();
        long long17 = secondMoment2.getN();
        double double18 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        double double20 = secondMoment2.getResult();
        secondMoment2.clear();
        long long22 = secondMoment2.getN();
        secondMoment2.increment(2564.166666666686d);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test02421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02421");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        double double8 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment6);
        secondMoment6.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        double[] doubleArray16 = new double[] { 0L, (byte) 10 };
        double double17 = variance12.evaluate(doubleArray16);
        secondMoment6.incrementAll(doubleArray16);
        double double19 = variance4.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance22.increment((-1.0d));
        variance22.setBiasCorrected(false);
        boolean boolean27 = variance22.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean29 = variance22.equals((java.lang.Object) secondMoment28);
        secondMoment28.increment((double) (short) 0);
        secondMoment28.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray42 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double43 = variance35.evaluate(doubleArray42);
        double double44 = secondMoment28.evaluate(doubleArray42);
        secondMoment20.incrementAll(doubleArray42);
        variance4.incrementAll(doubleArray42);
        variance4.increment(50.0009765625d);
        variance4.setBiasCorrected(true);
        boolean boolean51 = variance4.isBiasCorrected();
        variance4.setBiasCorrected(false);
        variance4.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 25.0d + "'", double19 == 25.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2136.8055555555557d + "'", double43 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 12820.833333333334d + "'", double44 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test02422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02422");
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.setBiasCorrected(false);
        boolean boolean8 = variance3.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        double double12 = secondMoment10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment10);
        secondMoment10.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double17 = variance16.getResult();
        double[] doubleArray20 = new double[] { 0L, (byte) 10 };
        double double21 = variance16.evaluate(doubleArray20);
        secondMoment10.incrementAll(doubleArray20);
        boolean boolean23 = variance3.equals((java.lang.Object) secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance25.increment((-1.0d));
        variance25.setBiasCorrected(false);
        boolean boolean30 = variance25.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean32 = variance25.equals((java.lang.Object) secondMoment31);
        boolean boolean33 = secondMoment10.equals((java.lang.Object) boolean32);
        secondMoment10.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment10);
        double double37 = secondMoment10.getResult();
        secondMoment10.increment(49.999755859375d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
    }

    @Test
    public void test02423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02423");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double[] doubleArray6 = new double[] { 'a', (-1.0f), '4' };
        variance2.incrementAll(doubleArray6);
        variance2.clear();
        variance2.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[97.0, -1.0, 52.0]");
    }

    @Test
    public void test02424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02424");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double22 = variance14.evaluate(doubleArray21);
        double double23 = secondMoment7.evaluate(doubleArray21);
        long long24 = secondMoment7.getN();
        long long25 = secondMoment7.getN();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        long long28 = variance27.getN();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2136.8055555555557d + "'", double22 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 12820.833333333334d + "'", double23 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 6L + "'", long24 == 6L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test02425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02425");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        long long4 = secondMoment2.getN();
        secondMoment2.clear();
        double double6 = secondMoment2.getResult();
        secondMoment2.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double[] doubleArray10 = new double[] {};
        double double11 = secondMoment2.evaluate(doubleArray10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        variance13.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        variance17.setBiasCorrected(false);
        boolean boolean22 = variance17.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean24 = variance17.equals((java.lang.Object) secondMoment23);
        variance17.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean30 = variance28.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray39 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double40 = variance32.evaluate(doubleArray39);
        double double41 = variance28.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance43.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        double[] doubleArray55 = new double[] { 0L, (byte) 10 };
        double double56 = variance51.evaluate(doubleArray55);
        double double58 = variance48.evaluate(doubleArray55, (double) 10L);
        double double59 = variance46.evaluate(doubleArray55);
        double double60 = variance43.evaluate(doubleArray55);
        double double61 = variance28.evaluate(doubleArray55);
        double double63 = variance17.evaluate(doubleArray55, (double) 0L);
        // The following exception was thrown during execution in test generation
        try {
            double double66 = variance13.evaluate(doubleArray55, (int) (short) 1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2136.8055555555557d + "'", double40 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2564.166666666667d + "'", double41 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 25.0d + "'", double63 == 25.0d);
    }

    @Test
    public void test02426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02426");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        variance9.increment((double) (short) -1);
        long long13 = variance9.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        double[] doubleArray24 = new double[] { 0L, (byte) 10 };
        double double25 = variance20.evaluate(doubleArray24);
        double double27 = variance17.evaluate(doubleArray24, (double) 10L);
        double double28 = variance15.evaluate(doubleArray24);
        variance15.increment((double) 0.0f);
        boolean boolean31 = variance15.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        long long34 = secondMoment32.getN();
        secondMoment32.clear();
        secondMoment32.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        variance38.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean44 = variance42.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray53 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double54 = variance46.evaluate(doubleArray53);
        double double55 = variance42.evaluate(doubleArray53);
        double double57 = variance38.evaluate(doubleArray53, (double) 1.0f);
        double double60 = variance15.evaluate(doubleArray53, (int) (byte) 0, 1);
        double double61 = variance9.evaluate(doubleArray53);
        boolean boolean62 = variance1.equals((java.lang.Object) doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance64.increment((-1.0d));
        variance64.setBiasCorrected(false);
        variance64.increment((double) 100L);
        boolean boolean71 = variance64.isBiasCorrected();
        variance64.clear();
        variance64.clear();
        boolean boolean74 = variance1.equals((java.lang.Object) variance64);
        variance1.setBiasCorrected(true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2136.8055555555557d + "'", double54 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2564.166666666667d + "'", double55 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2136.805555555555d + "'", double57 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2564.166666666667d + "'", double61 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test02427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02427");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        double[] doubleArray8 = new double[] { 0L, (byte) 10 };
        double double9 = variance4.evaluate(doubleArray8);
        double double11 = variance1.evaluate(doubleArray8, (double) 10L);
        long long12 = variance1.getN();
        double double13 = variance1.getResult();
        double double14 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double16 = secondMoment15.getResult();
        long long17 = secondMoment15.getN();
        secondMoment15.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        long long22 = secondMoment20.getN();
        secondMoment20.clear();
        secondMoment20.clear();
        secondMoment20.increment((double) (byte) 100);
        secondMoment20.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment20);
        variance29.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.setBiasCorrected(false);
        boolean boolean39 = variance34.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean41 = variance34.equals((java.lang.Object) secondMoment40);
        double double42 = secondMoment40.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        double[] doubleArray51 = new double[] { 0L, (byte) 10 };
        double double52 = variance47.evaluate(doubleArray51);
        double double54 = variance44.evaluate(doubleArray51, (double) 10L);
        double double57 = secondMoment40.evaluate(doubleArray51, (int) (short) 0, 1);
        long long58 = secondMoment40.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment40);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double65 = variance64.getResult();
        double[] doubleArray68 = new double[] { 0L, (byte) 10 };
        double double69 = variance64.evaluate(doubleArray68);
        double double71 = variance61.evaluate(doubleArray68, (double) 10L);
        long long72 = variance61.getN();
        variance61.increment((double) 0L);
        double[] doubleArray76 = new double[] { 10.0d };
        variance61.incrementAll(doubleArray76);
        double double78 = variance59.evaluate(doubleArray76);
        variance29.incrementAll(doubleArray76);
        secondMoment15.incrementAll(doubleArray76);
        double double82 = variance1.evaluate(doubleArray76, (double) 7L);
        long long83 = variance1.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.0d + "'", double9 == 50.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
    }

    @Test
    public void test02428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02428");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        long long5 = secondMoment0.getN();
        secondMoment0.increment(2024039.120370371d);
        secondMoment0.increment(2550.25d);
        long long10 = secondMoment0.getN();
        double double11 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance14.increment((-1.0d));
        variance14.setBiasCorrected(false);
        boolean boolean19 = variance14.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean21 = variance14.equals((java.lang.Object) secondMoment20);
        secondMoment20.increment((double) (short) 0);
        secondMoment20.increment((double) 1.0f);
        double double26 = secondMoment20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment20);
        secondMoment20.increment(25.00000011920929d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance32.increment((-1.0d));
        variance32.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean39 = variance37.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double44 = variance43.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double47 = variance46.getResult();
        double[] doubleArray50 = new double[] { 0L, (byte) 10 };
        double double51 = variance46.evaluate(doubleArray50);
        double double53 = variance43.evaluate(doubleArray50, (double) 10L);
        double double54 = variance41.evaluate(doubleArray50);
        double[] doubleArray58 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double59 = variance41.evaluate(doubleArray58);
        double double61 = variance37.evaluate(doubleArray58, (double) (byte) 1);
        double double63 = variance32.evaluate(doubleArray58, 4048078.240740742d);
        double double64 = variance30.evaluate(doubleArray58);
        secondMoment0.incrementAll(doubleArray58);
        double double66 = secondMoment0.getResult();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2L + "'", long10 == 2L);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2.0432086265156394E12d + "'", double11 == 2.0432086265156394E12d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.5d + "'", double26 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2024039.120370371d + "'", double59 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2024039.120370371d + "'", double61 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2024039.12109375d + "'", double63 == 2024039.12109375d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2024039.120370371d + "'", double64 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 3.2730923038584746E12d + "'", double66 == 3.2730923038584746E12d);
    }

    @Test
    public void test02429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02429");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double2 = secondMoment0.getResult();
        secondMoment0.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        long long7 = secondMoment5.getN();
        secondMoment5.clear();
        secondMoment5.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        variance11.clear();
        double double13 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.setBiasCorrected(false);
        boolean boolean20 = variance15.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean22 = variance15.equals((java.lang.Object) secondMoment21);
        double double23 = secondMoment21.getResult();
        secondMoment21.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        double[] doubleArray33 = new double[] { 0L, (byte) 10 };
        double double34 = variance29.evaluate(doubleArray33);
        double double36 = variance26.evaluate(doubleArray33, (double) 10L);
        long long37 = variance26.getN();
        variance26.increment((double) 0L);
        double[] doubleArray41 = new double[] { 10.0d };
        variance26.incrementAll(doubleArray41);
        secondMoment21.incrementAll(doubleArray41);
        double double45 = variance11.evaluate(doubleArray41, (double) 100.0f);
        boolean boolean46 = secondMoment0.equals((java.lang.Object) 100.0f);
        secondMoment0.increment(Double.NaN);
        secondMoment0.clear();
        long long50 = secondMoment0.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
    }

    @Test
    public void test02430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02430");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        double double4 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray14 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double15 = variance7.evaluate(doubleArray14);
        variance7.clear();
        double double17 = variance7.getResult();
        java.lang.Class<?> wildcardClass18 = variance7.getClass();
        boolean boolean19 = variance1.equals((java.lang.Object) variance7);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 2136.8055555555557d + "'", double15 == 2136.8055555555557d);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test02431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02431");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        boolean boolean8 = variance1.isBiasCorrected();
        variance1.clear();
        double double10 = variance1.getResult();
        variance1.clear();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance14.increment((-1.0d));
        variance14.setBiasCorrected(false);
        boolean boolean19 = variance14.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean21 = variance14.equals((java.lang.Object) secondMoment20);
        secondMoment20.increment((double) (short) 0);
        secondMoment20.increment((double) 1.0f);
        double double26 = secondMoment20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        variance27.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment30);
        long long32 = secondMoment30.getN();
        secondMoment30.clear();
        secondMoment30.clear();
        secondMoment30.increment((double) (byte) 100);
        secondMoment30.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment30);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment30);
        variance39.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.increment((-1.0d));
        variance44.setBiasCorrected(false);
        boolean boolean49 = variance44.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean51 = variance44.equals((java.lang.Object) secondMoment50);
        double double52 = secondMoment50.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        double[] doubleArray61 = new double[] { 0L, (byte) 10 };
        double double62 = variance57.evaluate(doubleArray61);
        double double64 = variance54.evaluate(doubleArray61, (double) 10L);
        double double67 = secondMoment50.evaluate(doubleArray61, (int) (short) 0, 1);
        long long68 = secondMoment50.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment50);
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double72 = variance71.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double75 = variance74.getResult();
        double[] doubleArray78 = new double[] { 0L, (byte) 10 };
        double double79 = variance74.evaluate(doubleArray78);
        double double81 = variance71.evaluate(doubleArray78, (double) 10L);
        long long82 = variance71.getN();
        variance71.increment((double) 0L);
        double[] doubleArray86 = new double[] { 10.0d };
        variance71.incrementAll(doubleArray86);
        double double88 = variance69.evaluate(doubleArray86);
        variance39.incrementAll(doubleArray86);
        double double92 = variance27.evaluate(doubleArray86, (int) (byte) 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double96 = variance1.evaluate(doubleArray86, 2136.8059895833335d, (int) (short) 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.5d + "'", double26 == 0.5d);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
    }

    @Test
    public void test02432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02432");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        long long8 = secondMoment6.getN();
        secondMoment6.clear();
        double double10 = secondMoment6.getResult();
        secondMoment6.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        double[] doubleArray14 = new double[] {};
        double double15 = secondMoment6.evaluate(doubleArray14);
        secondMoment0.incrementAll(doubleArray14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double18 = variance17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.setBiasCorrected(false);
        boolean boolean25 = variance20.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean27 = variance20.equals((java.lang.Object) secondMoment26);
        double double28 = secondMoment26.getResult();
        secondMoment26.clear();
        secondMoment26.clear();
        secondMoment26.increment((double) 10.0f);
        long long33 = secondMoment26.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance36.increment((-1.0d));
        variance36.setBiasCorrected(false);
        boolean boolean41 = variance36.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean43 = variance36.equals((java.lang.Object) secondMoment42);
        secondMoment42.increment((double) (short) 0);
        secondMoment42.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray56 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double57 = variance49.evaluate(doubleArray56);
        double double58 = secondMoment42.evaluate(doubleArray56);
        secondMoment34.incrementAll(doubleArray56);
        double double60 = secondMoment26.evaluate(doubleArray56);
        // The following exception was thrown during execution in test generation
        try {
            double double63 = variance17.evaluate(doubleArray56, 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2136.8055555555557d + "'", double57 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 12820.833333333334d + "'", double58 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 12820.833333333334d + "'", double60 == 12820.833333333334d);
    }

    @Test
    public void test02433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02433");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        long long9 = secondMoment7.getN();
        secondMoment7.clear();
        double double11 = secondMoment7.getResult();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test02434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02434");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        double double14 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance16.increment((-1.0d));
        variance16.setBiasCorrected(false);
        boolean boolean21 = variance16.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean23 = variance16.equals((java.lang.Object) secondMoment22);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        double[] doubleArray32 = new double[] { 0L, (byte) 10 };
        double double33 = variance28.evaluate(doubleArray32);
        double double35 = variance25.evaluate(doubleArray32, (double) 10L);
        double double39 = variance16.evaluate(doubleArray32, (double) (short) 0, 0, (int) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance41.increment((-1.0d));
        variance41.setBiasCorrected(false);
        boolean boolean46 = variance41.isBiasCorrected();
        double[] doubleArray47 = new double[] {};
        double double48 = variance41.evaluate(doubleArray47);
        variance41.setBiasCorrected(false);
        variance41.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment53);
        double double55 = secondMoment53.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment53);
        secondMoment53.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double60 = variance59.getResult();
        double[] doubleArray63 = new double[] { 0L, (byte) 10 };
        double double64 = variance59.evaluate(doubleArray63);
        secondMoment53.incrementAll(doubleArray63);
        variance41.incrementAll(doubleArray63);
        double[] doubleArray67 = new double[] {};
        double double68 = variance41.evaluate(doubleArray67);
        boolean boolean69 = variance16.equals((java.lang.Object) doubleArray67);
        secondMoment7.incrementAll(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        double double72 = variance71.getResult();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.5d + "'", double72 == 0.5d);
    }

    @Test
    public void test02435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02435");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        double[] doubleArray11 = new double[] { 0L, (byte) 10 };
        double double12 = variance7.evaluate(doubleArray11);
        secondMoment1.incrementAll(doubleArray11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long15 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean19 = variance17.equals((java.lang.Object) (short) 10);
        double double20 = variance17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        double[] doubleArray29 = new double[] { 0L, (byte) 10 };
        double double30 = variance25.evaluate(doubleArray29);
        double double32 = variance22.evaluate(doubleArray29, (double) 10L);
        double double33 = variance17.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance35.increment((-1.0d));
        variance35.setBiasCorrected(false);
        boolean boolean40 = variance35.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean42 = variance35.equals((java.lang.Object) secondMoment41);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        double[] doubleArray51 = new double[] { 0L, (byte) 10 };
        double double52 = variance47.evaluate(doubleArray51);
        double double54 = variance44.evaluate(doubleArray51, (double) 10L);
        double double58 = variance35.evaluate(doubleArray51, (double) (short) 0, 0, (int) (short) 0);
        double double61 = variance17.evaluate(doubleArray51, 0, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance63.increment((-1.0d));
        variance63.setBiasCorrected(false);
        boolean boolean68 = variance63.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean70 = variance63.equals((java.lang.Object) secondMoment69);
        double double71 = secondMoment69.getResult();
        secondMoment69.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double75 = variance74.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double78 = variance77.getResult();
        double[] doubleArray81 = new double[] { 0L, (byte) 10 };
        double double82 = variance77.evaluate(doubleArray81);
        double double84 = variance74.evaluate(doubleArray81, (double) 10L);
        long long85 = variance74.getN();
        variance74.increment((double) 0L);
        double[] doubleArray89 = new double[] { 10.0d };
        variance74.incrementAll(doubleArray89);
        secondMoment69.incrementAll(doubleArray89);
        double double93 = variance17.evaluate(doubleArray89, 1.0d);
        secondMoment1.incrementAll(doubleArray89);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[10.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
    }

    @Test
    public void test02436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02436");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        secondMoment7.increment((double) 10.0f);
        secondMoment7.clear();
        secondMoment7.increment(0.5d);
        double double17 = secondMoment7.getResult();
        long long18 = secondMoment7.getN();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
    }

    @Test
    public void test02437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02437");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double4 = variance3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        double[] doubleArray10 = new double[] { 0L, (byte) 10 };
        double double11 = variance6.evaluate(doubleArray10);
        double double13 = variance3.evaluate(doubleArray10, (double) 10L);
        double double14 = variance1.evaluate(doubleArray10);
        variance1.increment(10.0d);
        double double17 = variance1.getResult();
        variance1.increment(1152.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        double double22 = secondMoment20.getResult();
        boolean boolean24 = secondMoment20.equals((java.lang.Object) 1.0d);
        double double25 = secondMoment20.getResult();
        secondMoment20.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment27);
        long long29 = secondMoment27.getN();
        secondMoment27.clear();
        secondMoment27.clear();
        secondMoment27.increment((double) (byte) 100);
        secondMoment27.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment27);
        secondMoment27.increment(2136.805555555555d);
        secondMoment27.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance40.increment((-1.0d));
        variance40.setBiasCorrected(false);
        variance40.increment((double) 100L);
        boolean boolean47 = variance40.isBiasCorrected();
        boolean boolean48 = variance40.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray57 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double58 = variance50.evaluate(doubleArray57);
        double double60 = variance40.evaluate(doubleArray57, (double) (byte) 10);
        secondMoment27.incrementAll(doubleArray57);
        double double62 = secondMoment20.evaluate(doubleArray57);
        double double65 = variance1.evaluate(doubleArray57, 1, 1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment66 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment66);
        long long68 = secondMoment66.getN();
        secondMoment66.clear();
        secondMoment66.clear();
        secondMoment66.increment((double) (byte) 100);
        secondMoment66.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment66);
        double double75 = variance74.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance77.increment((-1.0d));
        variance77.setBiasCorrected(false);
        boolean boolean82 = variance77.isBiasCorrected();
        double[] doubleArray83 = new double[] {};
        double double84 = variance77.evaluate(doubleArray83);
        variance74.incrementAll(doubleArray83);
        double double86 = variance1.evaluate(doubleArray83);
        variance1.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2136.8055555555557d + "'", double58 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2136.8055555555557d + "'", double60 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 12820.833333333334d + "'", double62 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue(Double.isNaN(double86));
    }

    @Test
    public void test02438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02438");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double2 = secondMoment0.getResult();
        secondMoment0.increment((double) 0.0f);
        secondMoment0.clear();
        long long6 = secondMoment0.getN();
        secondMoment0.increment((double) (-1.0f));
        secondMoment0.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test02439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02439");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double24 = secondMoment7.evaluate(doubleArray18, (int) (short) 0, 1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        variance25.increment((double) (short) 10);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    }

    @Test
    public void test02440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02440");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double double3 = variance1.getResult();
        double double4 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance6.increment((-1.0d));
        variance6.setBiasCorrected(false);
        boolean boolean11 = variance6.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean13 = variance6.equals((java.lang.Object) secondMoment12);
        double double14 = secondMoment12.getResult();
        secondMoment12.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        secondMoment12.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.setBiasCorrected(false);
        boolean boolean25 = variance20.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean27 = variance20.equals((java.lang.Object) secondMoment26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        double[] doubleArray36 = new double[] { 0L, (byte) 10 };
        double double37 = variance32.evaluate(doubleArray36);
        double double39 = variance29.evaluate(doubleArray36, (double) 10L);
        double double43 = variance20.evaluate(doubleArray36, (double) (short) 0, 0, (int) (short) 0);
        double double46 = secondMoment12.evaluate(doubleArray36, 0, 0);
        variance1.incrementAll(doubleArray36);
        variance1.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
    }

    @Test
    public void test02441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02441");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = secondMoment8.evaluate(doubleArray22);
        long long25 = secondMoment8.getN();
        long long26 = secondMoment8.getN();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        secondMoment8.clear();
        secondMoment8.clear();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 12820.833333333334d + "'", double24 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
    }

    @Test
    public void test02442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02442");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        double double5 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        double[] doubleArray13 = new double[] { 0L, (byte) 10 };
        double double14 = variance9.evaluate(doubleArray13);
        secondMoment3.incrementAll(doubleArray13);
        long long16 = secondMoment3.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment3);
        secondMoment3.clear();
        double double21 = secondMoment3.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2L + "'", long16 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
    }

    @Test
    public void test02443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02443");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray12 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double13 = variance5.evaluate(doubleArray12);
        double double14 = variance1.evaluate(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance16.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double22 = variance21.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        double[] doubleArray28 = new double[] { 0L, (byte) 10 };
        double double29 = variance24.evaluate(doubleArray28);
        double double31 = variance21.evaluate(doubleArray28, (double) 10L);
        double double32 = variance19.evaluate(doubleArray28);
        double double33 = variance16.evaluate(doubleArray28);
        double double34 = variance1.evaluate(doubleArray28);
        variance1.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance38.increment((-1.0d));
        variance38.setBiasCorrected(false);
        boolean boolean43 = variance38.isBiasCorrected();
        double[] doubleArray44 = new double[] {};
        double double45 = variance38.evaluate(doubleArray44);
        variance38.increment((double) 1.0f);
        variance38.increment((double) 10);
        variance38.increment(50.0009765625d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance53.increment((-1.0d));
        variance53.setBiasCorrected(false);
        variance53.increment((double) 100L);
        boolean boolean60 = variance53.isBiasCorrected();
        variance53.clear();
        variance53.clear();
        variance53.increment(2550.25d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double67 = variance66.getResult();
        double[] doubleArray70 = new double[] { 0L, (byte) 10 };
        double double71 = variance66.evaluate(doubleArray70);
        double double72 = variance66.getResult();
        variance66.increment(1349359.4135802474d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray83 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double84 = variance76.evaluate(doubleArray83);
        double double85 = variance66.evaluate(doubleArray83);
        double double86 = variance53.evaluate(doubleArray83);
        double double88 = variance38.evaluate(doubleArray83, 16460.85714285714d);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray83, 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 2136.8055555555557d + "'", double13 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2564.166666666667d + "'", double14 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2136.8055555555557d + "'", double84 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2564.166666666667d + "'", double85 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2136.8055555555557d + "'", double86 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 2136.8055555423102d + "'", double88 == 2136.8055555423102d);
    }

    @Test
    public void test02444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02444");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        double[] doubleArray14 = new double[] { 0L, (byte) 10 };
        double double15 = variance10.evaluate(doubleArray14);
        double double17 = variance7.evaluate(doubleArray14, (double) 10L);
        double double18 = variance5.evaluate(doubleArray14);
        double[] doubleArray22 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double23 = variance5.evaluate(doubleArray22);
        double double25 = variance1.evaluate(doubleArray22, (double) (byte) 1);
        variance1.clear();
        variance1.increment((double) 100.0f);
        variance1.clear();
        double double30 = variance1.getResult();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 50.0d + "'", double15 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2024039.120370371d + "'", double23 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2024039.120370371d + "'", double25 == 2024039.120370371d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test02445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02445");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double2 = secondMoment0.getResult();
        secondMoment0.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        long long7 = secondMoment5.getN();
        secondMoment5.clear();
        secondMoment5.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        variance11.clear();
        double double13 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.setBiasCorrected(false);
        boolean boolean20 = variance15.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean22 = variance15.equals((java.lang.Object) secondMoment21);
        double double23 = secondMoment21.getResult();
        secondMoment21.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        double[] doubleArray33 = new double[] { 0L, (byte) 10 };
        double double34 = variance29.evaluate(doubleArray33);
        double double36 = variance26.evaluate(doubleArray33, (double) 10L);
        long long37 = variance26.getN();
        variance26.increment((double) 0L);
        double[] doubleArray41 = new double[] { 10.0d };
        variance26.incrementAll(doubleArray41);
        secondMoment21.incrementAll(doubleArray41);
        double double45 = variance11.evaluate(doubleArray41, (double) 100.0f);
        boolean boolean46 = secondMoment0.equals((java.lang.Object) 100.0f);
        long long47 = secondMoment0.getN();
        long long48 = secondMoment0.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
    }

    @Test
    public void test02446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02446");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        boolean boolean4 = variance1.isBiasCorrected();
        double double5 = variance1.getResult();
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double11 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.setBiasCorrected(false);
        boolean boolean20 = variance15.isBiasCorrected();
        double[] doubleArray21 = new double[] {};
        double double22 = variance15.evaluate(doubleArray21);
        secondMoment9.incrementAll(doubleArray21);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        double[] doubleArray30 = new double[] { 0L, (byte) 10 };
        double double31 = variance26.evaluate(doubleArray30);
        secondMoment9.incrementAll(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment33);
        long long35 = secondMoment33.getN();
        secondMoment33.clear();
        secondMoment33.increment(10.0d);
        double double39 = secondMoment33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double44 = variance43.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double47 = variance46.getResult();
        double[] doubleArray50 = new double[] { 0L, (byte) 10 };
        double double51 = variance46.evaluate(doubleArray50);
        double double53 = variance43.evaluate(doubleArray50, (double) 10L);
        double double54 = variance41.evaluate(doubleArray50);
        double[] doubleArray58 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double59 = variance41.evaluate(doubleArray58);
        double double60 = secondMoment33.evaluate(doubleArray58);
        long long61 = secondMoment33.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment62);
        long long64 = secondMoment62.getN();
        secondMoment62.clear();
        double double66 = secondMoment62.getResult();
        secondMoment62.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment62);
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance71.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double77 = variance76.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double80 = variance79.getResult();
        double[] doubleArray83 = new double[] { 0L, (byte) 10 };
        double double84 = variance79.evaluate(doubleArray83);
        double double86 = variance76.evaluate(doubleArray83, (double) 10L);
        double double87 = variance74.evaluate(doubleArray83);
        double double88 = variance71.evaluate(doubleArray83);
        variance69.incrementAll(doubleArray83);
        secondMoment33.incrementAll(doubleArray83);
        secondMoment9.incrementAll(doubleArray83);
        double double92 = variance1.evaluate(doubleArray83);
        variance1.clear();
        double double94 = variance1.getResult();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2024039.120370371d + "'", double59 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 4048078.240740742d + "'", double60 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 3L + "'", long61 == 3L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 25.0d + "'", double92 == 25.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double94));
    }

    @Test
    public void test02447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02447");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double2 = secondMoment1.getResult();
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        double double8 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment6);
        secondMoment6.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance12.increment((-1.0d));
        variance12.setBiasCorrected(false);
        boolean boolean17 = variance12.isBiasCorrected();
        double[] doubleArray18 = new double[] {};
        double double19 = variance12.evaluate(doubleArray18);
        secondMoment6.incrementAll(doubleArray18);
        double double21 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment6);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment25);
        double double27 = secondMoment25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment25);
        secondMoment25.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        double[] doubleArray35 = new double[] { 0L, (byte) 10 };
        double double36 = variance31.evaluate(doubleArray35);
        secondMoment25.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment25);
        secondMoment25.clear();
        secondMoment25.increment(Double.NaN);
        secondMoment25.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment25);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean48 = variance46.equals((java.lang.Object) (short) 10);
        double double49 = variance46.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        double[] doubleArray58 = new double[] { 0L, (byte) 10 };
        double double59 = variance54.evaluate(doubleArray58);
        double double61 = variance51.evaluate(doubleArray58, (double) 10L);
        double double62 = variance46.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance64.increment((-1.0d));
        variance64.setBiasCorrected(false);
        boolean boolean69 = variance64.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment70 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean71 = variance64.equals((java.lang.Object) secondMoment70);
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double74 = variance73.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double77 = variance76.getResult();
        double[] doubleArray80 = new double[] { 0L, (byte) 10 };
        double double81 = variance76.evaluate(doubleArray80);
        double double83 = variance73.evaluate(doubleArray80, (double) 10L);
        double double87 = variance64.evaluate(doubleArray80, (double) (short) 0, 0, (int) (short) 0);
        double double90 = variance46.evaluate(doubleArray80, 0, (int) (byte) 1);
        secondMoment25.incrementAll(doubleArray80, (int) (short) 0, (int) (byte) 1);
        double double94 = variance22.evaluate(doubleArray80);
        double double95 = secondMoment1.evaluate(doubleArray80);
        secondMoment1.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance98 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double double99 = variance98.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 25.0d + "'", double94 == 25.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 50.0d + "'", double95 == 50.0d);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 30.333333333333332d + "'", double99 == 30.333333333333332d);
    }

    @Test
    public void test02448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02448");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        double double4 = variance1.getResult();
        variance1.setBiasCorrected(true);
        long long7 = variance1.getN();
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance11.increment((-1.0d));
        variance11.setBiasCorrected(false);
        boolean boolean16 = variance11.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean18 = variance11.equals((java.lang.Object) secondMoment17);
        secondMoment17.increment((double) (short) 0);
        secondMoment17.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray31 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double32 = variance24.evaluate(doubleArray31);
        double double33 = secondMoment17.evaluate(doubleArray31);
        long long34 = secondMoment17.getN();
        long long35 = secondMoment17.getN();
        long long36 = secondMoment17.getN();
        long long37 = secondMoment17.getN();
        long long38 = secondMoment17.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        variance40.increment((double) (short) -1);
        long long44 = variance40.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        double[] doubleArray55 = new double[] { 0L, (byte) 10 };
        double double56 = variance51.evaluate(doubleArray55);
        double double58 = variance48.evaluate(doubleArray55, (double) 10L);
        double double59 = variance46.evaluate(doubleArray55);
        variance46.increment((double) 0.0f);
        boolean boolean62 = variance46.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment63 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment63);
        long long65 = secondMoment63.getN();
        secondMoment63.clear();
        secondMoment63.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment63);
        variance69.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean75 = variance73.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray84 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double85 = variance77.evaluate(doubleArray84);
        double double86 = variance73.evaluate(doubleArray84);
        double double88 = variance69.evaluate(doubleArray84, (double) 1.0f);
        double double91 = variance46.evaluate(doubleArray84, (int) (byte) 0, 1);
        double double92 = variance40.evaluate(doubleArray84);
        double double93 = secondMoment17.evaluate(doubleArray84);
        variance1.incrementAll(doubleArray84);
        variance1.setBiasCorrected(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2136.8055555555557d + "'", double32 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 12820.833333333334d + "'", double33 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 6L + "'", long34 == 6L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 6L + "'", long35 == 6L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 6L + "'", long36 == 6L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 6L + "'", long37 == 6L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 6L + "'", long38 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2136.8055555555557d + "'", double85 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2564.166666666667d + "'", double86 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 2136.805555555555d + "'", double88 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 2564.166666666667d + "'", double92 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 12820.833333333334d + "'", double93 == 12820.833333333334d);
    }

    @Test
    public void test02449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02449");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.clear();
        secondMoment0.increment(2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        boolean boolean13 = variance12.isBiasCorrected();
        double double14 = variance12.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        double double18 = secondMoment16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment16);
        secondMoment16.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double23 = secondMoment22.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        long long26 = secondMoment24.getN();
        secondMoment24.clear();
        secondMoment24.clear();
        secondMoment24.increment((double) (byte) 100);
        long long31 = secondMoment24.getN();
        double[] doubleArray33 = new double[] { 2024039.1203703713d };
        double double34 = secondMoment24.evaluate(doubleArray33);
        secondMoment22.incrementAll(doubleArray33);
        double double36 = secondMoment16.evaluate(doubleArray33);
        double double37 = variance12.evaluate(doubleArray33);
        variance12.increment(2024039.1203703706d);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
    }

    @Test
    public void test02450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02450");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance11.increment((-1.0d));
        variance11.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double22 = variance21.getResult();
        double[] doubleArray25 = new double[] { 0L, (byte) 10 };
        double double26 = variance21.evaluate(doubleArray25);
        double double28 = variance18.evaluate(doubleArray25, (double) 10L);
        double double29 = variance16.evaluate(doubleArray25);
        double double30 = variance11.evaluate(doubleArray25);
        variance9.incrementAll(doubleArray25);
        variance7.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        double[] doubleArray38 = new double[] { 0L, (byte) 10 };
        double double39 = variance34.evaluate(doubleArray38);
        boolean boolean40 = variance7.equals((java.lang.Object) double39);
        variance7.clear();
        variance7.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance45.clear();
        long long47 = variance45.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment49);
        long long51 = secondMoment49.getN();
        secondMoment49.clear();
        secondMoment49.clear();
        double double54 = secondMoment49.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment49);
        variance55.increment((double) (byte) -1);
        long long58 = variance55.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment59);
        long long61 = secondMoment59.getN();
        secondMoment59.clear();
        secondMoment59.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment65 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment65);
        long long67 = secondMoment65.getN();
        secondMoment65.clear();
        double double69 = secondMoment65.getResult();
        secondMoment65.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment65);
        double[] doubleArray73 = new double[] {};
        double double74 = secondMoment65.evaluate(doubleArray73);
        secondMoment59.incrementAll(doubleArray73);
        double double76 = variance55.evaluate(doubleArray73);
        double double77 = variance45.evaluate(doubleArray73);
        double double79 = variance7.evaluate(doubleArray73, (double) 7L);
        // The following exception was thrown during execution in test generation
        try {
            double double82 = variance6.evaluate(doubleArray73, (int) (byte) 1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
    }

    @Test
    public void test02451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02451");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.clear();
        double double3 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        long long7 = secondMoment5.getN();
        secondMoment5.clear();
        double double9 = secondMoment5.getResult();
        secondMoment5.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        secondMoment5.increment((double) (byte) 0);
        long long15 = secondMoment5.getN();
        boolean boolean16 = variance1.equals((java.lang.Object) long15);
        variance1.setBiasCorrected(true);
        long long19 = variance1.getN();
        long long20 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double22 = secondMoment21.getResult();
        double double23 = secondMoment21.getResult();
        secondMoment21.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        long long26 = secondMoment21.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        long long30 = secondMoment28.getN();
        secondMoment28.clear();
        double double32 = secondMoment28.getResult();
        secondMoment28.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        double[] doubleArray36 = new double[] {};
        double double37 = secondMoment28.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment28);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance40.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double50 = variance49.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double53 = variance52.getResult();
        double[] doubleArray56 = new double[] { 0L, (byte) 10 };
        double double57 = variance52.evaluate(doubleArray56);
        double double59 = variance49.evaluate(doubleArray56, (double) 10L);
        double double60 = variance47.evaluate(doubleArray56);
        double double61 = variance44.evaluate(doubleArray56);
        double double62 = variance40.evaluate(doubleArray56);
        double double63 = variance38.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance65.increment((-1.0d));
        variance65.setBiasCorrected(false);
        boolean boolean70 = variance65.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment71 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean72 = variance65.equals((java.lang.Object) secondMoment71);
        double double73 = secondMoment71.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double79 = variance78.getResult();
        double[] doubleArray82 = new double[] { 0L, (byte) 10 };
        double double83 = variance78.evaluate(doubleArray82);
        double double85 = variance75.evaluate(doubleArray82, (double) 10L);
        double double88 = secondMoment71.evaluate(doubleArray82, (int) (short) 0, 1);
        double double89 = variance38.evaluate(doubleArray82);
        double double90 = secondMoment21.evaluate(doubleArray82);
        // The following exception was thrown during execution in test generation
        try {
            double double93 = variance1.evaluate(doubleArray82, (int) (byte) -1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
    }

    @Test
    public void test02452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02452");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double[] doubleArray6 = new double[] { 'a', (-1.0f), '4' };
        variance2.incrementAll(doubleArray6);
        variance2.clear();
        variance2.increment((double) 6L);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = variance2.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[97.0, -1.0, 52.0]");
    }

    @Test
    public void test02453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02453");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        long long4 = secondMoment2.getN();
        secondMoment2.clear();
        secondMoment2.increment(10.0d);
        double double8 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        double double11 = variance10.getResult();
        variance10.increment(2024039.120370371d);
        variance10.clear();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test02454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02454");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double9 = variance8.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double11 = secondMoment10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        variance12.increment(2564.166666666667d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double17 = variance16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double20 = variance19.getResult();
        double[] doubleArray23 = new double[] { 0L, (byte) 10 };
        double double24 = variance19.evaluate(doubleArray23);
        double double26 = variance16.evaluate(doubleArray23, (double) 10L);
        long long27 = variance16.getN();
        variance16.increment((double) 0L);
        double[] doubleArray31 = new double[] { 10.0d };
        variance16.incrementAll(doubleArray31);
        double double34 = variance12.evaluate(doubleArray31, (double) 2L);
        double double35 = variance8.evaluate(doubleArray31);
        java.lang.Class<?> wildcardClass36 = doubleArray31.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test02455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02455");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double2 = secondMoment0.getResult();
        boolean boolean4 = secondMoment0.equals((java.lang.Object) 1.0d);
        secondMoment0.increment((double) (-1L));
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance9.increment((-1.0d));
        variance9.setBiasCorrected(false);
        boolean boolean14 = variance9.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        double double18 = secondMoment16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment16);
        secondMoment16.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        double[] doubleArray26 = new double[] { 0L, (byte) 10 };
        double double27 = variance22.evaluate(doubleArray26);
        secondMoment16.incrementAll(doubleArray26);
        boolean boolean29 = variance9.equals((java.lang.Object) secondMoment16);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance31.increment((-1.0d));
        variance31.setBiasCorrected(false);
        boolean boolean36 = variance31.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean38 = variance31.equals((java.lang.Object) secondMoment37);
        boolean boolean39 = secondMoment16.equals((java.lang.Object) boolean38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment16);
        double double41 = variance40.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment42);
        long long44 = secondMoment42.getN();
        secondMoment42.clear();
        double double46 = secondMoment42.getResult();
        secondMoment42.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment42);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance51.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double57 = variance56.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double60 = variance59.getResult();
        double[] doubleArray63 = new double[] { 0L, (byte) 10 };
        double double64 = variance59.evaluate(doubleArray63);
        double double66 = variance56.evaluate(doubleArray63, (double) 10L);
        double double67 = variance54.evaluate(doubleArray63);
        double double68 = variance51.evaluate(doubleArray63);
        variance49.incrementAll(doubleArray63);
        double double70 = variance40.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance72.increment((-1.0d));
        variance72.setBiasCorrected(false);
        boolean boolean77 = variance72.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment78 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean79 = variance72.equals((java.lang.Object) secondMoment78);
        double double80 = secondMoment78.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance82 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double83 = variance82.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance85 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double86 = variance85.getResult();
        double[] doubleArray89 = new double[] { 0L, (byte) 10 };
        double double90 = variance85.evaluate(doubleArray89);
        double double92 = variance82.evaluate(doubleArray89, (double) 10L);
        double double95 = secondMoment78.evaluate(doubleArray89, (int) (short) 0, 1);
        double double96 = variance40.evaluate(doubleArray89);
        secondMoment0.incrementAll(doubleArray89);
        double double98 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance99 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 50.0d + "'", double96 == 50.0d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 74.0d + "'", double98 == 74.0d);
    }

    @Test
    public void test02456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02456");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        boolean boolean8 = variance1.isBiasCorrected();
        variance1.clear();
        double double10 = variance1.getResult();
        boolean boolean11 = variance1.isBiasCorrected();
        long long12 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        variance14.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        long long20 = variance18.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance22.increment((-1.0d));
        variance22.setBiasCorrected(false);
        variance22.increment((double) 100L);
        boolean boolean29 = variance22.isBiasCorrected();
        variance22.clear();
        long long31 = variance22.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment33);
        double double35 = secondMoment33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment33);
        secondMoment33.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        double[] doubleArray43 = new double[] { 0L, (byte) 10 };
        double double44 = variance39.evaluate(doubleArray43);
        secondMoment33.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment33);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean50 = variance48.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance52.increment((-1.0d));
        variance52.setBiasCorrected(false);
        boolean boolean57 = variance52.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean59 = variance52.equals((java.lang.Object) secondMoment58);
        double double60 = secondMoment58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double63 = variance62.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double66 = variance65.getResult();
        double[] doubleArray69 = new double[] { 0L, (byte) 10 };
        double double70 = variance65.evaluate(doubleArray69);
        double double72 = variance62.evaluate(doubleArray69, (double) 10L);
        double double75 = secondMoment58.evaluate(doubleArray69, (int) (short) 0, 1);
        double double76 = variance48.evaluate(doubleArray69);
        secondMoment33.incrementAll(doubleArray69);
        double double78 = variance22.evaluate(doubleArray69);
        double double80 = variance18.evaluate(doubleArray69, (double) (byte) 100);
        double double84 = variance14.evaluate(doubleArray69, (double) (short) 10, 0, (int) (byte) 1);
        variance1.incrementAll(doubleArray69, (int) (byte) 1, (int) (byte) 1);
        variance1.setBiasCorrected(false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 25.0d + "'", double78 == 25.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
    }

    @Test
    public void test02457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02457");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double2 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double4 = secondMoment1.getResult();
        secondMoment1.clear();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        secondMoment1.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test02458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02458");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.increment((double) (byte) 100);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment(2024039.12109375d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.increment(1.4545805531418566E13d);
        secondMoment1.increment(2136.8055555547276d);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test02459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02459");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        double[] doubleArray8 = new double[] { 0L, (byte) 10 };
        double double9 = variance4.evaluate(doubleArray8);
        double double11 = variance1.evaluate(doubleArray8, (double) 10L);
        long long12 = variance1.getN();
        variance1.setBiasCorrected(false);
        boolean boolean15 = variance1.isBiasCorrected();
        long long16 = variance1.getN();
        double double17 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        long long20 = secondMoment18.getN();
        secondMoment18.clear();
        secondMoment18.increment((double) '4');
        long long24 = secondMoment18.getN();
        long long25 = secondMoment18.getN();
        secondMoment18.clear();
        double double27 = secondMoment18.getResult();
        secondMoment18.clear();
        double double29 = secondMoment18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.setBiasCorrected(false);
        boolean boolean39 = variance34.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        double double43 = secondMoment41.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment41);
        secondMoment41.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        double[] doubleArray51 = new double[] { 0L, (byte) 10 };
        double double52 = variance47.evaluate(doubleArray51);
        secondMoment41.incrementAll(doubleArray51);
        boolean boolean54 = variance34.equals((java.lang.Object) secondMoment41);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance56.increment((-1.0d));
        variance56.setBiasCorrected(false);
        boolean boolean61 = variance56.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean63 = variance56.equals((java.lang.Object) secondMoment62);
        boolean boolean64 = secondMoment41.equals((java.lang.Object) boolean63);
        secondMoment41.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment41);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment41);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment68 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment68);
        long long70 = secondMoment68.getN();
        secondMoment68.clear();
        secondMoment68.increment(10.0d);
        double double74 = secondMoment68.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double79 = variance78.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double82 = variance81.getResult();
        double[] doubleArray85 = new double[] { 0L, (byte) 10 };
        double double86 = variance81.evaluate(doubleArray85);
        double double88 = variance78.evaluate(doubleArray85, (double) 10L);
        double double89 = variance76.evaluate(doubleArray85);
        double[] doubleArray93 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double94 = variance76.evaluate(doubleArray93);
        double double95 = secondMoment68.evaluate(doubleArray93);
        secondMoment41.incrementAll(doubleArray93);
        double double97 = secondMoment18.evaluate(doubleArray93);
        variance1.incrementAll(doubleArray93);
        java.lang.Class<?> wildcardClass99 = doubleArray93.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.0d + "'", double9 == 50.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 2024039.120370371d + "'", double94 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 4048078.240740742d + "'", double95 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 4048078.240740742d + "'", double97 == 4048078.240740742d);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test02460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02460");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        double double5 = secondMoment1.getResult();
        secondMoment1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double[] doubleArray9 = new double[] {};
        double double10 = secondMoment1.evaluate(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance13.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        double[] doubleArray29 = new double[] { 0L, (byte) 10 };
        double double30 = variance25.evaluate(doubleArray29);
        double double32 = variance22.evaluate(doubleArray29, (double) 10L);
        double double33 = variance20.evaluate(doubleArray29);
        double double34 = variance17.evaluate(doubleArray29);
        double double35 = variance13.evaluate(doubleArray29);
        double double36 = variance11.evaluate(doubleArray29);
        double double37 = variance11.getResult();
        variance11.increment(1352.0d);
        variance11.setBiasCorrected(false);
        variance11.clear();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
    }

    @Test
    public void test02461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02461");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double double7 = variance1.getResult();
        variance1.setBiasCorrected(true);
        variance1.increment(227.3d);
        double double12 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance14.increment((-1.0d));
        variance14.setBiasCorrected(false);
        boolean boolean19 = variance14.isBiasCorrected();
        double[] doubleArray20 = new double[] {};
        double double21 = variance14.evaluate(doubleArray20);
        variance14.increment((double) (-1.0f));
        double double24 = variance14.getResult();
        long long25 = variance14.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance27.increment((double) 10L);
        boolean boolean30 = variance27.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        long long34 = secondMoment32.getN();
        secondMoment32.clear();
        secondMoment32.clear();
        double double37 = secondMoment32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment32);
        variance38.increment((double) (byte) -1);
        long long41 = variance38.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment42);
        long long44 = secondMoment42.getN();
        secondMoment42.clear();
        secondMoment42.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment48);
        long long50 = secondMoment48.getN();
        secondMoment48.clear();
        double double52 = secondMoment48.getResult();
        secondMoment48.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment48);
        double[] doubleArray56 = new double[] {};
        double double57 = secondMoment48.evaluate(doubleArray56);
        secondMoment42.incrementAll(doubleArray56);
        double double59 = variance38.evaluate(doubleArray56);
        double double61 = variance27.evaluate(doubleArray56, 227.3d);
        variance14.incrementAll(doubleArray56);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray56, (int) (short) 100, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 26060.445000000003d + "'", double12 == 26060.445000000003d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2L + "'", long25 == 2L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
    }

    @Test
    public void test02462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02462");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        double[] doubleArray15 = new double[] { 0L, (byte) 10 };
        double double16 = variance11.evaluate(doubleArray15);
        double double18 = variance8.evaluate(doubleArray15, (double) 10L);
        double double19 = variance1.evaluate(doubleArray15);
        variance1.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray30 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double31 = variance23.evaluate(doubleArray30);
        double double32 = variance1.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.setBiasCorrected(false);
        boolean boolean39 = variance34.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean41 = variance34.equals((java.lang.Object) secondMoment40);
        double double42 = secondMoment40.getResult();
        secondMoment40.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment40);
        double double45 = secondMoment40.getResult();
        secondMoment40.increment(2310.1428571428573d);
        double double48 = secondMoment40.getResult();
        double double49 = secondMoment40.getResult();
        boolean boolean50 = variance1.equals((java.lang.Object) secondMoment40);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance52.increment((-1.0d));
        variance52.setBiasCorrected(false);
        boolean boolean57 = variance52.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean59 = variance52.equals((java.lang.Object) secondMoment58);
        variance52.increment((double) 100L);
        variance52.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double68 = variance67.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double71 = variance70.getResult();
        double[] doubleArray74 = new double[] { 0L, (byte) 10 };
        double double75 = variance70.evaluate(doubleArray74);
        double double77 = variance67.evaluate(doubleArray74, (double) 10L);
        double double78 = variance65.evaluate(doubleArray74);
        double[] doubleArray82 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double83 = variance65.evaluate(doubleArray82);
        variance52.incrementAll(doubleArray82);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray82, 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 25.0d + "'", double19 == 25.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2136.8055555555557d + "'", double31 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2136.8055555555557d + "'", double32 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2024039.120370371d + "'", double83 == 2024039.120370371d);
    }

    @Test
    public void test02463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02463");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        double[] doubleArray8 = new double[] { 0L, (byte) 10 };
        double double9 = variance4.evaluate(doubleArray8);
        double double11 = variance1.evaluate(doubleArray8, (double) 10L);
        long long12 = variance1.getN();
        variance1.increment((double) 0L);
        long long15 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        variance17.setBiasCorrected(false);
        boolean boolean22 = variance17.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean24 = variance17.equals((java.lang.Object) secondMoment23);
        double double25 = secondMoment23.getResult();
        secondMoment23.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        double double31 = secondMoment29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment29);
        secondMoment29.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance35.increment((-1.0d));
        variance35.setBiasCorrected(false);
        boolean boolean40 = variance35.isBiasCorrected();
        double[] doubleArray41 = new double[] {};
        double double42 = variance35.evaluate(doubleArray41);
        secondMoment29.incrementAll(doubleArray41);
        double double44 = variance27.evaluate(doubleArray41);
        double double48 = variance1.evaluate(doubleArray41, (double) 1.0f, (int) (short) 0, 0);
        variance1.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.0d + "'", double9 == 50.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
    }

    @Test
    public void test02464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02464");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double[] doubleArray5 = new double[] { 0L, (byte) 10 };
        double double6 = variance1.evaluate(doubleArray5);
        variance1.clear();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        long long11 = secondMoment9.getN();
        secondMoment9.clear();
        double double13 = secondMoment9.getResult();
        secondMoment9.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance18.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double24 = variance23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        double[] doubleArray30 = new double[] { 0L, (byte) 10 };
        double double31 = variance26.evaluate(doubleArray30);
        double double33 = variance23.evaluate(doubleArray30, (double) 10L);
        double double34 = variance21.evaluate(doubleArray30);
        double double35 = variance18.evaluate(doubleArray30);
        variance16.incrementAll(doubleArray30);
        variance16.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        double[] doubleArray46 = new double[] { 0L, (byte) 10 };
        double double47 = variance42.evaluate(doubleArray46);
        double double49 = variance39.evaluate(doubleArray46, (double) 10L);
        variance16.incrementAll(doubleArray46);
        // The following exception was thrown during execution in test generation
        try {
            double double53 = variance1.evaluate(doubleArray46, (int) (byte) 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.0d + "'", double6 == 50.0d);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
    }

    @Test
    public void test02465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02465");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        boolean boolean8 = variance1.isBiasCorrected();
        variance1.clear();
        long long10 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance12.increment((-1.0d));
        variance12.setBiasCorrected(false);
        variance12.increment((double) 100L);
        boolean boolean19 = variance12.isBiasCorrected();
        variance12.clear();
        long long21 = variance12.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        double double25 = secondMoment23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment23);
        secondMoment23.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        double[] doubleArray33 = new double[] { 0L, (byte) 10 };
        double double34 = variance29.evaluate(doubleArray33);
        secondMoment23.incrementAll(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean40 = variance38.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance42.increment((-1.0d));
        variance42.setBiasCorrected(false);
        boolean boolean47 = variance42.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean49 = variance42.equals((java.lang.Object) secondMoment48);
        double double50 = secondMoment48.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double53 = variance52.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double56 = variance55.getResult();
        double[] doubleArray59 = new double[] { 0L, (byte) 10 };
        double double60 = variance55.evaluate(doubleArray59);
        double double62 = variance52.evaluate(doubleArray59, (double) 10L);
        double double65 = secondMoment48.evaluate(doubleArray59, (int) (short) 0, 1);
        double double66 = variance38.evaluate(doubleArray59);
        secondMoment23.incrementAll(doubleArray59);
        double double68 = variance12.evaluate(doubleArray59);
        double double69 = variance1.evaluate(doubleArray59);
        variance1.clear();
        long long71 = variance1.getN();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 25.0d + "'", double68 == 25.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 25.0d + "'", double69 == 25.0d);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
    }

    @Test
    public void test02466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02466");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment(50.0009765625d);
        double double12 = secondMoment8.getResult();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance16.increment((-1.0d));
        variance16.setBiasCorrected(false);
        variance16.increment((double) 100L);
        boolean boolean23 = variance16.isBiasCorrected();
        variance16.clear();
        double double25 = variance16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance27.increment((-1.0d));
        variance27.setBiasCorrected(false);
        boolean boolean32 = variance27.isBiasCorrected();
        double[] doubleArray33 = new double[] {};
        double double34 = variance27.evaluate(doubleArray33);
        variance27.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double44 = variance43.getResult();
        double[] doubleArray47 = new double[] { 0L, (byte) 10 };
        double double48 = variance43.evaluate(doubleArray47);
        double double50 = variance40.evaluate(doubleArray47, (double) 10L);
        double double51 = variance38.evaluate(doubleArray47);
        variance27.incrementAll(doubleArray47);
        double double55 = variance16.evaluate(doubleArray47, 0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double58 = variance14.evaluate(doubleArray47, (-1), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
    }

    @Test
    public void test02467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02467");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        double double2 = secondMoment0.getResult();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance6.increment((-1.0d));
        variance6.setBiasCorrected(false);
        boolean boolean11 = variance6.isBiasCorrected();
        double double12 = variance6.getResult();
        variance6.setBiasCorrected(true);
        double double15 = variance6.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        long long18 = secondMoment16.getN();
        secondMoment16.clear();
        double double20 = secondMoment16.getResult();
        secondMoment16.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance25.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        double[] doubleArray37 = new double[] { 0L, (byte) 10 };
        double double38 = variance33.evaluate(doubleArray37);
        double double40 = variance30.evaluate(doubleArray37, (double) 10L);
        double double41 = variance28.evaluate(doubleArray37);
        double double42 = variance25.evaluate(doubleArray37);
        variance23.incrementAll(doubleArray37);
        variance23.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance46.increment((-1.0d));
        variance46.setBiasCorrected(false);
        boolean boolean51 = variance46.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double54 = variance53.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double57 = variance56.getResult();
        double[] doubleArray60 = new double[] { 0L, (byte) 10 };
        double double61 = variance56.evaluate(doubleArray60);
        double double63 = variance53.evaluate(doubleArray60, (double) 10L);
        double double64 = variance46.evaluate(doubleArray60);
        double double66 = variance23.evaluate(doubleArray60, 2310.1428571428573d);
        variance6.incrementAll(doubleArray60, (int) (byte) 1, (int) (short) 1);
        double double70 = secondMoment0.evaluate(doubleArray60);
        long long71 = secondMoment0.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 25.0d + "'", double64 == 25.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 2L + "'", long71 == 2L);
    }

    @Test
    public void test02468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02468");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        long long4 = secondMoment1.getN();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        secondMoment1.clear();
        double double8 = secondMoment1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test02469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02469");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        secondMoment2.increment((double) 2L);
        double double9 = secondMoment2.getResult();
        secondMoment2.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance18.increment((-1.0d));
        variance18.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean26 = variance24.equals((java.lang.Object) (short) 10);
        boolean boolean27 = variance18.equals((java.lang.Object) variance24);
        long long28 = variance24.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean32 = variance30.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray41 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double42 = variance34.evaluate(doubleArray41);
        double double43 = variance30.evaluate(doubleArray41);
        double double44 = variance24.evaluate(doubleArray41);
        double double46 = variance16.evaluate(doubleArray41, (double) 1.0f);
        variance16.setBiasCorrected(false);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2136.8055555555557d + "'", double42 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2564.166666666667d + "'", double43 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2564.166666666667d + "'", double44 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2564.1666666666665d + "'", double46 == 2564.1666666666665d);
    }

    @Test
    public void test02470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02470");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        long long7 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance8.increment((double) 7L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        long long13 = secondMoment11.getN();
        secondMoment11.clear();
        double double15 = secondMoment11.getResult();
        secondMoment11.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        variance20.increment((double) (short) -1);
        double double24 = variance20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        double[] doubleArray30 = new double[] { 0L, (byte) 10 };
        double double31 = variance26.evaluate(doubleArray30);
        double double32 = variance20.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.setBiasCorrected(false);
        boolean boolean39 = variance34.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean41 = variance34.equals((java.lang.Object) secondMoment40);
        double double42 = secondMoment40.getResult();
        secondMoment40.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment40);
        secondMoment40.increment((double) 10.0f);
        secondMoment40.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment40);
        java.lang.Object obj49 = null;
        boolean boolean50 = variance48.equals(obj49);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double52 = secondMoment51.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment53);
        long long55 = secondMoment53.getN();
        secondMoment53.clear();
        secondMoment53.clear();
        secondMoment53.increment((double) (byte) 100);
        long long60 = secondMoment53.getN();
        double[] doubleArray62 = new double[] { 2024039.1203703713d };
        double double63 = secondMoment53.evaluate(doubleArray62);
        secondMoment51.incrementAll(doubleArray62);
        variance48.incrementAll(doubleArray62);
        variance20.incrementAll(doubleArray62);
        double double68 = variance18.evaluate(doubleArray62, (double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment70 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment70);
        double double72 = secondMoment70.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment70);
        secondMoment70.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment76 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double77 = secondMoment76.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment78 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment78);
        long long80 = secondMoment78.getN();
        secondMoment78.clear();
        secondMoment78.clear();
        secondMoment78.increment((double) (byte) 100);
        long long85 = secondMoment78.getN();
        double[] doubleArray87 = new double[] { 2024039.1203703713d };
        double double88 = secondMoment78.evaluate(doubleArray87);
        secondMoment76.incrementAll(doubleArray87);
        double double90 = secondMoment70.evaluate(doubleArray87);
        double double92 = variance18.evaluate(doubleArray87, (double) 100);
        variance8.incrementAll(doubleArray87);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1L + "'", long85 == 1L);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
    }

    @Test
    public void test02471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02471");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        long long9 = secondMoment7.getN();
        secondMoment7.clear();
        secondMoment7.clear();
        secondMoment7.increment((double) (byte) 100);
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double22 = variance21.getResult();
        double[] doubleArray25 = new double[] { 0L, (byte) 10 };
        double double26 = variance21.evaluate(doubleArray25);
        double double28 = variance18.evaluate(doubleArray25, (double) 10L);
        double double29 = variance16.evaluate(doubleArray25);
        double[] doubleArray33 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double34 = variance16.evaluate(doubleArray33);
        double double35 = secondMoment7.evaluate(doubleArray33);
        double double38 = secondMoment1.evaluate(doubleArray33, 0, (int) (short) 1);
        secondMoment1.clear();
        secondMoment1.clear();
        double double41 = secondMoment1.getResult();
        secondMoment1.increment(0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2024039.120370371d + "'", double34 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 4048078.240740742d + "'", double35 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
    }

    @Test
    public void test02472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02472");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double[] doubleArray5 = new double[] { (byte) 100, 10 };
        double double8 = variance2.evaluate(doubleArray5, (int) (short) 1, 0);
        variance2.setBiasCorrected(false);
        variance2.increment((double) ' ');
        variance2.clear();
        variance2.increment((double) (-1.0f));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[100.0, 10.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test02473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02473");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        double[] doubleArray8 = new double[] { 0L, (byte) 10 };
        double double9 = variance4.evaluate(doubleArray8);
        double double11 = variance1.evaluate(doubleArray8, (double) 10L);
        long long12 = variance1.getN();
        double double13 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance16.increment((-1.0d));
        variance16.setBiasCorrected(false);
        boolean boolean21 = variance16.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean23 = variance16.equals((java.lang.Object) secondMoment22);
        double double24 = secondMoment22.getResult();
        secondMoment22.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        variance26.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        long long31 = secondMoment29.getN();
        secondMoment29.clear();
        secondMoment29.increment(10.0d);
        double double35 = secondMoment29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        double[] doubleArray46 = new double[] { 0L, (byte) 10 };
        double double47 = variance42.evaluate(doubleArray46);
        double double49 = variance39.evaluate(doubleArray46, (double) 10L);
        double double50 = variance37.evaluate(doubleArray46);
        double[] doubleArray54 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double55 = variance37.evaluate(doubleArray54);
        double double56 = secondMoment29.evaluate(doubleArray54);
        long long57 = secondMoment29.getN();
        long long58 = secondMoment29.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        secondMoment29.clear();
        double double61 = secondMoment29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance63.increment((-1.0d));
        variance63.setBiasCorrected(false);
        boolean boolean68 = variance63.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double71 = variance70.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double74 = variance73.getResult();
        double[] doubleArray77 = new double[] { 0L, (byte) 10 };
        double double78 = variance73.evaluate(doubleArray77);
        double double80 = variance70.evaluate(doubleArray77, (double) 10L);
        double double81 = variance63.evaluate(doubleArray77);
        variance63.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance85 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray92 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double93 = variance85.evaluate(doubleArray92);
        double double94 = variance63.evaluate(doubleArray92);
        double double95 = secondMoment29.evaluate(doubleArray92);
        double double96 = variance26.evaluate(doubleArray92);
        // The following exception was thrown during execution in test generation
        try {
            double double99 = variance1.evaluate(doubleArray92, (int) (byte) 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.0d + "'", double9 == 50.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2024039.120370371d + "'", double55 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 4048078.240740742d + "'", double56 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 3L + "'", long57 == 3L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 3L + "'", long58 == 3L);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 25.0d + "'", double81 == 25.0d);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 2136.8055555555557d + "'", double93 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 2136.8055555555557d + "'", double94 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 12820.833333333334d + "'", double95 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 2564.166666666667d + "'", double96 == 2564.166666666667d);
    }

    @Test
    public void test02474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02474");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        double[] doubleArray15 = new double[] { 0L, (byte) 10 };
        double double16 = variance11.evaluate(doubleArray15);
        double double18 = variance8.evaluate(doubleArray15, (double) 10L);
        double double19 = variance1.evaluate(doubleArray15);
        long long20 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance22.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        double[] doubleArray34 = new double[] { 0L, (byte) 10 };
        double double35 = variance30.evaluate(doubleArray34);
        double double37 = variance27.evaluate(doubleArray34, (double) 10L);
        double double38 = variance25.evaluate(doubleArray34);
        double double39 = variance22.evaluate(doubleArray34);
        double double40 = variance1.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        long long43 = secondMoment41.getN();
        secondMoment41.clear();
        secondMoment41.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        variance47.setBiasCorrected(false);
        double double50 = variance47.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment51);
        long long53 = secondMoment51.getN();
        secondMoment51.clear();
        secondMoment51.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment51);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance58.increment((-1.0d));
        variance58.setBiasCorrected(false);
        boolean boolean63 = variance58.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment64 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean65 = variance58.equals((java.lang.Object) secondMoment64);
        variance58.increment((double) 100L);
        variance58.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double74 = variance73.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double77 = variance76.getResult();
        double[] doubleArray80 = new double[] { 0L, (byte) 10 };
        double double81 = variance76.evaluate(doubleArray80);
        double double83 = variance73.evaluate(doubleArray80, (double) 10L);
        double double84 = variance71.evaluate(doubleArray80);
        double[] doubleArray88 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double89 = variance71.evaluate(doubleArray88);
        variance58.incrementAll(doubleArray88);
        double double91 = variance56.evaluate(doubleArray88);
        variance47.incrementAll(doubleArray88);
        double double93 = variance1.evaluate(doubleArray88);
        variance1.setBiasCorrected(true);
        variance1.increment(2564.1666666030883d);
        double double98 = variance1.getResult();
        double double99 = variance1.getResult();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 25.0d + "'", double19 == 25.0d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 25.0d + "'", double40 == 25.0d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 2024039.120370371d + "'", double89 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 2024039.120370371d + "'", double91 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 1349359.4135802474d + "'", double93 == 1349359.4135802474d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 0.0d + "'", double98 == 0.0d);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 0.0d + "'", double99 == 0.0d);
    }

    @Test
    public void test02475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02475");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean5 = variance3.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray14 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double15 = variance7.evaluate(doubleArray14);
        double double16 = variance3.evaluate(doubleArray14);
        variance3.setBiasCorrected(false);
        variance3.increment((double) (byte) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance22.increment((-1.0d));
        variance22.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean30 = variance28.equals((java.lang.Object) (short) 10);
        boolean boolean31 = variance22.equals((java.lang.Object) variance28);
        long long32 = variance28.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean36 = variance34.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double46 = variance38.evaluate(doubleArray45);
        double double47 = variance34.evaluate(doubleArray45);
        double double48 = variance28.evaluate(doubleArray45);
        double double50 = variance3.evaluate(doubleArray45, 24.5d);
        double double53 = variance1.evaluate(doubleArray45, 0, 1);
        java.lang.Class<?> wildcardClass54 = variance1.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 2136.8055555555557d + "'", double15 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 2564.166666666667d + "'", double16 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2136.8055555555557d + "'", double46 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2564.166666666667d + "'", double47 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2564.166666666667d + "'", double48 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2136.8055555555557d + "'", double50 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test02476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02476");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double11 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        secondMoment9.incrementAll(doubleArray19);
        boolean boolean22 = variance2.equals((java.lang.Object) secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean31 = variance24.equals((java.lang.Object) secondMoment30);
        boolean boolean32 = secondMoment9.equals((java.lang.Object) boolean31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        variance33.increment((double) (short) 0);
        double double36 = variance33.getResult();
        variance33.increment(1152.0d);
        long long39 = variance33.getN();
        java.lang.Class<?> wildcardClass40 = variance33.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 2L + "'", long39 == 2L);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test02477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02477");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        double double10 = secondMoment8.getResult();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        double double13 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double15 = secondMoment14.getResult();
        double double16 = secondMoment14.getResult();
        secondMoment14.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        long long19 = secondMoment14.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        long long23 = secondMoment21.getN();
        secondMoment21.clear();
        double double25 = secondMoment21.getResult();
        secondMoment21.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        double[] doubleArray29 = new double[] {};
        double double30 = secondMoment21.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment21);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance33.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance37.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        double[] doubleArray49 = new double[] { 0L, (byte) 10 };
        double double50 = variance45.evaluate(doubleArray49);
        double double52 = variance42.evaluate(doubleArray49, (double) 10L);
        double double53 = variance40.evaluate(doubleArray49);
        double double54 = variance37.evaluate(doubleArray49);
        double double55 = variance33.evaluate(doubleArray49);
        double double56 = variance31.evaluate(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance58.increment((-1.0d));
        variance58.setBiasCorrected(false);
        boolean boolean63 = variance58.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment64 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean65 = variance58.equals((java.lang.Object) secondMoment64);
        double double66 = secondMoment64.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double69 = variance68.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double72 = variance71.getResult();
        double[] doubleArray75 = new double[] { 0L, (byte) 10 };
        double double76 = variance71.evaluate(doubleArray75);
        double double78 = variance68.evaluate(doubleArray75, (double) 10L);
        double double81 = secondMoment64.evaluate(doubleArray75, (int) (short) 0, 1);
        double double82 = variance31.evaluate(doubleArray75);
        double double83 = secondMoment14.evaluate(doubleArray75);
        // The following exception was thrown during execution in test generation
        try {
            double double86 = secondMoment8.evaluate(doubleArray75, (int) (byte) 1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
    }

    @Test
    public void test02478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02478");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double4 = variance3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        double[] doubleArray10 = new double[] { 0L, (byte) 10 };
        double double11 = variance6.evaluate(doubleArray10);
        double double13 = variance3.evaluate(doubleArray10, (double) 10L);
        double double14 = variance1.evaluate(doubleArray10);
        double[] doubleArray18 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double19 = variance1.evaluate(doubleArray18);
        double double20 = variance1.getResult();
        double double21 = variance1.getResult();
        double double22 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance24.increment((double) 10L);
        variance24.increment((double) (short) 0);
        variance24.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment31);
        double double33 = secondMoment31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment31);
        secondMoment31.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance37.increment((-1.0d));
        variance37.setBiasCorrected(false);
        boolean boolean42 = variance37.isBiasCorrected();
        double[] doubleArray43 = new double[] {};
        double double44 = variance37.evaluate(doubleArray43);
        secondMoment31.incrementAll(doubleArray43);
        double double46 = variance24.evaluate(doubleArray43);
        // The following exception was thrown during execution in test generation
        try {
            double double50 = variance1.evaluate(doubleArray43, 26761.69230769231d, (int) 'a', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2024039.120370371d + "'", double19 == 2024039.120370371d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
    }

    @Test
    public void test02479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02479");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment(2136.8055555555557d);
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        long long12 = secondMoment10.getN();
        secondMoment10.clear();
        double double14 = secondMoment10.getResult();
        secondMoment10.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance19.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        double[] doubleArray31 = new double[] { 0L, (byte) 10 };
        double double32 = variance27.evaluate(doubleArray31);
        double double34 = variance24.evaluate(doubleArray31, (double) 10L);
        double double35 = variance22.evaluate(doubleArray31);
        double double36 = variance19.evaluate(doubleArray31);
        variance17.incrementAll(doubleArray31);
        double double39 = variance1.evaluate(doubleArray31, (double) 3L);
        double double40 = variance1.getResult();
        boolean boolean41 = variance1.isBiasCorrected();
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 25.0d + "'", double39 == 25.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1142553.1483410494d + "'", double40 == 1142553.1483410494d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test02480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02480");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        double[] doubleArray14 = new double[] { 0L, (byte) 10 };
        double double15 = variance10.evaluate(doubleArray14);
        double double17 = variance7.evaluate(doubleArray14, (double) 10L);
        double double18 = variance5.evaluate(doubleArray14);
        double[] doubleArray22 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double23 = variance5.evaluate(doubleArray22);
        double double25 = variance1.evaluate(doubleArray22, (double) (byte) 1);
        variance1.increment(10.0d);
        variance1.setBiasCorrected(true);
        double double30 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        double[] doubleArray40 = new double[] { 0L, (byte) 10 };
        double double41 = variance36.evaluate(doubleArray40);
        double double43 = variance33.evaluate(doubleArray40, (double) 10L);
        long long44 = variance33.getN();
        boolean boolean45 = secondMoment31.equals((java.lang.Object) long44);
        secondMoment31.increment(50.0d);
        double double48 = secondMoment31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance50.increment((-1.0d));
        variance50.setBiasCorrected(false);
        boolean boolean55 = variance50.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean57 = variance50.equals((java.lang.Object) secondMoment56);
        double double58 = secondMoment56.getResult();
        secondMoment56.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment56);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment62);
        double double64 = secondMoment62.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment62);
        secondMoment62.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance68.increment((-1.0d));
        variance68.setBiasCorrected(false);
        boolean boolean73 = variance68.isBiasCorrected();
        double[] doubleArray74 = new double[] {};
        double double75 = variance68.evaluate(doubleArray74);
        secondMoment62.incrementAll(doubleArray74);
        double double77 = variance60.evaluate(doubleArray74);
        double double78 = secondMoment31.evaluate(doubleArray74);
        double double81 = variance1.evaluate(doubleArray74, (int) (short) 0, 0);
        variance1.clear();
        variance1.increment(4671050.520833335d);
        variance1.increment(3.6415326583280566E12d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 50.0d + "'", double15 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2024039.120370371d + "'", double23 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2024039.120370371d + "'", double25 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
    }

    @Test
    public void test02481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02481");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.increment((double) (byte) 100);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        double double22 = variance12.evaluate(doubleArray19, (double) 10L);
        double double23 = variance10.evaluate(doubleArray19);
        long long24 = variance10.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment27);
        double double29 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment27);
        secondMoment27.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        double[] doubleArray37 = new double[] { 0L, (byte) 10 };
        double double38 = variance33.evaluate(doubleArray37);
        secondMoment27.incrementAll(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment27);
        secondMoment27.clear();
        secondMoment27.increment(Double.NaN);
        secondMoment27.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment27);
        long long47 = variance46.getN();
        boolean boolean48 = variance46.isBiasCorrected();
        long long49 = variance46.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance51.increment((-1.0d));
        variance51.setBiasCorrected(false);
        boolean boolean56 = variance51.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment57 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean58 = variance51.equals((java.lang.Object) secondMoment57);
        secondMoment57.increment((double) (short) 0);
        secondMoment57.increment((double) 1.0f);
        long long63 = secondMoment57.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment64 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment64);
        long long66 = secondMoment64.getN();
        secondMoment64.clear();
        double double68 = secondMoment64.getResult();
        secondMoment64.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment64);
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance73.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double79 = variance78.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double82 = variance81.getResult();
        double[] doubleArray85 = new double[] { 0L, (byte) 10 };
        double double86 = variance81.evaluate(doubleArray85);
        double double88 = variance78.evaluate(doubleArray85, (double) 10L);
        double double89 = variance76.evaluate(doubleArray85);
        double double90 = variance73.evaluate(doubleArray85);
        variance71.incrementAll(doubleArray85);
        double double92 = secondMoment57.evaluate(doubleArray85);
        variance46.incrementAll(doubleArray85);
        double double96 = variance10.evaluate(doubleArray85, 1, 1);
        double double97 = variance10.getResult();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 2L + "'", long47 == 2L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 2L + "'", long49 == 2L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 2L + "'", long63 == 2L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double97));
    }

    @Test
    public void test02482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02482");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment(227.3d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double22 = variance9.evaluate(doubleArray18);
        variance9.increment((double) 0.0f);
        boolean boolean25 = variance9.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        long long30 = secondMoment28.getN();
        secondMoment28.clear();
        secondMoment28.clear();
        secondMoment28.increment((double) (byte) 100);
        secondMoment28.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment28);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment28);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        double double43 = secondMoment41.getResult();
        boolean boolean45 = secondMoment41.equals((java.lang.Object) 1.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment41);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment48);
        long long50 = secondMoment48.getN();
        secondMoment48.clear();
        secondMoment48.clear();
        secondMoment48.increment((double) (byte) 100);
        secondMoment48.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment48);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment48);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double60 = variance59.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double63 = variance62.getResult();
        double[] doubleArray66 = new double[] { 0L, (byte) 10 };
        double double67 = variance62.evaluate(doubleArray66);
        double double69 = variance59.evaluate(doubleArray66, (double) 10L);
        double double70 = variance57.evaluate(doubleArray66);
        long long71 = variance57.getN();
        double[] doubleArray72 = new double[] {};
        variance57.incrementAll(doubleArray72);
        double double75 = variance46.evaluate(doubleArray72, (-1.0d));
        double double76 = variance39.evaluate(doubleArray72);
        double double77 = variance9.evaluate(doubleArray72);
        // The following exception was thrown during execution in test generation
        try {
            double double80 = secondMoment0.evaluate(doubleArray72, (int) (short) 100, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
    }

    @Test
    public void test02483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02483");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        double double5 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        secondMoment2.increment(1980.1224489795918d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        secondMoment2.increment(227.3d);
        secondMoment2.clear();
        secondMoment2.increment(1349359.4135802474d);
        secondMoment2.increment(2136.8055555559695d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance19.increment((-1.0d));
        variance19.setBiasCorrected(false);
        boolean boolean24 = variance19.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment26);
        double double28 = secondMoment26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment26);
        secondMoment26.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        double[] doubleArray36 = new double[] { 0L, (byte) 10 };
        double double37 = variance32.evaluate(doubleArray36);
        secondMoment26.incrementAll(doubleArray36);
        boolean boolean39 = variance19.equals((java.lang.Object) secondMoment26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance41.increment((-1.0d));
        variance41.setBiasCorrected(false);
        boolean boolean46 = variance41.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean48 = variance41.equals((java.lang.Object) secondMoment47);
        boolean boolean49 = secondMoment26.equals((java.lang.Object) boolean48);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment26);
        double double51 = variance50.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment52);
        long long54 = secondMoment52.getN();
        secondMoment52.clear();
        double double56 = secondMoment52.getResult();
        secondMoment52.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment52);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance61.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double67 = variance66.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double70 = variance69.getResult();
        double[] doubleArray73 = new double[] { 0L, (byte) 10 };
        double double74 = variance69.evaluate(doubleArray73);
        double double76 = variance66.evaluate(doubleArray73, (double) 10L);
        double double77 = variance64.evaluate(doubleArray73);
        double double78 = variance61.evaluate(doubleArray73);
        variance59.incrementAll(doubleArray73);
        double double80 = variance50.evaluate(doubleArray73);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment2.incrementAll(doubleArray73, (int) (short) -1, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
    }

    @Test
    public void test02484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02484");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment((double) 2L);
        double double8 = secondMoment1.getResult();
        double double9 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance11.increment((-1.0d));
        variance11.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean18 = variance16.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        double[] doubleArray29 = new double[] { 0L, (byte) 10 };
        double double30 = variance25.evaluate(doubleArray29);
        double double32 = variance22.evaluate(doubleArray29, (double) 10L);
        double double33 = variance20.evaluate(doubleArray29);
        double[] doubleArray37 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double38 = variance20.evaluate(doubleArray37);
        double double40 = variance16.evaluate(doubleArray37, (double) (byte) 1);
        double double42 = variance11.evaluate(doubleArray37, 4048078.240740742d);
        double double43 = secondMoment1.evaluate(doubleArray37);
        double double44 = secondMoment1.getResult();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance47.increment((-1.0d));
        long long50 = variance47.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance55.increment((-1.0d));
        variance55.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double63 = variance62.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double66 = variance65.getResult();
        double[] doubleArray69 = new double[] { 0L, (byte) 10 };
        double double70 = variance65.evaluate(doubleArray69);
        double double72 = variance62.evaluate(doubleArray69, (double) 10L);
        double double73 = variance60.evaluate(doubleArray69);
        double double74 = variance55.evaluate(doubleArray69);
        variance53.incrementAll(doubleArray69);
        variance51.incrementAll(doubleArray69);
        double double77 = variance47.evaluate(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment79 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment79);
        double double81 = secondMoment79.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance82 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment79);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment84 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance85 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment84);
        double double86 = secondMoment84.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance87 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment84);
        secondMoment84.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance90 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double91 = variance90.getResult();
        double[] doubleArray94 = new double[] { 0L, (byte) 10 };
        double double95 = variance90.evaluate(doubleArray94);
        secondMoment84.incrementAll(doubleArray94);
        double double97 = variance82.evaluate(doubleArray94);
        double double98 = variance47.evaluate(doubleArray94);
        double double99 = secondMoment1.evaluate(doubleArray94);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2024039.120370371d + "'", double38 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2024039.120370371d + "'", double40 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2024039.12109375d + "'", double42 == 2024039.12109375d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 4048078.240740742d + "'", double43 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 4048078.240740742d + "'", double44 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue(Double.isNaN(double91));
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 50.0d + "'", double95 == 50.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 25.0d + "'", double97 == 25.0d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 50.0d + "'", double98 == 50.0d);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 50.0d + "'", double99 == 50.0d);
    }

    @Test
    public void test02485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02485");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance4.increment((-1.0d));
        variance4.setBiasCorrected(false);
        boolean boolean9 = variance4.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean11 = variance4.equals((java.lang.Object) secondMoment10);
        double double12 = secondMoment10.getResult();
        secondMoment10.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        double double18 = secondMoment16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment16);
        secondMoment16.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance22.increment((-1.0d));
        variance22.setBiasCorrected(false);
        boolean boolean27 = variance22.isBiasCorrected();
        double[] doubleArray28 = new double[] {};
        double double29 = variance22.evaluate(doubleArray28);
        secondMoment16.incrementAll(doubleArray28);
        double double31 = variance14.evaluate(doubleArray28);
        // The following exception was thrown during execution in test generation
        try {
            double double35 = variance1.evaluate(doubleArray28, 1652.4444444444443d, 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
    }

    @Test
    public void test02486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02486");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double22 = variance14.evaluate(doubleArray21);
        double double23 = secondMoment7.evaluate(doubleArray21);
        long long24 = secondMoment7.getN();
        long long25 = secondMoment7.getN();
        long long26 = secondMoment7.getN();
        secondMoment7.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        variance29.clear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2136.8055555555557d + "'", double22 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 12820.833333333334d + "'", double23 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 6L + "'", long24 == 6L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
    }

    @Test
    public void test02487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02487");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        double[] doubleArray15 = new double[] { 0L, (byte) 10 };
        double double16 = variance11.evaluate(doubleArray15);
        double double18 = variance8.evaluate(doubleArray15, (double) 10L);
        double double19 = variance6.evaluate(doubleArray15);
        double double20 = variance1.evaluate(doubleArray15);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        double[] doubleArray26 = new double[] { 0L, (byte) 10 };
        double double27 = variance22.evaluate(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray36 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double37 = variance29.evaluate(doubleArray36);
        double double38 = variance22.evaluate(doubleArray36);
        double double39 = variance1.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double44 = variance43.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double47 = variance46.getResult();
        double[] doubleArray50 = new double[] { 0L, (byte) 10 };
        double double51 = variance46.evaluate(doubleArray50);
        double double53 = variance43.evaluate(doubleArray50, (double) 10L);
        double double54 = variance41.evaluate(doubleArray50);
        variance1.incrementAll(doubleArray50, (int) (byte) 0, (int) (byte) 0);
        boolean boolean58 = variance1.isBiasCorrected();
        double double59 = variance1.getResult();
        long long60 = variance1.getN();
        long long61 = variance1.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2136.8055555555557d + "'", double37 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2564.166666666667d + "'", double38 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2564.166666666667d + "'", double39 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
    }

    @Test
    public void test02488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02488");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double4 = variance3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        double[] doubleArray10 = new double[] { 0L, (byte) 10 };
        double double11 = variance6.evaluate(doubleArray10);
        double double13 = variance3.evaluate(doubleArray10, (double) 10L);
        double double14 = variance1.evaluate(doubleArray10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean18 = variance16.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        double[] doubleArray29 = new double[] { 0L, (byte) 10 };
        double double30 = variance25.evaluate(doubleArray29);
        double double32 = variance22.evaluate(doubleArray29, (double) 10L);
        double double33 = variance20.evaluate(doubleArray29);
        double[] doubleArray37 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double38 = variance20.evaluate(doubleArray37);
        double double40 = variance16.evaluate(doubleArray37, (double) (byte) 1);
        double double41 = variance1.evaluate(doubleArray37);
        variance1.clear();
        double double43 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        double[] doubleArray54 = new double[] { 0L, (byte) 10 };
        double double55 = variance50.evaluate(doubleArray54);
        double double57 = variance47.evaluate(doubleArray54, (double) 10L);
        double double58 = variance45.evaluate(doubleArray54);
        variance1.incrementAll(doubleArray54);
        variance1.increment(2564.1625d);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2024039.120370371d + "'", double38 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2024039.120370371d + "'", double40 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2024039.120370371d + "'", double41 == 2024039.120370371d);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
    }

    @Test
    public void test02489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02489");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray12 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double13 = variance5.evaluate(doubleArray12);
        double double14 = variance1.evaluate(doubleArray12);
        long long15 = variance1.getN();
        double double16 = variance1.getResult();
        variance1.increment(66.66666666666667d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 2136.8055555555557d + "'", double13 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2564.166666666667d + "'", double14 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test02490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02490");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double2 = secondMoment0.getResult();
        boolean boolean4 = secondMoment0.equals((java.lang.Object) 1.0d);
        double double5 = secondMoment0.getResult();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        long long9 = secondMoment7.getN();
        secondMoment7.clear();
        secondMoment7.clear();
        secondMoment7.increment((double) (byte) 100);
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        secondMoment7.increment(2136.805555555555d);
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.setBiasCorrected(false);
        variance20.increment((double) 100L);
        boolean boolean27 = variance20.isBiasCorrected();
        boolean boolean28 = variance20.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray37 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double38 = variance30.evaluate(doubleArray37);
        double double40 = variance20.evaluate(doubleArray37, (double) (byte) 10);
        secondMoment7.incrementAll(doubleArray37);
        double double42 = secondMoment0.evaluate(doubleArray37);
        secondMoment0.increment(4450278.058309039d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2136.8055555555557d + "'", double38 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2136.8055555555557d + "'", double40 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 12820.833333333334d + "'", double42 == 12820.833333333334d);
    }

    @Test
    public void test02491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02491");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        double double4 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        double[] doubleArray13 = new double[] { 0L, (byte) 10 };
        double double14 = variance9.evaluate(doubleArray13);
        double double16 = variance6.evaluate(doubleArray13, (double) 10L);
        double double17 = variance1.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean21 = variance19.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.setBiasCorrected(false);
        boolean boolean28 = variance23.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean30 = variance23.equals((java.lang.Object) secondMoment29);
        double double31 = secondMoment29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        double[] doubleArray40 = new double[] { 0L, (byte) 10 };
        double double41 = variance36.evaluate(doubleArray40);
        double double43 = variance33.evaluate(doubleArray40, (double) 10L);
        double double46 = secondMoment29.evaluate(doubleArray40, (int) (short) 0, 1);
        double double47 = variance19.evaluate(doubleArray40);
        double double50 = variance1.evaluate(doubleArray40, 0, 0);
        variance1.increment(4048078.240740742d);
        variance1.clear();
        variance1.increment((double) 2L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
    }

    @Test
    public void test02492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02492");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        long long9 = secondMoment7.getN();
        secondMoment7.clear();
        double double11 = secondMoment7.getResult();
        secondMoment7.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        double[] doubleArray15 = new double[] {};
        double double16 = secondMoment7.evaluate(doubleArray15);
        secondMoment1.incrementAll(doubleArray15);
        secondMoment1.increment((double) (-1L));
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        long long21 = secondMoment1.getN();
        secondMoment1.clear();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2L + "'", long21 == 2L);
    }

    @Test
    public void test02493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02493");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        secondMoment7.clear();
        secondMoment7.clear();
        secondMoment7.increment((double) 13L);
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        double[] doubleArray29 = new double[] { 0L, (byte) 10 };
        double double30 = variance25.evaluate(doubleArray29);
        double double32 = variance22.evaluate(doubleArray29, (double) 10L);
        double double33 = variance20.evaluate(doubleArray29);
        variance20.increment((double) 0.0f);
        boolean boolean36 = variance20.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        long long39 = secondMoment37.getN();
        secondMoment37.clear();
        secondMoment37.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        variance43.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean49 = variance47.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray58 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double59 = variance51.evaluate(doubleArray58);
        double double60 = variance47.evaluate(doubleArray58);
        double double62 = variance43.evaluate(doubleArray58, (double) 1.0f);
        double double65 = variance20.evaluate(doubleArray58, (int) (byte) 0, 1);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment7.incrementAll(doubleArray58, (int) (short) 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2136.8055555555557d + "'", double59 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2564.166666666667d + "'", double60 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2136.805555555555d + "'", double62 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
    }

    @Test
    public void test02494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02494");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        boolean boolean8 = variance1.isBiasCorrected();
        variance1.clear();
        long long10 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        double double14 = secondMoment12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment12);
        secondMoment12.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        double[] doubleArray22 = new double[] { 0L, (byte) 10 };
        double double23 = variance18.evaluate(doubleArray22);
        secondMoment12.incrementAll(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean29 = variance27.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance31.increment((-1.0d));
        variance31.setBiasCorrected(false);
        boolean boolean36 = variance31.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean38 = variance31.equals((java.lang.Object) secondMoment37);
        double double39 = secondMoment37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        double[] doubleArray48 = new double[] { 0L, (byte) 10 };
        double double49 = variance44.evaluate(doubleArray48);
        double double51 = variance41.evaluate(doubleArray48, (double) 10L);
        double double54 = secondMoment37.evaluate(doubleArray48, (int) (short) 0, 1);
        double double55 = variance27.evaluate(doubleArray48);
        secondMoment12.incrementAll(doubleArray48);
        double double57 = variance1.evaluate(doubleArray48);
        variance1.setBiasCorrected(false);
        double double60 = variance1.getResult();
        boolean boolean61 = variance1.isBiasCorrected();
        double double62 = variance1.getResult();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 25.0d + "'", double57 == 25.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
    }

    @Test
    public void test02495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02495");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        variance17.setBiasCorrected(false);
        boolean boolean22 = variance17.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean24 = variance17.equals((java.lang.Object) secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        double[] doubleArray33 = new double[] { 0L, (byte) 10 };
        double double34 = variance29.evaluate(doubleArray33);
        double double36 = variance26.evaluate(doubleArray33, (double) 10L);
        double double40 = variance17.evaluate(doubleArray33, (double) (short) 0, 0, (int) (short) 0);
        double double41 = variance15.evaluate(doubleArray33);
        boolean boolean42 = variance15.isBiasCorrected();
        java.lang.Class<?> wildcardClass43 = variance15.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test02496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02496");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double double7 = variance1.getResult();
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance11.increment((-1.0d));
        variance11.setBiasCorrected(false);
        boolean boolean16 = variance11.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean18 = variance11.equals((java.lang.Object) secondMoment17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double24 = variance23.getResult();
        double[] doubleArray27 = new double[] { 0L, (byte) 10 };
        double double28 = variance23.evaluate(doubleArray27);
        double double30 = variance20.evaluate(doubleArray27, (double) 10L);
        double double34 = variance11.evaluate(doubleArray27, (double) (short) 0, 0, (int) (short) 0);
        double double35 = variance1.evaluate(doubleArray27);
        variance1.clear();
        variance1.setBiasCorrected(false);
        variance1.setBiasCorrected(true);
        variance1.clear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
    }

    @Test
    public void test02497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02497");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        long long4 = secondMoment2.getN();
        secondMoment2.clear();
        secondMoment2.increment((double) '4');
        long long8 = secondMoment2.getN();
        long long9 = secondMoment2.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance13.increment((-1.0d));
        variance13.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double24 = variance23.getResult();
        double[] doubleArray27 = new double[] { 0L, (byte) 10 };
        double double28 = variance23.evaluate(doubleArray27);
        double double30 = variance20.evaluate(doubleArray27, (double) 10L);
        double double31 = variance18.evaluate(doubleArray27);
        double double32 = variance13.evaluate(doubleArray27);
        double double33 = secondMoment2.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance35.increment((-1.0d));
        variance35.setBiasCorrected(false);
        boolean boolean40 = variance35.isBiasCorrected();
        double[] doubleArray41 = new double[] {};
        double double42 = variance35.evaluate(doubleArray41);
        variance35.setBiasCorrected(false);
        variance35.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        double double49 = secondMoment47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment47);
        secondMoment47.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double54 = variance53.getResult();
        double[] doubleArray57 = new double[] { 0L, (byte) 10 };
        double double58 = variance53.evaluate(doubleArray57);
        secondMoment47.incrementAll(doubleArray57);
        variance35.incrementAll(doubleArray57);
        double[] doubleArray61 = new double[] {};
        double double62 = variance35.evaluate(doubleArray61);
        // The following exception was thrown during execution in test generation
        try {
            double double65 = secondMoment2.evaluate(doubleArray61, (int) (byte) 100, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double62));
    }

    @Test
    public void test02498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02498");
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.setBiasCorrected(false);
        boolean boolean8 = variance3.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean10 = variance3.equals((java.lang.Object) secondMoment9);
        secondMoment9.increment((double) (short) 0);
        secondMoment9.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double24 = variance16.evaluate(doubleArray23);
        double double25 = secondMoment9.evaluate(doubleArray23);
        long long26 = secondMoment9.getN();
        long long27 = secondMoment9.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        variance29.increment(4671050.520833335d);
        double[] doubleArray32 = null;
        // The following exception was thrown during execution in test generation
        try {
            variance29.incrementAll(doubleArray32, (int) (short) 100, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2136.8055555555557d + "'", double24 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 12820.833333333334d + "'", double25 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 6L + "'", long27 == 6L);
    }

    @Test
    public void test02499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02499");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance8.increment((-1.0d));
        variance8.setBiasCorrected(false);
        boolean boolean13 = variance8.isBiasCorrected();
        double[] doubleArray14 = new double[] {};
        double double15 = variance8.evaluate(doubleArray14);
        secondMoment2.incrementAll(doubleArray14);
        secondMoment2.clear();
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        double double20 = secondMoment2.getResult();
        long long21 = secondMoment2.getN();
        secondMoment2.increment(4450278.058309039d);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test02500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02500");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.clear();
        secondMoment0.increment(2024039.12109375d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        long long19 = variance13.getN();
        variance13.setBiasCorrected(true);
        variance13.increment((double) 3L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double25 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        secondMoment24.increment(2024039.120370371d);
        double double29 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance32.increment((-1.0d));
        variance32.setBiasCorrected(false);
        boolean boolean37 = variance32.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        double double41 = secondMoment39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment39);
        secondMoment39.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        double[] doubleArray49 = new double[] { 0L, (byte) 10 };
        double double50 = variance45.evaluate(doubleArray49);
        secondMoment39.incrementAll(doubleArray49);
        boolean boolean52 = variance32.equals((java.lang.Object) secondMoment39);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance54.increment((-1.0d));
        variance54.setBiasCorrected(false);
        boolean boolean59 = variance54.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment60 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean61 = variance54.equals((java.lang.Object) secondMoment60);
        boolean boolean62 = secondMoment39.equals((java.lang.Object) boolean61);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment39);
        double double64 = variance63.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment65 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment65);
        long long67 = secondMoment65.getN();
        secondMoment65.clear();
        double double69 = secondMoment65.getResult();
        secondMoment65.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment65);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance74.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double80 = variance79.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance82 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double83 = variance82.getResult();
        double[] doubleArray86 = new double[] { 0L, (byte) 10 };
        double double87 = variance82.evaluate(doubleArray86);
        double double89 = variance79.evaluate(doubleArray86, (double) 10L);
        double double90 = variance77.evaluate(doubleArray86);
        double double91 = variance74.evaluate(doubleArray86);
        variance72.incrementAll(doubleArray86);
        double double93 = variance63.evaluate(doubleArray86);
        secondMoment24.incrementAll(doubleArray86);
        double double96 = variance13.evaluate(doubleArray86, (double) 6L);
        double double97 = secondMoment0.evaluate(doubleArray86);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 50.0d + "'", double93 == 50.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 50.0d + "'", double96 == 50.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 50.0d + "'", double97 == 50.0d);
    }
}

